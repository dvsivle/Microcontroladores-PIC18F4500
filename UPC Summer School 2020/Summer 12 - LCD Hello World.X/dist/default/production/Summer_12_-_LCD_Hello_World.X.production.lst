

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Mar 02 16:55:48 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22  0000                     
    23                           ; Version 2.10
    24                           ; Generated 31/07/2019 GMT
    25                           ; 
    26                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4550 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     _PORTD	set	3971
    58  0000                     _LATD	set	3980
    59  0000                     _LATDbits	set	3980
    60  0000                     _TRISD	set	3989
    61                           
    62                           	psect	smallconst
    63  000800                     __psmallconst:
    64                           	opt callstack 0
    65  000800  00                 	db	0
    66  000801                     STR_2:
    67  000801  62                 	db	98	;'b'
    68  000802  69                 	db	105	;'i'
    69  000803  7A                 	db	122	;'z'
    70  000804  74                 	db	116	;'t'
    71  000805  69                 	db	105	;'i'
    72  000806  6D                 	db	109	;'m'
    73  000807  61                 	db	97	;'a'
    74  000808  61                 	db	97	;'a'
    75  000809  61                 	db	97	;'a'
    76  00080A  00                 	db	0
    77  00080B                     STR_1:
    78  00080B  43                 	db	67	;'C'
    79  00080C  20                 	db	32
    80  00080D  69                 	db	105	;'i'
    81  00080E  73                 	db	115	;'s'
    82  00080F  6F                 	db	111	;'o'
    83  000810  20                 	db	32
    84  000811  6C                 	db	108	;'l'
    85  000812  61                 	db	97	;'a'
    86  000813  00                 	db	0
    87                           
    88                           ; #config settings
    89  000814  00                 	db	0	; dummy byte at the end
    90  0000                     
    91                           	psect	cinit
    92  000A7A                     __pcinit:
    93                           	opt callstack 0
    94  000A7A                     start_initialization:
    95                           	opt callstack 0
    96  000A7A                     __initialization:
    97                           	opt callstack 0
    98  000A7A                     end_of_initialization:
    99                           	opt callstack 0
   100  000A7A                     __end_of__initialization:
   101                           	opt callstack 0
   102  000A7A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   103  000A7C  6EF8               	movwf	tblptru,c
   104  000A7E  0E08               	movlw	high __Lsmallconst
   105  000A80  6EF7               	movwf	tblptrh,c
   106  000A82  0100               	movlb	0
   107  000A84  EF74  F004         	goto	_main	;jump to C main() function
   108                           
   109                           	psect	cstackCOMRAM
   110  000001                     __pcstackCOMRAM:
   111                           	opt callstack 0
   112  000001                     ENVIA_NIBBLE@dato:
   113                           	opt callstack 0
   114  000001                     LEER_LCD@aux:
   115                           	opt callstack 0
   116                           
   117                           ; 1 bytes @ 0x0
   118  000001                     	ds	1
   119  000002                     ENVIA_CHAR@dato:
   120                           	opt callstack 0
   121  000002                     ENVIA_LCD_CMD@dato:
   122                           	opt callstack 0
   123                           
   124                           ; 1 bytes @ 0x1
   125  000002                     	ds	1
   126  000003                     ENVIA_CHAR@aux:
   127                           	opt callstack 0
   128  000003                     ENVIA_LCD_CMD@aux:
   129                           	opt callstack 0
   130                           
   131                           ; 1 bytes @ 0x2
   132  000003                     	ds	1
   133  000004                     ??_LCD_CONFIG:
   134  000004                     POS_CURSOR@columna:
   135                           	opt callstack 0
   136  000004                     CURSOR_ONOFF@estado:
   137                           	opt callstack 0
   138  000004                     ESCRIBE_MENSAJE@cadena:
   139                           	opt callstack 0
   140                           
   141                           ; 2 bytes @ 0x3
   142  000004                     	ds	1
   143  000005                     ??_arrancaLCD:
   144  000005                     POS_CURSOR@fila:
   145                           	opt callstack 0
   146                           
   147                           ; 1 bytes @ 0x4
   148  000005                     	ds	1
   149  000006                     ESCRIBE_MENSAJE@tam:
   150                           	opt callstack 0
   151                           
   152                           ; 1 bytes @ 0x5
   153  000006                     	ds	1
   154  000007                     ??_ESCRIBE_MENSAJE:
   155                           
   156                           ; 1 bytes @ 0x6
   157  000007                     	ds	2
   158  000009                     ESCRIBE_MENSAJE@i:
   159                           	opt callstack 0
   160                           
   161                           ; 1 bytes @ 0x8
   162  000009                     	ds	1
   163  00000A                     
   164                           ; 1 bytes @ 0x9
   165 ;;
   166 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   167 ;;
   168 ;; *************** function _main *****************
   169 ;; Defined at:
   170 ;;		line 27 in file "maincode.c"
   171 ;; Parameters:    Size  Location     Type
   172 ;;		None
   173 ;; Auto vars:     Size  Location     Type
   174 ;;		None
   175 ;; Return value:  Size  Location     Type
   176 ;;                  1    wreg      void 
   177 ;; Registers used:
   178 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   179 ;; Tracked objects:
   180 ;;		On entry : 0/0
   181 ;;		On exit  : 0/0
   182 ;;		Unchanged: 0/0
   183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   184 ;;      Params:         0       0       0       0       0       0       0       0       0
   185 ;;      Locals:         0       0       0       0       0       0       0       0       0
   186 ;;      Temps:          0       0       0       0       0       0       0       0       0
   187 ;;      Totals:         0       0       0       0       0       0       0       0       0
   188 ;;Total ram usage:        0 bytes
   189 ;; Hardware stack levels required when called:    4
   190 ;; This function calls:
   191 ;;		_ESCRIBE_MENSAJE
   192 ;;		_POS_CURSOR
   193 ;;		_arrancaLCD
   194 ;; This function is called by:
   195 ;;		Startup code after reset
   196 ;; This function uses a non-reentrant model
   197 ;;
   198                           
   199                           	psect	text0
   200  0008E8                     __ptext0:
   201                           	opt callstack 0
   202  0008E8                     _main:
   203                           	opt callstack 27
   204  0008E8                     
   205                           ;maincode.c: 29:     arrancaLCD();
   206  0008E8  EC1C  F005         	call	_arrancaLCD	;wreg free
   207  0008EC                     l24:
   208                           
   209                           ;maincode.c: 31:         POS_CURSOR(1,0);
   210  0008EC  0E00               	movlw	0
   211  0008EE  6E04               	movwf	POS_CURSOR@columna^0,c
   212  0008F0  0E01               	movlw	1
   213  0008F2  ECB3  F004         	call	_POS_CURSOR
   214  0008F6                     
   215                           ;maincode.c: 32:         ESCRIBE_MENSAJE("C iso la",8);
   216  0008F6  0E0B               	movlw	low STR_1
   217  0008F8  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   218  0008FA  0E08               	movlw	high STR_1
   219  0008FC  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   220  0008FE  0E08               	movlw	8
   221  000900  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   222  000902  EC94  F004         	call	_ESCRIBE_MENSAJE	;wreg free
   223  000906                     
   224                           ;maincode.c: 33:         POS_CURSOR(2,0);
   225  000906  0E00               	movlw	0
   226  000908  6E04               	movwf	POS_CURSOR@columna^0,c
   227  00090A  0E02               	movlw	2
   228  00090C  ECB3  F004         	call	_POS_CURSOR
   229                           
   230                           ;maincode.c: 34:         ESCRIBE_MENSAJE("biztimaaa",9);
   231  000910  0E01               	movlw	low STR_2
   232  000912  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   233  000914  0E08               	movlw	high STR_2
   234  000916  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   235  000918  0E09               	movlw	9
   236  00091A  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   237  00091C  EC94  F004         	call	_ESCRIBE_MENSAJE	;wreg free
   238  000920  EF76  F004         	goto	l24
   239  000924  EF00  F000         	goto	start
   240  000928                     __end_of_main:
   241                           	opt callstack 0
   242                           
   243 ;; *************** function _arrancaLCD *****************
   244 ;; Defined at:
   245 ;;		line 18 in file "maincode.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, status,2, status,0, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : 0/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   259 ;;      Params:         0       0       0       0       0       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0       0       0       0       0
   261 ;;      Temps:          1       0       0       0       0       0       0       0       0
   262 ;;      Totals:         1       0       0       0       0       0       0       0       0
   263 ;;Total ram usage:        1 bytes
   264 ;; Hardware stack levels used:    1
   265 ;; Hardware stack levels required when called:    3
   266 ;; This function calls:
   267 ;;		_BORRAR_LCD
   268 ;;		_CURSOR_HOME
   269 ;;		_CURSOR_ONOFF
   270 ;;		_LCD_CONFIG
   271 ;; This function is called by:
   272 ;;		_main
   273 ;; This function uses a non-reentrant model
   274 ;;
   275                           
   276                           	psect	text1
   277  000A38                     __ptext1:
   278                           	opt callstack 0
   279  000A38                     _arrancaLCD:
   280                           	opt callstack 27
   281  000A38                     
   282                           ;maincode.c: 19:     TRISD = 0x00;
   283  000A38  0E00               	movlw	0
   284  000A3A  6E95               	movwf	149,c	;volatile
   285  000A3C                     
   286                           ;maincode.c: 20:     LCD_CONFIG();
   287  000A3C  EC44  F004         	call	_LCD_CONFIG	;wreg free
   288  000A40                     
   289                           ;maincode.c: 21:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
   290  000A40  0E14               	movlw	20
   291  000A42  6E05               	movwf	??_arrancaLCD^0,c
   292  000A44  0E7A               	movlw	122
   293  000A46                     u157:
   294  000A46  2EE8               	decfsz	wreg,f,c
   295  000A48  D7FE               	bra	u157
   296  000A4A  2E05               	decfsz	??_arrancaLCD^0,f,c
   297  000A4C  D7FC               	bra	u157
   298  000A4E                     
   299                           ;maincode.c: 22:     CURSOR_ONOFF(1);
   300  000A4E  0E01               	movlw	1
   301  000A50  EC04  F005         	call	_CURSOR_ONOFF
   302  000A54                     
   303                           ;maincode.c: 23:     BORRAR_LCD();
   304  000A54  EC48  F005         	call	_BORRAR_LCD	;wreg free
   305  000A58                     
   306                           ;maincode.c: 24:     CURSOR_HOME();
   307  000A58  EC44  F005         	call	_CURSOR_HOME	;wreg free
   308  000A5C  0012               	return		;funcret
   309  000A5E                     __end_of_arrancaLCD:
   310                           	opt callstack 0
   311                           
   312 ;; *************** function _LCD_CONFIG *****************
   313 ;; Defined at:
   314 ;;		line 72 in file "LCD.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;		None
   317 ;; Auto vars:     Size  Location     Type
   318 ;;		None
   319 ;; Return value:  Size  Location     Type
   320 ;;                  1    wreg      void 
   321 ;; Registers used:
   322 ;;		wreg, status,2, status,0, cstack
   323 ;; Tracked objects:
   324 ;;		On entry : 0/0
   325 ;;		On exit  : 0/0
   326 ;;		Unchanged: 0/0
   327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   328 ;;      Params:         0       0       0       0       0       0       0       0       0
   329 ;;      Locals:         0       0       0       0       0       0       0       0       0
   330 ;;      Temps:          1       0       0       0       0       0       0       0       0
   331 ;;      Totals:         1       0       0       0       0       0       0       0       0
   332 ;;Total ram usage:        1 bytes
   333 ;; Hardware stack levels used:    1
   334 ;; Hardware stack levels required when called:    2
   335 ;; This function calls:
   336 ;;		_ENVIA_LCD_CMD
   337 ;;		_ENVIA_NIBBLE
   338 ;; This function is called by:
   339 ;;		_arrancaLCD
   340 ;; This function uses a non-reentrant model
   341 ;;
   342                           
   343                           	psect	text2
   344  000888                     __ptext2:
   345                           	opt callstack 0
   346  000888                     _LCD_CONFIG:
   347                           	opt callstack 27
   348  000888                     
   349                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   350  000888  908C               	bcf	140,0,c	;volatile
   351                           
   352                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   353  00088A  928C               	bcf	140,1,c	;volatile
   354  00088C                     
   355                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   356  00088C  0E30               	movlw	48
   357  00088E  EC2F  F005         	call	_ENVIA_NIBBLE
   358  000892                     
   359                           ;LCD.c: 77:         _delay(24000);
   360  000892  0E20               	movlw	32
   361  000894  6E04               	movwf	??_LCD_CONFIG^0,c
   362  000896  0E2A               	movlw	42
   363  000898                     u167:
   364  000898  2EE8               	decfsz	wreg,f,c
   365  00089A  D7FE               	bra	u167
   366  00089C  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   367  00089E  D7FC               	bra	u167
   368  0008A0                     
   369                           ;LCD.c: 78:         _delay(24000);
   370  0008A0  0E20               	movlw	32
   371  0008A2  6E04               	movwf	??_LCD_CONFIG^0,c
   372  0008A4  0E2A               	movlw	42
   373  0008A6                     u177:
   374  0008A6  2EE8               	decfsz	wreg,f,c
   375  0008A8  D7FE               	bra	u177
   376  0008AA  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   377  0008AC  D7FC               	bra	u177
   378                           
   379                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   380  0008AE  0E30               	movlw	48
   381  0008B0  EC2F  F005         	call	_ENVIA_NIBBLE
   382  0008B4                     
   383                           ;LCD.c: 83:  _delay(1200);
   384  0008B4  0EF0               	movlw	240
   385  0008B6                     u187:
   386  0008B6  D000               	nop2	
   387  0008B8  2EE8               	decfsz	wreg,f,c
   388  0008BA  D7FD               	bra	u187
   389  0008BC                     
   390                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   391  0008BC  0E30               	movlw	48
   392  0008BE  EC2F  F005         	call	_ENVIA_NIBBLE
   393  0008C2                     
   394                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   395  0008C2  0E20               	movlw	32
   396  0008C4  EC2F  F005         	call	_ENVIA_NIBBLE
   397  0008C8                     
   398                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   399  0008C8  0E01               	movlw	1
   400  0008CA  ECD0  F004         	call	_ENVIA_LCD_CMD
   401  0008CE                     
   402                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   403  0008CE  0E28               	movlw	40
   404  0008D0  ECD0  F004         	call	_ENVIA_LCD_CMD
   405  0008D4                     
   406                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   407  0008D4  0E0F               	movlw	15
   408  0008D6  ECD0  F004         	call	_ENVIA_LCD_CMD
   409  0008DA                     
   410                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   411  0008DA  0E06               	movlw	6
   412  0008DC  ECD0  F004         	call	_ENVIA_LCD_CMD
   413  0008E0                     
   414                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   415  0008E0  0E01               	movlw	1
   416  0008E2  ECD0  F004         	call	_ENVIA_LCD_CMD
   417  0008E6  0012               	return		;funcret
   418  0008E8                     __end_of_LCD_CONFIG:
   419                           	opt callstack 0
   420                           
   421 ;; *************** function _CURSOR_ONOFF *****************
   422 ;; Defined at:
   423 ;;		line 35 in file "LCD.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;  estado          1    wreg     unsigned char 
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  estado          1    3[COMRAM] unsigned char 
   428 ;; Return value:  Size  Location     Type
   429 ;;                  1    wreg      void 
   430 ;; Registers used:
   431 ;;		wreg, status,2, status,0, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : 0/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   437 ;;      Params:         0       0       0       0       0       0       0       0       0
   438 ;;      Locals:         1       0       0       0       0       0       0       0       0
   439 ;;      Temps:          0       0       0       0       0       0       0       0       0
   440 ;;      Totals:         1       0       0       0       0       0       0       0       0
   441 ;;Total ram usage:        1 bytes
   442 ;; Hardware stack levels used:    1
   443 ;; Hardware stack levels required when called:    2
   444 ;; This function calls:
   445 ;;		_ENVIA_LCD_CMD
   446 ;; This function is called by:
   447 ;;		_arrancaLCD
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           	psect	text3
   452  000A08                     __ptext3:
   453                           	opt callstack 0
   454  000A08                     _CURSOR_ONOFF:
   455                           	opt callstack 27
   456                           
   457                           ;incstack = 0
   458                           ;CURSOR_ONOFF@estado stored from wreg
   459  000A08  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   460  000A0A                     
   461                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   462  000A0A  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   463  000A0C  A4D8               	btfss	status,2,c
   464  000A0E  EF0B  F005         	goto	u21
   465  000A12  EF0D  F005         	goto	u20
   466  000A16                     u21:
   467  000A16  EF10  F005         	goto	l873
   468  000A1A                     u20:
   469  000A1A  0E0E               	movlw	14
   470  000A1C  ECD0  F004         	call	_ENVIA_LCD_CMD
   471  000A20                     l873:
   472                           
   473                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   474  000A20  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   475  000A22  A4D8               	btfss	status,2,c
   476  000A24  EF16  F005         	goto	u31
   477  000A28  EF18  F005         	goto	u30
   478  000A2C                     u31:
   479  000A2C  EF1B  F005         	goto	l69
   480  000A30                     u30:
   481  000A30  0E0C               	movlw	12
   482  000A32  ECD0  F004         	call	_ENVIA_LCD_CMD
   483  000A36                     l69:
   484  000A36  0012               	return		;funcret
   485  000A38                     __end_of_CURSOR_ONOFF:
   486                           	opt callstack 0
   487                           
   488 ;; *************** function _CURSOR_HOME *****************
   489 ;; Defined at:
   490 ;;		line 30 in file "LCD.c"
   491 ;; Parameters:    Size  Location     Type
   492 ;;		None
   493 ;; Auto vars:     Size  Location     Type
   494 ;;		None
   495 ;; Return value:  Size  Location     Type
   496 ;;                  1    wreg      void 
   497 ;; Registers used:
   498 ;;		wreg, status,2, status,0, cstack
   499 ;; Tracked objects:
   500 ;;		On entry : 0/0
   501 ;;		On exit  : 0/0
   502 ;;		Unchanged: 0/0
   503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   504 ;;      Params:         0       0       0       0       0       0       0       0       0
   505 ;;      Locals:         0       0       0       0       0       0       0       0       0
   506 ;;      Temps:          0       0       0       0       0       0       0       0       0
   507 ;;      Totals:         0       0       0       0       0       0       0       0       0
   508 ;;Total ram usage:        0 bytes
   509 ;; Hardware stack levels used:    1
   510 ;; Hardware stack levels required when called:    2
   511 ;; This function calls:
   512 ;;		_ENVIA_LCD_CMD
   513 ;; This function is called by:
   514 ;;		_arrancaLCD
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           	psect	text4
   519  000A88                     __ptext4:
   520                           	opt callstack 0
   521  000A88                     _CURSOR_HOME:
   522                           	opt callstack 27
   523  000A88                     
   524                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   525  000A88  0E02               	movlw	2
   526  000A8A  ECD0  F004         	call	_ENVIA_LCD_CMD
   527  000A8E  0012               	return		;funcret
   528  000A90                     __end_of_CURSOR_HOME:
   529                           	opt callstack 0
   530                           
   531 ;; *************** function _BORRAR_LCD *****************
   532 ;; Defined at:
   533 ;;		line 67 in file "LCD.c"
   534 ;; Parameters:    Size  Location     Type
   535 ;;		None
   536 ;; Auto vars:     Size  Location     Type
   537 ;;		None
   538 ;; Return value:  Size  Location     Type
   539 ;;                  1    wreg      void 
   540 ;; Registers used:
   541 ;;		wreg, status,2, status,0, cstack
   542 ;; Tracked objects:
   543 ;;		On entry : 0/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   547 ;;      Params:         0       0       0       0       0       0       0       0       0
   548 ;;      Locals:         0       0       0       0       0       0       0       0       0
   549 ;;      Temps:          0       0       0       0       0       0       0       0       0
   550 ;;      Totals:         0       0       0       0       0       0       0       0       0
   551 ;;Total ram usage:        0 bytes
   552 ;; Hardware stack levels used:    1
   553 ;; Hardware stack levels required when called:    2
   554 ;; This function calls:
   555 ;;		_ENVIA_LCD_CMD
   556 ;; This function is called by:
   557 ;;		_arrancaLCD
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           	psect	text5
   562  000A90                     __ptext5:
   563                           	opt callstack 0
   564  000A90                     _BORRAR_LCD:
   565                           	opt callstack 27
   566  000A90                     
   567                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   568  000A90  0E01               	movlw	1
   569  000A92  ECD0  F004         	call	_ENVIA_LCD_CMD
   570  000A96  0012               	return		;funcret
   571  000A98                     __end_of_BORRAR_LCD:
   572                           	opt callstack 0
   573                           
   574 ;; *************** function _POS_CURSOR *****************
   575 ;; Defined at:
   576 ;;		line 6 in file "LCD.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;  fila            1    wreg     unsigned char 
   579 ;;  columna         1    3[COMRAM] unsigned char 
   580 ;; Auto vars:     Size  Location     Type
   581 ;;  fila            1    4[COMRAM] unsigned char 
   582 ;; Return value:  Size  Location     Type
   583 ;;                  1    wreg      void 
   584 ;; Registers used:
   585 ;;		wreg, status,2, status,0, cstack
   586 ;; Tracked objects:
   587 ;;		On entry : 0/0
   588 ;;		On exit  : 0/0
   589 ;;		Unchanged: 0/0
   590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   591 ;;      Params:         1       0       0       0       0       0       0       0       0
   592 ;;      Locals:         1       0       0       0       0       0       0       0       0
   593 ;;      Temps:          0       0       0       0       0       0       0       0       0
   594 ;;      Totals:         2       0       0       0       0       0       0       0       0
   595 ;;Total ram usage:        2 bytes
   596 ;; Hardware stack levels used:    1
   597 ;; Hardware stack levels required when called:    2
   598 ;; This function calls:
   599 ;;		_ENVIA_LCD_CMD
   600 ;; This function is called by:
   601 ;;		_main
   602 ;; This function uses a non-reentrant model
   603 ;;
   604                           
   605                           	psect	text6
   606  000966                     __ptext6:
   607                           	opt callstack 0
   608  000966                     _POS_CURSOR:
   609                           	opt callstack 28
   610                           
   611                           ;incstack = 0
   612                           ;POS_CURSOR@fila stored from wreg
   613  000966  6E05               	movwf	POS_CURSOR@fila^0,c
   614  000968                     
   615                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   616  000968  0405               	decf	POS_CURSOR@fila^0,w,c
   617  00096A  A4D8               	btfss	status,2,c
   618  00096C  EFBA  F004         	goto	u121
   619  000970  EFBC  F004         	goto	u120
   620  000974                     u121:
   621  000974  EFC2  F004         	goto	l973
   622  000978                     u120:
   623  000978                     
   624                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   625  000978  5004               	movf	POS_CURSOR@columna^0,w,c
   626  00097A  0F80               	addlw	128
   627  00097C  ECD0  F004         	call	_ENVIA_LCD_CMD
   628                           
   629                           ;LCD.c: 11:  }
   630  000980  EFCF  F004         	goto	l51
   631  000984                     l973:
   632  000984  0E02               	movlw	2
   633  000986  1805               	xorwf	POS_CURSOR@fila^0,w,c
   634  000988  A4D8               	btfss	status,2,c
   635  00098A  EFC9  F004         	goto	u131
   636  00098E  EFCB  F004         	goto	u130
   637  000992                     u131:
   638  000992  EFCF  F004         	goto	l51
   639  000996                     u130:
   640  000996                     
   641                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   642  000996  5004               	movf	POS_CURSOR@columna^0,w,c
   643  000998  0FC0               	addlw	192
   644  00099A  ECD0  F004         	call	_ENVIA_LCD_CMD
   645  00099E                     l51:
   646  00099E  0012               	return		;funcret
   647  0009A0                     __end_of_POS_CURSOR:
   648                           	opt callstack 0
   649                           
   650 ;; *************** function _ENVIA_LCD_CMD *****************
   651 ;; Defined at:
   652 ;;		line 104 in file "LCD.c"
   653 ;; Parameters:    Size  Location     Type
   654 ;;  dato            1    wreg     unsigned char 
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  dato            1    1[COMRAM] unsigned char 
   657 ;;  aux             1    2[COMRAM] unsigned char 
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, status,2, status,0, cstack
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   667 ;;      Params:         0       0       0       0       0       0       0       0       0
   668 ;;      Locals:         2       0       0       0       0       0       0       0       0
   669 ;;      Temps:          0       0       0       0       0       0       0       0       0
   670 ;;      Totals:         2       0       0       0       0       0       0       0       0
   671 ;;Total ram usage:        2 bytes
   672 ;; Hardware stack levels used:    1
   673 ;; Hardware stack levels required when called:    1
   674 ;; This function calls:
   675 ;;		_ENVIA_NIBBLE
   676 ;;		_LEER_LCD
   677 ;; This function is called by:
   678 ;;		_POS_CURSOR
   679 ;;		_CURSOR_HOME
   680 ;;		_CURSOR_ONOFF
   681 ;;		_BORRAR_LCD
   682 ;;		_LCD_CONFIG
   683 ;;		_BLINK_CURSOR
   684 ;;		_DISPLAY_ONOFF
   685 ;;		_GENERACARACTER
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           	psect	text7
   690  0009A0                     __ptext7:
   691                           	opt callstack 0
   692  0009A0                     _ENVIA_LCD_CMD:
   693                           	opt callstack 27
   694                           
   695                           ;incstack = 0
   696                           ;ENVIA_LCD_CMD@dato stored from wreg
   697  0009A0  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
   698  0009A2                     
   699                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
   700  0009A2  908C               	bcf	140,0,c	;volatile
   701  0009A4                     
   702                           ;LCD.c: 108:  LEER_LCD();
   703  0009A4  EC0B  F004         	call	_LEER_LCD	;wreg free
   704  0009A8                     
   705                           ;LCD.c: 109:  TRISD = 0b00000000;
   706  0009A8  0E00               	movlw	0
   707  0009AA  6E95               	movwf	149,c	;volatile
   708  0009AC                     
   709                           ;LCD.c: 111:         _delay(1200);
   710  0009AC  0EF0               	movlw	240
   711  0009AE                     u197:
   712  0009AE  D000               	nop2	
   713  0009B0  2EE8               	decfsz	wreg,f,c
   714  0009B2  D7FD               	bra	u197
   715  0009B4                     
   716                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
   717  0009B4  928C               	bcf	140,1,c	;volatile
   718  0009B6                     
   719                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
   720  0009B6  948C               	bcf	140,2,c	;volatile
   721  0009B8                     
   722                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
   723  0009B8  908C               	bcf	140,0,c	;volatile
   724  0009BA                     
   725                           ;LCD.c: 115:  aux = dato & 0xF0;
   726  0009BA  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
   727  0009BC  0BF0               	andlw	240
   728  0009BE  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
   729  0009C0                     
   730                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
   731  0009C0  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
   732  0009C2  EC2F  F005         	call	_ENVIA_NIBBLE
   733  0009C6                     
   734                           ;LCD.c: 117:  aux = dato<<4;
   735  0009C6  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
   736  0009C8  0BF0               	andlw	240
   737  0009CA  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
   738  0009CC                     
   739                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
   740  0009CC  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
   741  0009CE  EC2F  F005         	call	_ENVIA_NIBBLE
   742  0009D2  0012               	return		;funcret
   743  0009D4                     __end_of_ENVIA_LCD_CMD:
   744                           	opt callstack 0
   745                           
   746 ;; *************** function _ESCRIBE_MENSAJE *****************
   747 ;; Defined at:
   748 ;;		line 41 in file "LCD.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   751 ;;		 -> STR_2(10), STR_1(9), 
   752 ;;  tam             1    5[COMRAM] unsigned char 
   753 ;; Auto vars:     Size  Location     Type
   754 ;;  i               1    8[COMRAM] unsigned char 
   755 ;; Return value:  Size  Location     Type
   756 ;;                  1    wreg      void 
   757 ;; Registers used:
   758 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   764 ;;      Params:         3       0       0       0       0       0       0       0       0
   765 ;;      Locals:         1       0       0       0       0       0       0       0       0
   766 ;;      Temps:          2       0       0       0       0       0       0       0       0
   767 ;;      Totals:         6       0       0       0       0       0       0       0       0
   768 ;;Total ram usage:        6 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; Hardware stack levels required when called:    2
   771 ;; This function calls:
   772 ;;		_ENVIA_CHAR
   773 ;; This function is called by:
   774 ;;		_main
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           	psect	text8
   779  000928                     __ptext8:
   780                           	opt callstack 0
   781  000928                     _ESCRIBE_MENSAJE:
   782                           	opt callstack 28
   783  000928                     
   784                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   785  000928  0E00               	movlw	0
   786  00092A  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
   787                           
   788                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   789  00092C  0E00               	movlw	0
   790  00092E  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
   791  000930  EFA9  F004         	goto	l983
   792  000934                     l979:
   793                           
   794                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   795  000934  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
   796  000936  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
   797  000938  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
   798  00093A  0E00               	movlw	0
   799  00093C  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
   800  00093E  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
   801  000940  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   802  000944  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   803  000948                     	if	0	;tblptru may be non-zero
   804  000948                     	endif
   805  000948                     	if	0	;tblptru may be non-zero
   806  000948                     	endif
   807  000948  0008               	tblrd		*
   808  00094A  50F5               	movf	tablat,w,c
   809  00094C  ECEA  F004         	call	_ENVIA_CHAR
   810  000950                     
   811                           ;LCD.c: 47:  }
   812  000950  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
   813  000952                     l983:
   814  000952  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
   815  000954  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
   816  000956  A0D8               	btfss	status,0,c
   817  000958  EFB0  F004         	goto	u141
   818  00095C  EFB2  F004         	goto	u140
   819  000960                     u141:
   820  000960  EF9A  F004         	goto	l979
   821  000964                     u140:
   822  000964  0012               	return		;funcret
   823  000966                     __end_of_ESCRIBE_MENSAJE:
   824                           	opt callstack 0
   825                           
   826 ;; *************** function _ENVIA_CHAR *****************
   827 ;; Defined at:
   828 ;;		line 50 in file "LCD.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;  dato            1    wreg     unsigned char 
   831 ;; Auto vars:     Size  Location     Type
   832 ;;  dato            1    1[COMRAM] unsigned char 
   833 ;;  aux             1    2[COMRAM] unsigned char 
   834 ;; Return value:  Size  Location     Type
   835 ;;                  1    wreg      void 
   836 ;; Registers used:
   837 ;;		wreg, status,2, status,0, cstack
   838 ;; Tracked objects:
   839 ;;		On entry : 0/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   843 ;;      Params:         0       0       0       0       0       0       0       0       0
   844 ;;      Locals:         2       0       0       0       0       0       0       0       0
   845 ;;      Temps:          0       0       0       0       0       0       0       0       0
   846 ;;      Totals:         2       0       0       0       0       0       0       0       0
   847 ;;Total ram usage:        2 bytes
   848 ;; Hardware stack levels used:    1
   849 ;; Hardware stack levels required when called:    1
   850 ;; This function calls:
   851 ;;		_ENVIA_NIBBLE
   852 ;;		_LEER_LCD
   853 ;; This function is called by:
   854 ;;		_ESCRIBE_MENSAJE
   855 ;;		_GENERACARACTER
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text9
   860  0009D4                     __ptext9:
   861                           	opt callstack 0
   862  0009D4                     _ENVIA_CHAR:
   863                           	opt callstack 28
   864                           
   865                           ;incstack = 0
   866                           ;ENVIA_CHAR@dato stored from wreg
   867  0009D4  6E02               	movwf	ENVIA_CHAR@dato^0,c
   868  0009D6                     
   869                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   870  0009D6  808C               	bsf	140,0,c	;volatile
   871  0009D8                     
   872                           ;LCD.c: 54:  LEER_LCD();
   873  0009D8  EC0B  F004         	call	_LEER_LCD	;wreg free
   874  0009DC                     
   875                           ;LCD.c: 55:  TRISD = 0x00;
   876  0009DC  0E00               	movlw	0
   877  0009DE  6E95               	movwf	149,c	;volatile
   878  0009E0                     
   879                           ;LCD.c: 56:         _delay(1200);
   880  0009E0  0EF0               	movlw	240
   881  0009E2                     u207:
   882  0009E2  D000               	nop2	
   883  0009E4  2EE8               	decfsz	wreg,f,c
   884  0009E6  D7FD               	bra	u207
   885  0009E8                     
   886                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
   887  0009E8  928C               	bcf	140,1,c	;volatile
   888  0009EA                     
   889                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
   890  0009EA  948C               	bcf	140,2,c	;volatile
   891  0009EC                     
   892                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
   893  0009EC  808C               	bsf	140,0,c	;volatile
   894  0009EE                     
   895                           ;LCD.c: 61:  aux = dato & 0xF0;
   896  0009EE  5002               	movf	ENVIA_CHAR@dato^0,w,c
   897  0009F0  0BF0               	andlw	240
   898  0009F2  6E03               	movwf	ENVIA_CHAR@aux^0,c
   899  0009F4                     
   900                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
   901  0009F4  5003               	movf	ENVIA_CHAR@aux^0,w,c
   902  0009F6  EC2F  F005         	call	_ENVIA_NIBBLE
   903  0009FA                     
   904                           ;LCD.c: 63:  aux = dato << 4;
   905  0009FA  3802               	swapf	ENVIA_CHAR@dato^0,w,c
   906  0009FC  0BF0               	andlw	240
   907  0009FE  6E03               	movwf	ENVIA_CHAR@aux^0,c
   908  000A00                     
   909                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
   910  000A00  5003               	movf	ENVIA_CHAR@aux^0,w,c
   911  000A02  EC2F  F005         	call	_ENVIA_NIBBLE
   912  000A06  0012               	return		;funcret
   913  000A08                     __end_of_ENVIA_CHAR:
   914                           	opt callstack 0
   915                           
   916 ;; *************** function _LEER_LCD *****************
   917 ;; Defined at:
   918 ;;		line 121 in file "LCD.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;		None
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  aux             1    0[COMRAM] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, status,2, status,0
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   932 ;;      Params:         0       0       0       0       0       0       0       0       0
   933 ;;      Locals:         1       0       0       0       0       0       0       0       0
   934 ;;      Temps:          0       0       0       0       0       0       0       0       0
   935 ;;      Totals:         1       0       0       0       0       0       0       0       0
   936 ;;Total ram usage:        1 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; This function calls:
   939 ;;		Nothing
   940 ;; This function is called by:
   941 ;;		_ENVIA_CHAR
   942 ;;		_ENVIA_LCD_CMD
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text10
   947  000816                     __ptext10:
   948                           	opt callstack 0
   949  000816                     _LEER_LCD:
   950                           	opt callstack 27
   951  000816                     
   952                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
   953  000816  0EF8               	movlw	248
   954  000818  6E95               	movwf	149,c	;volatile
   955  00081A                     
   956                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
   957  00081A  908C               	bcf	140,0,c	;volatile
   958  00081C                     
   959                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
   960  00081C  828C               	bsf	140,1,c	;volatile
   961  00081E                     
   962                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
   963  00081E  848C               	bsf	140,2,c	;volatile
   964  000820                     
   965                           ;LCD.c: 128:         _delay(1200);
   966  000820  0EF0               	movlw	240
   967  000822                     u217:
   968  000822  D000               	nop2	
   969  000824  2EE8               	decfsz	wreg,f,c
   970  000826  D7FD               	bra	u217
   971  000828                     
   972                           ;LCD.c: 130:  aux = PORTD;
   973  000828  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
   974  00082C                     
   975                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
   976  00082C  948C               	bcf	140,2,c	;volatile
   977  00082E                     
   978                           ;LCD.c: 132:         _delay(1200);
   979  00082E  0EF0               	movlw	240
   980  000830                     u227:
   981  000830  D000               	nop2	
   982  000832  2EE8               	decfsz	wreg,f,c
   983  000834  D7FD               	bra	u227
   984  000836                     
   985                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
   986  000836  848C               	bsf	140,2,c	;volatile
   987  000838                     
   988                           ;LCD.c: 135:         _delay(1200);
   989  000838  0EF0               	movlw	240
   990  00083A                     u237:
   991  00083A  D000               	nop2	
   992  00083C  2EE8               	decfsz	wreg,f,c
   993  00083E  D7FD               	bra	u237
   994  000840                     
   995                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
   996  000840  948C               	bcf	140,2,c	;volatile
   997  000842                     l799:
   998                           
   999                           ;LCD.c: 138:  aux = aux & 0x80;
  1000  000842  5001               	movf	LEER_LCD@aux^0,w,c
  1001  000844  0B80               	andlw	128
  1002  000846  6E01               	movwf	LEER_LCD@aux^0,c
  1003                           
  1004                           ;LCD.c: 139:  while(aux == 0x80)
  1005  000848  EF3A  F004         	goto	l813
  1006  00084C                     l94:
  1007                           
  1008                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1009  00084C  848C               	bsf	140,2,c	;volatile
  1010  00084E                     
  1011                           ;LCD.c: 142:             _delay(1200);
  1012  00084E  0EF0               	movlw	240
  1013  000850                     u247:
  1014  000850  D000               	nop2	
  1015  000852  2EE8               	decfsz	wreg,f,c
  1016  000854  D7FD               	bra	u247
  1017  000856                     
  1018                           ;LCD.c: 143:             aux = PORTD;
  1019  000856  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1020  00085A                     
  1021                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1022  00085A  948C               	bcf	140,2,c	;volatile
  1023                           
  1024                           ;LCD.c: 145:             _delay(1200);
  1025  00085C  0EF0               	movlw	240
  1026  00085E                     u257:
  1027  00085E  D000               	nop2	
  1028  000860  2EE8               	decfsz	wreg,f,c
  1029  000862  D7FD               	bra	u257
  1030  000864                     
  1031                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1032  000864  848C               	bsf	140,2,c	;volatile
  1033                           
  1034                           ;LCD.c: 147:             _delay(1200);
  1035  000866  0EF0               	movlw	240
  1036  000868                     u267:
  1037  000868  D000               	nop2	
  1038  00086A  2EE8               	decfsz	wreg,f,c
  1039  00086C  D7FD               	bra	u267
  1040  00086E                     
  1041                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1042  00086E  948C               	bcf	140,2,c	;volatile
  1043  000870  EF21  F004         	goto	l799
  1044  000874                     l813:
  1045                           
  1046                           ;LCD.c: 139:  while(aux == 0x80)
  1047  000874  0E80               	movlw	128
  1048  000876  1801               	xorwf	LEER_LCD@aux^0,w,c
  1049  000878  B4D8               	btfsc	status,2,c
  1050  00087A  EF41  F004         	goto	u11
  1051  00087E  EF43  F004         	goto	u10
  1052  000882                     u11:
  1053  000882  EF26  F004         	goto	l94
  1054  000886                     u10:
  1055  000886  0012               	return		;funcret
  1056  000888                     __end_of_LEER_LCD:
  1057                           	opt callstack 0
  1058                           
  1059 ;; *************** function _ENVIA_NIBBLE *****************
  1060 ;; Defined at:
  1061 ;;		line 93 in file "LCD.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;  dato            1    wreg     unsigned char 
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;  dato            1    0[COMRAM] unsigned char 
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg, status,2, status,0
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1075 ;;      Params:         0       0       0       0       0       0       0       0       0
  1076 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1078 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1079 ;;Total ram usage:        1 bytes
  1080 ;; Hardware stack levels used:    1
  1081 ;; This function calls:
  1082 ;;		Nothing
  1083 ;; This function is called by:
  1084 ;;		_ENVIA_CHAR
  1085 ;;		_LCD_CONFIG
  1086 ;;		_ENVIA_LCD_CMD
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text11
  1091  000A5E                     __ptext11:
  1092                           	opt callstack 0
  1093  000A5E                     _ENVIA_NIBBLE:
  1094                           	opt callstack 28
  1095                           
  1096                           ;incstack = 0
  1097                           ;ENVIA_NIBBLE@dato stored from wreg
  1098  000A5E  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1099  000A60                     
  1100                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1101  000A60  0E0F               	movlw	15
  1102  000A62  168C               	andwf	140,f,c	;volatile
  1103                           
  1104                           ;LCD.c: 96:  dato &= 0xF0;
  1105  000A64  0EF0               	movlw	240
  1106  000A66  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1107                           
  1108                           ;LCD.c: 97:  LATD|= dato;
  1109  000A68  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1110  000A6A  128C               	iorwf	140,f,c	;volatile
  1111  000A6C                     
  1112                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1113  000A6C  848C               	bsf	140,2,c	;volatile
  1114  000A6E                     
  1115                           ;LCD.c: 100:         _delay(1200);
  1116  000A6E  0EF0               	movlw	240
  1117  000A70                     u277:
  1118  000A70  D000               	nop2	
  1119  000A72  2EE8               	decfsz	wreg,f,c
  1120  000A74  D7FD               	bra	u277
  1121  000A76                     
  1122                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1123  000A76  948C               	bcf	140,2,c	;volatile
  1124  000A78  0012               	return		;funcret
  1125  000A7A                     __end_of_ENVIA_NIBBLE:
  1126                           	opt callstack 0
  1127                           
  1128                           	psect	rparam
  1129  0000                     tosu	equ	0xFFF
  1130                           tosh	equ	0xFFE
  1131                           tosl	equ	0xFFD
  1132                           stkptr	equ	0xFFC
  1133                           pclatu	equ	0xFFB
  1134                           pclath	equ	0xFFA
  1135                           pcl	equ	0xFF9
  1136                           tblptru	equ	0xFF8
  1137                           tblptrh	equ	0xFF7
  1138                           tblptrl	equ	0xFF6
  1139                           tablat	equ	0xFF5
  1140                           prodh	equ	0xFF4
  1141                           prodl	equ	0xFF3
  1142                           indf0	equ	0xFEF
  1143                           postinc0	equ	0xFEE
  1144                           postdec0	equ	0xFED
  1145                           preinc0	equ	0xFEC
  1146                           plusw0	equ	0xFEB
  1147                           fsr0h	equ	0xFEA
  1148                           fsr0l	equ	0xFE9
  1149                           wreg	equ	0xFE8
  1150                           indf1	equ	0xFE7
  1151                           postinc1	equ	0xFE6
  1152                           postdec1	equ	0xFE5
  1153                           preinc1	equ	0xFE4
  1154                           plusw1	equ	0xFE3
  1155                           fsr1h	equ	0xFE2
  1156                           fsr1l	equ	0xFE1
  1157                           bsr	equ	0xFE0
  1158                           indf2	equ	0xFDF
  1159                           postinc2	equ	0xFDE
  1160                           postdec2	equ	0xFDD
  1161                           preinc2	equ	0xFDC
  1162                           plusw2	equ	0xFDB
  1163                           fsr2h	equ	0xFDA
  1164                           fsr2l	equ	0xFD9
  1165                           status	equ	0xFD8


Data Sizes:
    Strings     19
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      9       9
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _arrancaLCD->_CURSOR_ONOFF
    _arrancaLCD->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1400
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                         _arrancaLCD
 ---------------------------------------------------------------------------------
 (1) _arrancaLCD                                           1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _arrancaLCD
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      9       9       1        9.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Mar 02 16:55:48 2020

                      l24 08EC                        l51 099E                        l19 0A5C  
                      l64 0A8E                        l81 0A96                        l90 09D2  
                      l75 0964                        l84 08E6                        l69 0A36  
                      l94 084C                        l78 0A06                        l87 0A78  
                      l96 0886                        u10 0886                        u11 0882  
                      u20 0A1A                        u21 0A16                        u30 0A30  
                      u31 0A2C             ENVIA_CHAR@aux 0003                       l801 084E  
                     l803 0856                       l821 0A76                       l805 085A  
                     l813 0874                       l901 0A00                       l815 0A60  
                     l807 0864                       l831 09B4                       l823 09A2  
                     l911 0A54                       l903 0A38                       l817 0A6C  
                     l809 086E                       l841 09C6                       l833 09B6  
                     l825 09A4                       l913 0A58                       l905 0A3C  
                     l819 0A6E                       l843 09CC                       l835 09B8  
                     l827 09A8                       l851 08A0                       l907 0A40  
                     l781 081C                       l837 09BA                       l829 09AC  
                     l861 08CE                       l853 08B4                       l845 0888  
                     l909 0A4E                       l791 082E                       l783 081E  
                     l839 09C0                       l871 0A1A                       l863 08D4  
                     l855 08BC                       l847 088C                       l793 0836  
                     l785 0820                       l777 0816                       l881 09D6  
                     l873 0A20                       l865 08DA                       l857 08C2  
                     l849 0892                       l795 0838                       l787 0828  
                     l779 081A                       l891 09EA                       l883 09D8  
                     l971 0978                       l875 0A30                       l867 08E0  
                     l859 08C8                       l797 0840                       l789 082C  
                     l893 09EC                       l885 09DC                       l981 0950  
                     l973 0984                       l877 0A90                       l869 0A0A  
                     l799 0842                       l895 09EE                       l887 09E0  
                     l983 0952                       l975 0996                       l879 0A88  
                     l897 09F4                       l889 09E8                       l977 0928  
                     l969 0968                       l985 08E8                       l899 09FA  
                     l979 0934                       l987 08F6                       l989 0906  
                     u120 0978                       u121 0974                       u130 0996  
                     u131 0992                       u140 0964                       u141 0960  
                     u207 09E2                       u217 0822                       u227 0830  
                     u237 083A                       u157 0A46                       u247 0850  
                     u167 0898                       u257 085E                       u177 08A6  
                     u267 0868                       u187 08B6                       u277 0A70  
                     u197 09AE              __CFG_BOR$OFF 000000               LEER_LCD@aux 0001  
                     wreg 000FE8              ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001  
            __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0002              __CFG_WDT$OFF 000000  
                    STR_1 080B                      STR_2 0801                      _LATD 000F8C  
            __CFG_PWRT$ON 000000                      _main 08E8                      start 0000  
           ?_CURSOR_ONOFF 0001              ___param_bank 000000           ??_ENVIA_LCD_CMD 0002  
        __end_of_LEER_LCD 0888       __size_of_BORRAR_LCD 0008                     ?_main 0001  
                   _PORTD 000F83       __size_of_LCD_CONFIG 0060                     _TRISD 000F95  
     __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0004                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0004           __initialization 0A7A  
            __end_of_main 0928           _ESCRIBE_MENSAJE 0928                    ??_main 000A  
           __activetblptr 000001      __end_of_ENVIA_NIBBLE 0A7A       __size_of_POS_CURSOR 003A  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0A7A  
         __CFG_PBADEN$OFF 000000           __CFG_FOSC$XT_XT 000000              ??_LCD_CONFIG 0004  
           ___rparam_used 000001              ??_ENVIA_CHAR 0002   __end_of_ESCRIBE_MENSAJE 0966  
          __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0A98          ENVIA_LCD_CMD@aux 0003  
    __end_of_CURSOR_ONOFF 0A38        __end_of_LCD_CONFIG 08E8        __end_of_ENVIA_CHAR 0A08  
              ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001                _arrancaLCD 0A38  
            ??_POS_CURSOR 0005     __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000  
                 __Lparam 0000          ?_ESCRIBE_MENSAJE 0004              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 09D4                   __pcinit 0A7A        __end_of_POS_CURSOR 09A0  
                 __ramtop 0800                   __ptext0 08E8                   __ptext1 0A38  
                 __ptext2 0888                   __ptext3 0A08                   __ptext4 0A88  
                 __ptext5 0A90                   __ptext6 0966                   __ptext7 09A0  
                 __ptext8 0928                   __ptext9 09D4              _ENVIA_NIBBLE 0A5E  
    end_of_initialization 0A7A     __size_of_CURSOR_ONOFF 0030               ?_arrancaLCD 0001  
       __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0A08        CURSOR_ONOFF@estado 0004  
           ??_CURSOR_HOME 0004       start_initialization 0A7A         ENVIA_LCD_CMD@dato 0002  
     __size_of_arrancaLCD 0026       __end_of_CURSOR_HOME 0A90               __smallconst 0800  
                _LEER_LCD 0816                  _LATDbits 000F8C          ESCRIBE_MENSAJE@i 0009  
          POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 003E              ??_arrancaLCD 0005  
             _CURSOR_HOME 0A88    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800        __end_of_arrancaLCD 0A5E  
                __ptext10 0816                  __ptext11 0A5E                _BORRAR_LCD 0A90  
           __size_of_main 0040                _LCD_CONFIG 0888                _ENVIA_CHAR 09D4  
           _ENVIA_LCD_CMD 09A0         ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004  
          ?_ENVIA_LCD_CMD 0001               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0966               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
