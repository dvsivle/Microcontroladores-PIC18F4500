

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Mar 03 15:31:40 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 2.10
    28                           ; Generated 31/07/2019 GMT
    29                           ; 
    30                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     _ADRESL	set	4035
    62  0000                     _ADRESH	set	4036
    63  0000                     _ADCON0bits	set	4034
    64  0000                     _ADCON0	set	4034
    65  0000                     _ADCON1	set	4033
    66  0000                     _ADCON2	set	4032
    67  0000                     _PORTD	set	3971
    68  0000                     _LATD	set	3980
    69  0000                     _TRISD	set	3989
    70  0000                     _LATDbits	set	3980
    71                           
    72                           	psect	smallconst
    73  000800                     __psmallconst:
    74                           	opt callstack 0
    75  000800  00                 	db	0
    76  000801                     STR_1:
    77  000801  53                 	db	83	;'S'
    78  000802  75                 	db	117	;'u'
    79  000803  6D                 	db	109	;'m'
    80  000804  6D                 	db	109	;'m'
    81  000805  65                 	db	101	;'e'
    82  000806  72                 	db	114	;'r'
    83  000807  20                 	db	32
    84  000808  53                 	db	83	;'S'
    85  000809  63                 	db	99	;'c'
    86  00080A  68                 	db	104	;'h'
    87  00080B  6F                 	db	111	;'o'
    88  00080C  6F                 	db	111	;'o'
    89  00080D  6C                 	db	108	;'l'
    90  00080E  20                 	db	32
    91  00080F  75                 	db	117	;'u'
    92  000810  43                 	db	67	;'C'
    93  000811  00                 	db	0
    94  000812                     STR_2:
    95  000812  43                 	db	67	;'C'
    96  000813  48                 	db	72	;'H'
    97  000814  41                 	db	65	;'A'
    98  000815  4E                 	db	78	;'N'
    99  000816  4E                 	db	78	;'N'
   100  000817  45                 	db	69	;'E'
   101  000818  4C                 	db	76	;'L'
   102  000819  20                 	db	32
   103  00081A  41                 	db	65	;'A'
   104  00081B  4E                 	db	78	;'N'
   105  00081C  30                 	db	48	;'0'
   106  00081D  3A                 	db	58	;':'
   107  00081E  00                 	db	0
   108                           
   109                           ; #config settings
   110  00081F  00                 	db	0	; dummy byte at the end
   111  0000                     
   112                           	psect	cinit
   113  000C40                     __pcinit:
   114                           	opt callstack 0
   115  000C40                     start_initialization:
   116                           	opt callstack 0
   117  000C40                     __initialization:
   118                           	opt callstack 0
   119                           
   120                           ; Clear objects allocated to COMRAM (6 bytes)
   121  000C40  6A16               	clrf	(__pbssCOMRAM+5)& (0+255),c
   122  000C42  6A15               	clrf	(__pbssCOMRAM+4)& (0+255),c
   123  000C44  6A14               	clrf	(__pbssCOMRAM+3)& (0+255),c
   124  000C46  6A13               	clrf	(__pbssCOMRAM+2)& (0+255),c
   125  000C48  6A12               	clrf	(__pbssCOMRAM+1)& (0+255),c
   126  000C4A  6A11               	clrf	__pbssCOMRAM& (0+255),c
   127  000C4C                     end_of_initialization:
   128                           	opt callstack 0
   129  000C4C                     __end_of__initialization:
   130                           	opt callstack 0
   131  000C4C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   132  000C4E  6EF8               	movwf	tblptru,c
   133  000C50  0E08               	movlw	high __Lsmallconst
   134  000C52  6EF7               	movwf	tblptrh,c
   135  000C54  0100               	movlb	0
   136  000C56  EF10  F004         	goto	_main	;jump to C main() function
   137                           
   138                           	psect	bssCOMRAM
   139  000011                     __pbssCOMRAM:
   140                           	opt callstack 0
   141  000011                     _lecturon:
   142                           	opt callstack 0
   143  000011                     	ds	2
   144  000013                     _unidad:
   145                           	opt callstack 0
   146  000013                     	ds	1
   147  000014                     _decena:
   148                           	opt callstack 0
   149  000014                     	ds	1
   150  000015                     _centena:
   151                           	opt callstack 0
   152  000015                     	ds	1
   153  000016                     _millar:
   154                           	opt callstack 0
   155  000016                     	ds	1
   156                           
   157                           	psect	cstackCOMRAM
   158  000001                     __pcstackCOMRAM:
   159                           	opt callstack 0
   160  000001                     ?___lwmod:
   161                           	opt callstack 0
   162  000001                     ENVIA_NIBBLE@dato:
   163                           	opt callstack 0
   164  000001                     LEER_LCD@aux:
   165                           	opt callstack 0
   166  000001                     ___lwmod@dividend:
   167                           	opt callstack 0
   168                           
   169                           ; 2 bytes @ 0x0
   170  000001                     	ds	1
   171  000002                     ENVIA_CHAR@dato:
   172                           	opt callstack 0
   173  000002                     ENVIA_LCD_CMD@dato:
   174                           	opt callstack 0
   175                           
   176                           ; 1 bytes @ 0x1
   177  000002                     	ds	1
   178  000003                     ENVIA_CHAR@aux:
   179                           	opt callstack 0
   180  000003                     ENVIA_LCD_CMD@aux:
   181                           	opt callstack 0
   182  000003                     ___lwmod@divisor:
   183                           	opt callstack 0
   184                           
   185                           ; 2 bytes @ 0x2
   186  000003                     	ds	1
   187  000004                     ??_LCD_CONFIG:
   188  000004                     POS_CURSOR@columna:
   189                           	opt callstack 0
   190  000004                     CURSOR_ONOFF@estado:
   191                           	opt callstack 0
   192  000004                     ESCRIBE_MENSAJE@cadena:
   193                           	opt callstack 0
   194                           
   195                           ; 2 bytes @ 0x3
   196  000004                     	ds	1
   197  000005                     ??_arrancaLCD:
   198  000005                     POS_CURSOR@fila:
   199                           	opt callstack 0
   200  000005                     ___lwmod@counter:
   201                           	opt callstack 0
   202                           
   203                           ; 1 bytes @ 0x4
   204  000005                     	ds	1
   205  000006                     ?___lwdiv:
   206                           	opt callstack 0
   207  000006                     ESCRIBE_MENSAJE@tam:
   208                           	opt callstack 0
   209  000006                     ___lwdiv@dividend:
   210                           	opt callstack 0
   211                           
   212                           ; 2 bytes @ 0x5
   213  000006                     	ds	1
   214  000007                     ??_ESCRIBE_MENSAJE:
   215                           
   216                           ; 1 bytes @ 0x6
   217  000007                     	ds	1
   218  000008                     ___lwdiv@divisor:
   219                           	opt callstack 0
   220                           
   221                           ; 2 bytes @ 0x7
   222  000008                     	ds	1
   223  000009                     ESCRIBE_MENSAJE@i:
   224                           	opt callstack 0
   225                           
   226                           ; 1 bytes @ 0x8
   227  000009                     	ds	1
   228  00000A                     ___lwdiv@quotient:
   229                           	opt callstack 0
   230                           
   231                           ; 2 bytes @ 0x9
   232  00000A                     	ds	2
   233  00000C                     ___lwdiv@counter:
   234                           	opt callstack 0
   235                           
   236                           ; 1 bytes @ 0xB
   237  00000C                     	ds	1
   238  00000D                     convierte@numero:
   239                           	opt callstack 0
   240                           
   241                           ; 2 bytes @ 0xC
   242  00000D                     	ds	2
   243  00000F                     ??_main:
   244                           
   245                           ; 1 bytes @ 0xE
   246  00000F                     	ds	2
   247                           
   248 ;;
   249 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   250 ;;
   251 ;; *************** function _main *****************
   252 ;; Defined at:
   253 ;;		line 40 in file "maincode.c"
   254 ;; Parameters:    Size  Location     Type
   255 ;;		None
   256 ;; Auto vars:     Size  Location     Type
   257 ;;		None
   258 ;; Return value:  Size  Location     Type
   259 ;;                  1    wreg      void 
   260 ;; Registers used:
   261 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   262 ;; Tracked objects:
   263 ;;		On entry : 0/0
   264 ;;		On exit  : 0/0
   265 ;;		Unchanged: 0/0
   266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   267 ;;      Params:         0       0       0       0       0       0       0       0       0
   268 ;;      Locals:         0       0       0       0       0       0       0       0       0
   269 ;;      Temps:          2       0       0       0       0       0       0       0       0
   270 ;;      Totals:         2       0       0       0       0       0       0       0       0
   271 ;;Total ram usage:        2 bytes
   272 ;; Hardware stack levels required when called:    4
   273 ;; This function calls:
   274 ;;		_ENVIA_CHAR
   275 ;;		_ESCRIBE_MENSAJE
   276 ;;		_POS_CURSOR
   277 ;;		_arrancaLCD
   278 ;;		_convierte
   279 ;; This function is called by:
   280 ;;		Startup code after reset
   281 ;; This function uses a non-reentrant model
   282 ;;
   283                           
   284                           	psect	text0
   285  000820                     __ptext0:
   286                           	opt callstack 0
   287  000820                     _main:
   288                           	opt callstack 27
   289  000820                     
   290                           ;maincode.c: 42:     arrancaLCD();
   291  000820  ECFF  F005         	call	_arrancaLCD	;wreg free
   292  000824                     
   293                           ;maincode.c: 43:     ADCON2 = 0xA4;
   294  000824  0EA4               	movlw	164
   295  000826  6EC0               	movwf	192,c	;volatile
   296  000828                     
   297                           ;maincode.c: 44:     ADCON1 = 0x0E;
   298  000828  0E0E               	movlw	14
   299  00082A  6EC1               	movwf	193,c	;volatile
   300  00082C                     
   301                           ;maincode.c: 45:     ADCON0 = 0x01;
   302  00082C  0E01               	movlw	1
   303  00082E  6EC2               	movwf	194,c	;volatile
   304  000830                     
   305                           ;maincode.c: 46:     POS_CURSOR(1,0);
   306  000830  0E00               	movlw	0
   307  000832  6E04               	movwf	POS_CURSOR@columna^0,c
   308  000834  0E01               	movlw	1
   309  000836  EC96  F005         	call	_POS_CURSOR
   310  00083A                     
   311                           ;maincode.c: 47:     ESCRIBE_MENSAJE("Summer School uC",16);
   312  00083A  0E01               	movlw	low STR_1
   313  00083C  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   314  00083E  0E08               	movlw	high STR_1
   315  000840  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   316  000842  0E10               	movlw	16
   317  000844  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   318  000846  EC77  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   319  00084A                     l1131:
   320                           
   321                           ;maincode.c: 49:             ADCON0bits.GODONE = 1;
   322  00084A  82C2               	bsf	194,1,c	;volatile
   323  00084C                     l126:
   324  00084C  B2C2               	btfsc	194,1,c	;volatile
   325  00084E  EF2B  F004         	goto	u281
   326  000852  EF2D  F004         	goto	u280
   327  000856                     u281:
   328  000856  EF26  F004         	goto	l126
   329  00085A                     u280:
   330  00085A                     
   331                           ;maincode.c: 51:             lecturon = (ADRESH << 8) + ADRESL;
   332  00085A  50C4               	movf	196,w,c	;volatile
   333  00085C  6E10               	movwf	(??_main+1)^0,c
   334  00085E  6A0F               	clrf	??_main^0,c
   335  000860  50C3               	movf	195,w,c	;volatile
   336  000862  240F               	addwf	??_main^0,w,c
   337  000864  6E11               	movwf	_lecturon^0,c
   338  000866  0E00               	movlw	0
   339  000868  2010               	addwfc	(??_main+1)^0,w,c
   340  00086A  6E12               	movwf	(_lecturon+1)^0,c
   341  00086C                     
   342                           ;maincode.c: 52:             convierte(lecturon);
   343  00086C  C011  F00D         	movff	_lecturon,convierte@numero
   344  000870  C012  F00E         	movff	_lecturon+1,convierte@numero+1
   345  000874  EC5D  F004         	call	_convierte	;wreg free
   346  000878                     
   347                           ;maincode.c: 53:             POS_CURSOR(2,0);
   348  000878  0E00               	movlw	0
   349  00087A  6E04               	movwf	POS_CURSOR@columna^0,c
   350  00087C  0E02               	movlw	2
   351  00087E  EC96  F005         	call	_POS_CURSOR
   352  000882                     
   353                           ;maincode.c: 54:             ESCRIBE_MENSAJE("CHANNEL AN0:",12);
   354  000882  0E12               	movlw	low STR_2
   355  000884  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   356  000886  0E08               	movlw	high STR_2
   357  000888  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   358  00088A  0E0C               	movlw	12
   359  00088C  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   360  00088E  EC77  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   361  000892                     
   362                           ;maincode.c: 55:             ENVIA_CHAR(millar+0x30);
   363  000892  5016               	movf	_millar^0,w,c
   364  000894  0F30               	addlw	48
   365  000896  ECCD  F005         	call	_ENVIA_CHAR
   366  00089A                     
   367                           ;maincode.c: 56:             ENVIA_CHAR(centena+0x30);
   368  00089A  5015               	movf	_centena^0,w,c
   369  00089C  0F30               	addlw	48
   370  00089E  ECCD  F005         	call	_ENVIA_CHAR
   371  0008A2                     
   372                           ;maincode.c: 57:             ENVIA_CHAR(decena+0x30);
   373  0008A2  5014               	movf	_decena^0,w,c
   374  0008A4  0F30               	addlw	48
   375  0008A6  ECCD  F005         	call	_ENVIA_CHAR
   376  0008AA                     
   377                           ;maincode.c: 58:             ENVIA_CHAR(unidad+0x30);
   378  0008AA  5013               	movf	_unidad^0,w,c
   379  0008AC  0F30               	addlw	48
   380  0008AE  ECCD  F005         	call	_ENVIA_CHAR
   381  0008B2  EF25  F004         	goto	l1131
   382  0008B6  EF00  F000         	goto	start
   383  0008BA                     __end_of_main:
   384                           	opt callstack 0
   385                           
   386 ;; *************** function _convierte *****************
   387 ;; Defined at:
   388 ;;		line 33 in file "maincode.c"
   389 ;; Parameters:    Size  Location     Type
   390 ;;  numero          2   12[COMRAM] unsigned int 
   391 ;; Auto vars:     Size  Location     Type
   392 ;;		None
   393 ;; Return value:  Size  Location     Type
   394 ;;                  1    wreg      void 
   395 ;; Registers used:
   396 ;;		wreg, status,2, status,0, cstack
   397 ;; Tracked objects:
   398 ;;		On entry : 0/0
   399 ;;		On exit  : 0/0
   400 ;;		Unchanged: 0/0
   401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   402 ;;      Params:         2       0       0       0       0       0       0       0       0
   403 ;;      Locals:         0       0       0       0       0       0       0       0       0
   404 ;;      Temps:          0       0       0       0       0       0       0       0       0
   405 ;;      Totals:         2       0       0       0       0       0       0       0       0
   406 ;;Total ram usage:        2 bytes
   407 ;; Hardware stack levels used:    1
   408 ;; Hardware stack levels required when called:    1
   409 ;; This function calls:
   410 ;;		___lwdiv
   411 ;;		___lwmod
   412 ;; This function is called by:
   413 ;;		_main
   414 ;; This function uses a non-reentrant model
   415 ;;
   416                           
   417                           	psect	text1
   418  0008BA                     __ptext1:
   419                           	opt callstack 0
   420  0008BA                     _convierte:
   421                           	opt callstack 29
   422  0008BA                     
   423                           ;maincode.c: 34:     millar = numero / 1000;
   424  0008BA  C00D  F006         	movff	convierte@numero,___lwdiv@dividend
   425  0008BE  C00E  F007         	movff	convierte@numero+1,___lwdiv@dividend+1
   426  0008C2  0E03               	movlw	3
   427  0008C4  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   428  0008C6  0EE8               	movlw	232
   429  0008C8  6E08               	movwf	___lwdiv@divisor^0,c
   430  0008CA  ECA2  F004         	call	___lwdiv	;wreg free
   431  0008CE  5006               	movf	?___lwdiv^0,w,c
   432  0008D0  6E16               	movwf	_millar^0,c
   433                           
   434                           ;maincode.c: 35:     centena = numero % 1000 / 100;
   435  0008D2  0E03               	movlw	3
   436  0008D4  6E04               	movwf	(___lwmod@divisor+1)^0,c
   437  0008D6  0EE8               	movlw	232
   438  0008D8  6E03               	movwf	___lwmod@divisor^0,c
   439  0008DA  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   440  0008DE  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   441  0008E2  EC15  F005         	call	___lwmod	;wreg free
   442  0008E6  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   443  0008EA  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   444  0008EE  0E00               	movlw	0
   445  0008F0  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   446  0008F2  0E64               	movlw	100
   447  0008F4  6E08               	movwf	___lwdiv@divisor^0,c
   448  0008F6  ECA2  F004         	call	___lwdiv	;wreg free
   449  0008FA  5006               	movf	?___lwdiv^0,w,c
   450  0008FC  6E15               	movwf	_centena^0,c
   451                           
   452                           ;maincode.c: 36:     decena = (numero % 100) / 10;
   453  0008FE  0E00               	movlw	0
   454  000900  6E04               	movwf	(___lwmod@divisor+1)^0,c
   455  000902  0E64               	movlw	100
   456  000904  6E03               	movwf	___lwmod@divisor^0,c
   457  000906  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   458  00090A  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   459  00090E  EC15  F005         	call	___lwmod	;wreg free
   460  000912  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   461  000916  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   462  00091A  0E00               	movlw	0
   463  00091C  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   464  00091E  0E0A               	movlw	10
   465  000920  6E08               	movwf	___lwdiv@divisor^0,c
   466  000922  ECA2  F004         	call	___lwdiv	;wreg free
   467  000926  5006               	movf	?___lwdiv^0,w,c
   468  000928  6E14               	movwf	_decena^0,c
   469                           
   470                           ;maincode.c: 37:     unidad = numero % 10;
   471  00092A  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   472  00092E  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   473  000932  0E00               	movlw	0
   474  000934  6E04               	movwf	(___lwmod@divisor+1)^0,c
   475  000936  0E0A               	movlw	10
   476  000938  6E03               	movwf	___lwmod@divisor^0,c
   477  00093A  EC15  F005         	call	___lwmod	;wreg free
   478  00093E  5001               	movf	?___lwmod^0,w,c
   479  000940  6E13               	movwf	_unidad^0,c
   480  000942  0012               	return		;funcret
   481  000944                     __end_of_convierte:
   482                           	opt callstack 0
   483                           
   484 ;; *************** function ___lwmod *****************
   485 ;; Defined at:
   486 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwmod.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;  dividend        2    0[COMRAM] unsigned int 
   489 ;;  divisor         2    2[COMRAM] unsigned int 
   490 ;; Auto vars:     Size  Location     Type
   491 ;;  counter         1    4[COMRAM] unsigned char 
   492 ;; Return value:  Size  Location     Type
   493 ;;                  2    0[COMRAM] unsigned int 
   494 ;; Registers used:
   495 ;;		wreg, status,2, status,0
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   501 ;;      Params:         4       0       0       0       0       0       0       0       0
   502 ;;      Locals:         1       0       0       0       0       0       0       0       0
   503 ;;      Temps:          0       0       0       0       0       0       0       0       0
   504 ;;      Totals:         5       0       0       0       0       0       0       0       0
   505 ;;Total ram usage:        5 bytes
   506 ;; Hardware stack levels used:    1
   507 ;; This function calls:
   508 ;;		Nothing
   509 ;; This function is called by:
   510 ;;		_convierte
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           	psect	text2
   515  000A2A                     __ptext2:
   516                           	opt callstack 0
   517  000A2A                     ___lwmod:
   518                           	opt callstack 29
   519  000A2A  5003               	movf	___lwmod@divisor^0,w,c
   520  000A2C  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   521  000A2E  B4D8               	btfsc	status,2,c
   522  000A30  EF1C  F005         	goto	u221
   523  000A34  EF1E  F005         	goto	u220
   524  000A38                     u221:
   525  000A38  EF42  F005         	goto	l635
   526  000A3C                     u220:
   527  000A3C  0E01               	movlw	1
   528  000A3E  6E05               	movwf	___lwmod@counter^0,c
   529  000A40  EF26  F005         	goto	l1091
   530  000A44                     l1089:
   531  000A44  90D8               	bcf	status,0,c
   532  000A46  3603               	rlcf	___lwmod@divisor^0,f,c
   533  000A48  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   534  000A4A  2A05               	incf	___lwmod@counter^0,f,c
   535  000A4C                     l1091:
   536  000A4C  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   537  000A4E  EF2B  F005         	goto	u231
   538  000A52  EF2D  F005         	goto	u230
   539  000A56                     u231:
   540  000A56  EF22  F005         	goto	l1089
   541  000A5A                     u230:
   542  000A5A                     l1093:
   543  000A5A  5003               	movf	___lwmod@divisor^0,w,c
   544  000A5C  5C01               	subwf	___lwmod@dividend^0,w,c
   545  000A5E  5004               	movf	(___lwmod@divisor+1)^0,w,c
   546  000A60  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   547  000A62  A0D8               	btfss	status,0,c
   548  000A64  EF36  F005         	goto	u241
   549  000A68  EF38  F005         	goto	u240
   550  000A6C                     u241:
   551  000A6C  EF3C  F005         	goto	l1097
   552  000A70                     u240:
   553  000A70  5003               	movf	___lwmod@divisor^0,w,c
   554  000A72  5E01               	subwf	___lwmod@dividend^0,f,c
   555  000A74  5004               	movf	(___lwmod@divisor+1)^0,w,c
   556  000A76  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   557  000A78                     l1097:
   558  000A78  90D8               	bcf	status,0,c
   559  000A7A  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   560  000A7C  3203               	rrcf	___lwmod@divisor^0,f,c
   561  000A7E  2E05               	decfsz	___lwmod@counter^0,f,c
   562  000A80  EF2D  F005         	goto	l1093
   563  000A84                     l635:
   564  000A84  C001  F001         	movff	___lwmod@dividend,?___lwmod
   565  000A88  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   566  000A8C  0012               	return		;funcret
   567  000A8E                     __end_of___lwmod:
   568                           	opt callstack 0
   569                           
   570 ;; *************** function ___lwdiv *****************
   571 ;; Defined at:
   572 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwdiv.c"
   573 ;; Parameters:    Size  Location     Type
   574 ;;  dividend        2    5[COMRAM] unsigned int 
   575 ;;  divisor         2    7[COMRAM] unsigned int 
   576 ;; Auto vars:     Size  Location     Type
   577 ;;  quotient        2    9[COMRAM] unsigned int 
   578 ;;  counter         1   11[COMRAM] unsigned char 
   579 ;; Return value:  Size  Location     Type
   580 ;;                  2    5[COMRAM] unsigned int 
   581 ;; Registers used:
   582 ;;		wreg, status,2, status,0
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   588 ;;      Params:         4       0       0       0       0       0       0       0       0
   589 ;;      Locals:         3       0       0       0       0       0       0       0       0
   590 ;;      Temps:          0       0       0       0       0       0       0       0       0
   591 ;;      Totals:         7       0       0       0       0       0       0       0       0
   592 ;;Total ram usage:        7 bytes
   593 ;; Hardware stack levels used:    1
   594 ;; This function calls:
   595 ;;		Nothing
   596 ;; This function is called by:
   597 ;;		_convierte
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601                           	psect	text3
   602  000944                     __ptext3:
   603                           	opt callstack 0
   604  000944                     ___lwdiv:
   605                           	opt callstack 29
   606  000944  0E00               	movlw	0
   607  000946  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
   608  000948  0E00               	movlw	0
   609  00094A  6E0A               	movwf	___lwdiv@quotient^0,c
   610  00094C  5008               	movf	___lwdiv@divisor^0,w,c
   611  00094E  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
   612  000950  B4D8               	btfsc	status,2,c
   613  000952  EFAD  F004         	goto	u191
   614  000956  EFAF  F004         	goto	u190
   615  00095A                     u191:
   616  00095A  EFD7  F004         	goto	l625
   617  00095E                     u190:
   618  00095E  0E01               	movlw	1
   619  000960  6E0C               	movwf	___lwdiv@counter^0,c
   620  000962  EFB7  F004         	goto	l1071
   621  000966                     l1069:
   622  000966  90D8               	bcf	status,0,c
   623  000968  3608               	rlcf	___lwdiv@divisor^0,f,c
   624  00096A  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
   625  00096C  2A0C               	incf	___lwdiv@counter^0,f,c
   626  00096E                     l1071:
   627  00096E  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
   628  000970  EFBC  F004         	goto	u201
   629  000974  EFBE  F004         	goto	u200
   630  000978                     u201:
   631  000978  EFB3  F004         	goto	l1069
   632  00097C                     u200:
   633  00097C                     l1073:
   634  00097C  90D8               	bcf	status,0,c
   635  00097E  360A               	rlcf	___lwdiv@quotient^0,f,c
   636  000980  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
   637  000982  5008               	movf	___lwdiv@divisor^0,w,c
   638  000984  5C06               	subwf	___lwdiv@dividend^0,w,c
   639  000986  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   640  000988  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
   641  00098A  A0D8               	btfss	status,0,c
   642  00098C  EFCA  F004         	goto	u211
   643  000990  EFCC  F004         	goto	u210
   644  000994                     u211:
   645  000994  EFD1  F004         	goto	l1081
   646  000998                     u210:
   647  000998  5008               	movf	___lwdiv@divisor^0,w,c
   648  00099A  5E06               	subwf	___lwdiv@dividend^0,f,c
   649  00099C  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   650  00099E  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
   651  0009A0  800A               	bsf	___lwdiv@quotient^0,0,c
   652  0009A2                     l1081:
   653  0009A2  90D8               	bcf	status,0,c
   654  0009A4  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
   655  0009A6  3208               	rrcf	___lwdiv@divisor^0,f,c
   656  0009A8  2E0C               	decfsz	___lwdiv@counter^0,f,c
   657  0009AA  EFBE  F004         	goto	l1073
   658  0009AE                     l625:
   659  0009AE  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
   660  0009B2  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
   661  0009B6  0012               	return		;funcret
   662  0009B8                     __end_of___lwdiv:
   663                           	opt callstack 0
   664                           
   665 ;; *************** function _arrancaLCD *****************
   666 ;; Defined at:
   667 ;;		line 24 in file "maincode.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;		None
   670 ;; Auto vars:     Size  Location     Type
   671 ;;		None
   672 ;; Return value:  Size  Location     Type
   673 ;;                  1    wreg      void 
   674 ;; Registers used:
   675 ;;		wreg, status,2, status,0, cstack
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 0/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   681 ;;      Params:         0       0       0       0       0       0       0       0       0
   682 ;;      Locals:         0       0       0       0       0       0       0       0       0
   683 ;;      Temps:          1       0       0       0       0       0       0       0       0
   684 ;;      Totals:         1       0       0       0       0       0       0       0       0
   685 ;;Total ram usage:        1 bytes
   686 ;; Hardware stack levels used:    1
   687 ;; Hardware stack levels required when called:    3
   688 ;; This function calls:
   689 ;;		_BORRAR_LCD
   690 ;;		_CURSOR_HOME
   691 ;;		_CURSOR_ONOFF
   692 ;;		_LCD_CONFIG
   693 ;; This function is called by:
   694 ;;		_main
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text4
   699  000BFE                     __ptext4:
   700                           	opt callstack 0
   701  000BFE                     _arrancaLCD:
   702                           	opt callstack 27
   703  000BFE                     
   704                           ;maincode.c: 25:     TRISD = 0x00;
   705  000BFE  0E00               	movlw	0
   706  000C00  6E95               	movwf	149,c	;volatile
   707  000C02                     
   708                           ;maincode.c: 26:     LCD_CONFIG();
   709  000C02  EC47  F005         	call	_LCD_CONFIG	;wreg free
   710  000C06                     
   711                           ;maincode.c: 27:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
   712  000C06  0E14               	movlw	20
   713  000C08  6E05               	movwf	??_arrancaLCD^0,c
   714  000C0A  0E7A               	movlw	122
   715  000C0C                     u297:
   716  000C0C  2EE8               	decfsz	wreg,f,c
   717  000C0E  D7FE               	bra	u297
   718  000C10  2E05               	decfsz	??_arrancaLCD^0,f,c
   719  000C12  D7FC               	bra	u297
   720  000C14                     
   721                           ;maincode.c: 28:     CURSOR_ONOFF(1);
   722  000C14  0E01               	movlw	1
   723  000C16  ECE7  F005         	call	_CURSOR_ONOFF
   724  000C1A                     
   725                           ;maincode.c: 29:     BORRAR_LCD();
   726  000C1A  EC31  F006         	call	_BORRAR_LCD	;wreg free
   727  000C1E                     
   728                           ;maincode.c: 30:     CURSOR_HOME();
   729  000C1E  EC2D  F006         	call	_CURSOR_HOME	;wreg free
   730  000C22  0012               	return		;funcret
   731  000C24                     __end_of_arrancaLCD:
   732                           	opt callstack 0
   733                           
   734 ;; *************** function _LCD_CONFIG *****************
   735 ;; Defined at:
   736 ;;		line 72 in file "LCD.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;		None
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		wreg, status,2, status,0, cstack
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   750 ;;      Params:         0       0       0       0       0       0       0       0       0
   751 ;;      Locals:         0       0       0       0       0       0       0       0       0
   752 ;;      Temps:          1       0       0       0       0       0       0       0       0
   753 ;;      Totals:         1       0       0       0       0       0       0       0       0
   754 ;;Total ram usage:        1 bytes
   755 ;; Hardware stack levels used:    1
   756 ;; Hardware stack levels required when called:    2
   757 ;; This function calls:
   758 ;;		_ENVIA_LCD_CMD
   759 ;;		_ENVIA_NIBBLE
   760 ;; This function is called by:
   761 ;;		_arrancaLCD
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           	psect	text5
   766  000A8E                     __ptext5:
   767                           	opt callstack 0
   768  000A8E                     _LCD_CONFIG:
   769                           	opt callstack 27
   770  000A8E                     
   771                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   772  000A8E  908C               	bcf	140,0,c	;volatile
   773                           
   774                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   775  000A90  928C               	bcf	140,1,c	;volatile
   776  000A92                     
   777                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   778  000A92  0E30               	movlw	48
   779  000A94  EC12  F006         	call	_ENVIA_NIBBLE
   780  000A98                     
   781                           ;LCD.c: 77:         _delay(24000);
   782  000A98  0E20               	movlw	32
   783  000A9A  6E04               	movwf	??_LCD_CONFIG^0,c
   784  000A9C  0E2A               	movlw	42
   785  000A9E                     u307:
   786  000A9E  2EE8               	decfsz	wreg,f,c
   787  000AA0  D7FE               	bra	u307
   788  000AA2  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   789  000AA4  D7FC               	bra	u307
   790  000AA6                     
   791                           ;LCD.c: 78:         _delay(24000);
   792  000AA6  0E20               	movlw	32
   793  000AA8  6E04               	movwf	??_LCD_CONFIG^0,c
   794  000AAA  0E2A               	movlw	42
   795  000AAC                     u317:
   796  000AAC  2EE8               	decfsz	wreg,f,c
   797  000AAE  D7FE               	bra	u317
   798  000AB0  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   799  000AB2  D7FC               	bra	u317
   800                           
   801                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   802  000AB4  0E30               	movlw	48
   803  000AB6  EC12  F006         	call	_ENVIA_NIBBLE
   804  000ABA                     
   805                           ;LCD.c: 83:  _delay(1200);
   806  000ABA  0EF0               	movlw	240
   807  000ABC                     u327:
   808  000ABC  D000               	nop2	
   809  000ABE  2EE8               	decfsz	wreg,f,c
   810  000AC0  D7FD               	bra	u327
   811  000AC2                     
   812                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   813  000AC2  0E30               	movlw	48
   814  000AC4  EC12  F006         	call	_ENVIA_NIBBLE
   815  000AC8                     
   816                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   817  000AC8  0E20               	movlw	32
   818  000ACA  EC12  F006         	call	_ENVIA_NIBBLE
   819  000ACE                     
   820                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   821  000ACE  0E01               	movlw	1
   822  000AD0  ECB3  F005         	call	_ENVIA_LCD_CMD
   823  000AD4                     
   824                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   825  000AD4  0E28               	movlw	40
   826  000AD6  ECB3  F005         	call	_ENVIA_LCD_CMD
   827  000ADA                     
   828                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   829  000ADA  0E0F               	movlw	15
   830  000ADC  ECB3  F005         	call	_ENVIA_LCD_CMD
   831  000AE0                     
   832                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   833  000AE0  0E06               	movlw	6
   834  000AE2  ECB3  F005         	call	_ENVIA_LCD_CMD
   835  000AE6                     
   836                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   837  000AE6  0E01               	movlw	1
   838  000AE8  ECB3  F005         	call	_ENVIA_LCD_CMD
   839  000AEC  0012               	return		;funcret
   840  000AEE                     __end_of_LCD_CONFIG:
   841                           	opt callstack 0
   842                           
   843 ;; *************** function _CURSOR_ONOFF *****************
   844 ;; Defined at:
   845 ;;		line 35 in file "LCD.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;  estado          1    wreg     unsigned char 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  estado          1    3[COMRAM] unsigned char 
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, status,2, status,0, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   859 ;;      Params:         0       0       0       0       0       0       0       0       0
   860 ;;      Locals:         1       0       0       0       0       0       0       0       0
   861 ;;      Temps:          0       0       0       0       0       0       0       0       0
   862 ;;      Totals:         1       0       0       0       0       0       0       0       0
   863 ;;Total ram usage:        1 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    2
   866 ;; This function calls:
   867 ;;		_ENVIA_LCD_CMD
   868 ;; This function is called by:
   869 ;;		_arrancaLCD
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text6
   874  000BCE                     __ptext6:
   875                           	opt callstack 0
   876  000BCE                     _CURSOR_ONOFF:
   877                           	opt callstack 27
   878                           
   879                           ;incstack = 0
   880                           ;CURSOR_ONOFF@estado stored from wreg
   881  000BCE  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   882  000BD0                     
   883                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   884  000BD0  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   885  000BD2  A4D8               	btfss	status,2,c
   886  000BD4  EFEE  F005         	goto	u21
   887  000BD8  EFF0  F005         	goto	u20
   888  000BDC                     u21:
   889  000BDC  EFF3  F005         	goto	l881
   890  000BE0                     u20:
   891  000BE0  0E0E               	movlw	14
   892  000BE2  ECB3  F005         	call	_ENVIA_LCD_CMD
   893  000BE6                     l881:
   894                           
   895                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   896  000BE6  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   897  000BE8  A4D8               	btfss	status,2,c
   898  000BEA  EFF9  F005         	goto	u31
   899  000BEE  EFFB  F005         	goto	u30
   900  000BF2                     u31:
   901  000BF2  EFFE  F005         	goto	l42
   902  000BF6                     u30:
   903  000BF6  0E0C               	movlw	12
   904  000BF8  ECB3  F005         	call	_ENVIA_LCD_CMD
   905  000BFC                     l42:
   906  000BFC  0012               	return		;funcret
   907  000BFE                     __end_of_CURSOR_ONOFF:
   908                           	opt callstack 0
   909                           
   910 ;; *************** function _CURSOR_HOME *****************
   911 ;; Defined at:
   912 ;;		line 30 in file "LCD.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;		None
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		wreg, status,2, status,0, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   926 ;;      Params:         0       0       0       0       0       0       0       0       0
   927 ;;      Locals:         0       0       0       0       0       0       0       0       0
   928 ;;      Temps:          0       0       0       0       0       0       0       0       0
   929 ;;      Totals:         0       0       0       0       0       0       0       0       0
   930 ;;Total ram usage:        0 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; Hardware stack levels required when called:    2
   933 ;; This function calls:
   934 ;;		_ENVIA_LCD_CMD
   935 ;; This function is called by:
   936 ;;		_arrancaLCD
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           	psect	text7
   941  000C5A                     __ptext7:
   942                           	opt callstack 0
   943  000C5A                     _CURSOR_HOME:
   944                           	opt callstack 27
   945  000C5A                     
   946                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   947  000C5A  0E02               	movlw	2
   948  000C5C  ECB3  F005         	call	_ENVIA_LCD_CMD
   949  000C60  0012               	return		;funcret
   950  000C62                     __end_of_CURSOR_HOME:
   951                           	opt callstack 0
   952                           
   953 ;; *************** function _BORRAR_LCD *****************
   954 ;; Defined at:
   955 ;;		line 67 in file "LCD.c"
   956 ;; Parameters:    Size  Location     Type
   957 ;;		None
   958 ;; Auto vars:     Size  Location     Type
   959 ;;		None
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      void 
   962 ;; Registers used:
   963 ;;		wreg, status,2, status,0, cstack
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   969 ;;      Params:         0       0       0       0       0       0       0       0       0
   970 ;;      Locals:         0       0       0       0       0       0       0       0       0
   971 ;;      Temps:          0       0       0       0       0       0       0       0       0
   972 ;;      Totals:         0       0       0       0       0       0       0       0       0
   973 ;;Total ram usage:        0 bytes
   974 ;; Hardware stack levels used:    1
   975 ;; Hardware stack levels required when called:    2
   976 ;; This function calls:
   977 ;;		_ENVIA_LCD_CMD
   978 ;; This function is called by:
   979 ;;		_arrancaLCD
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           	psect	text8
   984  000C62                     __ptext8:
   985                           	opt callstack 0
   986  000C62                     _BORRAR_LCD:
   987                           	opt callstack 27
   988  000C62                     
   989                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   990  000C62  0E01               	movlw	1
   991  000C64  ECB3  F005         	call	_ENVIA_LCD_CMD
   992  000C68  0012               	return		;funcret
   993  000C6A                     __end_of_BORRAR_LCD:
   994                           	opt callstack 0
   995                           
   996 ;; *************** function _POS_CURSOR *****************
   997 ;; Defined at:
   998 ;;		line 6 in file "LCD.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;  fila            1    wreg     unsigned char 
  1001 ;;  columna         1    3[COMRAM] unsigned char 
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;  fila            1    4[COMRAM] unsigned char 
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  1    wreg      void 
  1006 ;; Registers used:
  1007 ;;		wreg, status,2, status,0, cstack
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1013 ;;      Params:         1       0       0       0       0       0       0       0       0
  1014 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1016 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1017 ;;Total ram usage:        2 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; Hardware stack levels required when called:    2
  1020 ;; This function calls:
  1021 ;;		_ENVIA_LCD_CMD
  1022 ;; This function is called by:
  1023 ;;		_main
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text9
  1028  000B2C                     __ptext9:
  1029                           	opt callstack 0
  1030  000B2C                     _POS_CURSOR:
  1031                           	opt callstack 28
  1032                           
  1033                           ;incstack = 0
  1034                           ;POS_CURSOR@fila stored from wreg
  1035  000B2C  6E05               	movwf	POS_CURSOR@fila^0,c
  1036  000B2E                     
  1037                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1038  000B2E  0405               	decf	POS_CURSOR@fila^0,w,c
  1039  000B30  A4D8               	btfss	status,2,c
  1040  000B32  EF9D  F005         	goto	u251
  1041  000B36  EF9F  F005         	goto	u250
  1042  000B3A                     u251:
  1043  000B3A  EFA5  F005         	goto	l1105
  1044  000B3E                     u250:
  1045  000B3E                     
  1046                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1047  000B3E  5004               	movf	POS_CURSOR@columna^0,w,c
  1048  000B40  0F80               	addlw	128
  1049  000B42  ECB3  F005         	call	_ENVIA_LCD_CMD
  1050                           
  1051                           ;LCD.c: 11:  }
  1052  000B46  EFB2  F005         	goto	l24
  1053  000B4A                     l1105:
  1054  000B4A  0E02               	movlw	2
  1055  000B4C  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1056  000B4E  A4D8               	btfss	status,2,c
  1057  000B50  EFAC  F005         	goto	u261
  1058  000B54  EFAE  F005         	goto	u260
  1059  000B58                     u261:
  1060  000B58  EFB2  F005         	goto	l24
  1061  000B5C                     u260:
  1062  000B5C                     
  1063                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1064  000B5C  5004               	movf	POS_CURSOR@columna^0,w,c
  1065  000B5E  0FC0               	addlw	192
  1066  000B60  ECB3  F005         	call	_ENVIA_LCD_CMD
  1067  000B64                     l24:
  1068  000B64  0012               	return		;funcret
  1069  000B66                     __end_of_POS_CURSOR:
  1070                           	opt callstack 0
  1071                           
  1072 ;; *************** function _ENVIA_LCD_CMD *****************
  1073 ;; Defined at:
  1074 ;;		line 104 in file "LCD.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;  dato            1    wreg     unsigned char 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  dato            1    1[COMRAM] unsigned char 
  1079 ;;  aux             1    2[COMRAM] unsigned char 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		wreg, status,2, status,0, cstack
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1089 ;;      Params:         0       0       0       0       0       0       0       0       0
  1090 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1091 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1092 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1093 ;;Total ram usage:        2 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; Hardware stack levels required when called:    1
  1096 ;; This function calls:
  1097 ;;		_ENVIA_NIBBLE
  1098 ;;		_LEER_LCD
  1099 ;; This function is called by:
  1100 ;;		_POS_CURSOR
  1101 ;;		_CURSOR_HOME
  1102 ;;		_CURSOR_ONOFF
  1103 ;;		_BORRAR_LCD
  1104 ;;		_LCD_CONFIG
  1105 ;;		_BLINK_CURSOR
  1106 ;;		_DISPLAY_ONOFF
  1107 ;;		_GENERACARACTER
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text10
  1112  000B66                     __ptext10:
  1113                           	opt callstack 0
  1114  000B66                     _ENVIA_LCD_CMD:
  1115                           	opt callstack 27
  1116                           
  1117                           ;incstack = 0
  1118                           ;ENVIA_LCD_CMD@dato stored from wreg
  1119  000B66  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1120  000B68                     
  1121                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1122  000B68  908C               	bcf	140,0,c	;volatile
  1123  000B6A                     
  1124                           ;LCD.c: 108:  LEER_LCD();
  1125  000B6A  ECDC  F004         	call	_LEER_LCD	;wreg free
  1126  000B6E                     
  1127                           ;LCD.c: 109:  TRISD = 0b00000000;
  1128  000B6E  0E00               	movlw	0
  1129  000B70  6E95               	movwf	149,c	;volatile
  1130  000B72                     
  1131                           ;LCD.c: 111:         _delay(1200);
  1132  000B72  0EF0               	movlw	240
  1133  000B74                     u337:
  1134  000B74  D000               	nop2	
  1135  000B76  2EE8               	decfsz	wreg,f,c
  1136  000B78  D7FD               	bra	u337
  1137  000B7A                     
  1138                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1139  000B7A  928C               	bcf	140,1,c	;volatile
  1140  000B7C                     
  1141                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1142  000B7C  948C               	bcf	140,2,c	;volatile
  1143  000B7E                     
  1144                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1145  000B7E  908C               	bcf	140,0,c	;volatile
  1146  000B80                     
  1147                           ;LCD.c: 115:  aux = dato & 0xF0;
  1148  000B80  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1149  000B82  0BF0               	andlw	240
  1150  000B84  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1151  000B86                     
  1152                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1153  000B86  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1154  000B88  EC12  F006         	call	_ENVIA_NIBBLE
  1155  000B8C                     
  1156                           ;LCD.c: 117:  aux = dato<<4;
  1157  000B8C  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1158  000B8E  0BF0               	andlw	240
  1159  000B90  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1160  000B92                     
  1161                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1162  000B92  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1163  000B94  EC12  F006         	call	_ENVIA_NIBBLE
  1164  000B98  0012               	return		;funcret
  1165  000B9A                     __end_of_ENVIA_LCD_CMD:
  1166                           	opt callstack 0
  1167                           
  1168 ;; *************** function _ESCRIBE_MENSAJE *****************
  1169 ;; Defined at:
  1170 ;;		line 41 in file "LCD.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1173 ;;		 -> STR_2(13), STR_1(17), 
  1174 ;;  tam             1    5[COMRAM] unsigned char 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;  i               1    8[COMRAM] unsigned char 
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1186 ;;      Params:         3       0       0       0       0       0       0       0       0
  1187 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1188 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1189 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1190 ;;Total ram usage:        6 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    2
  1193 ;; This function calls:
  1194 ;;		_ENVIA_CHAR
  1195 ;; This function is called by:
  1196 ;;		_main
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text11
  1201  000AEE                     __ptext11:
  1202                           	opt callstack 0
  1203  000AEE                     _ESCRIBE_MENSAJE:
  1204                           	opt callstack 28
  1205  000AEE                     
  1206                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1207  000AEE  0E00               	movlw	0
  1208  000AF0  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1209                           
  1210                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1211  000AF2  0E00               	movlw	0
  1212  000AF4  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1213  000AF6  EF8C  F005         	goto	l1115
  1214  000AFA                     l1111:
  1215                           
  1216                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1217  000AFA  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1218  000AFC  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1219  000AFE  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1220  000B00  0E00               	movlw	0
  1221  000B02  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1222  000B04  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1223  000B06  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1224  000B0A  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1225  000B0E                     	if	0	;tblptru may be non-zero
  1226  000B0E                     	endif
  1227  000B0E                     	if	0	;tblptru may be non-zero
  1228  000B0E                     	endif
  1229  000B0E  0008               	tblrd		*
  1230  000B10  50F5               	movf	tablat,w,c
  1231  000B12  ECCD  F005         	call	_ENVIA_CHAR
  1232  000B16                     
  1233                           ;LCD.c: 47:  }
  1234  000B16  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1235  000B18                     l1115:
  1236  000B18  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1237  000B1A  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1238  000B1C  A0D8               	btfss	status,0,c
  1239  000B1E  EF93  F005         	goto	u271
  1240  000B22  EF95  F005         	goto	u270
  1241  000B26                     u271:
  1242  000B26  EF7D  F005         	goto	l1111
  1243  000B2A                     u270:
  1244  000B2A  0012               	return		;funcret
  1245  000B2C                     __end_of_ESCRIBE_MENSAJE:
  1246                           	opt callstack 0
  1247                           
  1248 ;; *************** function _ENVIA_CHAR *****************
  1249 ;; Defined at:
  1250 ;;		line 50 in file "LCD.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  dato            1    wreg     unsigned char 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  dato            1    1[COMRAM] unsigned char 
  1255 ;;  aux             1    2[COMRAM] unsigned char 
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, status,2, status,0, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1265 ;;      Params:         0       0       0       0       0       0       0       0       0
  1266 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1267 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1268 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1269 ;;Total ram usage:        2 bytes
  1270 ;; Hardware stack levels used:    1
  1271 ;; Hardware stack levels required when called:    1
  1272 ;; This function calls:
  1273 ;;		_ENVIA_NIBBLE
  1274 ;;		_LEER_LCD
  1275 ;; This function is called by:
  1276 ;;		_ESCRIBE_MENSAJE
  1277 ;;		_main
  1278 ;;		_GENERACARACTER
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	text12
  1283  000B9A                     __ptext12:
  1284                           	opt callstack 0
  1285  000B9A                     _ENVIA_CHAR:
  1286                           	opt callstack 28
  1287                           
  1288                           ;incstack = 0
  1289                           ;ENVIA_CHAR@dato stored from wreg
  1290  000B9A  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1291  000B9C                     
  1292                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1293  000B9C  808C               	bsf	140,0,c	;volatile
  1294  000B9E                     
  1295                           ;LCD.c: 54:  LEER_LCD();
  1296  000B9E  ECDC  F004         	call	_LEER_LCD	;wreg free
  1297  000BA2                     
  1298                           ;LCD.c: 55:  TRISD = 0x00;
  1299  000BA2  0E00               	movlw	0
  1300  000BA4  6E95               	movwf	149,c	;volatile
  1301  000BA6                     
  1302                           ;LCD.c: 56:         _delay(1200);
  1303  000BA6  0EF0               	movlw	240
  1304  000BA8                     u347:
  1305  000BA8  D000               	nop2	
  1306  000BAA  2EE8               	decfsz	wreg,f,c
  1307  000BAC  D7FD               	bra	u347
  1308  000BAE                     
  1309                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1310  000BAE  928C               	bcf	140,1,c	;volatile
  1311  000BB0                     
  1312                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1313  000BB0  948C               	bcf	140,2,c	;volatile
  1314  000BB2                     
  1315                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1316  000BB2  808C               	bsf	140,0,c	;volatile
  1317  000BB4                     
  1318                           ;LCD.c: 61:  aux = dato & 0xF0;
  1319  000BB4  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1320  000BB6  0BF0               	andlw	240
  1321  000BB8  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1322  000BBA                     
  1323                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1324  000BBA  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1325  000BBC  EC12  F006         	call	_ENVIA_NIBBLE
  1326  000BC0                     
  1327                           ;LCD.c: 63:  aux = dato << 4;
  1328  000BC0  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1329  000BC2  0BF0               	andlw	240
  1330  000BC4  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1331  000BC6                     
  1332                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1333  000BC6  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1334  000BC8  EC12  F006         	call	_ENVIA_NIBBLE
  1335  000BCC  0012               	return		;funcret
  1336  000BCE                     __end_of_ENVIA_CHAR:
  1337                           	opt callstack 0
  1338                           
  1339 ;; *************** function _LEER_LCD *****************
  1340 ;; Defined at:
  1341 ;;		line 121 in file "LCD.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;		None
  1344 ;; Auto vars:     Size  Location     Type
  1345 ;;  aux             1    0[COMRAM] unsigned char 
  1346 ;; Return value:  Size  Location     Type
  1347 ;;                  1    wreg      void 
  1348 ;; Registers used:
  1349 ;;		wreg, status,2, status,0
  1350 ;; Tracked objects:
  1351 ;;		On entry : 0/0
  1352 ;;		On exit  : 0/0
  1353 ;;		Unchanged: 0/0
  1354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1355 ;;      Params:         0       0       0       0       0       0       0       0       0
  1356 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1357 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1358 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1359 ;;Total ram usage:        1 bytes
  1360 ;; Hardware stack levels used:    1
  1361 ;; This function calls:
  1362 ;;		Nothing
  1363 ;; This function is called by:
  1364 ;;		_ENVIA_CHAR
  1365 ;;		_ENVIA_LCD_CMD
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           	psect	text13
  1370  0009B8                     __ptext13:
  1371                           	opt callstack 0
  1372  0009B8                     _LEER_LCD:
  1373                           	opt callstack 27
  1374  0009B8                     
  1375                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1376  0009B8  0EF8               	movlw	248
  1377  0009BA  6E95               	movwf	149,c	;volatile
  1378  0009BC                     
  1379                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1380  0009BC  908C               	bcf	140,0,c	;volatile
  1381  0009BE                     
  1382                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1383  0009BE  828C               	bsf	140,1,c	;volatile
  1384  0009C0                     
  1385                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1386  0009C0  848C               	bsf	140,2,c	;volatile
  1387  0009C2                     
  1388                           ;LCD.c: 128:         _delay(1200);
  1389  0009C2  0EF0               	movlw	240
  1390  0009C4                     u357:
  1391  0009C4  D000               	nop2	
  1392  0009C6  2EE8               	decfsz	wreg,f,c
  1393  0009C8  D7FD               	bra	u357
  1394  0009CA                     
  1395                           ;LCD.c: 130:  aux = PORTD;
  1396  0009CA  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1397  0009CE                     
  1398                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1399  0009CE  948C               	bcf	140,2,c	;volatile
  1400  0009D0                     
  1401                           ;LCD.c: 132:         _delay(1200);
  1402  0009D0  0EF0               	movlw	240
  1403  0009D2                     u367:
  1404  0009D2  D000               	nop2	
  1405  0009D4  2EE8               	decfsz	wreg,f,c
  1406  0009D6  D7FD               	bra	u367
  1407  0009D8                     
  1408                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1409  0009D8  848C               	bsf	140,2,c	;volatile
  1410  0009DA                     
  1411                           ;LCD.c: 135:         _delay(1200);
  1412  0009DA  0EF0               	movlw	240
  1413  0009DC                     u377:
  1414  0009DC  D000               	nop2	
  1415  0009DE  2EE8               	decfsz	wreg,f,c
  1416  0009E0  D7FD               	bra	u377
  1417  0009E2                     
  1418                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1419  0009E2  948C               	bcf	140,2,c	;volatile
  1420  0009E4                     l829:
  1421                           
  1422                           ;LCD.c: 138:  aux = aux & 0x80;
  1423  0009E4  5001               	movf	LEER_LCD@aux^0,w,c
  1424  0009E6  0B80               	andlw	128
  1425  0009E8  6E01               	movwf	LEER_LCD@aux^0,c
  1426                           
  1427                           ;LCD.c: 139:  while(aux == 0x80)
  1428  0009EA  EF0B  F005         	goto	l843
  1429  0009EE                     l67:
  1430                           
  1431                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1432  0009EE  848C               	bsf	140,2,c	;volatile
  1433  0009F0                     
  1434                           ;LCD.c: 142:             _delay(1200);
  1435  0009F0  0EF0               	movlw	240
  1436  0009F2                     u387:
  1437  0009F2  D000               	nop2	
  1438  0009F4  2EE8               	decfsz	wreg,f,c
  1439  0009F6  D7FD               	bra	u387
  1440  0009F8                     
  1441                           ;LCD.c: 143:             aux = PORTD;
  1442  0009F8  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1443  0009FC                     
  1444                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1445  0009FC  948C               	bcf	140,2,c	;volatile
  1446                           
  1447                           ;LCD.c: 145:             _delay(1200);
  1448  0009FE  0EF0               	movlw	240
  1449  000A00                     u397:
  1450  000A00  D000               	nop2	
  1451  000A02  2EE8               	decfsz	wreg,f,c
  1452  000A04  D7FD               	bra	u397
  1453  000A06                     
  1454                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1455  000A06  848C               	bsf	140,2,c	;volatile
  1456                           
  1457                           ;LCD.c: 147:             _delay(1200);
  1458  000A08  0EF0               	movlw	240
  1459  000A0A                     u407:
  1460  000A0A  D000               	nop2	
  1461  000A0C  2EE8               	decfsz	wreg,f,c
  1462  000A0E  D7FD               	bra	u407
  1463  000A10                     
  1464                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1465  000A10  948C               	bcf	140,2,c	;volatile
  1466  000A12  EFF2  F004         	goto	l829
  1467  000A16                     l843:
  1468                           
  1469                           ;LCD.c: 139:  while(aux == 0x80)
  1470  000A16  0E80               	movlw	128
  1471  000A18  1801               	xorwf	LEER_LCD@aux^0,w,c
  1472  000A1A  B4D8               	btfsc	status,2,c
  1473  000A1C  EF12  F005         	goto	u11
  1474  000A20  EF14  F005         	goto	u10
  1475  000A24                     u11:
  1476  000A24  EFF7  F004         	goto	l67
  1477  000A28                     u10:
  1478  000A28  0012               	return		;funcret
  1479  000A2A                     __end_of_LEER_LCD:
  1480                           	opt callstack 0
  1481                           
  1482 ;; *************** function _ENVIA_NIBBLE *****************
  1483 ;; Defined at:
  1484 ;;		line 93 in file "LCD.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;  dato            1    wreg     unsigned char 
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;  dato            1    0[COMRAM] unsigned char 
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  1    wreg      void 
  1491 ;; Registers used:
  1492 ;;		wreg, status,2, status,0
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1498 ;;      Params:         0       0       0       0       0       0       0       0       0
  1499 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1500 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1501 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1502 ;;Total ram usage:        1 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; This function calls:
  1505 ;;		Nothing
  1506 ;; This function is called by:
  1507 ;;		_ENVIA_CHAR
  1508 ;;		_LCD_CONFIG
  1509 ;;		_ENVIA_LCD_CMD
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           	psect	text14
  1514  000C24                     __ptext14:
  1515                           	opt callstack 0
  1516  000C24                     _ENVIA_NIBBLE:
  1517                           	opt callstack 28
  1518                           
  1519                           ;incstack = 0
  1520                           ;ENVIA_NIBBLE@dato stored from wreg
  1521  000C24  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1522  000C26                     
  1523                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1524  000C26  0E0F               	movlw	15
  1525  000C28  168C               	andwf	140,f,c	;volatile
  1526                           
  1527                           ;LCD.c: 96:  dato &= 0xF0;
  1528  000C2A  0EF0               	movlw	240
  1529  000C2C  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1530                           
  1531                           ;LCD.c: 97:  LATD|= dato;
  1532  000C2E  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1533  000C30  128C               	iorwf	140,f,c	;volatile
  1534  000C32                     
  1535                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1536  000C32  848C               	bsf	140,2,c	;volatile
  1537  000C34                     
  1538                           ;LCD.c: 100:         _delay(1200);
  1539  000C34  0EF0               	movlw	240
  1540  000C36                     u417:
  1541  000C36  D000               	nop2	
  1542  000C38  2EE8               	decfsz	wreg,f,c
  1543  000C3A  D7FD               	bra	u417
  1544  000C3C                     
  1545                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1546  000C3C  948C               	bcf	140,2,c	;volatile
  1547  000C3E  0012               	return		;funcret
  1548  000C40                     __end_of_ENVIA_NIBBLE:
  1549                           	opt callstack 0
  1550                           
  1551                           	psect	rparam
  1552  0000                     tosu	equ	0xFFF
  1553                           tosh	equ	0xFFE
  1554                           tosl	equ	0xFFD
  1555                           stkptr	equ	0xFFC
  1556                           pclatu	equ	0xFFB
  1557                           pclath	equ	0xFFA
  1558                           pcl	equ	0xFF9
  1559                           tblptru	equ	0xFF8
  1560                           tblptrh	equ	0xFF7
  1561                           tblptrl	equ	0xFF6
  1562                           tablat	equ	0xFF5
  1563                           prodh	equ	0xFF4
  1564                           prodl	equ	0xFF3
  1565                           indf0	equ	0xFEF
  1566                           postinc0	equ	0xFEE
  1567                           postdec0	equ	0xFED
  1568                           preinc0	equ	0xFEC
  1569                           plusw0	equ	0xFEB
  1570                           fsr0h	equ	0xFEA
  1571                           fsr0l	equ	0xFE9
  1572                           wreg	equ	0xFE8
  1573                           indf1	equ	0xFE7
  1574                           postinc1	equ	0xFE6
  1575                           postdec1	equ	0xFE5
  1576                           preinc1	equ	0xFE4
  1577                           plusw1	equ	0xFE3
  1578                           fsr1h	equ	0xFE2
  1579                           fsr1l	equ	0xFE1
  1580                           bsr	equ	0xFE0
  1581                           indf2	equ	0xFDF
  1582                           postinc2	equ	0xFDE
  1583                           postdec2	equ	0xFDD
  1584                           preinc2	equ	0xFDC
  1585                           plusw2	equ	0xFDB
  1586                           fsr2h	equ	0xFDA
  1587                           fsr2l	equ	0xFD9
  1588                           status	equ	0xFD8


Data Sizes:
    Strings     30
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      22
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[13]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _arrancaLCD->_CURSOR_ONOFF
    _arrancaLCD->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2917
                                             14 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                         _arrancaLCD
                          _convierte
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1397
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _arrancaLCD                                           1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _arrancaLCD
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      16       1       23.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      16      20        0.0%
DATA                 0      0      16       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Mar 03 15:31:40 2020

                      l24 0B64                        l42 0BFC                        l51 0BCC  
                      l60 0C3E                        l37 0C60                        l54 0C68  
                      l63 0B98                        l48 0B2A                        l57 0AEC  
                      l67 09EE                        l69 0A28                        u10 0A28  
                      u11 0A24                        u20 0BE0                        u21 0BDC  
                      u30 0BF6                        u31 0BF2             ENVIA_CHAR@aux 0003  
                     l120 0942                       l117 0C22                       l126 084C  
                     l632 09B6                       l625 09AE                       l642 0A8C  
                     l811 09BE                       l635 0A84                       l821 09D0  
                     l813 09C0                       l901 0BBA                       l831 09F0  
                     l823 09D8                       l815 09C2                       l807 09B8  
                     l903 0BC0                       l911 0A92                       l833 09F8  
                     l825 09DA                       l817 09CA                       l809 09BC  
                     l905 0BC6                       l921 0AC8                       l913 0A98  
                     l851 0C3C                       l835 09FC                       l843 0A16  
                     l827 09E2                       l819 09CE                       l907 0C62  
                     l931 0AE6                       l923 0ACE                       l915 0AA6  
                     l845 0C26                       l837 0A06                       l829 09E4  
                     l861 0B7A                       l853 0B68                       l925 0AD4  
                     l917 0ABA                       l909 0A8E                       l847 0C32  
                     l839 0A10                       l871 0B8C                       l863 0B7C  
                     l855 0B6A                       l927 0ADA                       l919 0AC2  
                     l849 0C34                       l873 0B92                       l865 0B7E  
                     l857 0B6E                       l881 0BE6                       l929 0AE0  
                     l891 0BA6                       l867 0B80                       l859 0B72  
                     l875 0C5A                       l883 0BF6                       l893 0BAE  
                     l885 0B9C                       l869 0B86                       l877 0BD0  
                     l895 0BB0                       l887 0B9E                       l879 0BE0  
                     l991 0C06                       l897 0BB2                       l889 0BA2  
                     l993 0C14                       l899 0BB4                       l995 0C1A  
                     l987 0BFE                       l997 0C1E                       l989 0C02  
                     u200 097C                       u201 0978                       u210 0998  
                     u211 0994                       u220 0A3C                       u221 0A38  
                     u230 0A5A                       u231 0A56                       u240 0A70  
                     u241 0A6C                       u250 0B3E                       u251 0B3A  
                     u307 0A9E                       u260 0B5C                       u261 0B58  
                     u317 0AAC                       u270 0B2A                       u190 095E  
                     u407 0A0A                       u271 0B26                       u327 0ABC  
                     u191 095A                       u280 085A                       u417 0C36  
                     u337 0B74                       u281 0856                       u347 0BA8  
                     u357 09C4                       u367 09D2                       u377 09DC  
                     u297 0C0C                       u387 09F2                       u397 0A00  
            __CFG_BOR$OFF 000000               LEER_LCD@aux 0001                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001              __CFG_LVP$OFF 000000  
          ENVIA_CHAR@dato 0002              __CFG_WDT$OFF 000000                      l1101 0B2E  
                    l1111 0AFA                      l1103 0B3E                      l1113 0B16  
                    l1105 0B4A                      l1121 0824                      l1115 0B18  
                    l1107 0B5C                      l1131 084A                      l1123 0828  
                    l1109 0AEE                      l1117 08BA                      l1141 0892  
                    l1133 085A                      l1125 082C                      l1071 096E  
                    l1063 0944                      l1143 089A                      l1135 086C  
                    l1127 0830                      l1119 0820                      l1081 09A2  
                    l1073 097C                      l1065 094C                      l1145 08A2  
                    l1137 0878                      l1129 083A                      l1083 09A8  
                    l1075 0982                      l1067 095E                      l1091 0A4C  
                    l1147 08AA                      l1139 0882                      l1077 0998  
                    l1069 0966                      l1093 0A5A                      l1085 0A2A  
                    l1079 09A0                      l1095 0A70                      l1087 0A3C  
                    l1097 0A78                      l1089 0A44                      l1099 0A7E  
                    STR_1 0801                      STR_2 0812                      _LATD 000F8C  
            __CFG_PWRT$ON 000000                      _main 0820                      start 0000  
           ?_CURSOR_ONOFF 0001              ___param_bank 000000           ??_ENVIA_LCD_CMD 0002  
        __end_of_LEER_LCD 0A2A       __size_of_BORRAR_LCD 0008                     ?_main 0001  
         __end_of___lwdiv 09B8           __end_of___lwmod 0A8E                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISD 000F95       __size_of_ENVIA_CHAR 0034  
             ?_POS_CURSOR 0004                     tablat 000FF5                     status 000FD8  
          ??_CURSOR_ONOFF 0004           __initialization 0C40              __end_of_main 08BA  
         _ESCRIBE_MENSAJE 0AEE                    ??_main 000F             __activetblptr 000001  
                  _ADCON0 000FC2                    _ADCON1 000FC1                    _ADCON2 000FC0  
                  _ADRESH 000FC4                    _ADRESL 000FC3                    _decena 0014  
    __end_of_ENVIA_NIBBLE 0C40                 ??___lwdiv 000A                 ??___lwmod 0005  
     __size_of_POS_CURSOR 003A                    _millar 0016                    _unidad 0013  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0C4C  
         __CFG_PBADEN$OFF 000000           __CFG_FOSC$XT_XT 000000              ??_LCD_CONFIG 0004  
           ___rparam_used 000001              ??_ENVIA_CHAR 0002   __end_of_ESCRIBE_MENSAJE 0B2C  
          __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0C6A          ENVIA_LCD_CMD@aux 0003  
    __end_of_CURSOR_ONOFF 0BFE        __end_of_LCD_CONFIG 0AEE        __end_of_ENVIA_CHAR 0BCE  
      __size_of_convierte 008A                ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001  
              _arrancaLCD 0BFE              ??_POS_CURSOR 0005     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0004  
                 ___lwdiv 0944                   ___lwmod 0A2A              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0B9A         __end_of_convierte 0944                   __pcinit 0C40  
      __end_of_POS_CURSOR 0B66                   __ramtop 0800                   _centena 0015  
                 __ptext0 0820                   __ptext1 08BA                   __ptext2 0A2A  
                 __ptext3 0944                   __ptext4 0BFE                   __ptext5 0A8E  
                 __ptext6 0BCE                   __ptext7 0C5A                   __ptext8 0C62  
                 __ptext9 0B2C              _ENVIA_NIBBLE 0C24      end_of_initialization 0C4C  
   __size_of_CURSOR_ONOFF 0030               ?_arrancaLCD 0001         __size_of_LEER_LCD 0072  
            _CURSOR_ONOFF 0BCE        CURSOR_ONOFF@estado 0004             ??_CURSOR_HOME 0004  
     start_initialization 0C40         ENVIA_LCD_CMD@dato 0002       __size_of_arrancaLCD 0026  
             __pbssCOMRAM 0011       __end_of_CURSOR_HOME 0C62          ___lwdiv@dividend 0006  
                ?___lwdiv 0006                  ?___lwmod 0001               __smallconst 0800  
               _convierte 08BA           convierte@numero 000D          ___lwdiv@quotient 000A  
                _LEER_LCD 09B8                  _LATDbits 000F8C          ESCRIBE_MENSAJE@i 0009  
          POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 003E                _ADCON0bits 000FC2  
              ?_convierte 000D              ??_arrancaLCD 0005               _CURSOR_HOME 0C5A  
  __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000                  __Lrparam 0000  
            __Lsmallconst 0800        __end_of_arrancaLCD 0C24          __size_of___lwdiv 0074  
        __size_of___lwmod 0064           ___lwdiv@divisor 0008           ___lwdiv@counter 000C  
                __ptext10 0B66                  __ptext11 0AEE                  __ptext12 0B9A  
                __ptext13 09B8                  __ptext14 0C24                _BORRAR_LCD 0C62  
                _lecturon 0011             __size_of_main 009A                _LCD_CONFIG 0A8E  
              _ENVIA_CHAR 0B9A             _ENVIA_LCD_CMD 0B66               ??_convierte 000F  
       ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004          ___lwmod@dividend 0001  
          ?_ENVIA_LCD_CMD 0001           ___lwmod@divisor 0003           ___lwmod@counter 0005  
             ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001                _POS_CURSOR 0B2C  
             ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006               ?_ENVIA_CHAR 0001  
       POS_CURSOR@columna 0004  
