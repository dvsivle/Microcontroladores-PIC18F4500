

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 24 12:15:13 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 2.05
    28                           ; Generated 20/12/2018 GMT
    29                           ; 
    30                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     _PORTBbits	set	3969
    62  0000                     _CCP1CON	set	4029
    63  0000                     _T2CON	set	4042
    64  0000                     _TRISCbits	set	3988
    65  0000                     _CCPR1L	set	4030
    66  0000                     _PR2	set	4043
    67  0000                     _PORTD	set	3971
    68  0000                     _LATD	set	3980
    69  0000                     _TRISD	set	3989
    70  0000                     _LATDbits	set	3980
    71  0000                     _ADRESL	set	4035
    72  0000                     _ADCON0bits	set	4034
    73  0000                     _ADCON2	set	4032
    74  0000                     _ADCON0	set	4034
    75  0000                     _ADCON1	set	4033
    76  0000                     _TRISB	set	3987
    77  0000                     _TRISE	set	3990
    78  0000                     _TRISA	set	3986
    79  0000                     _ADRESH	set	4036
    80                           
    81                           	psect	smallconst
    82  000800                     __psmallconst:
    83                           	opt callstack 0
    84  000800  00                 	db	0
    85  000801                     STR_1:
    86  000801  4C                 	db	76	;'L'
    87  000802  65                 	db	101	;'e'
    88  000803  79                 	db	121	;'y'
    89  000804  65                 	db	101	;'e'
    90  000805  6E                 	db	110	;'n'
    91  000806  64                 	db	100	;'d'
    92  000807  6F                 	db	111	;'o'
    93  000808  20                 	db	32
    94  000809  50                 	db	80	;'P'
    95  00080A  4F                 	db	79	;'O'
    96  00080B  54                 	db	84	;'T'
    97  00080C  3A                 	db	58	;':'
    98  00080D  00                 	db	0
    99                           
   100                           ; #config settings
   101  00080E  00                 	db	0	; dummy byte at the end
   102  0000                     
   103                           	psect	cinit
   104  000CFA                     __pcinit:
   105                           	opt callstack 0
   106  000CFA                     start_initialization:
   107                           	opt callstack 0
   108  000CFA                     __initialization:
   109                           	opt callstack 0
   110                           
   111                           ; Clear objects allocated to COMRAM (18 bytes)
   112  000CFA  EE00  F001         	lfsr	0,__pbssCOMRAM
   113  000CFE  0E12               	movlw	18
   114  000D00                     clear_0:
   115  000D00  6AEE               	clrf	postinc0,c
   116  000D02  06E8               	decf	wreg,f,c
   117  000D04  E1FD               	bnz	clear_0
   118  000D06                     end_of_initialization:
   119                           	opt callstack 0
   120  000D06                     __end_of__initialization:
   121                           	opt callstack 0
   122  000D06  0E00               	movlw	low (__Lmediumconst shr (0+16))
   123  000D08  6EF8               	movwf	tblptru,c
   124  000D0A  0100               	movlb	0
   125  000D0C  EF81  F004         	goto	_main	;jump to C main() function
   126                           
   127                           	psect	bssCOMRAM
   128  000001                     __pbssCOMRAM:
   129                           	opt callstack 0
   130  000001                     _temporal3:
   131                           	opt callstack 0
   132  000001                     	ds	2
   133  000003                     _temporal2:
   134                           	opt callstack 0
   135  000003                     	ds	2
   136  000005                     _temporal:
   137                           	opt callstack 0
   138  000005                     	ds	2
   139  000007                     _diguni:
   140                           	opt callstack 0
   141  000007                     	ds	2
   142  000009                     _digdec:
   143                           	opt callstack 0
   144  000009                     	ds	2
   145  00000B                     _digcen:
   146                           	opt callstack 0
   147  00000B                     	ds	2
   148  00000D                     _digmil:
   149                           	opt callstack 0
   150  00000D                     	ds	2
   151  00000F                     _digdmi:
   152                           	opt callstack 0
   153  00000F                     	ds	2
   154  000011                     _resultadomon:
   155                           	opt callstack 0
   156  000011                     	ds	2
   157                           
   158                           	psect	cstackCOMRAM
   159  000013                     __pcstackCOMRAM:
   160                           	opt callstack 0
   161  000013                     ??_ADC_CONFIG:
   162  000013                     ?_ADC_CONVERTIR:
   163                           	opt callstack 0
   164  000013                     ?___wmul:
   165                           	opt callstack 0
   166  000013                     ?___awdiv:
   167                           	opt callstack 0
   168  000013                     ENVIA_NIBBLE@dato:
   169                           	opt callstack 0
   170  000013                     LEER_LCD@aux:
   171                           	opt callstack 0
   172  000013                     ___wmul@multiplier:
   173                           	opt callstack 0
   174  000013                     ___awdiv@dividend:
   175                           	opt callstack 0
   176                           
   177                           ; 2 bytes @ 0x0
   178  000013                     	ds	1
   179  000014                     ENVIA_CHAR@dato:
   180                           	opt callstack 0
   181  000014                     ENVIA_LCD_CMD@dato:
   182                           	opt callstack 0
   183                           
   184                           ; 1 bytes @ 0x1
   185  000014                     	ds	1
   186  000015                     ??_ADC_CONVERTIR:
   187  000015                     ADC_CONFIG@canal:
   188                           	opt callstack 0
   189  000015                     ENVIA_CHAR@aux:
   190                           	opt callstack 0
   191  000015                     ENVIA_LCD_CMD@aux:
   192                           	opt callstack 0
   193  000015                     ___wmul@multiplicand:
   194                           	opt callstack 0
   195  000015                     ___awdiv@divisor:
   196                           	opt callstack 0
   197                           
   198                           ; 2 bytes @ 0x2
   199  000015                     	ds	1
   200  000016                     ??_LCD_CONFIG:
   201  000016                     POS_CURSOR@columna:
   202                           	opt callstack 0
   203  000016                     CURSOR_ONOFF@estado:
   204                           	opt callstack 0
   205  000016                     ADC_CONVERTIR@num:
   206                           	opt callstack 0
   207  000016                     ESCRIBE_MENSAJE@cadena:
   208                           	opt callstack 0
   209                           
   210                           ; 2 bytes @ 0x3
   211  000016                     	ds	1
   212  000017                     POS_CURSOR@fila:
   213                           	opt callstack 0
   214  000017                     ___awdiv@counter:
   215                           	opt callstack 0
   216  000017                     ___wmul@product:
   217                           	opt callstack 0
   218                           
   219                           ; 2 bytes @ 0x4
   220  000017                     	ds	1
   221  000018                     ESCRIBE_MENSAJE@tam:
   222                           	opt callstack 0
   223  000018                     ___awdiv@sign:
   224                           	opt callstack 0
   225                           
   226                           ; 1 bytes @ 0x5
   227  000018                     	ds	1
   228  000019                     ??_ESCRIBE_MENSAJE:
   229  000019                     ___awdiv@quotient:
   230                           	opt callstack 0
   231                           
   232                           ; 2 bytes @ 0x6
   233  000019                     	ds	2
   234  00001B                     ESCRIBE_MENSAJE@i:
   235                           	opt callstack 0
   236  00001B                     DIGITOS@valor:
   237                           	opt callstack 0
   238                           
   239                           ; 2 bytes @ 0x8
   240  00001B                     	ds	2
   241  00001D                     ??_main:
   242                           
   243                           ; 1 bytes @ 0xA
   244  00001D                     	ds	2
   245                           
   246 ;;
   247 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   248 ;;
   249 ;; *************** function _main *****************
   250 ;; Defined at:
   251 ;;		line 50 in file "pantalleitor3.c"
   252 ;; Parameters:    Size  Location     Type
   253 ;;		None
   254 ;; Auto vars:     Size  Location     Type
   255 ;;		None
   256 ;; Return value:  Size  Location     Type
   257 ;;                  1    wreg      void 
   258 ;; Registers used:
   259 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   260 ;; Tracked objects:
   261 ;;		On entry : 0/0
   262 ;;		On exit  : 0/0
   263 ;;		Unchanged: 0/0
   264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   265 ;;      Params:         0       0       0       0       0       0       0       0       0
   266 ;;      Locals:         0       0       0       0       0       0       0       0       0
   267 ;;      Temps:          2       0       0       0       0       0       0       0       0
   268 ;;      Totals:         2       0       0       0       0       0       0       0       0
   269 ;;Total ram usage:        2 bytes
   270 ;; Hardware stack levels required when called:    3
   271 ;; This function calls:
   272 ;;		_ADC_CONFIG
   273 ;;		_ADC_CONVERTIR
   274 ;;		_CURSOR_HOME
   275 ;;		_CURSOR_ONOFF
   276 ;;		_DIGITOS
   277 ;;		_ENVIA_CHAR
   278 ;;		_ESCRIBE_MENSAJE
   279 ;;		_LCD_CONFIG
   280 ;;		_POS_CURSOR
   281 ;; This function is called by:
   282 ;;		Startup code after reset
   283 ;; This function uses a non-reentrant model
   284 ;;
   285                           
   286                           	psect	text0
   287  000902                     __ptext0:
   288                           	opt callstack 0
   289  000902                     _main:
   290                           	opt callstack 28
   291                           
   292                           ;pantalleitor3.c: 52:     TRISD = 0x00;
   293                           
   294                           ;incstack = 0
   295  000902  0E00               	movlw	0
   296  000904  6E95               	movwf	3989,c	;volatile
   297                           
   298                           ;pantalleitor3.c: 53:     _delay((unsigned long)((500)*(48000000UL/4000.0)));
   299  000906  0E1F               	movlw	31
   300  000908  6E1E               	movwf	(??_main+1)& (0+255),c
   301  00090A  0E71               	movlw	113
   302  00090C  6E1D               	movwf	??_main& (0+255),c
   303  00090E  0E1E               	movlw	30
   304  000910                     u317:
   305  000910  2EE8               	decfsz	wreg,f,c
   306  000912  D7FE               	bra	u317
   307  000914  2E1D               	decfsz	??_main& (0+255),f,c
   308  000916  D7FC               	bra	u317
   309  000918  2E1E               	decfsz	(??_main+1)& (0+255),f,c
   310  00091A  D7FA               	bra	u317
   311  00091C  D000               	nop2	
   312                           
   313                           ;pantalleitor3.c: 54:     LCD_CONFIG();
   314  00091E  ECA9  F005         	call	_LCD_CONFIG	;wreg free
   315                           
   316                           ;pantalleitor3.c: 55:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   317  000922  0EEA               	movlw	234
   318  000924  6E1D               	movwf	??_main& (0+255),c
   319  000926  0EC3               	movlw	195
   320  000928                     u327:
   321  000928  2EE8               	decfsz	wreg,f,c
   322  00092A  D7FE               	bra	u327
   323  00092C  2E1D               	decfsz	??_main& (0+255),f,c
   324  00092E  D7FC               	bra	u327
   325  000930  F000               	nop	
   326                           
   327                           ;pantalleitor3.c: 56:     CURSOR_ONOFF(1);
   328  000932  0E01               	movlw	1
   329  000934  EC61  F006         	call	_CURSOR_ONOFF
   330                           
   331                           ;pantalleitor3.c: 62:     ADC_CONFIG(0);
   332  000938  0E00               	movlw	0
   333  00093A  ECDE  F004         	call	_ADC_CONFIG
   334                           
   335                           ;pantalleitor3.c: 65:     PR2 = 249;
   336  00093E  0EF9               	movlw	249
   337  000940  6ECB               	movwf	4043,c	;volatile
   338                           
   339                           ;pantalleitor3.c: 66:     CCPR1L = 50;
   340  000942  0E32               	movlw	50
   341  000944  6EBE               	movwf	4030,c	;volatile
   342                           
   343                           ;pantalleitor3.c: 67:     TRISCbits.RC2 = 0;
   344  000946  9494               	bcf	3988,2,c	;volatile
   345                           
   346                           ;pantalleitor3.c: 68:     T2CON = 0x05;
   347  000948  0E05               	movlw	5
   348  00094A  6ECA               	movwf	4042,c	;volatile
   349                           
   350                           ;pantalleitor3.c: 69:     CCP1CON = 0x0C;
   351  00094C  0E0C               	movlw	12
   352  00094E  6EBD               	movwf	4029,c	;volatile
   353  000950                     l1335:
   354                           
   355                           ;pantalleitor3.c: 73:         if(PORTBbits.RB0 == 0){
   356  000950  B081               	btfsc	3969,0,c	;volatile
   357  000952  D002               	goto	l1339
   358                           
   359                           ;pantalleitor3.c: 74:             CCPR1L = 50;
   360  000954  0E32               	movlw	50
   361  000956  D001               	goto	L1
   362  000958                     l1339:
   363                           
   364                           ;pantalleitor3.c: 77:             CCPR1L = 200;
   365  000958  0EC8               	movlw	200
   366  00095A                     L1:
   367  00095A  6EBE               	movwf	4030,c	;volatile
   368                           
   369                           ;pantalleitor3.c: 80:         CURSOR_HOME();
   370  00095C  EC88  F006         	call	_CURSOR_HOME	;wreg free
   371                           
   372                           ;pantalleitor3.c: 81:         ESCRIBE_MENSAJE("Leyendo POT:", 11);
   373  000960  0E01               	movlw	low STR_1
   374  000962  6E16               	movwf	ESCRIBE_MENSAJE@cadena,c
   375  000964  0E08               	movlw	high STR_1
   376  000966  6E17               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   377  000968  0E0B               	movlw	11
   378  00096A  6E18               	movwf	ESCRIBE_MENSAJE@tam,c
   379  00096C  EC0D  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   380                           
   381                           ;pantalleitor3.c: 82:         resultadomon = ADC_CONVERTIR();
   382  000970  EC26  F006         	call	_ADC_CONVERTIR	;wreg free
   383  000974  C013  F011         	movff	?_ADC_CONVERTIR,_resultadomon
   384  000978  C014  F012         	movff	?_ADC_CONVERTIR+1,_resultadomon+1
   385                           
   386                           ;pantalleitor3.c: 83:         DIGITOS(resultadomon);
   387  00097C  C011  F01B         	movff	_resultadomon,DIGITOS@valor
   388  000980  C012  F01C         	movff	_resultadomon+1,DIGITOS@valor+1
   389  000984  EC08  F004         	call	_DIGITOS	;wreg free
   390                           
   391                           ;pantalleitor3.c: 84:         POS_CURSOR(2,0);
   392  000988  0E00               	movlw	0
   393  00098A  6E16               	movwf	POS_CURSOR@columna,c
   394  00098C  0E02               	movlw	2
   395  00098E  EC4F  F006         	call	_POS_CURSOR
   396                           
   397                           ;pantalleitor3.c: 85:         ENVIA_CHAR(digdmi+0x30);
   398  000992  500F               	movf	_digdmi,w,c
   399  000994  0F30               	addlw	48
   400  000996  ECD9  F005         	call	_ENVIA_CHAR
   401                           
   402                           ;pantalleitor3.c: 86:         ENVIA_CHAR(digmil+0x30);
   403  00099A  500D               	movf	_digmil,w,c
   404  00099C  0F30               	addlw	48
   405  00099E  ECD9  F005         	call	_ENVIA_CHAR
   406                           
   407                           ;pantalleitor3.c: 87:         ENVIA_CHAR(digcen+0x30);
   408  0009A2  500B               	movf	_digcen,w,c
   409  0009A4  0F30               	addlw	48
   410  0009A6  ECD9  F005         	call	_ENVIA_CHAR
   411                           
   412                           ;pantalleitor3.c: 88:         ENVIA_CHAR(digdec+0x30);
   413  0009AA  5009               	movf	_digdec,w,c
   414  0009AC  0F30               	addlw	48
   415  0009AE  ECD9  F005         	call	_ENVIA_CHAR
   416                           
   417                           ;pantalleitor3.c: 89:         ENVIA_CHAR(diguni+0x30);
   418  0009B2  5007               	movf	_diguni,w,c
   419  0009B4  0F30               	addlw	48
   420  0009B6  ECD9  F005         	call	_ENVIA_CHAR
   421  0009BA  D7CA               	goto	l1335
   422  0009BC                     __end_of_main:
   423                           	opt callstack 0
   424                           
   425 ;; *************** function _POS_CURSOR *****************
   426 ;; Defined at:
   427 ;;		line 6 in file "LCD.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;  fila            1    wreg     unsigned char 
   430 ;;  columna         1    3[COMRAM] unsigned char 
   431 ;; Auto vars:     Size  Location     Type
   432 ;;  fila            1    4[COMRAM] unsigned char 
   433 ;; Return value:  Size  Location     Type
   434 ;;                  1    wreg      void 
   435 ;; Registers used:
   436 ;;		wreg, status,2, status,0, cstack
   437 ;; Tracked objects:
   438 ;;		On entry : 0/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   442 ;;      Params:         1       0       0       0       0       0       0       0       0
   443 ;;      Locals:         1       0       0       0       0       0       0       0       0
   444 ;;      Temps:          0       0       0       0       0       0       0       0       0
   445 ;;      Totals:         2       0       0       0       0       0       0       0       0
   446 ;;Total ram usage:        2 bytes
   447 ;; Hardware stack levels used:    1
   448 ;; Hardware stack levels required when called:    2
   449 ;; This function calls:
   450 ;;		_ENVIA_LCD_CMD
   451 ;; This function is called by:
   452 ;;		_main
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           	psect	text1
   457  000C9E                     __ptext1:
   458                           	opt callstack 0
   459  000C9E                     _POS_CURSOR:
   460                           	opt callstack 28
   461                           
   462                           ;incstack = 0
   463                           ;POS_CURSOR@fila stored from wreg
   464  000C9E  6E17               	movwf	POS_CURSOR@fila,c
   465                           
   466                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   467  000CA0  0417               	decf	POS_CURSOR@fila,w,c
   468  000CA2  A4D8               	btfss	status,2,c
   469  000CA4  D005               	goto	l1289
   470                           
   471                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   472  000CA6  5016               	movf	POS_CURSOR@columna,w,c
   473  000CA8  0F80               	addlw	128
   474  000CAA  ECF3  F005         	call	_ENVIA_LCD_CMD
   475                           
   476                           ;LCD.c: 11:  }
   477  000CAE  0012               	return	
   478  000CB0                     l1289:
   479  000CB0  0E02               	movlw	2
   480  000CB2  1817               	xorwf	POS_CURSOR@fila,w,c
   481  000CB4  A4D8               	btfss	status,2,c
   482  000CB6  0012               	return	
   483                           
   484                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   485  000CB8  5016               	movf	POS_CURSOR@columna,w,c
   486  000CBA  0FC0               	addlw	192
   487  000CBC  ECF3  F005         	call	_ENVIA_LCD_CMD
   488  000CC0  0012               	return		;funcret
   489  000CC2                     __end_of_POS_CURSOR:
   490                           	opt callstack 0
   491                           
   492 ;; *************** function _LCD_CONFIG *****************
   493 ;; Defined at:
   494 ;;		line 72 in file "LCD.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;		None
   497 ;; Auto vars:     Size  Location     Type
   498 ;;		None
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg, status,2, status,0, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   508 ;;      Params:         0       0       0       0       0       0       0       0       0
   509 ;;      Locals:         0       0       0       0       0       0       0       0       0
   510 ;;      Temps:          1       0       0       0       0       0       0       0       0
   511 ;;      Totals:         1       0       0       0       0       0       0       0       0
   512 ;;Total ram usage:        1 bytes
   513 ;; Hardware stack levels used:    1
   514 ;; Hardware stack levels required when called:    2
   515 ;; This function calls:
   516 ;;		_ENVIA_LCD_CMD
   517 ;;		_ENVIA_NIBBLE
   518 ;; This function is called by:
   519 ;;		_main
   520 ;; This function uses a non-reentrant model
   521 ;;
   522                           
   523                           	psect	text2
   524  000B52                     __ptext2:
   525                           	opt callstack 0
   526  000B52                     _LCD_CONFIG:
   527                           	opt callstack 28
   528                           
   529                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   530                           
   531                           ;incstack = 0
   532  000B52  908C               	bcf	3980,0,c	;volatile
   533                           
   534                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   535  000B54  928C               	bcf	3980,1,c	;volatile
   536                           
   537                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   538  000B56  0E30               	movlw	48
   539  000B58  EC6F  F006         	call	_ENVIA_NIBBLE
   540                           
   541                           ;LCD.c: 77:         _delay(24000);
   542  000B5C  0E20               	movlw	32
   543  000B5E  6E16               	movwf	??_LCD_CONFIG& (0+255),c
   544  000B60  0E2A               	movlw	42
   545  000B62                     u337:
   546  000B62  2EE8               	decfsz	wreg,f,c
   547  000B64  D7FE               	bra	u337
   548  000B66  2E16               	decfsz	??_LCD_CONFIG& (0+255),f,c
   549  000B68  D7FC               	bra	u337
   550                           
   551                           ;LCD.c: 78:         _delay(24000);
   552  000B6A  0E20               	movlw	32
   553  000B6C  6E16               	movwf	??_LCD_CONFIG& (0+255),c
   554  000B6E  0E2A               	movlw	42
   555  000B70                     u347:
   556  000B70  2EE8               	decfsz	wreg,f,c
   557  000B72  D7FE               	bra	u347
   558  000B74  2E16               	decfsz	??_LCD_CONFIG& (0+255),f,c
   559  000B76  D7FC               	bra	u347
   560                           
   561                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   562  000B78  0E30               	movlw	48
   563  000B7A  EC6F  F006         	call	_ENVIA_NIBBLE
   564                           
   565                           ;LCD.c: 83:  _delay(1200);
   566  000B7E  0EF0               	movlw	240
   567  000B80                     u357:
   568  000B80  D000               	nop2	
   569  000B82  2EE8               	decfsz	wreg,f,c
   570  000B84  D7FD               	bra	u357
   571                           
   572                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   573  000B86  0E30               	movlw	48
   574  000B88  EC6F  F006         	call	_ENVIA_NIBBLE
   575                           
   576                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   577  000B8C  0E20               	movlw	32
   578  000B8E  EC6F  F006         	call	_ENVIA_NIBBLE
   579                           
   580                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   581  000B92  0E01               	movlw	1
   582  000B94  ECF3  F005         	call	_ENVIA_LCD_CMD
   583                           
   584                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   585  000B98  0E28               	movlw	40
   586  000B9A  ECF3  F005         	call	_ENVIA_LCD_CMD
   587                           
   588                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   589  000B9E  0E0F               	movlw	15
   590  000BA0  ECF3  F005         	call	_ENVIA_LCD_CMD
   591                           
   592                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   593  000BA4  0E06               	movlw	6
   594  000BA6  ECF3  F005         	call	_ENVIA_LCD_CMD
   595                           
   596                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   597  000BAA  0E01               	movlw	1
   598  000BAC  ECF3  F005         	call	_ENVIA_LCD_CMD
   599  000BB0  0012               	return		;funcret
   600  000BB2                     __end_of_LCD_CONFIG:
   601                           	opt callstack 0
   602                           
   603 ;; *************** function _ESCRIBE_MENSAJE *****************
   604 ;; Defined at:
   605 ;;		line 41 in file "LCD.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   608 ;;		 -> STR_1(13), 
   609 ;;  tam             1    5[COMRAM] unsigned char 
   610 ;; Auto vars:     Size  Location     Type
   611 ;;  i               1    8[COMRAM] unsigned char 
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      void 
   614 ;; Registers used:
   615 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   621 ;;      Params:         3       0       0       0       0       0       0       0       0
   622 ;;      Locals:         1       0       0       0       0       0       0       0       0
   623 ;;      Temps:          2       0       0       0       0       0       0       0       0
   624 ;;      Totals:         6       0       0       0       0       0       0       0       0
   625 ;;Total ram usage:        6 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; Hardware stack levels required when called:    2
   628 ;; This function calls:
   629 ;;		_ENVIA_CHAR
   630 ;; This function is called by:
   631 ;;		_main
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text3
   636  000C1A                     __ptext3:
   637                           	opt callstack 0
   638  000C1A                     _ESCRIBE_MENSAJE:
   639                           	opt callstack 28
   640                           
   641                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   642                           
   643                           ;incstack = 0
   644  000C1A  0E00               	movlw	0
   645  000C1C  6E1B               	movwf	ESCRIBE_MENSAJE@i,c
   646                           
   647                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   648  000C1E  0E00               	movlw	0
   649  000C20  6E1B               	movwf	ESCRIBE_MENSAJE@i,c
   650  000C22  D00F               	goto	l1299
   651  000C24                     l1295:
   652                           
   653                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   654  000C24  501B               	movf	ESCRIBE_MENSAJE@i,w,c
   655  000C26  2416               	addwf	ESCRIBE_MENSAJE@cadena,w,c
   656  000C28  6E19               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
   657  000C2A  0E00               	movlw	0
   658  000C2C  2017               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
   659  000C2E  6E1A               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
   660  000C30  C019  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   661  000C34  C01A  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   662  000C38                     	if	0	;tblptru may be non-zero
   663  000C38                     	endif
   664  000C38                     	if	0	;tblptru may be non-zero
   665  000C38                     	endif
   666  000C38  0008               	tblrd		*
   667  000C3A  50F5               	movf	tablat,w,c
   668  000C3C  ECD9  F005         	call	_ENVIA_CHAR
   669                           
   670                           ;LCD.c: 47:  }
   671  000C40  2A1B               	incf	ESCRIBE_MENSAJE@i,f,c
   672  000C42                     l1299:
   673  000C42  5018               	movf	ESCRIBE_MENSAJE@tam,w,c
   674  000C44  5C1B               	subwf	ESCRIBE_MENSAJE@i,w,c
   675  000C46  B0D8               	btfsc	status,0,c
   676  000C48  0012               	return	
   677  000C4A  D7EC               	goto	l1295
   678  000C4C                     __end_of_ESCRIBE_MENSAJE:
   679                           	opt callstack 0
   680                           
   681 ;; *************** function _ENVIA_CHAR *****************
   682 ;; Defined at:
   683 ;;		line 50 in file "LCD.c"
   684 ;; Parameters:    Size  Location     Type
   685 ;;  dato            1    wreg     unsigned char 
   686 ;; Auto vars:     Size  Location     Type
   687 ;;  dato            1    1[COMRAM] unsigned char 
   688 ;;  aux             1    2[COMRAM] unsigned char 
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      void 
   691 ;; Registers used:
   692 ;;		wreg, status,2, status,0, cstack
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   698 ;;      Params:         0       0       0       0       0       0       0       0       0
   699 ;;      Locals:         2       0       0       0       0       0       0       0       0
   700 ;;      Temps:          0       0       0       0       0       0       0       0       0
   701 ;;      Totals:         2       0       0       0       0       0       0       0       0
   702 ;;Total ram usage:        2 bytes
   703 ;; Hardware stack levels used:    1
   704 ;; Hardware stack levels required when called:    1
   705 ;; This function calls:
   706 ;;		_ENVIA_NIBBLE
   707 ;;		_LEER_LCD
   708 ;; This function is called by:
   709 ;;		_ESCRIBE_MENSAJE
   710 ;;		_main
   711 ;;		_GENERACARACTER
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           	psect	text4
   716  000BB2                     __ptext4:
   717                           	opt callstack 0
   718  000BB2                     _ENVIA_CHAR:
   719                           	opt callstack 28
   720                           
   721                           ;incstack = 0
   722                           ;ENVIA_CHAR@dato stored from wreg
   723  000BB2  6E14               	movwf	ENVIA_CHAR@dato,c
   724                           
   725                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   726  000BB4  808C               	bsf	3980,0,c	;volatile
   727                           
   728                           ;LCD.c: 54:  LEER_LCD();
   729  000BB6  EC78  F005         	call	_LEER_LCD	;wreg free
   730                           
   731                           ;LCD.c: 55:  TRISD = 0x00;
   732  000BBA  0E00               	movlw	0
   733  000BBC  6E95               	movwf	3989,c	;volatile
   734                           
   735                           ;LCD.c: 56:         _delay(1200);
   736  000BBE  0EF0               	movlw	240
   737  000BC0                     u367:
   738  000BC0  D000               	nop2	
   739  000BC2  2EE8               	decfsz	wreg,f,c
   740  000BC4  D7FD               	bra	u367
   741                           
   742                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
   743  000BC6  928C               	bcf	3980,1,c	;volatile
   744                           
   745                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
   746  000BC8  948C               	bcf	3980,2,c	;volatile
   747                           
   748                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
   749  000BCA  808C               	bsf	3980,0,c	;volatile
   750                           
   751                           ;LCD.c: 61:  aux = dato & 0xF0;
   752  000BCC  5014               	movf	ENVIA_CHAR@dato,w,c
   753  000BCE  0BF0               	andlw	240
   754  000BD0  6E15               	movwf	ENVIA_CHAR@aux,c
   755                           
   756                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
   757  000BD2  5015               	movf	ENVIA_CHAR@aux,w,c
   758  000BD4  EC6F  F006         	call	_ENVIA_NIBBLE
   759                           
   760                           ;LCD.c: 63:  aux = dato << 4;
   761  000BD8  3814               	swapf	ENVIA_CHAR@dato,w,c
   762  000BDA  0BF0               	andlw	240
   763  000BDC  6E15               	movwf	ENVIA_CHAR@aux,c
   764                           
   765                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
   766  000BDE  5015               	movf	ENVIA_CHAR@aux,w,c
   767  000BE0  EC6F  F006         	call	_ENVIA_NIBBLE
   768  000BE4  0012               	return		;funcret
   769  000BE6                     __end_of_ENVIA_CHAR:
   770                           	opt callstack 0
   771                           
   772 ;; *************** function _DIGITOS *****************
   773 ;; Defined at:
   774 ;;		line 39 in file "pantalleitor3.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;  valor           2    8[COMRAM] int 
   777 ;; Auto vars:     Size  Location     Type
   778 ;;		None
   779 ;; Return value:  Size  Location     Type
   780 ;;                  1    wreg      void 
   781 ;; Registers used:
   782 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   783 ;; Tracked objects:
   784 ;;		On entry : 0/0
   785 ;;		On exit  : 0/0
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   788 ;;      Params:         2       0       0       0       0       0       0       0       0
   789 ;;      Locals:         0       0       0       0       0       0       0       0       0
   790 ;;      Temps:          0       0       0       0       0       0       0       0       0
   791 ;;      Totals:         2       0       0       0       0       0       0       0       0
   792 ;;Total ram usage:        2 bytes
   793 ;; Hardware stack levels used:    1
   794 ;; Hardware stack levels required when called:    1
   795 ;; This function calls:
   796 ;;		___awdiv
   797 ;;		___wmul
   798 ;; This function is called by:
   799 ;;		_main
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           	psect	text5
   804  000810                     __ptext5:
   805                           	opt callstack 0
   806  000810                     _DIGITOS:
   807                           	opt callstack 29
   808                           
   809                           ;pantalleitor3.c: 40:     digdmi = valor / 10000;
   810                           
   811                           ;incstack = 0
   812  000810  C01B  F013         	movff	DIGITOS@valor,___awdiv@dividend
   813  000814  C01C  F014         	movff	DIGITOS@valor+1,___awdiv@dividend+1
   814  000818  0E27               	movlw	39
   815  00081A  6E16               	movwf	___awdiv@divisor+1,c
   816  00081C  0E10               	movlw	16
   817  00081E  6E15               	movwf	___awdiv@divisor,c
   818  000820  EC36  F005         	call	___awdiv	;wreg free
   819  000824  C013  F00F         	movff	?___awdiv,_digdmi
   820  000828  C014  F010         	movff	?___awdiv+1,_digdmi+1
   821                           
   822                           ;pantalleitor3.c: 41:     temporal3 = valor - (digdmi * 10000);
   823  00082C  C00F  F013         	movff	_digdmi,___wmul@multiplier
   824  000830  C010  F014         	movff	_digdmi+1,___wmul@multiplier+1
   825  000834  0ED8               	movlw	216
   826  000836  6E16               	movwf	___wmul@multiplicand+1,c
   827  000838  0EF0               	movlw	240
   828  00083A  6E15               	movwf	___wmul@multiplicand,c
   829  00083C  EC3C  F006         	call	___wmul	;wreg free
   830  000840  501B               	movf	DIGITOS@valor,w,c
   831  000842  2413               	addwf	?___wmul,w,c
   832  000844  6E01               	movwf	_temporal3,c
   833  000846  501C               	movf	DIGITOS@valor+1,w,c
   834  000848  2014               	addwfc	?___wmul+1,w,c
   835  00084A  6E02               	movwf	_temporal3+1,c
   836                           
   837                           ;pantalleitor3.c: 42:     digmil = temporal3 / 1000;
   838  00084C  C001  F013         	movff	_temporal3,___awdiv@dividend
   839  000850  C002  F014         	movff	_temporal3+1,___awdiv@dividend+1
   840  000854  0E03               	movlw	3
   841  000856  6E16               	movwf	___awdiv@divisor+1,c
   842  000858  0EE8               	movlw	232
   843  00085A  6E15               	movwf	___awdiv@divisor,c
   844  00085C  EC36  F005         	call	___awdiv	;wreg free
   845  000860  C013  F00D         	movff	?___awdiv,_digmil
   846  000864  C014  F00E         	movff	?___awdiv+1,_digmil+1
   847                           
   848                           ;pantalleitor3.c: 43:     temporal = temporal3 - (digmil * 1000);
   849  000868  C00D  F013         	movff	_digmil,___wmul@multiplier
   850  00086C  C00E  F014         	movff	_digmil+1,___wmul@multiplier+1
   851  000870  0EFC               	movlw	252
   852  000872  6E16               	movwf	___wmul@multiplicand+1,c
   853  000874  0E18               	movlw	24
   854  000876  6E15               	movwf	___wmul@multiplicand,c
   855  000878  EC3C  F006         	call	___wmul	;wreg free
   856  00087C  5001               	movf	_temporal3,w,c
   857  00087E  2413               	addwf	?___wmul,w,c
   858  000880  6E05               	movwf	_temporal,c
   859  000882  5002               	movf	_temporal3+1,w,c
   860  000884  2014               	addwfc	?___wmul+1,w,c
   861  000886  6E06               	movwf	_temporal+1,c
   862                           
   863                           ;pantalleitor3.c: 44:     digcen = temporal / 100;
   864  000888  C005  F013         	movff	_temporal,___awdiv@dividend
   865  00088C  C006  F014         	movff	_temporal+1,___awdiv@dividend+1
   866  000890  0E00               	movlw	0
   867  000892  6E16               	movwf	___awdiv@divisor+1,c
   868  000894  0E64               	movlw	100
   869  000896  6E15               	movwf	___awdiv@divisor,c
   870  000898  EC36  F005         	call	___awdiv	;wreg free
   871  00089C  C013  F00B         	movff	?___awdiv,_digcen
   872  0008A0  C014  F00C         	movff	?___awdiv+1,_digcen+1
   873                           
   874                           ;pantalleitor3.c: 45:     temporal2 = temporal - (digcen * 100);
   875  0008A4  C00B  F013         	movff	_digcen,___wmul@multiplier
   876  0008A8  C00C  F014         	movff	_digcen+1,___wmul@multiplier+1
   877  0008AC  0EFF               	movlw	255
   878  0008AE  6E16               	movwf	___wmul@multiplicand+1,c
   879  0008B0  0E9C               	movlw	156
   880  0008B2  6E15               	movwf	___wmul@multiplicand,c
   881  0008B4  EC3C  F006         	call	___wmul	;wreg free
   882  0008B8  5005               	movf	_temporal,w,c
   883  0008BA  2413               	addwf	?___wmul,w,c
   884  0008BC  6E03               	movwf	_temporal2,c
   885  0008BE  5006               	movf	_temporal+1,w,c
   886  0008C0  2014               	addwfc	?___wmul+1,w,c
   887  0008C2  6E04               	movwf	_temporal2+1,c
   888                           
   889                           ;pantalleitor3.c: 46:     digdec = temporal2 / 10;
   890  0008C4  C003  F013         	movff	_temporal2,___awdiv@dividend
   891  0008C8  C004  F014         	movff	_temporal2+1,___awdiv@dividend+1
   892  0008CC  0E00               	movlw	0
   893  0008CE  6E16               	movwf	___awdiv@divisor+1,c
   894  0008D0  0E0A               	movlw	10
   895  0008D2  6E15               	movwf	___awdiv@divisor,c
   896  0008D4  EC36  F005         	call	___awdiv	;wreg free
   897  0008D8  C013  F009         	movff	?___awdiv,_digdec
   898  0008DC  C014  F00A         	movff	?___awdiv+1,_digdec+1
   899                           
   900                           ;pantalleitor3.c: 47:     diguni = temporal2 - (digdec * 10);
   901  0008E0  C009  F013         	movff	_digdec,___wmul@multiplier
   902  0008E4  C00A  F014         	movff	_digdec+1,___wmul@multiplier+1
   903  0008E8  0EFF               	movlw	255
   904  0008EA  6E16               	movwf	___wmul@multiplicand+1,c
   905  0008EC  0EF6               	movlw	246
   906  0008EE  6E15               	movwf	___wmul@multiplicand,c
   907  0008F0  EC3C  F006         	call	___wmul	;wreg free
   908  0008F4  5003               	movf	_temporal2,w,c
   909  0008F6  2413               	addwf	?___wmul,w,c
   910  0008F8  6E07               	movwf	_diguni,c
   911  0008FA  5004               	movf	_temporal2+1,w,c
   912  0008FC  2014               	addwfc	?___wmul+1,w,c
   913  0008FE  6E08               	movwf	_diguni+1,c
   914  000900  0012               	return		;funcret
   915  000902                     __end_of_DIGITOS:
   916                           	opt callstack 0
   917                           
   918 ;; *************** function ___wmul *****************
   919 ;; Defined at:
   920 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  multiplier      2    0[COMRAM] unsigned int 
   923 ;;  multiplicand    2    2[COMRAM] unsigned int 
   924 ;; Auto vars:     Size  Location     Type
   925 ;;  product         2    4[COMRAM] unsigned int 
   926 ;; Return value:  Size  Location     Type
   927 ;;                  2    0[COMRAM] unsigned int 
   928 ;; Registers used:
   929 ;;		wreg, status,2, status,0, prodl, prodh
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   935 ;;      Params:         4       0       0       0       0       0       0       0       0
   936 ;;      Locals:         2       0       0       0       0       0       0       0       0
   937 ;;      Temps:          0       0       0       0       0       0       0       0       0
   938 ;;      Totals:         6       0       0       0       0       0       0       0       0
   939 ;;Total ram usage:        6 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; This function calls:
   942 ;;		Nothing
   943 ;; This function is called by:
   944 ;;		_DIGITOS
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           	psect	text6
   949  000C78                     __ptext6:
   950                           	opt callstack 0
   951  000C78                     ___wmul:
   952                           	opt callstack 29
   953                           
   954                           ;incstack = 0
   955  000C78  5013               	movf	___wmul@multiplier,w,c
   956  000C7A  0215               	mulwf	___wmul@multiplicand,c
   957  000C7C  CFF3 F017          	movff	prodl,___wmul@product
   958  000C80  CFF4 F018          	movff	prodh,___wmul@product+1
   959  000C84  5013               	movf	___wmul@multiplier,w,c
   960  000C86  0216               	mulwf	___wmul@multiplicand+1,c
   961  000C88  50F3               	movf	prodl,w,c
   962  000C8A  2618               	addwf	___wmul@product+1,f,c
   963  000C8C  5014               	movf	___wmul@multiplier+1,w,c
   964  000C8E  0215               	mulwf	___wmul@multiplicand,c
   965  000C90  50F3               	movf	prodl,w,c
   966  000C92  2618               	addwf	___wmul@product+1,f,c
   967  000C94  C017  F013         	movff	___wmul@product,?___wmul
   968  000C98  C018  F014         	movff	___wmul@product+1,?___wmul+1
   969  000C9C  0012               	return		;funcret
   970  000C9E                     __end_of___wmul:
   971                           	opt callstack 0
   972                           
   973 ;; *************** function ___awdiv *****************
   974 ;; Defined at:
   975 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;  dividend        2    0[COMRAM] int 
   978 ;;  divisor         2    2[COMRAM] int 
   979 ;; Auto vars:     Size  Location     Type
   980 ;;  quotient        2    6[COMRAM] int 
   981 ;;  sign            1    5[COMRAM] unsigned char 
   982 ;;  counter         1    4[COMRAM] unsigned char 
   983 ;; Return value:  Size  Location     Type
   984 ;;                  2    0[COMRAM] int 
   985 ;; Registers used:
   986 ;;		wreg, status,2, status,0
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   992 ;;      Params:         4       0       0       0       0       0       0       0       0
   993 ;;      Locals:         4       0       0       0       0       0       0       0       0
   994 ;;      Temps:          0       0       0       0       0       0       0       0       0
   995 ;;      Totals:         8       0       0       0       0       0       0       0       0
   996 ;;Total ram usage:        8 bytes
   997 ;; Hardware stack levels used:    1
   998 ;; This function calls:
   999 ;;		Nothing
  1000 ;; This function is called by:
  1001 ;;		_DIGITOS
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           	psect	text7
  1006  000A6C                     __ptext7:
  1007                           	opt callstack 0
  1008  000A6C                     ___awdiv:
  1009                           	opt callstack 29
  1010                           
  1011                           ;incstack = 0
  1012  000A6C  0E00               	movlw	0
  1013  000A6E  6E18               	movwf	___awdiv@sign,c
  1014  000A70  AE16               	btfss	___awdiv@divisor+1,7,c
  1015  000A72  D006               	goto	l1237
  1016  000A74  6C15               	negf	___awdiv@divisor,c
  1017  000A76  1E16               	comf	___awdiv@divisor+1,f,c
  1018  000A78  B0D8               	btfsc	status,0,c
  1019  000A7A  2A16               	incf	___awdiv@divisor+1,f,c
  1020  000A7C  0E01               	movlw	1
  1021  000A7E  6E18               	movwf	___awdiv@sign,c
  1022  000A80                     l1237:
  1023  000A80  AE14               	btfss	___awdiv@dividend+1,7,c
  1024  000A82  D006               	goto	l1243
  1025  000A84  6C13               	negf	___awdiv@dividend,c
  1026  000A86  1E14               	comf	___awdiv@dividend+1,f,c
  1027  000A88  B0D8               	btfsc	status,0,c
  1028  000A8A  2A14               	incf	___awdiv@dividend+1,f,c
  1029  000A8C  0E01               	movlw	1
  1030  000A8E  1A18               	xorwf	___awdiv@sign,f,c
  1031  000A90                     l1243:
  1032  000A90  0E00               	movlw	0
  1033  000A92  6E1A               	movwf	___awdiv@quotient+1,c
  1034  000A94  0E00               	movlw	0
  1035  000A96  6E19               	movwf	___awdiv@quotient,c
  1036  000A98  5015               	movf	___awdiv@divisor,w,c
  1037  000A9A  1016               	iorwf	___awdiv@divisor+1,w,c
  1038  000A9C  B4D8               	btfsc	status,2,c
  1039  000A9E  D01C               	goto	l1265
  1040  000AA0  0E01               	movlw	1
  1041  000AA2  6E17               	movwf	___awdiv@counter,c
  1042  000AA4  D004               	goto	l1251
  1043  000AA6                     l1249:
  1044  000AA6  90D8               	bcf	status,0,c
  1045  000AA8  3615               	rlcf	___awdiv@divisor,f,c
  1046  000AAA  3616               	rlcf	___awdiv@divisor+1,f,c
  1047  000AAC  2A17               	incf	___awdiv@counter,f,c
  1048  000AAE                     l1251:
  1049  000AAE  AE16               	btfss	___awdiv@divisor+1,7,c
  1050  000AB0  D7FA               	goto	l1249
  1051  000AB2                     u230:
  1052  000AB2  90D8               	bcf	status,0,c
  1053  000AB4  3619               	rlcf	___awdiv@quotient,f,c
  1054  000AB6  361A               	rlcf	___awdiv@quotient+1,f,c
  1055  000AB8  5015               	movf	___awdiv@divisor,w,c
  1056  000ABA  5C13               	subwf	___awdiv@dividend,w,c
  1057  000ABC  5016               	movf	___awdiv@divisor+1,w,c
  1058  000ABE  5814               	subwfb	___awdiv@dividend+1,w,c
  1059  000AC0  A0D8               	btfss	status,0,c
  1060  000AC2  D005               	goto	l1261
  1061  000AC4  5015               	movf	___awdiv@divisor,w,c
  1062  000AC6  5E13               	subwf	___awdiv@dividend,f,c
  1063  000AC8  5016               	movf	___awdiv@divisor+1,w,c
  1064  000ACA  5A14               	subwfb	___awdiv@dividend+1,f,c
  1065  000ACC  8019               	bsf	___awdiv@quotient,0,c
  1066  000ACE                     l1261:
  1067  000ACE  90D8               	bcf	status,0,c
  1068  000AD0  3216               	rrcf	___awdiv@divisor+1,f,c
  1069  000AD2  3215               	rrcf	___awdiv@divisor,f,c
  1070  000AD4  2E17               	decfsz	___awdiv@counter,f,c
  1071  000AD6  D7ED               	goto	u230
  1072  000AD8                     l1265:
  1073  000AD8  5018               	movf	___awdiv@sign,w,c
  1074  000ADA  B4D8               	btfsc	status,2,c
  1075  000ADC  D004               	goto	l1269
  1076  000ADE  6C19               	negf	___awdiv@quotient,c
  1077  000AE0  1E1A               	comf	___awdiv@quotient+1,f,c
  1078  000AE2  B0D8               	btfsc	status,0,c
  1079  000AE4  2A1A               	incf	___awdiv@quotient+1,f,c
  1080  000AE6                     l1269:
  1081  000AE6  C019  F013         	movff	___awdiv@quotient,?___awdiv
  1082  000AEA  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  1083  000AEE  0012               	return		;funcret
  1084  000AF0                     __end_of___awdiv:
  1085                           	opt callstack 0
  1086                           
  1087 ;; *************** function _CURSOR_ONOFF *****************
  1088 ;; Defined at:
  1089 ;;		line 35 in file "LCD.c"
  1090 ;; Parameters:    Size  Location     Type
  1091 ;;  estado          1    wreg     unsigned char 
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;  estado          1    3[COMRAM] unsigned char 
  1094 ;; Return value:  Size  Location     Type
  1095 ;;                  1    wreg      void 
  1096 ;; Registers used:
  1097 ;;		wreg, status,2, status,0, cstack
  1098 ;; Tracked objects:
  1099 ;;		On entry : 0/0
  1100 ;;		On exit  : 0/0
  1101 ;;		Unchanged: 0/0
  1102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1103 ;;      Params:         0       0       0       0       0       0       0       0       0
  1104 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1105 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1106 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1107 ;;Total ram usage:        1 bytes
  1108 ;; Hardware stack levels used:    1
  1109 ;; Hardware stack levels required when called:    2
  1110 ;; This function calls:
  1111 ;;		_ENVIA_LCD_CMD
  1112 ;; This function is called by:
  1113 ;;		_main
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116                           
  1117                           	psect	text8
  1118  000CC2                     __ptext8:
  1119                           	opt callstack 0
  1120  000CC2                     _CURSOR_ONOFF:
  1121                           	opt callstack 28
  1122                           
  1123                           ;incstack = 0
  1124                           ;CURSOR_ONOFF@estado stored from wreg
  1125  000CC2  6E16               	movwf	CURSOR_ONOFF@estado,c
  1126                           
  1127                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1128  000CC4  5016               	movf	CURSOR_ONOFF@estado,w,c
  1129  000CC6  A4D8               	btfss	status,2,c
  1130  000CC8  D003               	goto	l1089
  1131  000CCA  0E0E               	movlw	14
  1132  000CCC  ECF3  F005         	call	_ENVIA_LCD_CMD
  1133  000CD0                     l1089:
  1134                           
  1135                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1136  000CD0  0416               	decf	CURSOR_ONOFF@estado,w,c
  1137  000CD2  A4D8               	btfss	status,2,c
  1138  000CD4  0012               	return	
  1139  000CD6  0E0C               	movlw	12
  1140  000CD8  ECF3  F005         	call	_ENVIA_LCD_CMD
  1141  000CDC  0012               	return		;funcret
  1142  000CDE                     __end_of_CURSOR_ONOFF:
  1143                           	opt callstack 0
  1144                           
  1145 ;; *************** function _CURSOR_HOME *****************
  1146 ;; Defined at:
  1147 ;;		line 30 in file "LCD.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, status,2, status,0, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1161 ;;      Params:         0       0       0       0       0       0       0       0       0
  1162 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1164 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    2
  1168 ;; This function calls:
  1169 ;;		_ENVIA_LCD_CMD
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text9
  1176  000D10                     __ptext9:
  1177                           	opt callstack 0
  1178  000D10                     _CURSOR_HOME:
  1179                           	opt callstack 28
  1180                           
  1181                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1182                           
  1183                           ;incstack = 0
  1184  000D10  0E02               	movlw	2
  1185  000D12  ECF3  F005         	call	_ENVIA_LCD_CMD
  1186  000D16  0012               	return		;funcret
  1187  000D18                     __end_of_CURSOR_HOME:
  1188                           	opt callstack 0
  1189                           
  1190 ;; *************** function _ENVIA_LCD_CMD *****************
  1191 ;; Defined at:
  1192 ;;		line 104 in file "LCD.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;  dato            1    wreg     unsigned char 
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  dato            1    1[COMRAM] unsigned char 
  1197 ;;  aux             1    2[COMRAM] unsigned char 
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  1    wreg      void 
  1200 ;; Registers used:
  1201 ;;		wreg, status,2, status,0, cstack
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1207 ;;      Params:         0       0       0       0       0       0       0       0       0
  1208 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1209 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1210 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1211 ;;Total ram usage:        2 bytes
  1212 ;; Hardware stack levels used:    1
  1213 ;; Hardware stack levels required when called:    1
  1214 ;; This function calls:
  1215 ;;		_ENVIA_NIBBLE
  1216 ;;		_LEER_LCD
  1217 ;; This function is called by:
  1218 ;;		_POS_CURSOR
  1219 ;;		_CURSOR_HOME
  1220 ;;		_CURSOR_ONOFF
  1221 ;;		_LCD_CONFIG
  1222 ;;		_BLINK_CURSOR
  1223 ;;		_DISPLAY_ONOFF
  1224 ;;		_BORRAR_LCD
  1225 ;;		_GENERACARACTER
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           	psect	text10
  1230  000BE6                     __ptext10:
  1231                           	opt callstack 0
  1232  000BE6                     _ENVIA_LCD_CMD:
  1233                           	opt callstack 28
  1234                           
  1235                           ;incstack = 0
  1236                           ;ENVIA_LCD_CMD@dato stored from wreg
  1237  000BE6  6E14               	movwf	ENVIA_LCD_CMD@dato,c
  1238                           
  1239                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1240  000BE8  908C               	bcf	3980,0,c	;volatile
  1241                           
  1242                           ;LCD.c: 108:  LEER_LCD();
  1243  000BEA  EC78  F005         	call	_LEER_LCD	;wreg free
  1244                           
  1245                           ;LCD.c: 109:  TRISD = 0b00000000;
  1246  000BEE  0E00               	movlw	0
  1247  000BF0  6E95               	movwf	3989,c	;volatile
  1248                           
  1249                           ;LCD.c: 111:         _delay(1200);
  1250  000BF2  0EF0               	movlw	240
  1251  000BF4                     u377:
  1252  000BF4  D000               	nop2	
  1253  000BF6  2EE8               	decfsz	wreg,f,c
  1254  000BF8  D7FD               	bra	u377
  1255                           
  1256                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1257  000BFA  928C               	bcf	3980,1,c	;volatile
  1258                           
  1259                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1260  000BFC  948C               	bcf	3980,2,c	;volatile
  1261                           
  1262                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1263  000BFE  908C               	bcf	3980,0,c	;volatile
  1264                           
  1265                           ;LCD.c: 115:  aux = dato & 0xF0;
  1266  000C00  5014               	movf	ENVIA_LCD_CMD@dato,w,c
  1267  000C02  0BF0               	andlw	240
  1268  000C04  6E15               	movwf	ENVIA_LCD_CMD@aux,c
  1269                           
  1270                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1271  000C06  5015               	movf	ENVIA_LCD_CMD@aux,w,c
  1272  000C08  EC6F  F006         	call	_ENVIA_NIBBLE
  1273                           
  1274                           ;LCD.c: 117:  aux = dato<<4;
  1275  000C0C  3814               	swapf	ENVIA_LCD_CMD@dato,w,c
  1276  000C0E  0BF0               	andlw	240
  1277  000C10  6E15               	movwf	ENVIA_LCD_CMD@aux,c
  1278                           
  1279                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1280  000C12  5015               	movf	ENVIA_LCD_CMD@aux,w,c
  1281  000C14  EC6F  F006         	call	_ENVIA_NIBBLE
  1282  000C18  0012               	return		;funcret
  1283  000C1A                     __end_of_ENVIA_LCD_CMD:
  1284                           	opt callstack 0
  1285                           
  1286 ;; *************** function _LEER_LCD *****************
  1287 ;; Defined at:
  1288 ;;		line 121 in file "LCD.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;		None
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;  aux             1    0[COMRAM] unsigned char 
  1293 ;; Return value:  Size  Location     Type
  1294 ;;                  1    wreg      void 
  1295 ;; Registers used:
  1296 ;;		wreg, status,2, status,0
  1297 ;; Tracked objects:
  1298 ;;		On entry : 0/0
  1299 ;;		On exit  : 0/0
  1300 ;;		Unchanged: 0/0
  1301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1302 ;;      Params:         0       0       0       0       0       0       0       0       0
  1303 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1304 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1305 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1306 ;;Total ram usage:        1 bytes
  1307 ;; Hardware stack levels used:    1
  1308 ;; This function calls:
  1309 ;;		Nothing
  1310 ;; This function is called by:
  1311 ;;		_ENVIA_CHAR
  1312 ;;		_ENVIA_LCD_CMD
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text11
  1317  000AF0                     __ptext11:
  1318                           	opt callstack 0
  1319  000AF0                     _LEER_LCD:
  1320                           	opt callstack 28
  1321                           
  1322                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1323                           
  1324                           ;incstack = 0
  1325  000AF0  0EF8               	movlw	248
  1326  000AF2  6E95               	movwf	3989,c	;volatile
  1327                           
  1328                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1329  000AF4  908C               	bcf	3980,0,c	;volatile
  1330                           
  1331                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1332  000AF6  828C               	bsf	3980,1,c	;volatile
  1333                           
  1334                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1335  000AF8  848C               	bsf	3980,2,c	;volatile
  1336                           
  1337                           ;LCD.c: 128:         _delay(1200);
  1338  000AFA  0EF0               	movlw	240
  1339  000AFC                     u387:
  1340  000AFC  D000               	nop2	
  1341  000AFE  2EE8               	decfsz	wreg,f,c
  1342  000B00  D7FD               	bra	u387
  1343                           
  1344                           ;LCD.c: 130:  aux = PORTD;
  1345  000B02  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1346                           
  1347                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1348  000B06  948C               	bcf	3980,2,c	;volatile
  1349                           
  1350                           ;LCD.c: 132:         _delay(1200);
  1351  000B08  0EF0               	movlw	240
  1352  000B0A                     u397:
  1353  000B0A  D000               	nop2	
  1354  000B0C  2EE8               	decfsz	wreg,f,c
  1355  000B0E  D7FD               	bra	u397
  1356                           
  1357                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1358  000B10  848C               	bsf	3980,2,c	;volatile
  1359                           
  1360                           ;LCD.c: 135:         _delay(1200);
  1361  000B12  0EF0               	movlw	240
  1362  000B14                     u407:
  1363  000B14  D000               	nop2	
  1364  000B16  2EE8               	decfsz	wreg,f,c
  1365  000B18  D7FD               	bra	u407
  1366  000B1A                     l875:
  1367                           
  1368                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1369  000B1A  948C               	bcf	3980,2,c	;volatile
  1370                           
  1371                           ;LCD.c: 138:  aux = aux & 0x80;
  1372  000B1C  5013               	movf	LEER_LCD@aux,w,c
  1373  000B1E  0B80               	andlw	128
  1374  000B20  6E13               	movwf	LEER_LCD@aux,c
  1375                           
  1376                           ;LCD.c: 139:  while(aux == 0x80)
  1377  000B22  D012               	goto	l891
  1378  000B24                     l109:
  1379                           
  1380                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1381  000B24  848C               	bsf	3980,2,c	;volatile
  1382                           
  1383                           ;LCD.c: 142:             _delay(1200);
  1384  000B26  0EF0               	movlw	240
  1385  000B28                     u417:
  1386  000B28  D000               	nop2	
  1387  000B2A  2EE8               	decfsz	wreg,f,c
  1388  000B2C  D7FD               	bra	u417
  1389                           
  1390                           ;LCD.c: 143:             aux = PORTD;
  1391  000B2E  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1392                           
  1393                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1394  000B32  948C               	bcf	3980,2,c	;volatile
  1395                           
  1396                           ;LCD.c: 145:             _delay(1200);
  1397  000B34  0EF0               	movlw	240
  1398  000B36                     u427:
  1399  000B36  D000               	nop2	
  1400  000B38  2EE8               	decfsz	wreg,f,c
  1401  000B3A  D7FD               	bra	u427
  1402                           
  1403                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1404  000B3C  848C               	bsf	3980,2,c	;volatile
  1405                           
  1406                           ;LCD.c: 147:             _delay(1200);
  1407  000B3E  0EF0               	movlw	240
  1408  000B40                     u437:
  1409  000B40  D000               	nop2	
  1410  000B42  2EE8               	decfsz	wreg,f,c
  1411  000B44  D7FD               	bra	u437
  1412  000B46  D7E9               	goto	l875
  1413  000B48                     l891:
  1414                           
  1415                           ;LCD.c: 139:  while(aux == 0x80)
  1416  000B48  0E80               	movlw	128
  1417  000B4A  1813               	xorwf	LEER_LCD@aux,w,c
  1418  000B4C  A4D8               	btfss	status,2,c
  1419  000B4E  0012               	return	
  1420  000B50  D7E9               	goto	l109
  1421  000B52                     __end_of_LEER_LCD:
  1422                           	opt callstack 0
  1423                           
  1424 ;; *************** function _ENVIA_NIBBLE *****************
  1425 ;; Defined at:
  1426 ;;		line 93 in file "LCD.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  dato            1    wreg     unsigned char 
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;  dato            1    0[COMRAM] unsigned char 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      void 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1440 ;;      Params:         0       0       0       0       0       0       0       0       0
  1441 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1443 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1444 ;;Total ram usage:        1 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_ENVIA_CHAR
  1450 ;;		_LCD_CONFIG
  1451 ;;		_ENVIA_LCD_CMD
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           	psect	text12
  1456  000CDE                     __ptext12:
  1457                           	opt callstack 0
  1458  000CDE                     _ENVIA_NIBBLE:
  1459                           	opt callstack 28
  1460                           
  1461                           ;incstack = 0
  1462                           ;ENVIA_NIBBLE@dato stored from wreg
  1463  000CDE  6E13               	movwf	ENVIA_NIBBLE@dato,c
  1464                           
  1465                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1466  000CE0  0E0F               	movlw	15
  1467  000CE2  168C               	andwf	3980,f,c	;volatile
  1468                           
  1469                           ;LCD.c: 96:  dato &= 0xF0;
  1470  000CE4  0EF0               	movlw	240
  1471  000CE6  1613               	andwf	ENVIA_NIBBLE@dato,f,c
  1472                           
  1473                           ;LCD.c: 97:  LATD|= dato;
  1474  000CE8  5013               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1475  000CEA  128C               	iorwf	3980,f,c	;volatile
  1476                           
  1477                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1478  000CEC  848C               	bsf	3980,2,c	;volatile
  1479                           
  1480                           ;LCD.c: 100:         _delay(1200);
  1481  000CEE  0EF0               	movlw	240
  1482  000CF0                     u447:
  1483  000CF0  D000               	nop2	
  1484  000CF2  2EE8               	decfsz	wreg,f,c
  1485  000CF4  D7FD               	bra	u447
  1486                           
  1487                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1488  000CF6  948C               	bcf	3980,2,c	;volatile
  1489  000CF8  0012               	return		;funcret
  1490  000CFA                     __end_of_ENVIA_NIBBLE:
  1491                           	opt callstack 0
  1492                           
  1493 ;; *************** function _ADC_CONVERTIR *****************
  1494 ;; Defined at:
  1495 ;;		line 69 in file "ADC.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  num             2    3[COMRAM] int 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  2    0[COMRAM] int 
  1502 ;; Registers used:
  1503 ;;		wreg, status,2, status,0
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1509 ;;      Params:         2       0       0       0       0       0       0       0       0
  1510 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1511 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1512 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1513 ;;Total ram usage:        5 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text13
  1523  000C4C                     __ptext13:
  1524                           	opt callstack 0
  1525  000C4C                     _ADC_CONVERTIR:
  1526                           	opt callstack 30
  1527                           
  1528                           ;ADC.c: 71:  int num;;ADC.c: 72:  ADCON0bits.GO = 1;
  1529                           
  1530                           ;incstack = 0
  1531  000C4C  82C2               	bsf	4034,1,c	;volatile
  1532  000C4E                     l39:
  1533  000C4E  B2C2               	btfsc	4034,1,c	;volatile
  1534  000C50  D7FE               	goto	l39
  1535                           
  1536                           ;ADC.c: 74:  num = 0x03 & ADRESH;
  1537  000C52  CFC4 F015          	movff	4036,??_ADC_CONVERTIR	;volatile
  1538  000C56  0E03               	movlw	3
  1539  000C58  1615               	andwf	??_ADC_CONVERTIR,f,c
  1540  000C5A  5015               	movf	??_ADC_CONVERTIR,w,c
  1541  000C5C  6E16               	movwf	ADC_CONVERTIR@num,c
  1542  000C5E  6A17               	clrf	ADC_CONVERTIR@num+1,c
  1543                           
  1544                           ;ADC.c: 75:  num<<= 8;
  1545  000C60  5016               	movf	ADC_CONVERTIR@num,w,c
  1546  000C62  6E17               	movwf	ADC_CONVERTIR@num+1,c
  1547  000C64  6A16               	clrf	ADC_CONVERTIR@num,c
  1548                           
  1549                           ;ADC.c: 76:  num +=ADRESL;
  1550  000C66  50C3               	movf	4035,w,c	;volatile
  1551  000C68  2616               	addwf	ADC_CONVERTIR@num,f,c
  1552  000C6A  0E00               	movlw	0
  1553  000C6C  2217               	addwfc	ADC_CONVERTIR@num+1,f,c
  1554                           
  1555                           ;ADC.c: 77:  return(num);
  1556  000C6E  C016  F013         	movff	ADC_CONVERTIR@num,?_ADC_CONVERTIR
  1557  000C72  C017  F014         	movff	ADC_CONVERTIR@num+1,?_ADC_CONVERTIR+1
  1558  000C76  0012               	return		;funcret
  1559  000C78                     __end_of_ADC_CONVERTIR:
  1560                           	opt callstack 0
  1561                           
  1562 ;; *************** function _ADC_CONFIG *****************
  1563 ;; Defined at:
  1564 ;;		line 6 in file "ADC.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;  canal           1    wreg     unsigned char 
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  canal           1    2[COMRAM] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1578 ;;      Params:         0       0       0       0       0       0       0       0       0
  1579 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1580 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1581 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1582 ;;Total ram usage:        3 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; This function calls:
  1585 ;;		Nothing
  1586 ;; This function is called by:
  1587 ;;		_main
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text14
  1592  0009BC                     __ptext14:
  1593                           	opt callstack 0
  1594  0009BC                     _ADC_CONFIG:
  1595                           	opt callstack 30
  1596                           
  1597                           ;incstack = 0
  1598                           ;ADC_CONFIG@canal stored from wreg
  1599  0009BC  6E15               	movwf	ADC_CONFIG@canal,c
  1600                           
  1601                           ;ADC.c: 6: void ADC_CONFIG(char canal);ADC.c: 7: {;ADC.c: 8:  TRISA = 0xFF;
  1602  0009BE  6892               	setf	3986,c	;volatile
  1603                           
  1604                           ;ADC.c: 9:  TRISE = 0xFF;
  1605  0009C0  6896               	setf	3990,c	;volatile
  1606                           
  1607                           ;ADC.c: 10:  TRISB = 0x0F;
  1608  0009C2  0E0F               	movlw	15
  1609  0009C4  6E93               	movwf	3987,c	;volatile
  1610                           
  1611                           ;ADC.c: 11:  switch(canal)
  1612  0009C6  D01F               	goto	l1053
  1613  0009C8                     l999:
  1614                           
  1615                           ;ADC.c: 14:    ADCON1=0x0E;
  1616  0009C8  0E0E               	movlw	14
  1617  0009CA                     L2:
  1618  0009CA  6EC1               	movwf	4033,c	;volatile
  1619                           
  1620                           ;ADC.c: 15:    ADCON0=canal<<2;
  1621  0009CC  4415               	rlncf	ADC_CONFIG@canal,w,c
  1622  0009CE  46E8               	rlncf	wreg,f,c
  1623  0009D0  0BFC               	andlw	252
  1624  0009D2  6EC2               	movwf	4034,c	;volatile
  1625                           
  1626                           ;ADC.c: 16:   break;
  1627  0009D4  D047               	goto	l1055
  1628  0009D6                     l1003:
  1629                           
  1630                           ;ADC.c: 18:    ADCON1=0x0D;
  1631  0009D6  0E0D               	movlw	13
  1632  0009D8  D7F8               	goto	L2
  1633  0009DA                     l1007:
  1634                           
  1635                           ;ADC.c: 22:    ADCON1=0x0C;
  1636  0009DA  0E0C               	movlw	12
  1637  0009DC  D7F6               	goto	L2
  1638  0009DE                     l1011:
  1639                           
  1640                           ;ADC.c: 26:    ADCON1=0x0B;
  1641  0009DE  0E0B               	movlw	11
  1642  0009E0  D7F4               	goto	L2
  1643  0009E2                     l1015:
  1644                           
  1645                           ;ADC.c: 30:    ADCON1=0x0A;
  1646  0009E2  0E0A               	movlw	10
  1647  0009E4  D7F2               	goto	L2
  1648  0009E6                     l1019:
  1649                           
  1650                           ;ADC.c: 34:    ADCON1=0x09;
  1651  0009E6  0E09               	movlw	9
  1652  0009E8  D7F0               	goto	L2
  1653  0009EA                     l1023:
  1654                           
  1655                           ;ADC.c: 38:    ADCON1=0x08;
  1656  0009EA  0E08               	movlw	8
  1657  0009EC  D7EE               	goto	L2
  1658  0009EE                     l1027:
  1659                           
  1660                           ;ADC.c: 42:    ADCON1=0x07;
  1661  0009EE  0E07               	movlw	7
  1662  0009F0  D7EC               	goto	L2
  1663  0009F2                     l1031:
  1664                           
  1665                           ;ADC.c: 46:    ADCON1=0x06;
  1666  0009F2  0E06               	movlw	6
  1667  0009F4  D7EA               	goto	L2
  1668  0009F6                     l1035:
  1669                           
  1670                           ;ADC.c: 50:    ADCON1=0x05;
  1671  0009F6  0E05               	movlw	5
  1672  0009F8  D7E8               	goto	L2
  1673  0009FA                     l1039:
  1674                           
  1675                           ;ADC.c: 54:    ADCON1=0x04;
  1676  0009FA  0E04               	movlw	4
  1677  0009FC  D7E6               	goto	L2
  1678  0009FE                     l1043:
  1679                           
  1680                           ;ADC.c: 58:    ADCON1=0x03;
  1681  0009FE  0E03               	movlw	3
  1682  000A00  D7E4               	goto	L2
  1683  000A02                     l1047:
  1684                           
  1685                           ;ADC.c: 62:    ADCON1=0x02;
  1686  000A02  0E02               	movlw	2
  1687  000A04  D7E2               	goto	L2
  1688  000A06                     l1053:
  1689  000A06  5015               	movf	ADC_CONFIG@canal,w,c
  1690  000A08  6E13               	movwf	??_ADC_CONFIG& (0+255),c
  1691  000A0A  6A14               	clrf	(??_ADC_CONFIG+1)& (0+255),c
  1692                           
  1693                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1694                           ; Switch size 1, requested type "simple"
  1695                           ; Number of cases is 1, Range of values is 0 to 0
  1696                           ; switch strategies available:
  1697                           ; Name         Instructions Cycles
  1698                           ; simple_byte            4     3 (average)
  1699                           ;	Chosen strategy is simple_byte
  1700  000A0C  5014               	movf	??_ADC_CONFIG+1,w,c
  1701  000A0E  0A00               	xorlw	0	; case 0
  1702  000A10  A4D8               	btfss	status,2,c
  1703  000A12  D028               	goto	l1055
  1704                           
  1705                           ; Switch size 1, requested type "simple"
  1706                           ; Number of cases is 13, Range of values is 0 to 12
  1707                           ; switch strategies available:
  1708                           ; Name         Instructions Cycles
  1709                           ; simple_byte           40    21 (average)
  1710                           ;	Chosen strategy is simple_byte
  1711  000A14  5013               	movf	??_ADC_CONFIG,w,c
  1712  000A16  0A00               	xorlw	0	; case 0
  1713  000A18  B4D8               	btfsc	status,2,c
  1714  000A1A  D7D6               	goto	l999
  1715  000A1C  0A01               	xorlw	1	; case 1
  1716  000A1E  B4D8               	btfsc	status,2,c
  1717  000A20  D7DA               	goto	l1003
  1718  000A22  0A03               	xorlw	3	; case 2
  1719  000A24  B4D8               	btfsc	status,2,c
  1720  000A26  D7D9               	goto	l1007
  1721  000A28  0A01               	xorlw	1	; case 3
  1722  000A2A  B4D8               	btfsc	status,2,c
  1723  000A2C  D7D8               	goto	l1011
  1724  000A2E  0A07               	xorlw	7	; case 4
  1725  000A30  B4D8               	btfsc	status,2,c
  1726  000A32  D7D7               	goto	l1015
  1727  000A34  0A01               	xorlw	1	; case 5
  1728  000A36  B4D8               	btfsc	status,2,c
  1729  000A38  D7D6               	goto	l1019
  1730  000A3A  0A03               	xorlw	3	; case 6
  1731  000A3C  B4D8               	btfsc	status,2,c
  1732  000A3E  D7D5               	goto	l1023
  1733  000A40  0A01               	xorlw	1	; case 7
  1734  000A42  B4D8               	btfsc	status,2,c
  1735  000A44  D7D4               	goto	l1027
  1736  000A46  0A0F               	xorlw	15	; case 8
  1737  000A48  B4D8               	btfsc	status,2,c
  1738  000A4A  D7D3               	goto	l1031
  1739  000A4C  0A01               	xorlw	1	; case 9
  1740  000A4E  B4D8               	btfsc	status,2,c
  1741  000A50  D7D2               	goto	l1035
  1742  000A52  0A03               	xorlw	3	; case 10
  1743  000A54  B4D8               	btfsc	status,2,c
  1744  000A56  D7D1               	goto	l1039
  1745  000A58  0A01               	xorlw	1	; case 11
  1746  000A5A  B4D8               	btfsc	status,2,c
  1747  000A5C  D7D0               	goto	l1043
  1748  000A5E  0A07               	xorlw	7	; case 12
  1749  000A60  B4D8               	btfsc	status,2,c
  1750  000A62  D7CF               	goto	l1047
  1751  000A64                     l1055:
  1752                           
  1753                           ;ADC.c: 66:  ADCON2 = 0x91;
  1754  000A64  0E91               	movlw	145
  1755  000A66  6EC0               	movwf	4032,c	;volatile
  1756                           
  1757                           ;ADC.c: 67:  ADCON0bits.ADON = 1;
  1758  000A68  80C2               	bsf	4034,0,c	;volatile
  1759  000A6A  0012               	return		;funcret
  1760  000A6C                     __end_of_ADC_CONFIG:
  1761                           	opt callstack 0
  1762                           
  1763                           	psect	rparam
  1764  0000                     tosu	equ	0xFFF
  1765                           tosh	equ	0xFFE
  1766                           tosl	equ	0xFFD
  1767                           stkptr	equ	0xFFC
  1768                           pclatu	equ	0xFFB
  1769                           pclath	equ	0xFFA
  1770                           pcl	equ	0xFF9
  1771                           tblptru	equ	0xFF8
  1772                           tblptrh	equ	0xFF7
  1773                           tblptrl	equ	0xFF6
  1774                           tablat	equ	0xFF5
  1775                           prodh	equ	0xFF4
  1776                           prodl	equ	0xFF3
  1777                           indf0	equ	0xFEF
  1778                           postinc0	equ	0xFEE
  1779                           postdec0	equ	0xFED
  1780                           preinc0	equ	0xFEC
  1781                           plusw0	equ	0xFEB
  1782                           fsr0h	equ	0xFEA
  1783                           fsr0l	equ	0xFE9
  1784                           wreg	equ	0xFE8
  1785                           indf1	equ	0xFE7
  1786                           postinc1	equ	0xFE6
  1787                           postdec1	equ	0xFE5
  1788                           preinc1	equ	0xFE4
  1789                           plusw1	equ	0xFE3
  1790                           fsr1h	equ	0xFE2
  1791                           fsr1l	equ	0xFE1
  1792                           bsr	equ	0xFE0
  1793                           indf2	equ	0xFDF
  1794                           postinc2	equ	0xFDE
  1795                           postdec2	equ	0xFDD
  1796                           preinc2	equ	0xFDC
  1797                           plusw2	equ	0xFDB
  1798                           fsr2h	equ	0xFDA
  1799                           fsr2l	equ	0xFD9
  1800                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_DIGITOS
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _DIGITOS->___awdiv
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3202
                                             10 COMRAM     2     2      0
                         _ADC_CONFIG
                      _ADC_CONVERTIR
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                            _DIGITOS
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     363
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _DIGITOS                                              2     0      2    1795
                                              8 COMRAM     2     0      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_CONVERTIR                                        5     3      2      25
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CONFIG                                           3     3      0     210
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CONFIG
   _ADC_CONVERTIR
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _DIGITOS
     ___awdiv
     ___wmul
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      1E       1       31.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E      20        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 24 12:15:13 2019

     __size_of_ADC_CONFIG 00B0           ADC_CONFIG@canal 0015                        l39 0C4E  
            ___awdiv@sign 0018       ___wmul@multiplicand 0015               __CFG_BORV$3 000000  
      __CFG_FOSC$XTPLL_XT 000000             ENVIA_CHAR@aux 0015                       l109 0B24  
                     l891 0B48                       l875 0B1A                       l999 09C8  
                     u230 0AB2                       u317 0910                       _PR2 000FCB  
                     u407 0B14                       u327 0928                       u417 0B28  
                     u337 0B62                       u427 0B36                       u347 0B70  
                     u437 0B40                       u357 0B80                       u447 0CF0  
                     u367 0BC0                       u377 0BF4                       u387 0AFC  
                     u397 0B0A              __CFG_BOR$OFF 000000    __size_of_ADC_CONVERTIR 002C  
             LEER_LCD@aux 0013                       wreg 000FE8              ?_CURSOR_HOME 0013  
         __end_of_DIGITOS 0902            ??_ENVIA_NIBBLE 0013              __CFG_LVP$OFF 000000  
          ENVIA_CHAR@dato 0014              __CFG_WDT$OFF 000000                      l1011 09DE  
                    l1003 09D6                      l1031 09F2                      l1023 09EA  
                    l1015 09E2                      l1007 09DA                      l1043 09FE  
                    l1035 09F6                      l1027 09EE                      l1019 09E6  
                    l1053 0A06                      l1047 0A02                      l1039 09FA  
                    l1055 0A64                      l1251 0AAE                      l1243 0A90  
                    l1261 0ACE                      l1237 0A80                      l1335 0950  
                    l1089 0CD0                      l1249 0AA6                      l1265 0AD8  
                    l1339 0958                      l1269 0AE6                      l1295 0C24  
                    l1289 0CB0                      l1299 0C42                      STR_1 0801  
                    _LATD 000F8C              __CFG_PWRT$ON 000000                      _main 0902  
                    prodh 000FF4                      prodl 000FF3                      start 0000  
           ?_CURSOR_ONOFF 0013             __CFG_MCLRE$ON 000000              ___param_bank 000000  
         ??_ENVIA_LCD_CMD 0014          __end_of_LEER_LCD 0B52             __CFG_PLLDIV$1 000000  
          __CFG_CCP2MX$ON 000000                     ?_main 0013           __end_of___awdiv 0AF0  
         ___awdiv@divisor 0015                     _T2CON 000FCA           ___awdiv@counter 0017  
                   _PORTD 000F83       __size_of_LCD_CONFIG 0060                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISD 000F95                     _TRISE 000F96  
     __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0016                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0016             _ADC_CONVERTIR 0C4C  
         __initialization 0CFA              __end_of_main 09BC           _ESCRIBE_MENSAJE 0C1A  
               ??_DIGITOS 001D                    ??_main 001D             __activetblptr 000002  
        ADC_CONVERTIR@num 0016              ??_ADC_CONFIG 0013                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  _ADRESL 000FC3                    _CCPR1L 000FBE          ___awdiv@dividend 0013  
          ?_ADC_CONVERTIR 0013        __end_of_ADC_CONFIG 0A6C                    ___wmul 0C78  
               ??___awdiv 0017      __end_of_ENVIA_NIBBLE 0CFA                    _digdec 0009  
                  _digcen 000B                    _digdmi 000F                    _digmil 000D  
                  _diguni 0007       __size_of_POS_CURSOR 0024                    clear_0 0D00  
        ___awdiv@quotient 0019              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0013                __accesstop 0060   __end_of__initialization 0D06  
         __CFG_PBADEN$OFF 000000              ??_LCD_CONFIG 0016             ___rparam_used 000001  
            ??_ENVIA_CHAR 0014   __end_of_ESCRIBE_MENSAJE 0C4C            __pcstackCOMRAM 0013  
        ENVIA_LCD_CMD@aux 0015      __end_of_CURSOR_ONOFF 0CDE        __end_of_LCD_CONFIG 0BB2  
      __end_of_ENVIA_CHAR 0BE6           ??_ADC_CONVERTIR 0015                ??_LEER_LCD 0013  
        ENVIA_NIBBLE@dato 0013                   ?___wmul 0013                   _CCP1CON 000FBD  
                 _DIGITOS 0810              ??_POS_CURSOR 0017           __CFG_VREGEN$OFF 000000  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0016                   ___awdiv 0A6C           __size_of___wmul 0026  
            __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0C1A                   __pcinit 0CFA  
      __end_of_POS_CURSOR 0CC2                   __ramtop 0800                   __ptext0 0902  
                 __ptext1 0C9E                   __ptext2 0B52                   __ptext3 0C1A  
                 __ptext4 0BB2                   __ptext5 0810                   __ptext6 0C78  
                 __ptext7 0A6C                   __ptext8 0CC2                   __ptext9 0D10  
            _ENVIA_NIBBLE 0CDE      end_of_initialization 0D06             __Lmediumconst 0000  
                 postinc0 000FEE     __size_of_CURSOR_ONOFF 001C                 _PORTBbits 000F81  
               _TRISCbits 000F94         __size_of_LEER_LCD 0062              _CURSOR_ONOFF 0CC2  
      CURSOR_ONOFF@estado 0016            __end_of___wmul 0C9E             ??_CURSOR_HOME 0016  
     start_initialization 0CFA         ENVIA_LCD_CMD@dato 0014              DIGITOS@valor 001B  
                ??___wmul 0017                  ?_DIGITOS 001B               __pbssCOMRAM 0001  
     __end_of_CURSOR_HOME 0D18     __end_of_ADC_CONVERTIR 0C78                  ?___awdiv 0013  
             __smallconst 0800                  _LEER_LCD 0AF0            ___wmul@product 0017  
                _LATDbits 000F8C          __CFG_WDTPS$32768 000000                 _temporal2 0003  
               _temporal3 0001          ESCRIBE_MENSAJE@i 001B            POS_CURSOR@fila 0017  
__size_of_ESCRIBE_MENSAJE 0032                _ADCON0bits 000FC2         ___wmul@multiplier 0013  
        __size_of_DIGITOS 00F2               _CURSOR_HOME 0D10                _ADC_CONFIG 09BC  
  __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000                  __Lrparam 0000  
        __size_of___awdiv 0084                  __ptext10 0BE6                  __ptext11 0AF0  
                __ptext12 0CDE                  __ptext13 0C4C                  __ptext14 09BC  
           __size_of_main 00BA                _LCD_CONFIG 0B52                _ENVIA_CHAR 0BB2  
                _temporal 0005             _ENVIA_LCD_CMD 0BE6     __CFG_CPUDIV$OSC1_PLL2 000000  
             ?_ADC_CONFIG 0013         ??_ESCRIBE_MENSAJE 0019     ESCRIBE_MENSAJE@cadena 0016  
            _resultadomon 0011            ?_ENVIA_LCD_CMD 0013             ?_ENVIA_NIBBLE 0013  
              _POS_CURSOR 0C9E               ?_LCD_CONFIG 0013        ESCRIBE_MENSAJE@tam 0018  
             ?_ENVIA_CHAR 0013         POS_CURSOR@columna 0016  
