

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu May 23 21:01:51 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 2.05
    28                           ; Generated 20/12/2018 GMT
    29                           ; 
    30                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     _LATCbits	set	3979
    62  0000                     _TRISCbits	set	3988
    63  0000                     _PORTD	set	3971
    64  0000                     _LATD	set	3980
    65  0000                     _TRISD	set	3989
    66  0000                     _LATDbits	set	3980
    67  0000                     _ADRESL	set	4035
    68  0000                     _ADCON0bits	set	4034
    69  0000                     _ADCON2	set	4032
    70  0000                     _ADCON0	set	4034
    71  0000                     _ADCON1	set	4033
    72  0000                     _TRISB	set	3987
    73  0000                     _TRISE	set	3990
    74  0000                     _TRISA	set	3986
    75  0000                     _ADRESH	set	4036
    76                           
    77                           	psect	smallconst
    78  000800                     __psmallconst:
    79                           	opt callstack 0
    80  000800  00                 	db	0
    81  000801                     STR_1:
    82  000801  43                 	db	67	;'C'
    83  000802  61                 	db	97	;'a'
    84  000803  6E                 	db	110	;'n'
    85  000804  61                 	db	97	;'a'
    86  000805  6C                 	db	108	;'l'
    87  000806  6F                 	db	111	;'o'
    88  000807  6E                 	db	110	;'n'
    89  000808  20                 	db	32
    90  000809  41                 	db	65	;'A'
    91  00080A  44                 	db	68	;'D'
    92  00080B  43                 	db	67	;'C'
    93  00080C  4D                 	db	77	;'M'
    94  00080D  4F                 	db	79	;'O'
    95  00080E  4E                 	db	78	;'N'
    96  00080F  3A                 	db	58	;':'
    97  000810  00                 	db	0
    98                           
    99                           ; #config settings
   100  000811  00                 	db	0	; dummy byte at the end
   101  0000                     
   102                           	psect	cinit
   103  000CDE                     __pcinit:
   104                           	opt callstack 0
   105  000CDE                     start_initialization:
   106                           	opt callstack 0
   107  000CDE                     __initialization:
   108                           	opt callstack 0
   109                           
   110                           ; Clear objects allocated to COMRAM (18 bytes)
   111  000CDE  EE00  F001         	lfsr	0,__pbssCOMRAM
   112  000CE2  0E12               	movlw	18
   113  000CE4                     clear_0:
   114  000CE4  6AEE               	clrf	postinc0,c
   115  000CE6  06E8               	decf	wreg,f,c
   116  000CE8  E1FD               	bnz	clear_0
   117  000CEA                     end_of_initialization:
   118                           	opt callstack 0
   119  000CEA                     __end_of__initialization:
   120                           	opt callstack 0
   121  000CEA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   122  000CEC  6EF8               	movwf	tblptru,c
   123  000CEE  0100               	movlb	0
   124  000CF0  EFDA  F004         	goto	_main	;jump to C main() function
   125                           
   126                           	psect	bssCOMRAM
   127  000001                     __pbssCOMRAM:
   128                           	opt callstack 0
   129  000001                     _temporal3:
   130                           	opt callstack 0
   131  000001                     	ds	2
   132  000003                     _temporal2:
   133                           	opt callstack 0
   134  000003                     	ds	2
   135  000005                     _temporal:
   136                           	opt callstack 0
   137  000005                     	ds	2
   138  000007                     _diguni:
   139                           	opt callstack 0
   140  000007                     	ds	2
   141  000009                     _digdec:
   142                           	opt callstack 0
   143  000009                     	ds	2
   144  00000B                     _digcen:
   145                           	opt callstack 0
   146  00000B                     	ds	2
   147  00000D                     _digmil:
   148                           	opt callstack 0
   149  00000D                     	ds	2
   150  00000F                     _digdmi:
   151                           	opt callstack 0
   152  00000F                     	ds	2
   153  000011                     _resulton:
   154                           	opt callstack 0
   155  000011                     	ds	2
   156                           
   157                           	psect	cstackCOMRAM
   158  000013                     __pcstackCOMRAM:
   159                           	opt callstack 0
   160  000013                     ??_ADC_CONFIG:
   161  000013                     ?_ADC_CONVERTIR:
   162                           	opt callstack 0
   163  000013                     ?___wmul:
   164                           	opt callstack 0
   165  000013                     ?___awdiv:
   166                           	opt callstack 0
   167  000013                     ENVIA_NIBBLE@dato:
   168                           	opt callstack 0
   169  000013                     LEER_LCD@aux:
   170                           	opt callstack 0
   171  000013                     ___wmul@multiplier:
   172                           	opt callstack 0
   173  000013                     ___awdiv@dividend:
   174                           	opt callstack 0
   175                           
   176                           ; 2 bytes @ 0x0
   177  000013                     	ds	1
   178  000014                     ENVIA_CHAR@dato:
   179                           	opt callstack 0
   180  000014                     ENVIA_LCD_CMD@dato:
   181                           	opt callstack 0
   182                           
   183                           ; 1 bytes @ 0x1
   184  000014                     	ds	1
   185  000015                     ??_ADC_CONVERTIR:
   186  000015                     ADC_CONFIG@canal:
   187                           	opt callstack 0
   188  000015                     ENVIA_CHAR@aux:
   189                           	opt callstack 0
   190  000015                     ENVIA_LCD_CMD@aux:
   191                           	opt callstack 0
   192  000015                     ___wmul@multiplicand:
   193                           	opt callstack 0
   194  000015                     ___awdiv@divisor:
   195                           	opt callstack 0
   196                           
   197                           ; 2 bytes @ 0x2
   198  000015                     	ds	1
   199  000016                     ??_LCD_CONFIG:
   200  000016                     POS_CURSOR@columna:
   201                           	opt callstack 0
   202  000016                     CURSOR_ONOFF@estado:
   203                           	opt callstack 0
   204  000016                     ADC_CONVERTIR@num:
   205                           	opt callstack 0
   206  000016                     ESCRIBE_MENSAJE@cadena:
   207                           	opt callstack 0
   208                           
   209                           ; 2 bytes @ 0x3
   210  000016                     	ds	1
   211  000017                     POS_CURSOR@fila:
   212                           	opt callstack 0
   213  000017                     ___awdiv@counter:
   214                           	opt callstack 0
   215  000017                     ___wmul@product:
   216                           	opt callstack 0
   217                           
   218                           ; 2 bytes @ 0x4
   219  000017                     	ds	1
   220  000018                     ESCRIBE_MENSAJE@tam:
   221                           	opt callstack 0
   222  000018                     ___awdiv@sign:
   223                           	opt callstack 0
   224                           
   225                           ; 1 bytes @ 0x5
   226  000018                     	ds	1
   227  000019                     ??_ESCRIBE_MENSAJE:
   228  000019                     ___awdiv@quotient:
   229                           	opt callstack 0
   230                           
   231                           ; 2 bytes @ 0x6
   232  000019                     	ds	2
   233  00001B                     ESCRIBE_MENSAJE@i:
   234                           	opt callstack 0
   235  00001B                     DIGITOS@valor:
   236                           	opt callstack 0
   237                           
   238                           ; 2 bytes @ 0x8
   239  00001B                     	ds	2
   240  00001D                     ??_main:
   241                           
   242                           ; 1 bytes @ 0xA
   243  00001D                     	ds	2
   244                           
   245 ;;
   246 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   247 ;;
   248 ;; *************** function _main *****************
   249 ;; Defined at:
   250 ;;		line 48 in file "timoncambiaodosh.c"
   251 ;; Parameters:    Size  Location     Type
   252 ;;		None
   253 ;; Auto vars:     Size  Location     Type
   254 ;;		None
   255 ;; Return value:  Size  Location     Type
   256 ;;                  1    wreg      void 
   257 ;; Registers used:
   258 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   259 ;; Tracked objects:
   260 ;;		On entry : 0/0
   261 ;;		On exit  : 0/0
   262 ;;		Unchanged: 0/0
   263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   264 ;;      Params:         0       0       0       0       0       0       0       0       0
   265 ;;      Locals:         0       0       0       0       0       0       0       0       0
   266 ;;      Temps:          2       0       0       0       0       0       0       0       0
   267 ;;      Totals:         2       0       0       0       0       0       0       0       0
   268 ;;Total ram usage:        2 bytes
   269 ;; Hardware stack levels required when called:    3
   270 ;; This function calls:
   271 ;;		_ADC_CONFIG
   272 ;;		_ADC_CONVERTIR
   273 ;;		_CURSOR_HOME
   274 ;;		_CURSOR_ONOFF
   275 ;;		_DIGITOS
   276 ;;		_ENVIA_CHAR
   277 ;;		_ESCRIBE_MENSAJE
   278 ;;		_LCD_CONFIG
   279 ;;		_POS_CURSOR
   280 ;; This function is called by:
   281 ;;		Startup code after reset
   282 ;; This function uses a non-reentrant model
   283 ;;
   284                           
   285                           	psect	text0
   286  0009B4                     __ptext0:
   287                           	opt callstack 0
   288  0009B4                     _main:
   289                           	opt callstack 28
   290                           
   291                           ;timoncambiaodosh.c: 49:     ADC_CONFIG(0);
   292                           
   293                           ;incstack = 0
   294  0009B4  0E00               	movlw	0
   295  0009B6  EC82  F004         	call	_ADC_CONFIG
   296                           
   297                           ;timoncambiaodosh.c: 50:     TRISCbits.RC2 = 0;
   298  0009BA  9494               	bcf	3988,2,c	;volatile
   299                           
   300                           ;timoncambiaodosh.c: 51:     LATCbits.LC2 = 1;
   301  0009BC  848B               	bsf	3979,2,c	;volatile
   302                           
   303                           ;timoncambiaodosh.c: 52:     _delay((unsigned long)((500)*(4000000UL/4000.0)));
   304  0009BE  0E03               	movlw	3
   305  0009C0  6E1E               	movwf	(??_main+1)& (0+255),c
   306  0009C2  0E8A               	movlw	138
   307  0009C4  6E1D               	movwf	??_main& (0+255),c
   308  0009C6  0E56               	movlw	86
   309  0009C8                     u297:
   310  0009C8  2EE8               	decfsz	wreg,f,c
   311  0009CA  D7FE               	bra	u297
   312  0009CC  2E1D               	decfsz	??_main& (0+255),f,c
   313  0009CE  D7FC               	bra	u297
   314  0009D0  2E1E               	decfsz	(??_main+1)& (0+255),f,c
   315  0009D2  D7FA               	bra	u297
   316                           
   317                           ;timoncambiaodosh.c: 53:     TRISD = 0x00;
   318  0009D4  0E00               	movlw	0
   319  0009D6  6E95               	movwf	3989,c	;volatile
   320                           
   321                           ;timoncambiaodosh.c: 54:     LCD_CONFIG();
   322  0009D8  EC9B  F005         	call	_LCD_CONFIG	;wreg free
   323                           
   324                           ;timoncambiaodosh.c: 55:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
   325  0009DC  0E14               	movlw	20
   326  0009DE  6E1D               	movwf	??_main& (0+255),c
   327  0009E0  0E7A               	movlw	122
   328  0009E2                     u307:
   329  0009E2  2EE8               	decfsz	wreg,f,c
   330  0009E4  D7FE               	bra	u307
   331  0009E6  2E1D               	decfsz	??_main& (0+255),f,c
   332  0009E8  D7FC               	bra	u307
   333                           
   334                           ;timoncambiaodosh.c: 56:     CURSOR_ONOFF(1);
   335  0009EA  0E01               	movlw	1
   336  0009EC  EC53  F006         	call	_CURSOR_ONOFF
   337  0009F0                     l1307:
   338                           
   339                           ;timoncambiaodosh.c: 58:         resulton = ADC_CONVERTIR();
   340  0009F0  EC18  F006         	call	_ADC_CONVERTIR	;wreg free
   341  0009F4  C013  F011         	movff	?_ADC_CONVERTIR,_resulton
   342  0009F8  C014  F012         	movff	?_ADC_CONVERTIR+1,_resulton+1
   343                           
   344                           ;timoncambiaodosh.c: 59:         CURSOR_HOME();
   345  0009FC  EC7A  F006         	call	_CURSOR_HOME	;wreg free
   346                           
   347                           ;timoncambiaodosh.c: 60:         ESCRIBE_MENSAJE("Canalon ADCMON:", 15);
   348  000A00  0E01               	movlw	low STR_1
   349  000A02  6E16               	movwf	ESCRIBE_MENSAJE@cadena,c
   350  000A04  0E08               	movlw	high STR_1
   351  000A06  6E17               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   352  000A08  0E0F               	movlw	15
   353  000A0A  6E18               	movwf	ESCRIBE_MENSAJE@tam,c
   354  000A0C  ECFF  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   355                           
   356                           ;timoncambiaodosh.c: 61:         POS_CURSOR(2, 0);
   357  000A10  0E00               	movlw	0
   358  000A12  6E16               	movwf	POS_CURSOR@columna,c
   359  000A14  0E02               	movlw	2
   360  000A16  EC41  F006         	call	_POS_CURSOR
   361                           
   362                           ;timoncambiaodosh.c: 62:         DIGITOS(resulton);
   363  000A1A  C011  F01B         	movff	_resulton,DIGITOS@valor
   364  000A1E  C012  F01C         	movff	_resulton+1,DIGITOS@valor+1
   365  000A22  EC09  F004         	call	_DIGITOS	;wreg free
   366                           
   367                           ;timoncambiaodosh.c: 63:         ENVIA_CHAR(digdmi+0x30);
   368  000A26  500F               	movf	_digdmi,w,c
   369  000A28  0F30               	addlw	48
   370  000A2A  ECCB  F005         	call	_ENVIA_CHAR
   371                           
   372                           ;timoncambiaodosh.c: 64:         ENVIA_CHAR(digmil+0x30);
   373  000A2E  500D               	movf	_digmil,w,c
   374  000A30  0F30               	addlw	48
   375  000A32  ECCB  F005         	call	_ENVIA_CHAR
   376                           
   377                           ;timoncambiaodosh.c: 65:         ENVIA_CHAR(digcen+0x30);
   378  000A36  500B               	movf	_digcen,w,c
   379  000A38  0F30               	addlw	48
   380  000A3A  ECCB  F005         	call	_ENVIA_CHAR
   381                           
   382                           ;timoncambiaodosh.c: 66:         ENVIA_CHAR(digdec+0x30);
   383  000A3E  5009               	movf	_digdec,w,c
   384  000A40  0F30               	addlw	48
   385  000A42  ECCB  F005         	call	_ENVIA_CHAR
   386                           
   387                           ;timoncambiaodosh.c: 67:         ENVIA_CHAR(diguni+0x30);
   388  000A46  5007               	movf	_diguni,w,c
   389  000A48  0F30               	addlw	48
   390  000A4A  ECCB  F005         	call	_ENVIA_CHAR
   391  000A4E  D7D0               	goto	l1307
   392  000A50                     __end_of_main:
   393                           	opt callstack 0
   394                           
   395 ;; *************** function _POS_CURSOR *****************
   396 ;; Defined at:
   397 ;;		line 6 in file "LCD.c"
   398 ;; Parameters:    Size  Location     Type
   399 ;;  fila            1    wreg     unsigned char 
   400 ;;  columna         1    3[COMRAM] unsigned char 
   401 ;; Auto vars:     Size  Location     Type
   402 ;;  fila            1    4[COMRAM] unsigned char 
   403 ;; Return value:  Size  Location     Type
   404 ;;                  1    wreg      void 
   405 ;; Registers used:
   406 ;;		wreg, status,2, status,0, cstack
   407 ;; Tracked objects:
   408 ;;		On entry : 0/0
   409 ;;		On exit  : 0/0
   410 ;;		Unchanged: 0/0
   411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   412 ;;      Params:         1       0       0       0       0       0       0       0       0
   413 ;;      Locals:         1       0       0       0       0       0       0       0       0
   414 ;;      Temps:          0       0       0       0       0       0       0       0       0
   415 ;;      Totals:         2       0       0       0       0       0       0       0       0
   416 ;;Total ram usage:        2 bytes
   417 ;; Hardware stack levels used:    1
   418 ;; Hardware stack levels required when called:    2
   419 ;; This function calls:
   420 ;;		_ENVIA_LCD_CMD
   421 ;; This function is called by:
   422 ;;		_main
   423 ;; This function uses a non-reentrant model
   424 ;;
   425                           
   426                           	psect	text1
   427  000C82                     __ptext1:
   428                           	opt callstack 0
   429  000C82                     _POS_CURSOR:
   430                           	opt callstack 28
   431                           
   432                           ;incstack = 0
   433                           ;POS_CURSOR@fila stored from wreg
   434  000C82  6E17               	movwf	POS_CURSOR@fila,c
   435                           
   436                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   437  000C84  0417               	decf	POS_CURSOR@fila,w,c
   438  000C86  A4D8               	btfss	status,2,c
   439  000C88  D005               	goto	l1267
   440                           
   441                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   442  000C8A  5016               	movf	POS_CURSOR@columna,w,c
   443  000C8C  0F80               	addlw	128
   444  000C8E  ECE5  F005         	call	_ENVIA_LCD_CMD
   445                           
   446                           ;LCD.c: 11:  }
   447  000C92  0012               	return	
   448  000C94                     l1267:
   449  000C94  0E02               	movlw	2
   450  000C96  1817               	xorwf	POS_CURSOR@fila,w,c
   451  000C98  A4D8               	btfss	status,2,c
   452  000C9A  0012               	return	
   453                           
   454                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   455  000C9C  5016               	movf	POS_CURSOR@columna,w,c
   456  000C9E  0FC0               	addlw	192
   457  000CA0  ECE5  F005         	call	_ENVIA_LCD_CMD
   458  000CA4  0012               	return		;funcret
   459  000CA6                     __end_of_POS_CURSOR:
   460                           	opt callstack 0
   461                           
   462 ;; *************** function _LCD_CONFIG *****************
   463 ;; Defined at:
   464 ;;		line 72 in file "LCD.c"
   465 ;; Parameters:    Size  Location     Type
   466 ;;		None
   467 ;; Auto vars:     Size  Location     Type
   468 ;;		None
   469 ;; Return value:  Size  Location     Type
   470 ;;                  1    wreg      void 
   471 ;; Registers used:
   472 ;;		wreg, status,2, status,0, cstack
   473 ;; Tracked objects:
   474 ;;		On entry : 0/0
   475 ;;		On exit  : 0/0
   476 ;;		Unchanged: 0/0
   477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   478 ;;      Params:         0       0       0       0       0       0       0       0       0
   479 ;;      Locals:         0       0       0       0       0       0       0       0       0
   480 ;;      Temps:          1       0       0       0       0       0       0       0       0
   481 ;;      Totals:         1       0       0       0       0       0       0       0       0
   482 ;;Total ram usage:        1 bytes
   483 ;; Hardware stack levels used:    1
   484 ;; Hardware stack levels required when called:    2
   485 ;; This function calls:
   486 ;;		_ENVIA_LCD_CMD
   487 ;;		_ENVIA_NIBBLE
   488 ;; This function is called by:
   489 ;;		_main
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           	psect	text2
   494  000B36                     __ptext2:
   495                           	opt callstack 0
   496  000B36                     _LCD_CONFIG:
   497                           	opt callstack 28
   498                           
   499                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   500                           
   501                           ;incstack = 0
   502  000B36  908C               	bcf	3980,0,c	;volatile
   503                           
   504                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   505  000B38  928C               	bcf	3980,1,c	;volatile
   506                           
   507                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   508  000B3A  0E30               	movlw	48
   509  000B3C  EC61  F006         	call	_ENVIA_NIBBLE
   510                           
   511                           ;LCD.c: 77:         _delay(24000);
   512  000B40  0E20               	movlw	32
   513  000B42  6E16               	movwf	??_LCD_CONFIG& (0+255),c
   514  000B44  0E2A               	movlw	42
   515  000B46                     u317:
   516  000B46  2EE8               	decfsz	wreg,f,c
   517  000B48  D7FE               	bra	u317
   518  000B4A  2E16               	decfsz	??_LCD_CONFIG& (0+255),f,c
   519  000B4C  D7FC               	bra	u317
   520                           
   521                           ;LCD.c: 78:         _delay(24000);
   522  000B4E  0E20               	movlw	32
   523  000B50  6E16               	movwf	??_LCD_CONFIG& (0+255),c
   524  000B52  0E2A               	movlw	42
   525  000B54                     u327:
   526  000B54  2EE8               	decfsz	wreg,f,c
   527  000B56  D7FE               	bra	u327
   528  000B58  2E16               	decfsz	??_LCD_CONFIG& (0+255),f,c
   529  000B5A  D7FC               	bra	u327
   530                           
   531                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   532  000B5C  0E30               	movlw	48
   533  000B5E  EC61  F006         	call	_ENVIA_NIBBLE
   534                           
   535                           ;LCD.c: 83:  _delay(1200);
   536  000B62  0EF0               	movlw	240
   537  000B64                     u337:
   538  000B64  D000               	nop2	
   539  000B66  2EE8               	decfsz	wreg,f,c
   540  000B68  D7FD               	bra	u337
   541                           
   542                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   543  000B6A  0E30               	movlw	48
   544  000B6C  EC61  F006         	call	_ENVIA_NIBBLE
   545                           
   546                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   547  000B70  0E20               	movlw	32
   548  000B72  EC61  F006         	call	_ENVIA_NIBBLE
   549                           
   550                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   551  000B76  0E01               	movlw	1
   552  000B78  ECE5  F005         	call	_ENVIA_LCD_CMD
   553                           
   554                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   555  000B7C  0E28               	movlw	40
   556  000B7E  ECE5  F005         	call	_ENVIA_LCD_CMD
   557                           
   558                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   559  000B82  0E0F               	movlw	15
   560  000B84  ECE5  F005         	call	_ENVIA_LCD_CMD
   561                           
   562                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   563  000B88  0E06               	movlw	6
   564  000B8A  ECE5  F005         	call	_ENVIA_LCD_CMD
   565                           
   566                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   567  000B8E  0E01               	movlw	1
   568  000B90  ECE5  F005         	call	_ENVIA_LCD_CMD
   569  000B94  0012               	return		;funcret
   570  000B96                     __end_of_LCD_CONFIG:
   571                           	opt callstack 0
   572                           
   573 ;; *************** function _ESCRIBE_MENSAJE *****************
   574 ;; Defined at:
   575 ;;		line 41 in file "LCD.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   578 ;;		 -> STR_1(16), 
   579 ;;  tam             1    5[COMRAM] unsigned char 
   580 ;; Auto vars:     Size  Location     Type
   581 ;;  i               1    8[COMRAM] unsigned char 
   582 ;; Return value:  Size  Location     Type
   583 ;;                  1    wreg      void 
   584 ;; Registers used:
   585 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   586 ;; Tracked objects:
   587 ;;		On entry : 0/0
   588 ;;		On exit  : 0/0
   589 ;;		Unchanged: 0/0
   590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   591 ;;      Params:         3       0       0       0       0       0       0       0       0
   592 ;;      Locals:         1       0       0       0       0       0       0       0       0
   593 ;;      Temps:          2       0       0       0       0       0       0       0       0
   594 ;;      Totals:         6       0       0       0       0       0       0       0       0
   595 ;;Total ram usage:        6 bytes
   596 ;; Hardware stack levels used:    1
   597 ;; Hardware stack levels required when called:    2
   598 ;; This function calls:
   599 ;;		_ENVIA_CHAR
   600 ;; This function is called by:
   601 ;;		_main
   602 ;; This function uses a non-reentrant model
   603 ;;
   604                           
   605                           	psect	text3
   606  000BFE                     __ptext3:
   607                           	opt callstack 0
   608  000BFE                     _ESCRIBE_MENSAJE:
   609                           	opt callstack 28
   610                           
   611                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   612                           
   613                           ;incstack = 0
   614  000BFE  0E00               	movlw	0
   615  000C00  6E1B               	movwf	ESCRIBE_MENSAJE@i,c
   616                           
   617                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   618  000C02  0E00               	movlw	0
   619  000C04  6E1B               	movwf	ESCRIBE_MENSAJE@i,c
   620  000C06  D00F               	goto	l1277
   621  000C08                     l1273:
   622                           
   623                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   624  000C08  501B               	movf	ESCRIBE_MENSAJE@i,w,c
   625  000C0A  2416               	addwf	ESCRIBE_MENSAJE@cadena,w,c
   626  000C0C  6E19               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
   627  000C0E  0E00               	movlw	0
   628  000C10  2017               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
   629  000C12  6E1A               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
   630  000C14  C019  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   631  000C18  C01A  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   632  000C1C                     	if	0	;tblptru may be non-zero
   633  000C1C                     	endif
   634  000C1C                     	if	0	;tblptru may be non-zero
   635  000C1C                     	endif
   636  000C1C  0008               	tblrd		*
   637  000C1E  50F5               	movf	tablat,w,c
   638  000C20  ECCB  F005         	call	_ENVIA_CHAR
   639                           
   640                           ;LCD.c: 47:  }
   641  000C24  2A1B               	incf	ESCRIBE_MENSAJE@i,f,c
   642  000C26                     l1277:
   643  000C26  5018               	movf	ESCRIBE_MENSAJE@tam,w,c
   644  000C28  5C1B               	subwf	ESCRIBE_MENSAJE@i,w,c
   645  000C2A  B0D8               	btfsc	status,0,c
   646  000C2C  0012               	return	
   647  000C2E  D7EC               	goto	l1273
   648  000C30                     __end_of_ESCRIBE_MENSAJE:
   649                           	opt callstack 0
   650                           
   651 ;; *************** function _ENVIA_CHAR *****************
   652 ;; Defined at:
   653 ;;		line 50 in file "LCD.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;  dato            1    wreg     unsigned char 
   656 ;; Auto vars:     Size  Location     Type
   657 ;;  dato            1    1[COMRAM] unsigned char 
   658 ;;  aux             1    2[COMRAM] unsigned char 
   659 ;; Return value:  Size  Location     Type
   660 ;;                  1    wreg      void 
   661 ;; Registers used:
   662 ;;		wreg, status,2, status,0, cstack
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   668 ;;      Params:         0       0       0       0       0       0       0       0       0
   669 ;;      Locals:         2       0       0       0       0       0       0       0       0
   670 ;;      Temps:          0       0       0       0       0       0       0       0       0
   671 ;;      Totals:         2       0       0       0       0       0       0       0       0
   672 ;;Total ram usage:        2 bytes
   673 ;; Hardware stack levels used:    1
   674 ;; Hardware stack levels required when called:    1
   675 ;; This function calls:
   676 ;;		_ENVIA_NIBBLE
   677 ;;		_LEER_LCD
   678 ;; This function is called by:
   679 ;;		_ESCRIBE_MENSAJE
   680 ;;		_main
   681 ;;		_GENERACARACTER
   682 ;; This function uses a non-reentrant model
   683 ;;
   684                           
   685                           	psect	text4
   686  000B96                     __ptext4:
   687                           	opt callstack 0
   688  000B96                     _ENVIA_CHAR:
   689                           	opt callstack 28
   690                           
   691                           ;incstack = 0
   692                           ;ENVIA_CHAR@dato stored from wreg
   693  000B96  6E14               	movwf	ENVIA_CHAR@dato,c
   694                           
   695                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   696  000B98  808C               	bsf	3980,0,c	;volatile
   697                           
   698                           ;LCD.c: 54:  LEER_LCD();
   699  000B9A  EC6A  F005         	call	_LEER_LCD	;wreg free
   700                           
   701                           ;LCD.c: 55:  TRISD = 0x00;
   702  000B9E  0E00               	movlw	0
   703  000BA0  6E95               	movwf	3989,c	;volatile
   704                           
   705                           ;LCD.c: 56:         _delay(1200);
   706  000BA2  0EF0               	movlw	240
   707  000BA4                     u347:
   708  000BA4  D000               	nop2	
   709  000BA6  2EE8               	decfsz	wreg,f,c
   710  000BA8  D7FD               	bra	u347
   711                           
   712                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
   713  000BAA  928C               	bcf	3980,1,c	;volatile
   714                           
   715                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
   716  000BAC  948C               	bcf	3980,2,c	;volatile
   717                           
   718                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
   719  000BAE  808C               	bsf	3980,0,c	;volatile
   720                           
   721                           ;LCD.c: 61:  aux = dato & 0xF0;
   722  000BB0  5014               	movf	ENVIA_CHAR@dato,w,c
   723  000BB2  0BF0               	andlw	240
   724  000BB4  6E15               	movwf	ENVIA_CHAR@aux,c
   725                           
   726                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
   727  000BB6  5015               	movf	ENVIA_CHAR@aux,w,c
   728  000BB8  EC61  F006         	call	_ENVIA_NIBBLE
   729                           
   730                           ;LCD.c: 63:  aux = dato << 4;
   731  000BBC  3814               	swapf	ENVIA_CHAR@dato,w,c
   732  000BBE  0BF0               	andlw	240
   733  000BC0  6E15               	movwf	ENVIA_CHAR@aux,c
   734                           
   735                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
   736  000BC2  5015               	movf	ENVIA_CHAR@aux,w,c
   737  000BC4  EC61  F006         	call	_ENVIA_NIBBLE
   738  000BC8  0012               	return		;funcret
   739  000BCA                     __end_of_ENVIA_CHAR:
   740                           	opt callstack 0
   741                           
   742 ;; *************** function _DIGITOS *****************
   743 ;; Defined at:
   744 ;;		line 36 in file "timoncambiaodosh.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;  valor           2    8[COMRAM] int 
   747 ;; Auto vars:     Size  Location     Type
   748 ;;		None
   749 ;; Return value:  Size  Location     Type
   750 ;;                  1    wreg      void 
   751 ;; Registers used:
   752 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   753 ;; Tracked objects:
   754 ;;		On entry : 0/0
   755 ;;		On exit  : 0/0
   756 ;;		Unchanged: 0/0
   757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   758 ;;      Params:         2       0       0       0       0       0       0       0       0
   759 ;;      Locals:         0       0       0       0       0       0       0       0       0
   760 ;;      Temps:          0       0       0       0       0       0       0       0       0
   761 ;;      Totals:         2       0       0       0       0       0       0       0       0
   762 ;;Total ram usage:        2 bytes
   763 ;; Hardware stack levels used:    1
   764 ;; Hardware stack levels required when called:    1
   765 ;; This function calls:
   766 ;;		___awdiv
   767 ;;		___wmul
   768 ;; This function is called by:
   769 ;;		_main
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           	psect	text5
   774  000812                     __ptext5:
   775                           	opt callstack 0
   776  000812                     _DIGITOS:
   777                           	opt callstack 29
   778                           
   779                           ;timoncambiaodosh.c: 37:     digdmi = valor / 10000;
   780                           
   781                           ;incstack = 0
   782  000812  C01B  F013         	movff	DIGITOS@valor,___awdiv@dividend
   783  000816  C01C  F014         	movff	DIGITOS@valor+1,___awdiv@dividend+1
   784  00081A  0E27               	movlw	39
   785  00081C  6E16               	movwf	___awdiv@divisor+1,c
   786  00081E  0E10               	movlw	16
   787  000820  6E15               	movwf	___awdiv@divisor,c
   788  000822  EC28  F005         	call	___awdiv	;wreg free
   789  000826  C013  F00F         	movff	?___awdiv,_digdmi
   790  00082A  C014  F010         	movff	?___awdiv+1,_digdmi+1
   791                           
   792                           ;timoncambiaodosh.c: 38:     temporal3 = valor - (digdmi * 10000);
   793  00082E  C00F  F013         	movff	_digdmi,___wmul@multiplier
   794  000832  C010  F014         	movff	_digdmi+1,___wmul@multiplier+1
   795  000836  0ED8               	movlw	216
   796  000838  6E16               	movwf	___wmul@multiplicand+1,c
   797  00083A  0EF0               	movlw	240
   798  00083C  6E15               	movwf	___wmul@multiplicand,c
   799  00083E  EC2E  F006         	call	___wmul	;wreg free
   800  000842  501B               	movf	DIGITOS@valor,w,c
   801  000844  2413               	addwf	?___wmul,w,c
   802  000846  6E01               	movwf	_temporal3,c
   803  000848  501C               	movf	DIGITOS@valor+1,w,c
   804  00084A  2014               	addwfc	?___wmul+1,w,c
   805  00084C  6E02               	movwf	_temporal3+1,c
   806                           
   807                           ;timoncambiaodosh.c: 39:     digmil = temporal3 / 1000;
   808  00084E  C001  F013         	movff	_temporal3,___awdiv@dividend
   809  000852  C002  F014         	movff	_temporal3+1,___awdiv@dividend+1
   810  000856  0E03               	movlw	3
   811  000858  6E16               	movwf	___awdiv@divisor+1,c
   812  00085A  0EE8               	movlw	232
   813  00085C  6E15               	movwf	___awdiv@divisor,c
   814  00085E  EC28  F005         	call	___awdiv	;wreg free
   815  000862  C013  F00D         	movff	?___awdiv,_digmil
   816  000866  C014  F00E         	movff	?___awdiv+1,_digmil+1
   817                           
   818                           ;timoncambiaodosh.c: 40:     temporal = temporal3 - (digmil * 1000);
   819  00086A  C00D  F013         	movff	_digmil,___wmul@multiplier
   820  00086E  C00E  F014         	movff	_digmil+1,___wmul@multiplier+1
   821  000872  0EFC               	movlw	252
   822  000874  6E16               	movwf	___wmul@multiplicand+1,c
   823  000876  0E18               	movlw	24
   824  000878  6E15               	movwf	___wmul@multiplicand,c
   825  00087A  EC2E  F006         	call	___wmul	;wreg free
   826  00087E  5001               	movf	_temporal3,w,c
   827  000880  2413               	addwf	?___wmul,w,c
   828  000882  6E05               	movwf	_temporal,c
   829  000884  5002               	movf	_temporal3+1,w,c
   830  000886  2014               	addwfc	?___wmul+1,w,c
   831  000888  6E06               	movwf	_temporal+1,c
   832                           
   833                           ;timoncambiaodosh.c: 41:     digcen = temporal / 100;
   834  00088A  C005  F013         	movff	_temporal,___awdiv@dividend
   835  00088E  C006  F014         	movff	_temporal+1,___awdiv@dividend+1
   836  000892  0E00               	movlw	0
   837  000894  6E16               	movwf	___awdiv@divisor+1,c
   838  000896  0E64               	movlw	100
   839  000898  6E15               	movwf	___awdiv@divisor,c
   840  00089A  EC28  F005         	call	___awdiv	;wreg free
   841  00089E  C013  F00B         	movff	?___awdiv,_digcen
   842  0008A2  C014  F00C         	movff	?___awdiv+1,_digcen+1
   843                           
   844                           ;timoncambiaodosh.c: 42:     temporal2 = temporal - (digcen * 100);
   845  0008A6  C00B  F013         	movff	_digcen,___wmul@multiplier
   846  0008AA  C00C  F014         	movff	_digcen+1,___wmul@multiplier+1
   847  0008AE  0EFF               	movlw	255
   848  0008B0  6E16               	movwf	___wmul@multiplicand+1,c
   849  0008B2  0E9C               	movlw	156
   850  0008B4  6E15               	movwf	___wmul@multiplicand,c
   851  0008B6  EC2E  F006         	call	___wmul	;wreg free
   852  0008BA  5005               	movf	_temporal,w,c
   853  0008BC  2413               	addwf	?___wmul,w,c
   854  0008BE  6E03               	movwf	_temporal2,c
   855  0008C0  5006               	movf	_temporal+1,w,c
   856  0008C2  2014               	addwfc	?___wmul+1,w,c
   857  0008C4  6E04               	movwf	_temporal2+1,c
   858                           
   859                           ;timoncambiaodosh.c: 43:     digdec = temporal2 / 10;
   860  0008C6  C003  F013         	movff	_temporal2,___awdiv@dividend
   861  0008CA  C004  F014         	movff	_temporal2+1,___awdiv@dividend+1
   862  0008CE  0E00               	movlw	0
   863  0008D0  6E16               	movwf	___awdiv@divisor+1,c
   864  0008D2  0E0A               	movlw	10
   865  0008D4  6E15               	movwf	___awdiv@divisor,c
   866  0008D6  EC28  F005         	call	___awdiv	;wreg free
   867  0008DA  C013  F009         	movff	?___awdiv,_digdec
   868  0008DE  C014  F00A         	movff	?___awdiv+1,_digdec+1
   869                           
   870                           ;timoncambiaodosh.c: 44:     diguni = temporal2 - (digdec * 10);
   871  0008E2  C009  F013         	movff	_digdec,___wmul@multiplier
   872  0008E6  C00A  F014         	movff	_digdec+1,___wmul@multiplier+1
   873  0008EA  0EFF               	movlw	255
   874  0008EC  6E16               	movwf	___wmul@multiplicand+1,c
   875  0008EE  0EF6               	movlw	246
   876  0008F0  6E15               	movwf	___wmul@multiplicand,c
   877  0008F2  EC2E  F006         	call	___wmul	;wreg free
   878  0008F6  5003               	movf	_temporal2,w,c
   879  0008F8  2413               	addwf	?___wmul,w,c
   880  0008FA  6E07               	movwf	_diguni,c
   881  0008FC  5004               	movf	_temporal2+1,w,c
   882  0008FE  2014               	addwfc	?___wmul+1,w,c
   883  000900  6E08               	movwf	_diguni+1,c
   884  000902  0012               	return		;funcret
   885  000904                     __end_of_DIGITOS:
   886                           	opt callstack 0
   887                           
   888 ;; *************** function ___wmul *****************
   889 ;; Defined at:
   890 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;  multiplier      2    0[COMRAM] unsigned int 
   893 ;;  multiplicand    2    2[COMRAM] unsigned int 
   894 ;; Auto vars:     Size  Location     Type
   895 ;;  product         2    4[COMRAM] unsigned int 
   896 ;; Return value:  Size  Location     Type
   897 ;;                  2    0[COMRAM] unsigned int 
   898 ;; Registers used:
   899 ;;		wreg, status,2, status,0, prodl, prodh
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   905 ;;      Params:         4       0       0       0       0       0       0       0       0
   906 ;;      Locals:         2       0       0       0       0       0       0       0       0
   907 ;;      Temps:          0       0       0       0       0       0       0       0       0
   908 ;;      Totals:         6       0       0       0       0       0       0       0       0
   909 ;;Total ram usage:        6 bytes
   910 ;; Hardware stack levels used:    1
   911 ;; This function calls:
   912 ;;		Nothing
   913 ;; This function is called by:
   914 ;;		_DIGITOS
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           	psect	text6
   919  000C5C                     __ptext6:
   920                           	opt callstack 0
   921  000C5C                     ___wmul:
   922                           	opt callstack 29
   923                           
   924                           ;incstack = 0
   925  000C5C  5013               	movf	___wmul@multiplier,w,c
   926  000C5E  0215               	mulwf	___wmul@multiplicand,c
   927  000C60  CFF3 F017          	movff	prodl,___wmul@product
   928  000C64  CFF4 F018          	movff	prodh,___wmul@product+1
   929  000C68  5013               	movf	___wmul@multiplier,w,c
   930  000C6A  0216               	mulwf	___wmul@multiplicand+1,c
   931  000C6C  50F3               	movf	prodl,w,c
   932  000C6E  2618               	addwf	___wmul@product+1,f,c
   933  000C70  5014               	movf	___wmul@multiplier+1,w,c
   934  000C72  0215               	mulwf	___wmul@multiplicand,c
   935  000C74  50F3               	movf	prodl,w,c
   936  000C76  2618               	addwf	___wmul@product+1,f,c
   937  000C78  C017  F013         	movff	___wmul@product,?___wmul
   938  000C7C  C018  F014         	movff	___wmul@product+1,?___wmul+1
   939  000C80  0012               	return		;funcret
   940  000C82                     __end_of___wmul:
   941                           	opt callstack 0
   942                           
   943 ;; *************** function ___awdiv *****************
   944 ;; Defined at:
   945 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;  dividend        2    0[COMRAM] int 
   948 ;;  divisor         2    2[COMRAM] int 
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  quotient        2    6[COMRAM] int 
   951 ;;  sign            1    5[COMRAM] unsigned char 
   952 ;;  counter         1    4[COMRAM] unsigned char 
   953 ;; Return value:  Size  Location     Type
   954 ;;                  2    0[COMRAM] int 
   955 ;; Registers used:
   956 ;;		wreg, status,2, status,0
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   962 ;;      Params:         4       0       0       0       0       0       0       0       0
   963 ;;      Locals:         4       0       0       0       0       0       0       0       0
   964 ;;      Temps:          0       0       0       0       0       0       0       0       0
   965 ;;      Totals:         8       0       0       0       0       0       0       0       0
   966 ;;Total ram usage:        8 bytes
   967 ;; Hardware stack levels used:    1
   968 ;; This function calls:
   969 ;;		Nothing
   970 ;; This function is called by:
   971 ;;		_DIGITOS
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           	psect	text7
   976  000A50                     __ptext7:
   977                           	opt callstack 0
   978  000A50                     ___awdiv:
   979                           	opt callstack 29
   980                           
   981                           ;incstack = 0
   982  000A50  0E00               	movlw	0
   983  000A52  6E18               	movwf	___awdiv@sign,c
   984  000A54  AE16               	btfss	___awdiv@divisor+1,7,c
   985  000A56  D006               	goto	l1215
   986  000A58  6C15               	negf	___awdiv@divisor,c
   987  000A5A  1E16               	comf	___awdiv@divisor+1,f,c
   988  000A5C  B0D8               	btfsc	status,0,c
   989  000A5E  2A16               	incf	___awdiv@divisor+1,f,c
   990  000A60  0E01               	movlw	1
   991  000A62  6E18               	movwf	___awdiv@sign,c
   992  000A64                     l1215:
   993  000A64  AE14               	btfss	___awdiv@dividend+1,7,c
   994  000A66  D006               	goto	l1221
   995  000A68  6C13               	negf	___awdiv@dividend,c
   996  000A6A  1E14               	comf	___awdiv@dividend+1,f,c
   997  000A6C  B0D8               	btfsc	status,0,c
   998  000A6E  2A14               	incf	___awdiv@dividend+1,f,c
   999  000A70  0E01               	movlw	1
  1000  000A72  1A18               	xorwf	___awdiv@sign,f,c
  1001  000A74                     l1221:
  1002  000A74  0E00               	movlw	0
  1003  000A76  6E1A               	movwf	___awdiv@quotient+1,c
  1004  000A78  0E00               	movlw	0
  1005  000A7A  6E19               	movwf	___awdiv@quotient,c
  1006  000A7C  5015               	movf	___awdiv@divisor,w,c
  1007  000A7E  1016               	iorwf	___awdiv@divisor+1,w,c
  1008  000A80  B4D8               	btfsc	status,2,c
  1009  000A82  D01C               	goto	l1243
  1010  000A84  0E01               	movlw	1
  1011  000A86  6E17               	movwf	___awdiv@counter,c
  1012  000A88  D004               	goto	l1229
  1013  000A8A                     l1227:
  1014  000A8A  90D8               	bcf	status,0,c
  1015  000A8C  3615               	rlcf	___awdiv@divisor,f,c
  1016  000A8E  3616               	rlcf	___awdiv@divisor+1,f,c
  1017  000A90  2A17               	incf	___awdiv@counter,f,c
  1018  000A92                     l1229:
  1019  000A92  AE16               	btfss	___awdiv@divisor+1,7,c
  1020  000A94  D7FA               	goto	l1227
  1021  000A96                     u220:
  1022  000A96  90D8               	bcf	status,0,c
  1023  000A98  3619               	rlcf	___awdiv@quotient,f,c
  1024  000A9A  361A               	rlcf	___awdiv@quotient+1,f,c
  1025  000A9C  5015               	movf	___awdiv@divisor,w,c
  1026  000A9E  5C13               	subwf	___awdiv@dividend,w,c
  1027  000AA0  5016               	movf	___awdiv@divisor+1,w,c
  1028  000AA2  5814               	subwfb	___awdiv@dividend+1,w,c
  1029  000AA4  A0D8               	btfss	status,0,c
  1030  000AA6  D005               	goto	l1239
  1031  000AA8  5015               	movf	___awdiv@divisor,w,c
  1032  000AAA  5E13               	subwf	___awdiv@dividend,f,c
  1033  000AAC  5016               	movf	___awdiv@divisor+1,w,c
  1034  000AAE  5A14               	subwfb	___awdiv@dividend+1,f,c
  1035  000AB0  8019               	bsf	___awdiv@quotient,0,c
  1036  000AB2                     l1239:
  1037  000AB2  90D8               	bcf	status,0,c
  1038  000AB4  3216               	rrcf	___awdiv@divisor+1,f,c
  1039  000AB6  3215               	rrcf	___awdiv@divisor,f,c
  1040  000AB8  2E17               	decfsz	___awdiv@counter,f,c
  1041  000ABA  D7ED               	goto	u220
  1042  000ABC                     l1243:
  1043  000ABC  5018               	movf	___awdiv@sign,w,c
  1044  000ABE  B4D8               	btfsc	status,2,c
  1045  000AC0  D004               	goto	l1247
  1046  000AC2  6C19               	negf	___awdiv@quotient,c
  1047  000AC4  1E1A               	comf	___awdiv@quotient+1,f,c
  1048  000AC6  B0D8               	btfsc	status,0,c
  1049  000AC8  2A1A               	incf	___awdiv@quotient+1,f,c
  1050  000ACA                     l1247:
  1051  000ACA  C019  F013         	movff	___awdiv@quotient,?___awdiv
  1052  000ACE  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  1053  000AD2  0012               	return		;funcret
  1054  000AD4                     __end_of___awdiv:
  1055                           	opt callstack 0
  1056                           
  1057 ;; *************** function _CURSOR_ONOFF *****************
  1058 ;; Defined at:
  1059 ;;		line 35 in file "LCD.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;  estado          1    wreg     unsigned char 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  estado          1    3[COMRAM] unsigned char 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, status,2, status,0, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1073 ;;      Params:         0       0       0       0       0       0       0       0       0
  1074 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1076 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1077 ;;Total ram usage:        1 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    2
  1080 ;; This function calls:
  1081 ;;		_ENVIA_LCD_CMD
  1082 ;; This function is called by:
  1083 ;;		_main
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text8
  1088  000CA6                     __ptext8:
  1089                           	opt callstack 0
  1090  000CA6                     _CURSOR_ONOFF:
  1091                           	opt callstack 28
  1092                           
  1093                           ;incstack = 0
  1094                           ;CURSOR_ONOFF@estado stored from wreg
  1095  000CA6  6E16               	movwf	CURSOR_ONOFF@estado,c
  1096                           
  1097                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1098  000CA8  5016               	movf	CURSOR_ONOFF@estado,w,c
  1099  000CAA  A4D8               	btfss	status,2,c
  1100  000CAC  D003               	goto	l1079
  1101  000CAE  0E0E               	movlw	14
  1102  000CB0  ECE5  F005         	call	_ENVIA_LCD_CMD
  1103  000CB4                     l1079:
  1104                           
  1105                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1106  000CB4  0416               	decf	CURSOR_ONOFF@estado,w,c
  1107  000CB6  A4D8               	btfss	status,2,c
  1108  000CB8  0012               	return	
  1109  000CBA  0E0C               	movlw	12
  1110  000CBC  ECE5  F005         	call	_ENVIA_LCD_CMD
  1111  000CC0  0012               	return		;funcret
  1112  000CC2                     __end_of_CURSOR_ONOFF:
  1113                           	opt callstack 0
  1114                           
  1115 ;; *************** function _CURSOR_HOME *****************
  1116 ;; Defined at:
  1117 ;;		line 30 in file "LCD.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;		None
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;		None
  1122 ;; Return value:  Size  Location     Type
  1123 ;;                  1    wreg      void 
  1124 ;; Registers used:
  1125 ;;		wreg, status,2, status,0, cstack
  1126 ;; Tracked objects:
  1127 ;;		On entry : 0/0
  1128 ;;		On exit  : 0/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1131 ;;      Params:         0       0       0       0       0       0       0       0       0
  1132 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1134 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1135 ;;Total ram usage:        0 bytes
  1136 ;; Hardware stack levels used:    1
  1137 ;; Hardware stack levels required when called:    2
  1138 ;; This function calls:
  1139 ;;		_ENVIA_LCD_CMD
  1140 ;; This function is called by:
  1141 ;;		_main
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145                           	psect	text9
  1146  000CF4                     __ptext9:
  1147                           	opt callstack 0
  1148  000CF4                     _CURSOR_HOME:
  1149                           	opt callstack 28
  1150                           
  1151                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1152                           
  1153                           ;incstack = 0
  1154  000CF4  0E02               	movlw	2
  1155  000CF6  ECE5  F005         	call	_ENVIA_LCD_CMD
  1156  000CFA  0012               	return		;funcret
  1157  000CFC                     __end_of_CURSOR_HOME:
  1158                           	opt callstack 0
  1159                           
  1160 ;; *************** function _ENVIA_LCD_CMD *****************
  1161 ;; Defined at:
  1162 ;;		line 104 in file "LCD.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  dato            1    wreg     unsigned char 
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;  dato            1    1[COMRAM] unsigned char 
  1167 ;;  aux             1    2[COMRAM] unsigned char 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;                  1    wreg      void 
  1170 ;; Registers used:
  1171 ;;		wreg, status,2, status,0, cstack
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1177 ;;      Params:         0       0       0       0       0       0       0       0       0
  1178 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1179 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1180 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1181 ;;Total ram usage:        2 bytes
  1182 ;; Hardware stack levels used:    1
  1183 ;; Hardware stack levels required when called:    1
  1184 ;; This function calls:
  1185 ;;		_ENVIA_NIBBLE
  1186 ;;		_LEER_LCD
  1187 ;; This function is called by:
  1188 ;;		_POS_CURSOR
  1189 ;;		_CURSOR_HOME
  1190 ;;		_CURSOR_ONOFF
  1191 ;;		_LCD_CONFIG
  1192 ;;		_BLINK_CURSOR
  1193 ;;		_DISPLAY_ONOFF
  1194 ;;		_BORRAR_LCD
  1195 ;;		_GENERACARACTER
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199                           	psect	text10
  1200  000BCA                     __ptext10:
  1201                           	opt callstack 0
  1202  000BCA                     _ENVIA_LCD_CMD:
  1203                           	opt callstack 28
  1204                           
  1205                           ;incstack = 0
  1206                           ;ENVIA_LCD_CMD@dato stored from wreg
  1207  000BCA  6E14               	movwf	ENVIA_LCD_CMD@dato,c
  1208                           
  1209                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1210  000BCC  908C               	bcf	3980,0,c	;volatile
  1211                           
  1212                           ;LCD.c: 108:  LEER_LCD();
  1213  000BCE  EC6A  F005         	call	_LEER_LCD	;wreg free
  1214                           
  1215                           ;LCD.c: 109:  TRISD = 0b00000000;
  1216  000BD2  0E00               	movlw	0
  1217  000BD4  6E95               	movwf	3989,c	;volatile
  1218                           
  1219                           ;LCD.c: 111:         _delay(1200);
  1220  000BD6  0EF0               	movlw	240
  1221  000BD8                     u357:
  1222  000BD8  D000               	nop2	
  1223  000BDA  2EE8               	decfsz	wreg,f,c
  1224  000BDC  D7FD               	bra	u357
  1225                           
  1226                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1227  000BDE  928C               	bcf	3980,1,c	;volatile
  1228                           
  1229                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1230  000BE0  948C               	bcf	3980,2,c	;volatile
  1231                           
  1232                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1233  000BE2  908C               	bcf	3980,0,c	;volatile
  1234                           
  1235                           ;LCD.c: 115:  aux = dato & 0xF0;
  1236  000BE4  5014               	movf	ENVIA_LCD_CMD@dato,w,c
  1237  000BE6  0BF0               	andlw	240
  1238  000BE8  6E15               	movwf	ENVIA_LCD_CMD@aux,c
  1239                           
  1240                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1241  000BEA  5015               	movf	ENVIA_LCD_CMD@aux,w,c
  1242  000BEC  EC61  F006         	call	_ENVIA_NIBBLE
  1243                           
  1244                           ;LCD.c: 117:  aux = dato<<4;
  1245  000BF0  3814               	swapf	ENVIA_LCD_CMD@dato,w,c
  1246  000BF2  0BF0               	andlw	240
  1247  000BF4  6E15               	movwf	ENVIA_LCD_CMD@aux,c
  1248                           
  1249                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1250  000BF6  5015               	movf	ENVIA_LCD_CMD@aux,w,c
  1251  000BF8  EC61  F006         	call	_ENVIA_NIBBLE
  1252  000BFC  0012               	return		;funcret
  1253  000BFE                     __end_of_ENVIA_LCD_CMD:
  1254                           	opt callstack 0
  1255                           
  1256 ;; *************** function _LEER_LCD *****************
  1257 ;; Defined at:
  1258 ;;		line 121 in file "LCD.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;		None
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  aux             1    0[COMRAM] unsigned char 
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  1    wreg      void 
  1265 ;; Registers used:
  1266 ;;		wreg, status,2, status,0
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1272 ;;      Params:         0       0       0       0       0       0       0       0       0
  1273 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1274 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1275 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1276 ;;Total ram usage:        1 bytes
  1277 ;; Hardware stack levels used:    1
  1278 ;; This function calls:
  1279 ;;		Nothing
  1280 ;; This function is called by:
  1281 ;;		_ENVIA_CHAR
  1282 ;;		_ENVIA_LCD_CMD
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           	psect	text11
  1287  000AD4                     __ptext11:
  1288                           	opt callstack 0
  1289  000AD4                     _LEER_LCD:
  1290                           	opt callstack 28
  1291                           
  1292                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1293                           
  1294                           ;incstack = 0
  1295  000AD4  0EF8               	movlw	248
  1296  000AD6  6E95               	movwf	3989,c	;volatile
  1297                           
  1298                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1299  000AD8  908C               	bcf	3980,0,c	;volatile
  1300                           
  1301                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1302  000ADA  828C               	bsf	3980,1,c	;volatile
  1303                           
  1304                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1305  000ADC  848C               	bsf	3980,2,c	;volatile
  1306                           
  1307                           ;LCD.c: 128:         _delay(1200);
  1308  000ADE  0EF0               	movlw	240
  1309  000AE0                     u367:
  1310  000AE0  D000               	nop2	
  1311  000AE2  2EE8               	decfsz	wreg,f,c
  1312  000AE4  D7FD               	bra	u367
  1313                           
  1314                           ;LCD.c: 130:  aux = PORTD;
  1315  000AE6  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1316                           
  1317                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1318  000AEA  948C               	bcf	3980,2,c	;volatile
  1319                           
  1320                           ;LCD.c: 132:         _delay(1200);
  1321  000AEC  0EF0               	movlw	240
  1322  000AEE                     u377:
  1323  000AEE  D000               	nop2	
  1324  000AF0  2EE8               	decfsz	wreg,f,c
  1325  000AF2  D7FD               	bra	u377
  1326                           
  1327                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1328  000AF4  848C               	bsf	3980,2,c	;volatile
  1329                           
  1330                           ;LCD.c: 135:         _delay(1200);
  1331  000AF6  0EF0               	movlw	240
  1332  000AF8                     u387:
  1333  000AF8  D000               	nop2	
  1334  000AFA  2EE8               	decfsz	wreg,f,c
  1335  000AFC  D7FD               	bra	u387
  1336  000AFE                     l865:
  1337                           
  1338                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1339  000AFE  948C               	bcf	3980,2,c	;volatile
  1340                           
  1341                           ;LCD.c: 138:  aux = aux & 0x80;
  1342  000B00  5013               	movf	LEER_LCD@aux,w,c
  1343  000B02  0B80               	andlw	128
  1344  000B04  6E13               	movwf	LEER_LCD@aux,c
  1345                           
  1346                           ;LCD.c: 139:  while(aux == 0x80)
  1347  000B06  D012               	goto	l881
  1348  000B08                     l109:
  1349                           
  1350                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1351  000B08  848C               	bsf	3980,2,c	;volatile
  1352                           
  1353                           ;LCD.c: 142:             _delay(1200);
  1354  000B0A  0EF0               	movlw	240
  1355  000B0C                     u397:
  1356  000B0C  D000               	nop2	
  1357  000B0E  2EE8               	decfsz	wreg,f,c
  1358  000B10  D7FD               	bra	u397
  1359                           
  1360                           ;LCD.c: 143:             aux = PORTD;
  1361  000B12  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1362                           
  1363                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1364  000B16  948C               	bcf	3980,2,c	;volatile
  1365                           
  1366                           ;LCD.c: 145:             _delay(1200);
  1367  000B18  0EF0               	movlw	240
  1368  000B1A                     u407:
  1369  000B1A  D000               	nop2	
  1370  000B1C  2EE8               	decfsz	wreg,f,c
  1371  000B1E  D7FD               	bra	u407
  1372                           
  1373                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1374  000B20  848C               	bsf	3980,2,c	;volatile
  1375                           
  1376                           ;LCD.c: 147:             _delay(1200);
  1377  000B22  0EF0               	movlw	240
  1378  000B24                     u417:
  1379  000B24  D000               	nop2	
  1380  000B26  2EE8               	decfsz	wreg,f,c
  1381  000B28  D7FD               	bra	u417
  1382  000B2A  D7E9               	goto	l865
  1383  000B2C                     l881:
  1384                           
  1385                           ;LCD.c: 139:  while(aux == 0x80)
  1386  000B2C  0E80               	movlw	128
  1387  000B2E  1813               	xorwf	LEER_LCD@aux,w,c
  1388  000B30  A4D8               	btfss	status,2,c
  1389  000B32  0012               	return	
  1390  000B34  D7E9               	goto	l109
  1391  000B36                     __end_of_LEER_LCD:
  1392                           	opt callstack 0
  1393                           
  1394 ;; *************** function _ENVIA_NIBBLE *****************
  1395 ;; Defined at:
  1396 ;;		line 93 in file "LCD.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  dato            1    wreg     unsigned char 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  dato            1    0[COMRAM] unsigned char 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1410 ;;      Params:         0       0       0       0       0       0       0       0       0
  1411 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1412 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1413 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1414 ;;Total ram usage:        1 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; This function calls:
  1417 ;;		Nothing
  1418 ;; This function is called by:
  1419 ;;		_ENVIA_CHAR
  1420 ;;		_LCD_CONFIG
  1421 ;;		_ENVIA_LCD_CMD
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text12
  1426  000CC2                     __ptext12:
  1427                           	opt callstack 0
  1428  000CC2                     _ENVIA_NIBBLE:
  1429                           	opt callstack 28
  1430                           
  1431                           ;incstack = 0
  1432                           ;ENVIA_NIBBLE@dato stored from wreg
  1433  000CC2  6E13               	movwf	ENVIA_NIBBLE@dato,c
  1434                           
  1435                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1436  000CC4  0E0F               	movlw	15
  1437  000CC6  168C               	andwf	3980,f,c	;volatile
  1438                           
  1439                           ;LCD.c: 96:  dato &= 0xF0;
  1440  000CC8  0EF0               	movlw	240
  1441  000CCA  1613               	andwf	ENVIA_NIBBLE@dato,f,c
  1442                           
  1443                           ;LCD.c: 97:  LATD|= dato;
  1444  000CCC  5013               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1445  000CCE  128C               	iorwf	3980,f,c	;volatile
  1446                           
  1447                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1448  000CD0  848C               	bsf	3980,2,c	;volatile
  1449                           
  1450                           ;LCD.c: 100:         _delay(1200);
  1451  000CD2  0EF0               	movlw	240
  1452  000CD4                     u427:
  1453  000CD4  D000               	nop2	
  1454  000CD6  2EE8               	decfsz	wreg,f,c
  1455  000CD8  D7FD               	bra	u427
  1456                           
  1457                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1458  000CDA  948C               	bcf	3980,2,c	;volatile
  1459  000CDC  0012               	return		;funcret
  1460  000CDE                     __end_of_ENVIA_NIBBLE:
  1461                           	opt callstack 0
  1462                           
  1463 ;; *************** function _ADC_CONVERTIR *****************
  1464 ;; Defined at:
  1465 ;;		line 69 in file "ADC.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;		None
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;  num             2    3[COMRAM] int 
  1470 ;; Return value:  Size  Location     Type
  1471 ;;                  2    0[COMRAM] int 
  1472 ;; Registers used:
  1473 ;;		wreg, status,2, status,0
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1479 ;;      Params:         2       0       0       0       0       0       0       0       0
  1480 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1481 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1482 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1483 ;;Total ram usage:        5 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; This function calls:
  1486 ;;		Nothing
  1487 ;; This function is called by:
  1488 ;;		_main
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           	psect	text13
  1493  000C30                     __ptext13:
  1494                           	opt callstack 0
  1495  000C30                     _ADC_CONVERTIR:
  1496                           	opt callstack 30
  1497                           
  1498                           ;ADC.c: 71:  int num;;ADC.c: 72:  ADCON0bits.GO = 1;
  1499                           
  1500                           ;incstack = 0
  1501  000C30  82C2               	bsf	4034,1,c	;volatile
  1502  000C32                     l39:
  1503  000C32  B2C2               	btfsc	4034,1,c	;volatile
  1504  000C34  D7FE               	goto	l39
  1505                           
  1506                           ;ADC.c: 74:  num = 0x03 & ADRESH;
  1507  000C36  CFC4 F015          	movff	4036,??_ADC_CONVERTIR	;volatile
  1508  000C3A  0E03               	movlw	3
  1509  000C3C  1615               	andwf	??_ADC_CONVERTIR,f,c
  1510  000C3E  5015               	movf	??_ADC_CONVERTIR,w,c
  1511  000C40  6E16               	movwf	ADC_CONVERTIR@num,c
  1512  000C42  6A17               	clrf	ADC_CONVERTIR@num+1,c
  1513                           
  1514                           ;ADC.c: 75:  num<<= 8;
  1515  000C44  5016               	movf	ADC_CONVERTIR@num,w,c
  1516  000C46  6E17               	movwf	ADC_CONVERTIR@num+1,c
  1517  000C48  6A16               	clrf	ADC_CONVERTIR@num,c
  1518                           
  1519                           ;ADC.c: 76:  num +=ADRESL;
  1520  000C4A  50C3               	movf	4035,w,c	;volatile
  1521  000C4C  2616               	addwf	ADC_CONVERTIR@num,f,c
  1522  000C4E  0E00               	movlw	0
  1523  000C50  2217               	addwfc	ADC_CONVERTIR@num+1,f,c
  1524                           
  1525                           ;ADC.c: 77:  return(num);
  1526  000C52  C016  F013         	movff	ADC_CONVERTIR@num,?_ADC_CONVERTIR
  1527  000C56  C017  F014         	movff	ADC_CONVERTIR@num+1,?_ADC_CONVERTIR+1
  1528  000C5A  0012               	return		;funcret
  1529  000C5C                     __end_of_ADC_CONVERTIR:
  1530                           	opt callstack 0
  1531                           
  1532 ;; *************** function _ADC_CONFIG *****************
  1533 ;; Defined at:
  1534 ;;		line 6 in file "ADC.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  canal           1    wreg     unsigned char 
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;  canal           1    2[COMRAM] unsigned char 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      void 
  1541 ;; Registers used:
  1542 ;;		wreg, status,2, status,0
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1548 ;;      Params:         0       0       0       0       0       0       0       0       0
  1549 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1550 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1551 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1552 ;;Total ram usage:        3 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text14
  1562  000904                     __ptext14:
  1563                           	opt callstack 0
  1564  000904                     _ADC_CONFIG:
  1565                           	opt callstack 30
  1566                           
  1567                           ;incstack = 0
  1568                           ;ADC_CONFIG@canal stored from wreg
  1569  000904  6E15               	movwf	ADC_CONFIG@canal,c
  1570                           
  1571                           ;ADC.c: 6: void ADC_CONFIG(char canal);ADC.c: 7: {;ADC.c: 8:  TRISA = 0xFF;
  1572  000906  6892               	setf	3986,c	;volatile
  1573                           
  1574                           ;ADC.c: 9:  TRISE = 0xFF;
  1575  000908  6896               	setf	3990,c	;volatile
  1576                           
  1577                           ;ADC.c: 10:  TRISB = 0x0F;
  1578  00090A  0E0F               	movlw	15
  1579  00090C  6E93               	movwf	3987,c	;volatile
  1580                           
  1581                           ;ADC.c: 11:  switch(canal)
  1582  00090E  D01F               	goto	l1043
  1583  000910                     l989:
  1584                           
  1585                           ;ADC.c: 14:    ADCON1=0x0E;
  1586  000910  0E0E               	movlw	14
  1587  000912                     L1:
  1588  000912  6EC1               	movwf	4033,c	;volatile
  1589                           
  1590                           ;ADC.c: 15:    ADCON0=canal<<2;
  1591  000914  4415               	rlncf	ADC_CONFIG@canal,w,c
  1592  000916  46E8               	rlncf	wreg,f,c
  1593  000918  0BFC               	andlw	252
  1594  00091A  6EC2               	movwf	4034,c	;volatile
  1595                           
  1596                           ;ADC.c: 16:   break;
  1597  00091C  D047               	goto	l1045
  1598  00091E                     l993:
  1599                           
  1600                           ;ADC.c: 18:    ADCON1=0x0D;
  1601  00091E  0E0D               	movlw	13
  1602  000920  D7F8               	goto	L1
  1603  000922                     l997:
  1604                           
  1605                           ;ADC.c: 22:    ADCON1=0x0C;
  1606  000922  0E0C               	movlw	12
  1607  000924  D7F6               	goto	L1
  1608  000926                     l1001:
  1609                           
  1610                           ;ADC.c: 26:    ADCON1=0x0B;
  1611  000926  0E0B               	movlw	11
  1612  000928  D7F4               	goto	L1
  1613  00092A                     l1005:
  1614                           
  1615                           ;ADC.c: 30:    ADCON1=0x0A;
  1616  00092A  0E0A               	movlw	10
  1617  00092C  D7F2               	goto	L1
  1618  00092E                     l1009:
  1619                           
  1620                           ;ADC.c: 34:    ADCON1=0x09;
  1621  00092E  0E09               	movlw	9
  1622  000930  D7F0               	goto	L1
  1623  000932                     l1013:
  1624                           
  1625                           ;ADC.c: 38:    ADCON1=0x08;
  1626  000932  0E08               	movlw	8
  1627  000934  D7EE               	goto	L1
  1628  000936                     l1017:
  1629                           
  1630                           ;ADC.c: 42:    ADCON1=0x07;
  1631  000936  0E07               	movlw	7
  1632  000938  D7EC               	goto	L1
  1633  00093A                     l1021:
  1634                           
  1635                           ;ADC.c: 46:    ADCON1=0x06;
  1636  00093A  0E06               	movlw	6
  1637  00093C  D7EA               	goto	L1
  1638  00093E                     l1025:
  1639                           
  1640                           ;ADC.c: 50:    ADCON1=0x05;
  1641  00093E  0E05               	movlw	5
  1642  000940  D7E8               	goto	L1
  1643  000942                     l1029:
  1644                           
  1645                           ;ADC.c: 54:    ADCON1=0x04;
  1646  000942  0E04               	movlw	4
  1647  000944  D7E6               	goto	L1
  1648  000946                     l1033:
  1649                           
  1650                           ;ADC.c: 58:    ADCON1=0x03;
  1651  000946  0E03               	movlw	3
  1652  000948  D7E4               	goto	L1
  1653  00094A                     l1037:
  1654                           
  1655                           ;ADC.c: 62:    ADCON1=0x02;
  1656  00094A  0E02               	movlw	2
  1657  00094C  D7E2               	goto	L1
  1658  00094E                     l1043:
  1659  00094E  5015               	movf	ADC_CONFIG@canal,w,c
  1660  000950  6E13               	movwf	??_ADC_CONFIG& (0+255),c
  1661  000952  6A14               	clrf	(??_ADC_CONFIG+1)& (0+255),c
  1662                           
  1663                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1664                           ; Switch size 1, requested type "simple"
  1665                           ; Number of cases is 1, Range of values is 0 to 0
  1666                           ; switch strategies available:
  1667                           ; Name         Instructions Cycles
  1668                           ; simple_byte            4     3 (average)
  1669                           ;	Chosen strategy is simple_byte
  1670  000954  5014               	movf	??_ADC_CONFIG+1,w,c
  1671  000956  0A00               	xorlw	0	; case 0
  1672  000958  A4D8               	btfss	status,2,c
  1673  00095A  D028               	goto	l1045
  1674                           
  1675                           ; Switch size 1, requested type "simple"
  1676                           ; Number of cases is 13, Range of values is 0 to 12
  1677                           ; switch strategies available:
  1678                           ; Name         Instructions Cycles
  1679                           ; simple_byte           40    21 (average)
  1680                           ;	Chosen strategy is simple_byte
  1681  00095C  5013               	movf	??_ADC_CONFIG,w,c
  1682  00095E  0A00               	xorlw	0	; case 0
  1683  000960  B4D8               	btfsc	status,2,c
  1684  000962  D7D6               	goto	l989
  1685  000964  0A01               	xorlw	1	; case 1
  1686  000966  B4D8               	btfsc	status,2,c
  1687  000968  D7DA               	goto	l993
  1688  00096A  0A03               	xorlw	3	; case 2
  1689  00096C  B4D8               	btfsc	status,2,c
  1690  00096E  D7D9               	goto	l997
  1691  000970  0A01               	xorlw	1	; case 3
  1692  000972  B4D8               	btfsc	status,2,c
  1693  000974  D7D8               	goto	l1001
  1694  000976  0A07               	xorlw	7	; case 4
  1695  000978  B4D8               	btfsc	status,2,c
  1696  00097A  D7D7               	goto	l1005
  1697  00097C  0A01               	xorlw	1	; case 5
  1698  00097E  B4D8               	btfsc	status,2,c
  1699  000980  D7D6               	goto	l1009
  1700  000982  0A03               	xorlw	3	; case 6
  1701  000984  B4D8               	btfsc	status,2,c
  1702  000986  D7D5               	goto	l1013
  1703  000988  0A01               	xorlw	1	; case 7
  1704  00098A  B4D8               	btfsc	status,2,c
  1705  00098C  D7D4               	goto	l1017
  1706  00098E  0A0F               	xorlw	15	; case 8
  1707  000990  B4D8               	btfsc	status,2,c
  1708  000992  D7D3               	goto	l1021
  1709  000994  0A01               	xorlw	1	; case 9
  1710  000996  B4D8               	btfsc	status,2,c
  1711  000998  D7D2               	goto	l1025
  1712  00099A  0A03               	xorlw	3	; case 10
  1713  00099C  B4D8               	btfsc	status,2,c
  1714  00099E  D7D1               	goto	l1029
  1715  0009A0  0A01               	xorlw	1	; case 11
  1716  0009A2  B4D8               	btfsc	status,2,c
  1717  0009A4  D7D0               	goto	l1033
  1718  0009A6  0A07               	xorlw	7	; case 12
  1719  0009A8  B4D8               	btfsc	status,2,c
  1720  0009AA  D7CF               	goto	l1037
  1721  0009AC                     l1045:
  1722                           
  1723                           ;ADC.c: 66:  ADCON2 = 0x91;
  1724  0009AC  0E91               	movlw	145
  1725  0009AE  6EC0               	movwf	4032,c	;volatile
  1726                           
  1727                           ;ADC.c: 67:  ADCON0bits.ADON = 1;
  1728  0009B0  80C2               	bsf	4034,0,c	;volatile
  1729  0009B2  0012               	return		;funcret
  1730  0009B4                     __end_of_ADC_CONFIG:
  1731                           	opt callstack 0
  1732                           
  1733                           	psect	rparam
  1734  0000                     tosu	equ	0xFFF
  1735                           tosh	equ	0xFFE
  1736                           tosl	equ	0xFFD
  1737                           stkptr	equ	0xFFC
  1738                           pclatu	equ	0xFFB
  1739                           pclath	equ	0xFFA
  1740                           pcl	equ	0xFF9
  1741                           tblptru	equ	0xFF8
  1742                           tblptrh	equ	0xFF7
  1743                           tblptrl	equ	0xFF6
  1744                           tablat	equ	0xFF5
  1745                           prodh	equ	0xFF4
  1746                           prodl	equ	0xFF3
  1747                           indf0	equ	0xFEF
  1748                           postinc0	equ	0xFEE
  1749                           postdec0	equ	0xFED
  1750                           preinc0	equ	0xFEC
  1751                           plusw0	equ	0xFEB
  1752                           fsr0h	equ	0xFEA
  1753                           fsr0l	equ	0xFE9
  1754                           wreg	equ	0xFE8
  1755                           indf1	equ	0xFE7
  1756                           postinc1	equ	0xFE6
  1757                           postdec1	equ	0xFE5
  1758                           preinc1	equ	0xFE4
  1759                           plusw1	equ	0xFE3
  1760                           fsr1h	equ	0xFE2
  1761                           fsr1l	equ	0xFE1
  1762                           bsr	equ	0xFE0
  1763                           indf2	equ	0xFDF
  1764                           postinc2	equ	0xFDE
  1765                           postdec2	equ	0xFDD
  1766                           preinc2	equ	0xFDC
  1767                           plusw2	equ	0xFDB
  1768                           fsr2h	equ	0xFDA
  1769                           fsr2l	equ	0xFD9
  1770                           status	equ	0xFD8


Data Sizes:
    Strings     16
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_DIGITOS
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _DIGITOS->___awdiv
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3202
                                             10 COMRAM     2     2      0
                         _ADC_CONFIG
                      _ADC_CONVERTIR
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                            _DIGITOS
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     363
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _DIGITOS                                              2     0      2    1795
                                              8 COMRAM     2     0      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_CONVERTIR                                        5     3      2      25
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CONFIG                                           3     3      0     210
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CONFIG
   _ADC_CONVERTIR
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _DIGITOS
     ___awdiv
     ___wmul
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      1E       1       31.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E      20        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu May 23 21:01:51 2019

     __size_of_ADC_CONFIG 00B0           ADC_CONFIG@canal 0015                        l39 0C32  
            ___awdiv@sign 0018       ___wmul@multiplicand 0015               __CFG_BORV$3 000000  
           ENVIA_CHAR@aux 0015                       l109 0B08                       l881 0B2C  
                     l865 0AFE                       l993 091E                       l997 0922  
                     l989 0910                       u220 0A96                       u307 09E2  
                     u317 0B46                       u407 0B1A                       u327 0B54  
                     u417 0B24                       u337 0B64                       u427 0CD4  
                     u347 0BA4                       u357 0BD8                       u367 0AE0  
                     u377 0AEE                       u297 09C8                       u387 0AF8  
                     u397 0B0C              __CFG_BOR$OFF 000000    __size_of_ADC_CONVERTIR 002C  
             LEER_LCD@aux 0013                       wreg 000FE8              ?_CURSOR_HOME 0013  
         __end_of_DIGITOS 0904            ??_ENVIA_NIBBLE 0013              __CFG_LVP$OFF 000000  
          ENVIA_CHAR@dato 0014              __CFG_WDT$OFF 000000                      l1001 0926  
                    l1021 093A                      l1013 0932                      l1005 092A  
                    l1033 0946                      l1025 093E                      l1017 0936  
                    l1009 092E                      l1043 094E                      l1037 094A  
                    l1029 0942                      l1045 09AC                      l1221 0A74  
                    l1215 0A64                      l1227 0A8A                      l1243 0ABC  
                    l1307 09F0                      l1229 0A92                      l1079 0CB4  
                    l1247 0ACA                      l1239 0AB2                      l1273 0C08  
                    l1267 0C94                      l1277 0C26                      STR_1 0801  
                    _LATD 000F8C              __CFG_PWRT$ON 000000                      _main 09B4  
                    prodh 000FF4                      prodl 000FF3                      start 0000  
           ?_CURSOR_ONOFF 0013             __CFG_MCLRE$ON 000000              ___param_bank 000000  
         ??_ENVIA_LCD_CMD 0014          __end_of_LEER_LCD 0B36             __CFG_PLLDIV$1 000000  
          __CFG_CCP2MX$ON 000000                     ?_main 0013           __end_of___awdiv 0AD4  
         ___awdiv@divisor 0015           ___awdiv@counter 0017                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISA 000F92                     _TRISB 000F93  
                   _TRISD 000F95                     _TRISE 000F96       __size_of_ENVIA_CHAR 0034  
             ?_POS_CURSOR 0016                     tablat 000FF5                     status 000FD8  
          ??_CURSOR_ONOFF 0016             _ADC_CONVERTIR 0C30           __initialization 0CDE  
            __end_of_main 0A50           _ESCRIBE_MENSAJE 0BFE                 ??_DIGITOS 001D  
                  ??_main 001D             __activetblptr 000002          ADC_CONVERTIR@num 0016  
            ??_ADC_CONFIG 0013                    _ADCON0 000FC2                    _ADCON1 000FC1  
                  _ADCON2 000FC0                    _ADRESH 000FC4                    _ADRESL 000FC3  
        ___awdiv@dividend 0013            ?_ADC_CONVERTIR 0013        __end_of_ADC_CONFIG 09B4  
                  ___wmul 0C5C                 ??___awdiv 0017      __end_of_ENVIA_NIBBLE 0CDE  
                  _digdec 0009                    _digcen 000B                    _digdmi 000F  
                  _digmil 000D                    _diguni 0007       __size_of_POS_CURSOR 0024  
                  clear_0 0CE4          ___awdiv@quotient 0019              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
    __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0013                __accesstop 0060  
 __end_of__initialization 0CEA           __CFG_PBADEN$OFF 000000           __CFG_FOSC$XT_XT 000000  
            ??_LCD_CONFIG 0016             ___rparam_used 000001              ??_ENVIA_CHAR 0014  
 __end_of_ESCRIBE_MENSAJE 0C30            __pcstackCOMRAM 0013          ENVIA_LCD_CMD@aux 0015  
    __end_of_CURSOR_ONOFF 0CC2        __end_of_LCD_CONFIG 0B96        __end_of_ENVIA_CHAR 0BCA  
         ??_ADC_CONVERTIR 0015                ??_LEER_LCD 0013          ENVIA_NIBBLE@dato 0013  
                 ?___wmul 0013                   _DIGITOS 0812              ??_POS_CURSOR 0017  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0016                   ___awdiv 0A50           __size_of___wmul 0026  
            __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0BFE                   __pcinit 0CDE  
      __end_of_POS_CURSOR 0CA6                   __ramtop 0800                   __ptext0 09B4  
                 __ptext1 0C82                   __ptext2 0B36                   __ptext3 0BFE  
                 __ptext4 0B96                   __ptext5 0812                   __ptext6 0C5C  
                 __ptext7 0A50                   __ptext8 0CA6                   __ptext9 0CF4  
            _ENVIA_NIBBLE 0CC2      end_of_initialization 0CEA             __Lmediumconst 0000  
                 postinc0 000FEE     __size_of_CURSOR_ONOFF 001C                 _TRISCbits 000F94  
       __size_of_LEER_LCD 0062              _CURSOR_ONOFF 0CA6        CURSOR_ONOFF@estado 0016  
          __end_of___wmul 0C82             ??_CURSOR_HOME 0016       start_initialization 0CDE  
       ENVIA_LCD_CMD@dato 0014              DIGITOS@valor 001B                  ??___wmul 0017  
                ?_DIGITOS 001B               __pbssCOMRAM 0001       __end_of_CURSOR_HOME 0CFC  
   __end_of_ADC_CONVERTIR 0C5C                  ?___awdiv 0013               __smallconst 0800  
                _LEER_LCD 0AD4            ___wmul@product 0017                  _LATCbits 000F8B  
                _LATDbits 000F8C          __CFG_WDTPS$32768 000000                 _temporal2 0003  
               _temporal3 0001          ESCRIBE_MENSAJE@i 001B            POS_CURSOR@fila 0017  
__size_of_ESCRIBE_MENSAJE 0032                _ADCON0bits 000FC2         ___wmul@multiplier 0013  
        __size_of_DIGITOS 00F2               _CURSOR_HOME 0CF4                _ADC_CONFIG 0904  
  __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000                  __Lrparam 0000  
        __size_of___awdiv 0084                  __ptext10 0BCA                  __ptext11 0AD4  
                __ptext12 0CC2                  __ptext13 0C30                  __ptext14 0904  
           __size_of_main 009C                _LCD_CONFIG 0B36                _ENVIA_CHAR 0B96  
                _temporal 0005                  _resulton 0011             _ENVIA_LCD_CMD 0BCA  
   __CFG_CPUDIV$OSC1_PLL2 000000               ?_ADC_CONFIG 0013         ??_ESCRIBE_MENSAJE 0019  
   ESCRIBE_MENSAJE@cadena 0016            ?_ENVIA_LCD_CMD 0013             ?_ENVIA_NIBBLE 0013  
              _POS_CURSOR 0C82               ?_LCD_CONFIG 0013        ESCRIBE_MENSAJE@tam 0018  
             ?_ENVIA_CHAR 0013         POS_CURSOR@columna 0016  
