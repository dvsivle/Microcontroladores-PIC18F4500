

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 22 09:28:09 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 2.05
    29                           ; Generated 20/12/2018 GMT
    30                           ; 
    31                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4550 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     _ADRESL	set	4035
    63  0000                     _ADCON0bits	set	4034
    64  0000                     _ADCON2	set	4032
    65  0000                     _ADCON0	set	4034
    66  0000                     _ADCON1	set	4033
    67  0000                     _TRISB	set	3987
    68  0000                     _TRISE	set	3990
    69  0000                     _TRISA	set	3986
    70  0000                     _PORTD	set	3971
    71  0000                     _LATD	set	3980
    72  0000                     _TRISD	set	3989
    73  0000                     _LATDbits	set	3980
    74  0000                     _ADRESH	set	4036
    75                           
    76                           	psect	smallconst
    77  000800                     __psmallconst:
    78                           	opt callstack 0
    79  000800  00                 	db	0
    80  000801                     STR_1:
    81  000801  4D                 	db	77	;'M'
    82  000802  69                 	db	105	;'i'
    83  000803  63                 	db	99	;'c'
    84  000804  72                 	db	114	;'r'
    85  000805  6F                 	db	111	;'o'
    86  000806  63                 	db	99	;'c'
    87  000807  6F                 	db	111	;'o'
    88  000808  6E                 	db	110	;'n'
    89  000809  74                 	db	116	;'t'
    90  00080A  72                 	db	114	;'r'
    91  00080B  6F                 	db	111	;'o'
    92  00080C  6C                 	db	108	;'l'
    93  00080D  61                 	db	97	;'a'
    94  00080E  64                 	db	100	;'d'
    95  00080F  6F                 	db	111	;'o'
    96  000810  72                 	db	114	;'r'
    97  000811  65                 	db	101	;'e'
    98  000812  73                 	db	115	;'s'
    99  000813  00                 	db	0
   100  000814                     STR_2:
   101  000814  41                 	db	65	;'A'
   102  000815  44                 	db	68	;'D'
   103  000816  43                 	db	67	;'C'
   104  000817  3A                 	db	58	;':'
   105  000818  00                 	db	0
   106                           
   107                           ; #config settings
   108  000819  00                 	db	0	; dummy byte at the end
   109  0000                     
   110                           	psect	cinit
   111  000D2C                     __pcinit:
   112                           	opt callstack 0
   113  000D2C                     start_initialization:
   114                           	opt callstack 0
   115  000D2C                     __initialization:
   116                           	opt callstack 0
   117                           
   118                           ; Clear objects allocated to COMRAM (18 bytes)
   119  000D2C  EE00  F001         	lfsr	0,__pbssCOMRAM
   120  000D30  0E12               	movlw	18
   121  000D32                     clear_0:
   122  000D32  6AEE               	clrf	postinc0,c
   123  000D34  06E8               	decf	wreg,f,c
   124  000D36  E1FD               	bnz	clear_0
   125  000D38                     end_of_initialization:
   126                           	opt callstack 0
   127  000D38                     __end_of__initialization:
   128                           	opt callstack 0
   129  000D38  0E00               	movlw	low (__Lmediumconst shr (0+16))
   130  000D3A  6EF8               	movwf	tblptru,c
   131  000D3C  0100               	movlb	0
   132  000D3E  EF86  F004         	goto	_main	;jump to C main() function
   133                           
   134                           	psect	bssCOMRAM
   135  000001                     __pbssCOMRAM:
   136                           	opt callstack 0
   137  000001                     _temporal3:
   138                           	opt callstack 0
   139  000001                     	ds	2
   140  000003                     _temporal2:
   141                           	opt callstack 0
   142  000003                     	ds	2
   143  000005                     _temporal:
   144                           	opt callstack 0
   145  000005                     	ds	2
   146  000007                     _diguni:
   147                           	opt callstack 0
   148  000007                     	ds	2
   149  000009                     _digdec:
   150                           	opt callstack 0
   151  000009                     	ds	2
   152  00000B                     _digcen:
   153                           	opt callstack 0
   154  00000B                     	ds	2
   155  00000D                     _digmil:
   156                           	opt callstack 0
   157  00000D                     	ds	2
   158  00000F                     _digdmi:
   159                           	opt callstack 0
   160  00000F                     	ds	2
   161  000011                     _canal0:
   162                           	opt callstack 0
   163  000011                     	ds	2
   164                           
   165                           	psect	cstackCOMRAM
   166  000013                     __pcstackCOMRAM:
   167                           	opt callstack 0
   168  000013                     ??_ADC_CONFIG:
   169  000013                     ?_ADC_CONVERTIR:
   170                           	opt callstack 0
   171  000013                     ?___wmul:
   172                           	opt callstack 0
   173  000013                     ?___awdiv:
   174                           	opt callstack 0
   175  000013                     ENVIA_NIBBLE@dato:
   176                           	opt callstack 0
   177  000013                     LEER_LCD@aux:
   178                           	opt callstack 0
   179  000013                     ___wmul@multiplier:
   180                           	opt callstack 0
   181  000013                     ___awdiv@dividend:
   182                           	opt callstack 0
   183                           
   184                           ; 2 bytes @ 0x0
   185  000013                     	ds	1
   186  000014                     ENVIA_CHAR@dato:
   187                           	opt callstack 0
   188  000014                     ENVIA_LCD_CMD@dato:
   189                           	opt callstack 0
   190                           
   191                           ; 1 bytes @ 0x1
   192  000014                     	ds	1
   193  000015                     ??_ADC_CONVERTIR:
   194  000015                     ENVIA_CHAR@aux:
   195                           	opt callstack 0
   196  000015                     ENVIA_LCD_CMD@aux:
   197                           	opt callstack 0
   198  000015                     ADC_CONFIG@canal:
   199                           	opt callstack 0
   200  000015                     ___wmul@multiplicand:
   201                           	opt callstack 0
   202  000015                     ___awdiv@divisor:
   203                           	opt callstack 0
   204                           
   205                           ; 2 bytes @ 0x2
   206  000015                     	ds	1
   207  000016                     ??_LCD_CONFIG:
   208  000016                     POS_CURSOR@columna:
   209                           	opt callstack 0
   210  000016                     CURSOR_ONOFF@estado:
   211                           	opt callstack 0
   212  000016                     ESCRIBE_MENSAJE@cadena:
   213                           	opt callstack 0
   214  000016                     ADC_CONVERTIR@num:
   215                           	opt callstack 0
   216                           
   217                           ; 2 bytes @ 0x3
   218  000016                     	ds	1
   219  000017                     POS_CURSOR@fila:
   220                           	opt callstack 0
   221  000017                     ___awdiv@counter:
   222                           	opt callstack 0
   223  000017                     ___wmul@product:
   224                           	opt callstack 0
   225                           
   226                           ; 2 bytes @ 0x4
   227  000017                     	ds	1
   228  000018                     ESCRIBE_MENSAJE@tam:
   229                           	opt callstack 0
   230  000018                     ___awdiv@sign:
   231                           	opt callstack 0
   232                           
   233                           ; 1 bytes @ 0x5
   234  000018                     	ds	1
   235  000019                     ??_ESCRIBE_MENSAJE:
   236  000019                     ___awdiv@quotient:
   237                           	opt callstack 0
   238                           
   239                           ; 2 bytes @ 0x6
   240  000019                     	ds	2
   241  00001B                     ESCRIBE_MENSAJE@i:
   242                           	opt callstack 0
   243                           
   244                           ; 1 bytes @ 0x8
   245  00001B                     	ds	1
   246  00001C                     ??_main:
   247                           
   248                           ; 1 bytes @ 0x9
   249  00001C                     	ds	2
   250                           
   251 ;;
   252 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   253 ;;
   254 ;; *************** function _main *****************
   255 ;; Defined at:
   256 ;;		line 51 in file "visualizeitor.c"
   257 ;; Parameters:    Size  Location     Type
   258 ;;		None
   259 ;; Auto vars:     Size  Location     Type
   260 ;;		None
   261 ;; Return value:  Size  Location     Type
   262 ;;                  1    wreg      void 
   263 ;; Registers used:
   264 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   265 ;; Tracked objects:
   266 ;;		On entry : 0/0
   267 ;;		On exit  : 0/0
   268 ;;		Unchanged: 0/0
   269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   270 ;;      Params:         0       0       0       0       0       0       0       0       0
   271 ;;      Locals:         0       0       0       0       0       0       0       0       0
   272 ;;      Temps:          2       0       0       0       0       0       0       0       0
   273 ;;      Totals:         2       0       0       0       0       0       0       0       0
   274 ;;Total ram usage:        2 bytes
   275 ;; Hardware stack levels required when called:    3
   276 ;; This function calls:
   277 ;;		_ADC_CONFIG
   278 ;;		_ADC_CONVERTIR
   279 ;;		_BORRAR_LCD
   280 ;;		_CURSOR_HOME
   281 ;;		_CURSOR_ONOFF
   282 ;;		_DIGITOS
   283 ;;		_ENVIA_CHAR
   284 ;;		_ESCRIBE_MENSAJE
   285 ;;		_LCD_CONFIG
   286 ;;		_POS_CURSOR
   287 ;; This function is called by:
   288 ;;		Startup code after reset
   289 ;; This function uses a non-reentrant model
   290 ;;
   291                           
   292                           	psect	text0
   293  00090C                     __ptext0:
   294                           	opt callstack 0
   295  00090C                     _main:
   296                           	opt callstack 28
   297                           
   298                           ;visualizeitor.c: 52:     ADC_CONFIG(0);
   299                           
   300                           ;incstack = 0
   301  00090C  0E00               	movlw	0
   302  00090E  ECF7  F004         	call	_ADC_CONFIG
   303                           
   304                           ;visualizeitor.c: 53:     _delay((unsigned long)((50)*(48000000UL/4000.0)));
   305  000912  0E04               	movlw	4
   306  000914  6E1D               	movwf	(??_main+1)& (0+255),c
   307  000916  0E0C               	movlw	12
   308  000918  6E1C               	movwf	??_main& (0+255),c
   309  00091A  0E34               	movlw	52
   310  00091C                     u297:
   311  00091C  2EE8               	decfsz	wreg,f,c
   312  00091E  D7FE               	bra	u297
   313  000920  2E1C               	decfsz	??_main& (0+255),f,c
   314  000922  D7FC               	bra	u297
   315  000924  2E1D               	decfsz	(??_main+1)& (0+255),f,c
   316  000926  D7FA               	bra	u297
   317                           
   318                           ;visualizeitor.c: 54:     LCD_CONFIG();
   319  000928  ECC2  F005         	call	_LCD_CONFIG	;wreg free
   320                           
   321                           ;visualizeitor.c: 55:     _delay((unsigned long)((10)*(48000000UL/4000.0)));
   322  00092C  0E9C               	movlw	156
   323  00092E  6E1C               	movwf	??_main& (0+255),c
   324  000930  0ED7               	movlw	215
   325  000932                     u307:
   326  000932  2EE8               	decfsz	wreg,f,c
   327  000934  D7FE               	bra	u307
   328  000936  2E1C               	decfsz	??_main& (0+255),f,c
   329  000938  D7FC               	bra	u307
   330  00093A  F000               	nop	
   331                           
   332                           ;visualizeitor.c: 56:     BORRAR_LCD();
   333  00093C  ECA5  F006         	call	_BORRAR_LCD	;wreg free
   334                           
   335                           ;visualizeitor.c: 57:     _delay((unsigned long)((10)*(48000000UL/4000.0)));
   336  000940  0E9C               	movlw	156
   337  000942  6E1C               	movwf	??_main& (0+255),c
   338  000944  0ED7               	movlw	215
   339  000946                     u317:
   340  000946  2EE8               	decfsz	wreg,f,c
   341  000948  D7FE               	bra	u317
   342  00094A  2E1C               	decfsz	??_main& (0+255),f,c
   343  00094C  D7FC               	bra	u317
   344  00094E  F000               	nop	
   345                           
   346                           ;visualizeitor.c: 58:     CURSOR_ONOFF(1);
   347  000950  0E01               	movlw	1
   348  000952  EC7A  F006         	call	_CURSOR_ONOFF
   349                           
   350                           ;visualizeitor.c: 59:     CURSOR_HOME();
   351  000956  ECA1  F006         	call	_CURSOR_HOME	;wreg free
   352                           
   353                           ;visualizeitor.c: 60:     _delay((unsigned long)((10)*(48000000UL/4000.0)));
   354  00095A  0E9C               	movlw	156
   355  00095C  6E1C               	movwf	??_main& (0+255),c
   356  00095E  0ED7               	movlw	215
   357  000960                     u327:
   358  000960  2EE8               	decfsz	wreg,f,c
   359  000962  D7FE               	bra	u327
   360  000964  2E1C               	decfsz	??_main& (0+255),f,c
   361  000966  D7FC               	bra	u327
   362  000968  F000               	nop	
   363                           
   364                           ;visualizeitor.c: 65:     ESCRIBE_MENSAJE("Microcontroladores", 18);
   365  00096A  0E01               	movlw	low STR_1
   366  00096C  6E16               	movwf	ESCRIBE_MENSAJE@cadena,c
   367  00096E  0E08               	movlw	high STR_1
   368  000970  6E17               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   369  000972  0E12               	movlw	18
   370  000974  6E18               	movwf	ESCRIBE_MENSAJE@tam,c
   371  000976  EC26  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   372  00097A                     l1301:
   373                           
   374                           ;visualizeitor.c: 67:         canal0 = ADC_CONVERTIR();
   375  00097A  EC3F  F006         	call	_ADC_CONVERTIR	;wreg free
   376  00097E  C013  F011         	movff	?_ADC_CONVERTIR,_canal0
   377  000982  C014  F012         	movff	?_ADC_CONVERTIR+1,_canal0+1
   378                           
   379                           ;visualizeitor.c: 68:         POS_CURSOR(2,0);
   380  000986  0E00               	movlw	0
   381  000988  6E16               	movwf	POS_CURSOR@columna,c
   382  00098A  0E02               	movlw	2
   383  00098C  EC68  F006         	call	_POS_CURSOR
   384                           
   385                           ;visualizeitor.c: 69:         _delay((unsigned long)((10)*(48000000UL/4000.0)));
   386  000990  0E9C               	movlw	156
   387  000992  6E1C               	movwf	??_main& (0+255),c
   388  000994  0ED7               	movlw	215
   389  000996                     u337:
   390  000996  2EE8               	decfsz	wreg,f,c
   391  000998  D7FE               	bra	u337
   392  00099A  2E1C               	decfsz	??_main& (0+255),f,c
   393  00099C  D7FC               	bra	u337
   394  00099E  F000               	nop	
   395                           
   396                           ;visualizeitor.c: 70:         DIGITOS();
   397  0009A0  EC0D  F004         	call	_DIGITOS	;wreg free
   398                           
   399                           ;visualizeitor.c: 71:         ESCRIBE_MENSAJE("ADC:", 4);
   400  0009A4  0E14               	movlw	low STR_2
   401  0009A6  6E16               	movwf	ESCRIBE_MENSAJE@cadena,c
   402  0009A8  0E08               	movlw	high STR_2
   403  0009AA  6E17               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   404  0009AC  0E04               	movlw	4
   405  0009AE  6E18               	movwf	ESCRIBE_MENSAJE@tam,c
   406  0009B0  EC26  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   407                           
   408                           ;visualizeitor.c: 72:         ENVIA_CHAR(digdmi+0x30);
   409  0009B4  500F               	movf	_digdmi,w,c
   410  0009B6  0F30               	addlw	48
   411  0009B8  ECF2  F005         	call	_ENVIA_CHAR
   412                           
   413                           ;visualizeitor.c: 73:         ENVIA_CHAR(digmil+0x30);
   414  0009BC  500D               	movf	_digmil,w,c
   415  0009BE  0F30               	addlw	48
   416  0009C0  ECF2  F005         	call	_ENVIA_CHAR
   417                           
   418                           ;visualizeitor.c: 74:         ENVIA_CHAR(digcen+0x30);
   419  0009C4  500B               	movf	_digcen,w,c
   420  0009C6  0F30               	addlw	48
   421  0009C8  ECF2  F005         	call	_ENVIA_CHAR
   422                           
   423                           ;visualizeitor.c: 75:         ENVIA_CHAR(digdec+0x30);
   424  0009CC  5009               	movf	_digdec,w,c
   425  0009CE  0F30               	addlw	48
   426  0009D0  ECF2  F005         	call	_ENVIA_CHAR
   427                           
   428                           ;visualizeitor.c: 76:         ENVIA_CHAR(diguni+0x30);
   429  0009D4  5007               	movf	_diguni,w,c
   430  0009D6  0F30               	addlw	48
   431  0009D8  ECF2  F005         	call	_ENVIA_CHAR
   432                           
   433                           ;visualizeitor.c: 77:         _delay((unsigned long)((10)*(48000000UL/4000.0)));
   434  0009DC  0E9C               	movlw	156
   435  0009DE  6E1C               	movwf	??_main& (0+255),c
   436  0009E0  0ED7               	movlw	215
   437  0009E2                     u347:
   438  0009E2  2EE8               	decfsz	wreg,f,c
   439  0009E4  D7FE               	bra	u347
   440  0009E6  2E1C               	decfsz	??_main& (0+255),f,c
   441  0009E8  D7FC               	bra	u347
   442  0009EA  F000               	nop	
   443  0009EC  D7C6               	goto	l1301
   444  0009EE                     __end_of_main:
   445                           	opt callstack 0
   446                           
   447 ;; *************** function _POS_CURSOR *****************
   448 ;; Defined at:
   449 ;;		line 6 in file "LCD.c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;  fila            1    wreg     unsigned char 
   452 ;;  columna         1    3[COMRAM] unsigned char 
   453 ;; Auto vars:     Size  Location     Type
   454 ;;  fila            1    4[COMRAM] unsigned char 
   455 ;; Return value:  Size  Location     Type
   456 ;;                  1    wreg      void 
   457 ;; Registers used:
   458 ;;		wreg, status,2, status,0, cstack
   459 ;; Tracked objects:
   460 ;;		On entry : 0/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   464 ;;      Params:         1       0       0       0       0       0       0       0       0
   465 ;;      Locals:         1       0       0       0       0       0       0       0       0
   466 ;;      Temps:          0       0       0       0       0       0       0       0       0
   467 ;;      Totals:         2       0       0       0       0       0       0       0       0
   468 ;;Total ram usage:        2 bytes
   469 ;; Hardware stack levels used:    1
   470 ;; Hardware stack levels required when called:    2
   471 ;; This function calls:
   472 ;;		_ENVIA_LCD_CMD
   473 ;; This function is called by:
   474 ;;		_main
   475 ;; This function uses a non-reentrant model
   476 ;;
   477                           
   478                           	psect	text1
   479  000CD0                     __ptext1:
   480                           	opt callstack 0
   481  000CD0                     _POS_CURSOR:
   482                           	opt callstack 28
   483                           
   484                           ;incstack = 0
   485                           ;POS_CURSOR@fila stored from wreg
   486  000CD0  6E17               	movwf	POS_CURSOR@fila,c
   487                           
   488                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   489  000CD2  0417               	decf	POS_CURSOR@fila,w,c
   490  000CD4  A4D8               	btfss	status,2,c
   491  000CD6  D005               	goto	l1283
   492                           
   493                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   494  000CD8  5016               	movf	POS_CURSOR@columna,w,c
   495  000CDA  0F80               	addlw	128
   496  000CDC  EC0C  F006         	call	_ENVIA_LCD_CMD
   497                           
   498                           ;LCD.c: 11:  }
   499  000CE0  0012               	return	
   500  000CE2                     l1283:
   501  000CE2  0E02               	movlw	2
   502  000CE4  1817               	xorwf	POS_CURSOR@fila,w,c
   503  000CE6  A4D8               	btfss	status,2,c
   504  000CE8  0012               	return	
   505                           
   506                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   507  000CEA  5016               	movf	POS_CURSOR@columna,w,c
   508  000CEC  0FC0               	addlw	192
   509  000CEE  EC0C  F006         	call	_ENVIA_LCD_CMD
   510  000CF2  0012               	return		;funcret
   511  000CF4                     __end_of_POS_CURSOR:
   512                           	opt callstack 0
   513                           
   514 ;; *************** function _LCD_CONFIG *****************
   515 ;; Defined at:
   516 ;;		line 72 in file "LCD.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, status,2, status,0, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   530 ;;      Params:         0       0       0       0       0       0       0       0       0
   531 ;;      Locals:         0       0       0       0       0       0       0       0       0
   532 ;;      Temps:          1       0       0       0       0       0       0       0       0
   533 ;;      Totals:         1       0       0       0       0       0       0       0       0
   534 ;;Total ram usage:        1 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    2
   537 ;; This function calls:
   538 ;;		_ENVIA_LCD_CMD
   539 ;;		_ENVIA_NIBBLE
   540 ;; This function is called by:
   541 ;;		_main
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text2
   546  000B84                     __ptext2:
   547                           	opt callstack 0
   548  000B84                     _LCD_CONFIG:
   549                           	opt callstack 28
   550                           
   551                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   552                           
   553                           ;incstack = 0
   554  000B84  908C               	bcf	3980,0,c	;volatile
   555                           
   556                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   557  000B86  928C               	bcf	3980,1,c	;volatile
   558                           
   559                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   560  000B88  0E30               	movlw	48
   561  000B8A  EC88  F006         	call	_ENVIA_NIBBLE
   562                           
   563                           ;LCD.c: 77:         _delay(24000);
   564  000B8E  0E20               	movlw	32
   565  000B90  6E16               	movwf	??_LCD_CONFIG& (0+255),c
   566  000B92  0E2A               	movlw	42
   567  000B94                     u357:
   568  000B94  2EE8               	decfsz	wreg,f,c
   569  000B96  D7FE               	bra	u357
   570  000B98  2E16               	decfsz	??_LCD_CONFIG& (0+255),f,c
   571  000B9A  D7FC               	bra	u357
   572                           
   573                           ;LCD.c: 78:         _delay(24000);
   574  000B9C  0E20               	movlw	32
   575  000B9E  6E16               	movwf	??_LCD_CONFIG& (0+255),c
   576  000BA0  0E2A               	movlw	42
   577  000BA2                     u367:
   578  000BA2  2EE8               	decfsz	wreg,f,c
   579  000BA4  D7FE               	bra	u367
   580  000BA6  2E16               	decfsz	??_LCD_CONFIG& (0+255),f,c
   581  000BA8  D7FC               	bra	u367
   582                           
   583                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   584  000BAA  0E30               	movlw	48
   585  000BAC  EC88  F006         	call	_ENVIA_NIBBLE
   586                           
   587                           ;LCD.c: 83:  _delay(1200);
   588  000BB0  0EF0               	movlw	240
   589  000BB2                     u377:
   590  000BB2  D000               	nop2	
   591  000BB4  2EE8               	decfsz	wreg,f,c
   592  000BB6  D7FD               	bra	u377
   593                           
   594                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   595  000BB8  0E30               	movlw	48
   596  000BBA  EC88  F006         	call	_ENVIA_NIBBLE
   597                           
   598                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   599  000BBE  0E20               	movlw	32
   600  000BC0  EC88  F006         	call	_ENVIA_NIBBLE
   601                           
   602                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   603  000BC4  0E01               	movlw	1
   604  000BC6  EC0C  F006         	call	_ENVIA_LCD_CMD
   605                           
   606                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   607  000BCA  0E28               	movlw	40
   608  000BCC  EC0C  F006         	call	_ENVIA_LCD_CMD
   609                           
   610                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   611  000BD0  0E0F               	movlw	15
   612  000BD2  EC0C  F006         	call	_ENVIA_LCD_CMD
   613                           
   614                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   615  000BD6  0E06               	movlw	6
   616  000BD8  EC0C  F006         	call	_ENVIA_LCD_CMD
   617                           
   618                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   619  000BDC  0E01               	movlw	1
   620  000BDE  EC0C  F006         	call	_ENVIA_LCD_CMD
   621  000BE2  0012               	return		;funcret
   622  000BE4                     __end_of_LCD_CONFIG:
   623                           	opt callstack 0
   624                           
   625 ;; *************** function _ESCRIBE_MENSAJE *****************
   626 ;; Defined at:
   627 ;;		line 41 in file "LCD.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   630 ;;		 -> STR_2(5), STR_1(19), 
   631 ;;  tam             1    5[COMRAM] unsigned char 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  i               1    8[COMRAM] unsigned char 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   643 ;;      Params:         3       0       0       0       0       0       0       0       0
   644 ;;      Locals:         1       0       0       0       0       0       0       0       0
   645 ;;      Temps:          2       0       0       0       0       0       0       0       0
   646 ;;      Totals:         6       0       0       0       0       0       0       0       0
   647 ;;Total ram usage:        6 bytes
   648 ;; Hardware stack levels used:    1
   649 ;; Hardware stack levels required when called:    2
   650 ;; This function calls:
   651 ;;		_ENVIA_CHAR
   652 ;; This function is called by:
   653 ;;		_main
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text3
   658  000C4C                     __ptext3:
   659                           	opt callstack 0
   660  000C4C                     _ESCRIBE_MENSAJE:
   661                           	opt callstack 28
   662                           
   663                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   664                           
   665                           ;incstack = 0
   666  000C4C  0E00               	movlw	0
   667  000C4E  6E1B               	movwf	ESCRIBE_MENSAJE@i,c
   668                           
   669                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   670  000C50  0E00               	movlw	0
   671  000C52  6E1B               	movwf	ESCRIBE_MENSAJE@i,c
   672  000C54  D00F               	goto	l1265
   673  000C56                     l1261:
   674                           
   675                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   676  000C56  501B               	movf	ESCRIBE_MENSAJE@i,w,c
   677  000C58  2416               	addwf	ESCRIBE_MENSAJE@cadena,w,c
   678  000C5A  6E19               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
   679  000C5C  0E00               	movlw	0
   680  000C5E  2017               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
   681  000C60  6E1A               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
   682  000C62  C019  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   683  000C66  C01A  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   684  000C6A                     	if	0	;tblptru may be non-zero
   685  000C6A                     	endif
   686  000C6A                     	if	0	;tblptru may be non-zero
   687  000C6A                     	endif
   688  000C6A  0008               	tblrd		*
   689  000C6C  50F5               	movf	tablat,w,c
   690  000C6E  ECF2  F005         	call	_ENVIA_CHAR
   691                           
   692                           ;LCD.c: 47:  }
   693  000C72  2A1B               	incf	ESCRIBE_MENSAJE@i,f,c
   694  000C74                     l1265:
   695  000C74  5018               	movf	ESCRIBE_MENSAJE@tam,w,c
   696  000C76  5C1B               	subwf	ESCRIBE_MENSAJE@i,w,c
   697  000C78  B0D8               	btfsc	status,0,c
   698  000C7A  0012               	return	
   699  000C7C  D7EC               	goto	l1261
   700  000C7E                     __end_of_ESCRIBE_MENSAJE:
   701                           	opt callstack 0
   702                           
   703 ;; *************** function _ENVIA_CHAR *****************
   704 ;; Defined at:
   705 ;;		line 50 in file "LCD.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;  dato            1    wreg     unsigned char 
   708 ;; Auto vars:     Size  Location     Type
   709 ;;  dato            1    1[COMRAM] unsigned char 
   710 ;;  aux             1    2[COMRAM] unsigned char 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, status,2, status,0, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   720 ;;      Params:         0       0       0       0       0       0       0       0       0
   721 ;;      Locals:         2       0       0       0       0       0       0       0       0
   722 ;;      Temps:          0       0       0       0       0       0       0       0       0
   723 ;;      Totals:         2       0       0       0       0       0       0       0       0
   724 ;;Total ram usage:        2 bytes
   725 ;; Hardware stack levels used:    1
   726 ;; Hardware stack levels required when called:    1
   727 ;; This function calls:
   728 ;;		_ENVIA_NIBBLE
   729 ;;		_LEER_LCD
   730 ;; This function is called by:
   731 ;;		_main
   732 ;;		_ESCRIBE_MENSAJE
   733 ;;		_GENERACARACTER
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           	psect	text4
   738  000BE4                     __ptext4:
   739                           	opt callstack 0
   740  000BE4                     _ENVIA_CHAR:
   741                           	opt callstack 28
   742                           
   743                           ;incstack = 0
   744                           ;ENVIA_CHAR@dato stored from wreg
   745  000BE4  6E14               	movwf	ENVIA_CHAR@dato,c
   746                           
   747                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   748  000BE6  808C               	bsf	3980,0,c	;volatile
   749                           
   750                           ;LCD.c: 54:  LEER_LCD();
   751  000BE8  EC91  F005         	call	_LEER_LCD	;wreg free
   752                           
   753                           ;LCD.c: 55:  TRISD = 0x00;
   754  000BEC  0E00               	movlw	0
   755  000BEE  6E95               	movwf	3989,c	;volatile
   756                           
   757                           ;LCD.c: 56:         _delay(1200);
   758  000BF0  0EF0               	movlw	240
   759  000BF2                     u387:
   760  000BF2  D000               	nop2	
   761  000BF4  2EE8               	decfsz	wreg,f,c
   762  000BF6  D7FD               	bra	u387
   763                           
   764                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
   765  000BF8  928C               	bcf	3980,1,c	;volatile
   766                           
   767                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
   768  000BFA  948C               	bcf	3980,2,c	;volatile
   769                           
   770                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
   771  000BFC  808C               	bsf	3980,0,c	;volatile
   772                           
   773                           ;LCD.c: 61:  aux = dato & 0xF0;
   774  000BFE  5014               	movf	ENVIA_CHAR@dato,w,c
   775  000C00  0BF0               	andlw	240
   776  000C02  6E15               	movwf	ENVIA_CHAR@aux,c
   777                           
   778                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
   779  000C04  5015               	movf	ENVIA_CHAR@aux,w,c
   780  000C06  EC88  F006         	call	_ENVIA_NIBBLE
   781                           
   782                           ;LCD.c: 63:  aux = dato << 4;
   783  000C0A  3814               	swapf	ENVIA_CHAR@dato,w,c
   784  000C0C  0BF0               	andlw	240
   785  000C0E  6E15               	movwf	ENVIA_CHAR@aux,c
   786                           
   787                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
   788  000C10  5015               	movf	ENVIA_CHAR@aux,w,c
   789  000C12  EC88  F006         	call	_ENVIA_NIBBLE
   790  000C16  0012               	return		;funcret
   791  000C18                     __end_of_ENVIA_CHAR:
   792                           	opt callstack 0
   793                           
   794 ;; *************** function _DIGITOS *****************
   795 ;; Defined at:
   796 ;;		line 40 in file "visualizeitor.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;		None
   799 ;; Auto vars:     Size  Location     Type
   800 ;;		None
   801 ;; Return value:  Size  Location     Type
   802 ;;                  1    wreg      void 
   803 ;; Registers used:
   804 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   810 ;;      Params:         0       0       0       0       0       0       0       0       0
   811 ;;      Locals:         0       0       0       0       0       0       0       0       0
   812 ;;      Temps:          0       0       0       0       0       0       0       0       0
   813 ;;      Totals:         0       0       0       0       0       0       0       0       0
   814 ;;Total ram usage:        0 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    1
   817 ;; This function calls:
   818 ;;		___awdiv
   819 ;;		___wmul
   820 ;; This function is called by:
   821 ;;		_main
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text5
   826  00081A                     __ptext5:
   827                           	opt callstack 0
   828  00081A                     _DIGITOS:
   829                           	opt callstack 29
   830                           
   831                           ;visualizeitor.c: 41:     digdmi = canal0 / 10000;
   832                           
   833                           ;incstack = 0
   834  00081A  C011  F013         	movff	_canal0,___awdiv@dividend
   835  00081E  C012  F014         	movff	_canal0+1,___awdiv@dividend+1
   836  000822  0E27               	movlw	39
   837  000824  6E16               	movwf	___awdiv@divisor+1,c
   838  000826  0E10               	movlw	16
   839  000828  6E15               	movwf	___awdiv@divisor,c
   840  00082A  EC4F  F005         	call	___awdiv	;wreg free
   841  00082E  C013  F00F         	movff	?___awdiv,_digdmi
   842  000832  C014  F010         	movff	?___awdiv+1,_digdmi+1
   843                           
   844                           ;visualizeitor.c: 42:     temporal3 = canal0 - (digdmi * 10000);
   845  000836  C00F  F013         	movff	_digdmi,___wmul@multiplier
   846  00083A  C010  F014         	movff	_digdmi+1,___wmul@multiplier+1
   847  00083E  0ED8               	movlw	216
   848  000840  6E16               	movwf	___wmul@multiplicand+1,c
   849  000842  0EF0               	movlw	240
   850  000844  6E15               	movwf	___wmul@multiplicand,c
   851  000846  EC55  F006         	call	___wmul	;wreg free
   852  00084A  5011               	movf	_canal0,w,c
   853  00084C  2413               	addwf	?___wmul,w,c
   854  00084E  6E01               	movwf	_temporal3,c
   855  000850  5012               	movf	_canal0+1,w,c
   856  000852  2014               	addwfc	?___wmul+1,w,c
   857  000854  6E02               	movwf	_temporal3+1,c
   858                           
   859                           ;visualizeitor.c: 43:     digmil = temporal3 / 1000;
   860  000856  C001  F013         	movff	_temporal3,___awdiv@dividend
   861  00085A  C002  F014         	movff	_temporal3+1,___awdiv@dividend+1
   862  00085E  0E03               	movlw	3
   863  000860  6E16               	movwf	___awdiv@divisor+1,c
   864  000862  0EE8               	movlw	232
   865  000864  6E15               	movwf	___awdiv@divisor,c
   866  000866  EC4F  F005         	call	___awdiv	;wreg free
   867  00086A  C013  F00D         	movff	?___awdiv,_digmil
   868  00086E  C014  F00E         	movff	?___awdiv+1,_digmil+1
   869                           
   870                           ;visualizeitor.c: 44:     temporal = temporal3 - (digmil * 1000);
   871  000872  C00D  F013         	movff	_digmil,___wmul@multiplier
   872  000876  C00E  F014         	movff	_digmil+1,___wmul@multiplier+1
   873  00087A  0EFC               	movlw	252
   874  00087C  6E16               	movwf	___wmul@multiplicand+1,c
   875  00087E  0E18               	movlw	24
   876  000880  6E15               	movwf	___wmul@multiplicand,c
   877  000882  EC55  F006         	call	___wmul	;wreg free
   878  000886  5001               	movf	_temporal3,w,c
   879  000888  2413               	addwf	?___wmul,w,c
   880  00088A  6E05               	movwf	_temporal,c
   881  00088C  5002               	movf	_temporal3+1,w,c
   882  00088E  2014               	addwfc	?___wmul+1,w,c
   883  000890  6E06               	movwf	_temporal+1,c
   884                           
   885                           ;visualizeitor.c: 45:     digcen = temporal / 100;
   886  000892  C005  F013         	movff	_temporal,___awdiv@dividend
   887  000896  C006  F014         	movff	_temporal+1,___awdiv@dividend+1
   888  00089A  0E00               	movlw	0
   889  00089C  6E16               	movwf	___awdiv@divisor+1,c
   890  00089E  0E64               	movlw	100
   891  0008A0  6E15               	movwf	___awdiv@divisor,c
   892  0008A2  EC4F  F005         	call	___awdiv	;wreg free
   893  0008A6  C013  F00B         	movff	?___awdiv,_digcen
   894  0008AA  C014  F00C         	movff	?___awdiv+1,_digcen+1
   895                           
   896                           ;visualizeitor.c: 46:     temporal2 = temporal - (digcen * 100);
   897  0008AE  C00B  F013         	movff	_digcen,___wmul@multiplier
   898  0008B2  C00C  F014         	movff	_digcen+1,___wmul@multiplier+1
   899  0008B6  0EFF               	movlw	255
   900  0008B8  6E16               	movwf	___wmul@multiplicand+1,c
   901  0008BA  0E9C               	movlw	156
   902  0008BC  6E15               	movwf	___wmul@multiplicand,c
   903  0008BE  EC55  F006         	call	___wmul	;wreg free
   904  0008C2  5005               	movf	_temporal,w,c
   905  0008C4  2413               	addwf	?___wmul,w,c
   906  0008C6  6E03               	movwf	_temporal2,c
   907  0008C8  5006               	movf	_temporal+1,w,c
   908  0008CA  2014               	addwfc	?___wmul+1,w,c
   909  0008CC  6E04               	movwf	_temporal2+1,c
   910                           
   911                           ;visualizeitor.c: 47:     digdec = temporal2 / 10;
   912  0008CE  C003  F013         	movff	_temporal2,___awdiv@dividend
   913  0008D2  C004  F014         	movff	_temporal2+1,___awdiv@dividend+1
   914  0008D6  0E00               	movlw	0
   915  0008D8  6E16               	movwf	___awdiv@divisor+1,c
   916  0008DA  0E0A               	movlw	10
   917  0008DC  6E15               	movwf	___awdiv@divisor,c
   918  0008DE  EC4F  F005         	call	___awdiv	;wreg free
   919  0008E2  C013  F009         	movff	?___awdiv,_digdec
   920  0008E6  C014  F00A         	movff	?___awdiv+1,_digdec+1
   921                           
   922                           ;visualizeitor.c: 48:     diguni = temporal2 - (digdec * 10);
   923  0008EA  C009  F013         	movff	_digdec,___wmul@multiplier
   924  0008EE  C00A  F014         	movff	_digdec+1,___wmul@multiplier+1
   925  0008F2  0EFF               	movlw	255
   926  0008F4  6E16               	movwf	___wmul@multiplicand+1,c
   927  0008F6  0EF6               	movlw	246
   928  0008F8  6E15               	movwf	___wmul@multiplicand,c
   929  0008FA  EC55  F006         	call	___wmul	;wreg free
   930  0008FE  5003               	movf	_temporal2,w,c
   931  000900  2413               	addwf	?___wmul,w,c
   932  000902  6E07               	movwf	_diguni,c
   933  000904  5004               	movf	_temporal2+1,w,c
   934  000906  2014               	addwfc	?___wmul+1,w,c
   935  000908  6E08               	movwf	_diguni+1,c
   936  00090A  0012               	return		;funcret
   937  00090C                     __end_of_DIGITOS:
   938                           	opt callstack 0
   939                           
   940 ;; *************** function ___wmul *****************
   941 ;; Defined at:
   942 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
   943 ;; Parameters:    Size  Location     Type
   944 ;;  multiplier      2    0[COMRAM] unsigned int 
   945 ;;  multiplicand    2    2[COMRAM] unsigned int 
   946 ;; Auto vars:     Size  Location     Type
   947 ;;  product         2    4[COMRAM] unsigned int 
   948 ;; Return value:  Size  Location     Type
   949 ;;                  2    0[COMRAM] unsigned int 
   950 ;; Registers used:
   951 ;;		wreg, status,2, status,0, prodl, prodh
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   957 ;;      Params:         4       0       0       0       0       0       0       0       0
   958 ;;      Locals:         2       0       0       0       0       0       0       0       0
   959 ;;      Temps:          0       0       0       0       0       0       0       0       0
   960 ;;      Totals:         6       0       0       0       0       0       0       0       0
   961 ;;Total ram usage:        6 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; This function calls:
   964 ;;		Nothing
   965 ;; This function is called by:
   966 ;;		_DIGITOS
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text6
   971  000CAA                     __ptext6:
   972                           	opt callstack 0
   973  000CAA                     ___wmul:
   974                           	opt callstack 29
   975                           
   976                           ;incstack = 0
   977  000CAA  5013               	movf	___wmul@multiplier,w,c
   978  000CAC  0215               	mulwf	___wmul@multiplicand,c
   979  000CAE  CFF3 F017          	movff	prodl,___wmul@product
   980  000CB2  CFF4 F018          	movff	prodh,___wmul@product+1
   981  000CB6  5013               	movf	___wmul@multiplier,w,c
   982  000CB8  0216               	mulwf	___wmul@multiplicand+1,c
   983  000CBA  50F3               	movf	prodl,w,c
   984  000CBC  2618               	addwf	___wmul@product+1,f,c
   985  000CBE  5014               	movf	___wmul@multiplier+1,w,c
   986  000CC0  0215               	mulwf	___wmul@multiplicand,c
   987  000CC2  50F3               	movf	prodl,w,c
   988  000CC4  2618               	addwf	___wmul@product+1,f,c
   989  000CC6  C017  F013         	movff	___wmul@product,?___wmul
   990  000CCA  C018  F014         	movff	___wmul@product+1,?___wmul+1
   991  000CCE  0012               	return		;funcret
   992  000CD0                     __end_of___wmul:
   993                           	opt callstack 0
   994                           
   995 ;; *************** function ___awdiv *****************
   996 ;; Defined at:
   997 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;  dividend        2    0[COMRAM] int 
  1000 ;;  divisor         2    2[COMRAM] int 
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;  quotient        2    6[COMRAM] int 
  1003 ;;  sign            1    5[COMRAM] unsigned char 
  1004 ;;  counter         1    4[COMRAM] unsigned char 
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  2    0[COMRAM] int 
  1007 ;; Registers used:
  1008 ;;		wreg, status,2, status,0
  1009 ;; Tracked objects:
  1010 ;;		On entry : 0/0
  1011 ;;		On exit  : 0/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1014 ;;      Params:         4       0       0       0       0       0       0       0       0
  1015 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1016 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1017 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1018 ;;Total ram usage:        8 bytes
  1019 ;; Hardware stack levels used:    1
  1020 ;; This function calls:
  1021 ;;		Nothing
  1022 ;; This function is called by:
  1023 ;;		_DIGITOS
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text7
  1028  000A9E                     __ptext7:
  1029                           	opt callstack 0
  1030  000A9E                     ___awdiv:
  1031                           	opt callstack 29
  1032                           
  1033                           ;incstack = 0
  1034  000A9E  0E00               	movlw	0
  1035  000AA0  6E18               	movwf	___awdiv@sign,c
  1036  000AA2  AE16               	btfss	___awdiv@divisor+1,7,c
  1037  000AA4  D006               	goto	l1211
  1038  000AA6  6C15               	negf	___awdiv@divisor,c
  1039  000AA8  1E16               	comf	___awdiv@divisor+1,f,c
  1040  000AAA  B0D8               	btfsc	status,0,c
  1041  000AAC  2A16               	incf	___awdiv@divisor+1,f,c
  1042  000AAE  0E01               	movlw	1
  1043  000AB0  6E18               	movwf	___awdiv@sign,c
  1044  000AB2                     l1211:
  1045  000AB2  AE14               	btfss	___awdiv@dividend+1,7,c
  1046  000AB4  D006               	goto	l1217
  1047  000AB6  6C13               	negf	___awdiv@dividend,c
  1048  000AB8  1E14               	comf	___awdiv@dividend+1,f,c
  1049  000ABA  B0D8               	btfsc	status,0,c
  1050  000ABC  2A14               	incf	___awdiv@dividend+1,f,c
  1051  000ABE  0E01               	movlw	1
  1052  000AC0  1A18               	xorwf	___awdiv@sign,f,c
  1053  000AC2                     l1217:
  1054  000AC2  0E00               	movlw	0
  1055  000AC4  6E1A               	movwf	___awdiv@quotient+1,c
  1056  000AC6  0E00               	movlw	0
  1057  000AC8  6E19               	movwf	___awdiv@quotient,c
  1058  000ACA  5015               	movf	___awdiv@divisor,w,c
  1059  000ACC  1016               	iorwf	___awdiv@divisor+1,w,c
  1060  000ACE  B4D8               	btfsc	status,2,c
  1061  000AD0  D01C               	goto	l1239
  1062  000AD2  0E01               	movlw	1
  1063  000AD4  6E17               	movwf	___awdiv@counter,c
  1064  000AD6  D004               	goto	l1225
  1065  000AD8                     l1223:
  1066  000AD8  90D8               	bcf	status,0,c
  1067  000ADA  3615               	rlcf	___awdiv@divisor,f,c
  1068  000ADC  3616               	rlcf	___awdiv@divisor+1,f,c
  1069  000ADE  2A17               	incf	___awdiv@counter,f,c
  1070  000AE0                     l1225:
  1071  000AE0  AE16               	btfss	___awdiv@divisor+1,7,c
  1072  000AE2  D7FA               	goto	l1223
  1073  000AE4                     u220:
  1074  000AE4  90D8               	bcf	status,0,c
  1075  000AE6  3619               	rlcf	___awdiv@quotient,f,c
  1076  000AE8  361A               	rlcf	___awdiv@quotient+1,f,c
  1077  000AEA  5015               	movf	___awdiv@divisor,w,c
  1078  000AEC  5C13               	subwf	___awdiv@dividend,w,c
  1079  000AEE  5016               	movf	___awdiv@divisor+1,w,c
  1080  000AF0  5814               	subwfb	___awdiv@dividend+1,w,c
  1081  000AF2  A0D8               	btfss	status,0,c
  1082  000AF4  D005               	goto	l1235
  1083  000AF6  5015               	movf	___awdiv@divisor,w,c
  1084  000AF8  5E13               	subwf	___awdiv@dividend,f,c
  1085  000AFA  5016               	movf	___awdiv@divisor+1,w,c
  1086  000AFC  5A14               	subwfb	___awdiv@dividend+1,f,c
  1087  000AFE  8019               	bsf	___awdiv@quotient,0,c
  1088  000B00                     l1235:
  1089  000B00  90D8               	bcf	status,0,c
  1090  000B02  3216               	rrcf	___awdiv@divisor+1,f,c
  1091  000B04  3215               	rrcf	___awdiv@divisor,f,c
  1092  000B06  2E17               	decfsz	___awdiv@counter,f,c
  1093  000B08  D7ED               	goto	u220
  1094  000B0A                     l1239:
  1095  000B0A  5018               	movf	___awdiv@sign,w,c
  1096  000B0C  B4D8               	btfsc	status,2,c
  1097  000B0E  D004               	goto	l1243
  1098  000B10  6C19               	negf	___awdiv@quotient,c
  1099  000B12  1E1A               	comf	___awdiv@quotient+1,f,c
  1100  000B14  B0D8               	btfsc	status,0,c
  1101  000B16  2A1A               	incf	___awdiv@quotient+1,f,c
  1102  000B18                     l1243:
  1103  000B18  C019  F013         	movff	___awdiv@quotient,?___awdiv
  1104  000B1C  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  1105  000B20  0012               	return		;funcret
  1106  000B22                     __end_of___awdiv:
  1107                           	opt callstack 0
  1108                           
  1109 ;; *************** function _CURSOR_ONOFF *****************
  1110 ;; Defined at:
  1111 ;;		line 35 in file "LCD.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  estado          1    wreg     unsigned char 
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;  estado          1    3[COMRAM] unsigned char 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      void 
  1118 ;; Registers used:
  1119 ;;		wreg, status,2, status,0, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1125 ;;      Params:         0       0       0       0       0       0       0       0       0
  1126 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1127 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1128 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1129 ;;Total ram usage:        1 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; Hardware stack levels required when called:    2
  1132 ;; This function calls:
  1133 ;;		_ENVIA_LCD_CMD
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           	psect	text8
  1140  000CF4                     __ptext8:
  1141                           	opt callstack 0
  1142  000CF4                     _CURSOR_ONOFF:
  1143                           	opt callstack 28
  1144                           
  1145                           ;incstack = 0
  1146                           ;CURSOR_ONOFF@estado stored from wreg
  1147  000CF4  6E16               	movwf	CURSOR_ONOFF@estado,c
  1148                           
  1149                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1150  000CF6  5016               	movf	CURSOR_ONOFF@estado,w,c
  1151  000CF8  A4D8               	btfss	status,2,c
  1152  000CFA  D003               	goto	l1091
  1153  000CFC  0E0E               	movlw	14
  1154  000CFE  EC0C  F006         	call	_ENVIA_LCD_CMD
  1155  000D02                     l1091:
  1156                           
  1157                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1158  000D02  0416               	decf	CURSOR_ONOFF@estado,w,c
  1159  000D04  A4D8               	btfss	status,2,c
  1160  000D06  0012               	return	
  1161  000D08  0E0C               	movlw	12
  1162  000D0A  EC0C  F006         	call	_ENVIA_LCD_CMD
  1163  000D0E  0012               	return		;funcret
  1164  000D10                     __end_of_CURSOR_ONOFF:
  1165                           	opt callstack 0
  1166                           
  1167 ;; *************** function _CURSOR_HOME *****************
  1168 ;; Defined at:
  1169 ;;		line 30 in file "LCD.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;		None
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;		None
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg, status,2, status,0, cstack
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1183 ;;      Params:         0       0       0       0       0       0       0       0       0
  1184 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1185 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1186 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1187 ;;Total ram usage:        0 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; Hardware stack levels required when called:    2
  1190 ;; This function calls:
  1191 ;;		_ENVIA_LCD_CMD
  1192 ;; This function is called by:
  1193 ;;		_main
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text9
  1198  000D42                     __ptext9:
  1199                           	opt callstack 0
  1200  000D42                     _CURSOR_HOME:
  1201                           	opt callstack 28
  1202                           
  1203                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1204                           
  1205                           ;incstack = 0
  1206  000D42  0E02               	movlw	2
  1207  000D44  EC0C  F006         	call	_ENVIA_LCD_CMD
  1208  000D48  0012               	return		;funcret
  1209  000D4A                     __end_of_CURSOR_HOME:
  1210                           	opt callstack 0
  1211                           
  1212 ;; *************** function _BORRAR_LCD *****************
  1213 ;; Defined at:
  1214 ;;		line 67 in file "LCD.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;		None
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;		None
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  1    wreg      void 
  1221 ;; Registers used:
  1222 ;;		wreg, status,2, status,0, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1228 ;;      Params:         0       0       0       0       0       0       0       0       0
  1229 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1231 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1232 ;;Total ram usage:        0 bytes
  1233 ;; Hardware stack levels used:    1
  1234 ;; Hardware stack levels required when called:    2
  1235 ;; This function calls:
  1236 ;;		_ENVIA_LCD_CMD
  1237 ;; This function is called by:
  1238 ;;		_main
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           	psect	text10
  1243  000D4A                     __ptext10:
  1244                           	opt callstack 0
  1245  000D4A                     _BORRAR_LCD:
  1246                           	opt callstack 28
  1247                           
  1248                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1249                           
  1250                           ;incstack = 0
  1251  000D4A  0E01               	movlw	1
  1252  000D4C  EC0C  F006         	call	_ENVIA_LCD_CMD
  1253  000D50  0012               	return		;funcret
  1254  000D52                     __end_of_BORRAR_LCD:
  1255                           	opt callstack 0
  1256                           
  1257 ;; *************** function _ENVIA_LCD_CMD *****************
  1258 ;; Defined at:
  1259 ;;		line 104 in file "LCD.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;  dato            1    wreg     unsigned char 
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;  dato            1    1[COMRAM] unsigned char 
  1264 ;;  aux             1    2[COMRAM] unsigned char 
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      void 
  1267 ;; Registers used:
  1268 ;;		wreg, status,2, status,0, cstack
  1269 ;; Tracked objects:
  1270 ;;		On entry : 0/0
  1271 ;;		On exit  : 0/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1274 ;;      Params:         0       0       0       0       0       0       0       0       0
  1275 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1277 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1278 ;;Total ram usage:        2 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; Hardware stack levels required when called:    1
  1281 ;; This function calls:
  1282 ;;		_ENVIA_NIBBLE
  1283 ;;		_LEER_LCD
  1284 ;; This function is called by:
  1285 ;;		_POS_CURSOR
  1286 ;;		_CURSOR_HOME
  1287 ;;		_CURSOR_ONOFF
  1288 ;;		_BORRAR_LCD
  1289 ;;		_LCD_CONFIG
  1290 ;;		_BLINK_CURSOR
  1291 ;;		_DISPLAY_ONOFF
  1292 ;;		_GENERACARACTER
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text11
  1297  000C18                     __ptext11:
  1298                           	opt callstack 0
  1299  000C18                     _ENVIA_LCD_CMD:
  1300                           	opt callstack 28
  1301                           
  1302                           ;incstack = 0
  1303                           ;ENVIA_LCD_CMD@dato stored from wreg
  1304  000C18  6E14               	movwf	ENVIA_LCD_CMD@dato,c
  1305                           
  1306                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1307  000C1A  908C               	bcf	3980,0,c	;volatile
  1308                           
  1309                           ;LCD.c: 108:  LEER_LCD();
  1310  000C1C  EC91  F005         	call	_LEER_LCD	;wreg free
  1311                           
  1312                           ;LCD.c: 109:  TRISD = 0b00000000;
  1313  000C20  0E00               	movlw	0
  1314  000C22  6E95               	movwf	3989,c	;volatile
  1315                           
  1316                           ;LCD.c: 111:         _delay(1200);
  1317  000C24  0EF0               	movlw	240
  1318  000C26                     u397:
  1319  000C26  D000               	nop2	
  1320  000C28  2EE8               	decfsz	wreg,f,c
  1321  000C2A  D7FD               	bra	u397
  1322                           
  1323                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1324  000C2C  928C               	bcf	3980,1,c	;volatile
  1325                           
  1326                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1327  000C2E  948C               	bcf	3980,2,c	;volatile
  1328                           
  1329                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1330  000C30  908C               	bcf	3980,0,c	;volatile
  1331                           
  1332                           ;LCD.c: 115:  aux = dato & 0xF0;
  1333  000C32  5014               	movf	ENVIA_LCD_CMD@dato,w,c
  1334  000C34  0BF0               	andlw	240
  1335  000C36  6E15               	movwf	ENVIA_LCD_CMD@aux,c
  1336                           
  1337                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1338  000C38  5015               	movf	ENVIA_LCD_CMD@aux,w,c
  1339  000C3A  EC88  F006         	call	_ENVIA_NIBBLE
  1340                           
  1341                           ;LCD.c: 117:  aux = dato<<4;
  1342  000C3E  3814               	swapf	ENVIA_LCD_CMD@dato,w,c
  1343  000C40  0BF0               	andlw	240
  1344  000C42  6E15               	movwf	ENVIA_LCD_CMD@aux,c
  1345                           
  1346                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1347  000C44  5015               	movf	ENVIA_LCD_CMD@aux,w,c
  1348  000C46  EC88  F006         	call	_ENVIA_NIBBLE
  1349  000C4A  0012               	return		;funcret
  1350  000C4C                     __end_of_ENVIA_LCD_CMD:
  1351                           	opt callstack 0
  1352                           
  1353 ;; *************** function _LEER_LCD *****************
  1354 ;; Defined at:
  1355 ;;		line 121 in file "LCD.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;  aux             1    0[COMRAM] unsigned char 
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		wreg, status,2, status,0
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1369 ;;      Params:         0       0       0       0       0       0       0       0       0
  1370 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1371 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1372 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1373 ;;Total ram usage:        1 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		_ENVIA_CHAR
  1379 ;;		_ENVIA_LCD_CMD
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text12
  1384  000B22                     __ptext12:
  1385                           	opt callstack 0
  1386  000B22                     _LEER_LCD:
  1387                           	opt callstack 28
  1388                           
  1389                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1390                           
  1391                           ;incstack = 0
  1392  000B22  0EF8               	movlw	248
  1393  000B24  6E95               	movwf	3989,c	;volatile
  1394                           
  1395                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1396  000B26  908C               	bcf	3980,0,c	;volatile
  1397                           
  1398                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1399  000B28  828C               	bsf	3980,1,c	;volatile
  1400                           
  1401                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1402  000B2A  848C               	bsf	3980,2,c	;volatile
  1403                           
  1404                           ;LCD.c: 128:         _delay(1200);
  1405  000B2C  0EF0               	movlw	240
  1406  000B2E                     u407:
  1407  000B2E  D000               	nop2	
  1408  000B30  2EE8               	decfsz	wreg,f,c
  1409  000B32  D7FD               	bra	u407
  1410                           
  1411                           ;LCD.c: 130:  aux = PORTD;
  1412  000B34  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1413                           
  1414                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1415  000B38  948C               	bcf	3980,2,c	;volatile
  1416                           
  1417                           ;LCD.c: 132:         _delay(1200);
  1418  000B3A  0EF0               	movlw	240
  1419  000B3C                     u417:
  1420  000B3C  D000               	nop2	
  1421  000B3E  2EE8               	decfsz	wreg,f,c
  1422  000B40  D7FD               	bra	u417
  1423                           
  1424                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1425  000B42  848C               	bsf	3980,2,c	;volatile
  1426                           
  1427                           ;LCD.c: 135:         _delay(1200);
  1428  000B44  0EF0               	movlw	240
  1429  000B46                     u427:
  1430  000B46  D000               	nop2	
  1431  000B48  2EE8               	decfsz	wreg,f,c
  1432  000B4A  D7FD               	bra	u427
  1433  000B4C                     l861:
  1434                           
  1435                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1436  000B4C  948C               	bcf	3980,2,c	;volatile
  1437                           
  1438                           ;LCD.c: 138:  aux = aux & 0x80;
  1439  000B4E  5013               	movf	LEER_LCD@aux,w,c
  1440  000B50  0B80               	andlw	128
  1441  000B52  6E13               	movwf	LEER_LCD@aux,c
  1442                           
  1443                           ;LCD.c: 139:  while(aux == 0x80)
  1444  000B54  D012               	goto	l877
  1445  000B56                     l116:
  1446                           
  1447                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1448  000B56  848C               	bsf	3980,2,c	;volatile
  1449                           
  1450                           ;LCD.c: 142:             _delay(1200);
  1451  000B58  0EF0               	movlw	240
  1452  000B5A                     u437:
  1453  000B5A  D000               	nop2	
  1454  000B5C  2EE8               	decfsz	wreg,f,c
  1455  000B5E  D7FD               	bra	u437
  1456                           
  1457                           ;LCD.c: 143:             aux = PORTD;
  1458  000B60  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1459                           
  1460                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1461  000B64  948C               	bcf	3980,2,c	;volatile
  1462                           
  1463                           ;LCD.c: 145:             _delay(1200);
  1464  000B66  0EF0               	movlw	240
  1465  000B68                     u447:
  1466  000B68  D000               	nop2	
  1467  000B6A  2EE8               	decfsz	wreg,f,c
  1468  000B6C  D7FD               	bra	u447
  1469                           
  1470                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1471  000B6E  848C               	bsf	3980,2,c	;volatile
  1472                           
  1473                           ;LCD.c: 147:             _delay(1200);
  1474  000B70  0EF0               	movlw	240
  1475  000B72                     u457:
  1476  000B72  D000               	nop2	
  1477  000B74  2EE8               	decfsz	wreg,f,c
  1478  000B76  D7FD               	bra	u457
  1479  000B78  D7E9               	goto	l861
  1480  000B7A                     l877:
  1481                           
  1482                           ;LCD.c: 139:  while(aux == 0x80)
  1483  000B7A  0E80               	movlw	128
  1484  000B7C  1813               	xorwf	LEER_LCD@aux,w,c
  1485  000B7E  A4D8               	btfss	status,2,c
  1486  000B80  0012               	return	
  1487  000B82  D7E9               	goto	l116
  1488  000B84                     __end_of_LEER_LCD:
  1489                           	opt callstack 0
  1490                           
  1491 ;; *************** function _ENVIA_NIBBLE *****************
  1492 ;; Defined at:
  1493 ;;		line 93 in file "LCD.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;  dato            1    wreg     unsigned char 
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;  dato            1    0[COMRAM] unsigned char 
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2, status,0
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1507 ;;      Params:         0       0       0       0       0       0       0       0       0
  1508 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1510 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1511 ;;Total ram usage:        1 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; This function calls:
  1514 ;;		Nothing
  1515 ;; This function is called by:
  1516 ;;		_ENVIA_CHAR
  1517 ;;		_LCD_CONFIG
  1518 ;;		_ENVIA_LCD_CMD
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text13
  1523  000D10                     __ptext13:
  1524                           	opt callstack 0
  1525  000D10                     _ENVIA_NIBBLE:
  1526                           	opt callstack 28
  1527                           
  1528                           ;incstack = 0
  1529                           ;ENVIA_NIBBLE@dato stored from wreg
  1530  000D10  6E13               	movwf	ENVIA_NIBBLE@dato,c
  1531                           
  1532                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1533  000D12  0E0F               	movlw	15
  1534  000D14  168C               	andwf	3980,f,c	;volatile
  1535                           
  1536                           ;LCD.c: 96:  dato &= 0xF0;
  1537  000D16  0EF0               	movlw	240
  1538  000D18  1613               	andwf	ENVIA_NIBBLE@dato,f,c
  1539                           
  1540                           ;LCD.c: 97:  LATD|= dato;
  1541  000D1A  5013               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1542  000D1C  128C               	iorwf	3980,f,c	;volatile
  1543                           
  1544                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1545  000D1E  848C               	bsf	3980,2,c	;volatile
  1546                           
  1547                           ;LCD.c: 100:         _delay(1200);
  1548  000D20  0EF0               	movlw	240
  1549  000D22                     u467:
  1550  000D22  D000               	nop2	
  1551  000D24  2EE8               	decfsz	wreg,f,c
  1552  000D26  D7FD               	bra	u467
  1553                           
  1554                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1555  000D28  948C               	bcf	3980,2,c	;volatile
  1556  000D2A  0012               	return		;funcret
  1557  000D2C                     __end_of_ENVIA_NIBBLE:
  1558                           	opt callstack 0
  1559                           
  1560 ;; *************** function _ADC_CONVERTIR *****************
  1561 ;; Defined at:
  1562 ;;		line 69 in file "ADC.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;		None
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  num             2    3[COMRAM] int 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  2    0[COMRAM] int 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1576 ;;      Params:         2       0       0       0       0       0       0       0       0
  1577 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1578 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1579 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1580 ;;Total ram usage:        5 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; This function calls:
  1583 ;;		Nothing
  1584 ;; This function is called by:
  1585 ;;		_main
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           	psect	text14
  1590  000C7E                     __ptext14:
  1591                           	opt callstack 0
  1592  000C7E                     _ADC_CONVERTIR:
  1593                           	opt callstack 30
  1594                           
  1595                           ;ADC.c: 71:  int num;;ADC.c: 72:  ADCON0bits.GO = 1;
  1596                           
  1597                           ;incstack = 0
  1598  000C7E  82C2               	bsf	4034,1,c	;volatile
  1599  000C80                     l162:
  1600  000C80  B2C2               	btfsc	4034,1,c	;volatile
  1601  000C82  D7FE               	goto	l162
  1602                           
  1603                           ;ADC.c: 74:  num = 0x03 & ADRESH;
  1604  000C84  CFC4 F015          	movff	4036,??_ADC_CONVERTIR	;volatile
  1605  000C88  0E03               	movlw	3
  1606  000C8A  1615               	andwf	??_ADC_CONVERTIR,f,c
  1607  000C8C  5015               	movf	??_ADC_CONVERTIR,w,c
  1608  000C8E  6E16               	movwf	ADC_CONVERTIR@num,c
  1609  000C90  6A17               	clrf	ADC_CONVERTIR@num+1,c
  1610                           
  1611                           ;ADC.c: 75:  num<<= 8;
  1612  000C92  5016               	movf	ADC_CONVERTIR@num,w,c
  1613  000C94  6E17               	movwf	ADC_CONVERTIR@num+1,c
  1614  000C96  6A16               	clrf	ADC_CONVERTIR@num,c
  1615                           
  1616                           ;ADC.c: 76:  num +=ADRESL;
  1617  000C98  50C3               	movf	4035,w,c	;volatile
  1618  000C9A  2616               	addwf	ADC_CONVERTIR@num,f,c
  1619  000C9C  0E00               	movlw	0
  1620  000C9E  2217               	addwfc	ADC_CONVERTIR@num+1,f,c
  1621                           
  1622                           ;ADC.c: 77:  return(num);
  1623  000CA0  C016  F013         	movff	ADC_CONVERTIR@num,?_ADC_CONVERTIR
  1624  000CA4  C017  F014         	movff	ADC_CONVERTIR@num+1,?_ADC_CONVERTIR+1
  1625  000CA8  0012               	return		;funcret
  1626  000CAA                     __end_of_ADC_CONVERTIR:
  1627                           	opt callstack 0
  1628                           
  1629 ;; *************** function _ADC_CONFIG *****************
  1630 ;; Defined at:
  1631 ;;		line 6 in file "ADC.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  canal           1    wreg     unsigned char 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  canal           1    2[COMRAM] unsigned char 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      void 
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1645 ;;      Params:         0       0       0       0       0       0       0       0       0
  1646 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1647 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1648 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1649 ;;Total ram usage:        3 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; This function calls:
  1652 ;;		Nothing
  1653 ;; This function is called by:
  1654 ;;		_main
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text15
  1659  0009EE                     __ptext15:
  1660                           	opt callstack 0
  1661  0009EE                     _ADC_CONFIG:
  1662                           	opt callstack 30
  1663                           
  1664                           ;incstack = 0
  1665                           ;ADC_CONFIG@canal stored from wreg
  1666  0009EE  6E15               	movwf	ADC_CONFIG@canal,c
  1667                           
  1668                           ;ADC.c: 6: void ADC_CONFIG(char canal);ADC.c: 7: {;ADC.c: 8:  TRISA = 0xFF;
  1669  0009F0  6892               	setf	3986,c	;volatile
  1670                           
  1671                           ;ADC.c: 9:  TRISE = 0xFF;
  1672  0009F2  6896               	setf	3990,c	;volatile
  1673                           
  1674                           ;ADC.c: 10:  TRISB = 0x0F;
  1675  0009F4  0E0F               	movlw	15
  1676  0009F6  6E93               	movwf	3987,c	;volatile
  1677                           
  1678                           ;ADC.c: 11:  switch(canal)
  1679  0009F8  D01F               	goto	l1051
  1680  0009FA                     l997:
  1681                           
  1682                           ;ADC.c: 14:    ADCON1=0x0E;
  1683  0009FA  0E0E               	movlw	14
  1684  0009FC                     L1:
  1685  0009FC  6EC1               	movwf	4033,c	;volatile
  1686                           
  1687                           ;ADC.c: 15:    ADCON0=canal<<2;
  1688  0009FE  4415               	rlncf	ADC_CONFIG@canal,w,c
  1689  000A00  46E8               	rlncf	wreg,f,c
  1690  000A02  0BFC               	andlw	252
  1691  000A04  6EC2               	movwf	4034,c	;volatile
  1692                           
  1693                           ;ADC.c: 16:   break;
  1694  000A06  D047               	goto	l1053
  1695  000A08                     l1001:
  1696                           
  1697                           ;ADC.c: 18:    ADCON1=0x0D;
  1698  000A08  0E0D               	movlw	13
  1699  000A0A  D7F8               	goto	L1
  1700  000A0C                     l1005:
  1701                           
  1702                           ;ADC.c: 22:    ADCON1=0x0C;
  1703  000A0C  0E0C               	movlw	12
  1704  000A0E  D7F6               	goto	L1
  1705  000A10                     l1009:
  1706                           
  1707                           ;ADC.c: 26:    ADCON1=0x0B;
  1708  000A10  0E0B               	movlw	11
  1709  000A12  D7F4               	goto	L1
  1710  000A14                     l1013:
  1711                           
  1712                           ;ADC.c: 30:    ADCON1=0x0A;
  1713  000A14  0E0A               	movlw	10
  1714  000A16  D7F2               	goto	L1
  1715  000A18                     l1017:
  1716                           
  1717                           ;ADC.c: 34:    ADCON1=0x09;
  1718  000A18  0E09               	movlw	9
  1719  000A1A  D7F0               	goto	L1
  1720  000A1C                     l1021:
  1721                           
  1722                           ;ADC.c: 38:    ADCON1=0x08;
  1723  000A1C  0E08               	movlw	8
  1724  000A1E  D7EE               	goto	L1
  1725  000A20                     l1025:
  1726                           
  1727                           ;ADC.c: 42:    ADCON1=0x07;
  1728  000A20  0E07               	movlw	7
  1729  000A22  D7EC               	goto	L1
  1730  000A24                     l1029:
  1731                           
  1732                           ;ADC.c: 46:    ADCON1=0x06;
  1733  000A24  0E06               	movlw	6
  1734  000A26  D7EA               	goto	L1
  1735  000A28                     l1033:
  1736                           
  1737                           ;ADC.c: 50:    ADCON1=0x05;
  1738  000A28  0E05               	movlw	5
  1739  000A2A  D7E8               	goto	L1
  1740  000A2C                     l1037:
  1741                           
  1742                           ;ADC.c: 54:    ADCON1=0x04;
  1743  000A2C  0E04               	movlw	4
  1744  000A2E  D7E6               	goto	L1
  1745  000A30                     l1041:
  1746                           
  1747                           ;ADC.c: 58:    ADCON1=0x03;
  1748  000A30  0E03               	movlw	3
  1749  000A32  D7E4               	goto	L1
  1750  000A34                     l1045:
  1751                           
  1752                           ;ADC.c: 62:    ADCON1=0x02;
  1753  000A34  0E02               	movlw	2
  1754  000A36  D7E2               	goto	L1
  1755  000A38                     l1051:
  1756  000A38  5015               	movf	ADC_CONFIG@canal,w,c
  1757  000A3A  6E13               	movwf	??_ADC_CONFIG& (0+255),c
  1758  000A3C  6A14               	clrf	(??_ADC_CONFIG+1)& (0+255),c
  1759                           
  1760                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1761                           ; Switch size 1, requested type "simple"
  1762                           ; Number of cases is 1, Range of values is 0 to 0
  1763                           ; switch strategies available:
  1764                           ; Name         Instructions Cycles
  1765                           ; simple_byte            4     3 (average)
  1766                           ;	Chosen strategy is simple_byte
  1767  000A3E  5014               	movf	??_ADC_CONFIG+1,w,c
  1768  000A40  0A00               	xorlw	0	; case 0
  1769  000A42  A4D8               	btfss	status,2,c
  1770  000A44  D028               	goto	l1053
  1771                           
  1772                           ; Switch size 1, requested type "simple"
  1773                           ; Number of cases is 13, Range of values is 0 to 12
  1774                           ; switch strategies available:
  1775                           ; Name         Instructions Cycles
  1776                           ; simple_byte           40    21 (average)
  1777                           ;	Chosen strategy is simple_byte
  1778  000A46  5013               	movf	??_ADC_CONFIG,w,c
  1779  000A48  0A00               	xorlw	0	; case 0
  1780  000A4A  B4D8               	btfsc	status,2,c
  1781  000A4C  D7D6               	goto	l997
  1782  000A4E  0A01               	xorlw	1	; case 1
  1783  000A50  B4D8               	btfsc	status,2,c
  1784  000A52  D7DA               	goto	l1001
  1785  000A54  0A03               	xorlw	3	; case 2
  1786  000A56  B4D8               	btfsc	status,2,c
  1787  000A58  D7D9               	goto	l1005
  1788  000A5A  0A01               	xorlw	1	; case 3
  1789  000A5C  B4D8               	btfsc	status,2,c
  1790  000A5E  D7D8               	goto	l1009
  1791  000A60  0A07               	xorlw	7	; case 4
  1792  000A62  B4D8               	btfsc	status,2,c
  1793  000A64  D7D7               	goto	l1013
  1794  000A66  0A01               	xorlw	1	; case 5
  1795  000A68  B4D8               	btfsc	status,2,c
  1796  000A6A  D7D6               	goto	l1017
  1797  000A6C  0A03               	xorlw	3	; case 6
  1798  000A6E  B4D8               	btfsc	status,2,c
  1799  000A70  D7D5               	goto	l1021
  1800  000A72  0A01               	xorlw	1	; case 7
  1801  000A74  B4D8               	btfsc	status,2,c
  1802  000A76  D7D4               	goto	l1025
  1803  000A78  0A0F               	xorlw	15	; case 8
  1804  000A7A  B4D8               	btfsc	status,2,c
  1805  000A7C  D7D3               	goto	l1029
  1806  000A7E  0A01               	xorlw	1	; case 9
  1807  000A80  B4D8               	btfsc	status,2,c
  1808  000A82  D7D2               	goto	l1033
  1809  000A84  0A03               	xorlw	3	; case 10
  1810  000A86  B4D8               	btfsc	status,2,c
  1811  000A88  D7D1               	goto	l1037
  1812  000A8A  0A01               	xorlw	1	; case 11
  1813  000A8C  B4D8               	btfsc	status,2,c
  1814  000A8E  D7D0               	goto	l1041
  1815  000A90  0A07               	xorlw	7	; case 12
  1816  000A92  B4D8               	btfsc	status,2,c
  1817  000A94  D7CF               	goto	l1045
  1818  000A96                     l1053:
  1819                           
  1820                           ;ADC.c: 66:  ADCON2 = 0x91;
  1821  000A96  0E91               	movlw	145
  1822  000A98  6EC0               	movwf	4032,c	;volatile
  1823                           
  1824                           ;ADC.c: 67:  ADCON0bits.ADON = 1;
  1825  000A9A  80C2               	bsf	4034,0,c	;volatile
  1826  000A9C  0012               	return		;funcret
  1827  000A9E                     __end_of_ADC_CONFIG:
  1828                           	opt callstack 0
  1829                           
  1830                           	psect	rparam
  1831  0000                     tosu	equ	0xFFF
  1832                           tosh	equ	0xFFE
  1833                           tosl	equ	0xFFD
  1834                           stkptr	equ	0xFFC
  1835                           pclatu	equ	0xFFB
  1836                           pclath	equ	0xFFA
  1837                           pcl	equ	0xFF9
  1838                           tblptru	equ	0xFF8
  1839                           tblptrh	equ	0xFF7
  1840                           tblptrl	equ	0xFF6
  1841                           tablat	equ	0xFF5
  1842                           prodh	equ	0xFF4
  1843                           prodl	equ	0xFF3
  1844                           indf0	equ	0xFEF
  1845                           postinc0	equ	0xFEE
  1846                           postdec0	equ	0xFED
  1847                           preinc0	equ	0xFEC
  1848                           plusw0	equ	0xFEB
  1849                           fsr0h	equ	0xFEA
  1850                           fsr0l	equ	0xFE9
  1851                           wreg	equ	0xFE8
  1852                           indf1	equ	0xFE7
  1853                           postinc1	equ	0xFE6
  1854                           postdec1	equ	0xFE5
  1855                           preinc1	equ	0xFE4
  1856                           plusw1	equ	0xFE3
  1857                           fsr1h	equ	0xFE2
  1858                           fsr1l	equ	0xFE1
  1859                           bsr	equ	0xFE0
  1860                           indf2	equ	0xFDF
  1861                           postinc2	equ	0xFDE
  1862                           postdec2	equ	0xFDD
  1863                           preinc2	equ	0xFDC
  1864                           plusw2	equ	0xFDB
  1865                           fsr2h	equ	0xFDA
  1866                           fsr2l	equ	0xFD9
  1867                           status	equ	0xFD8


Data Sizes:
    Strings     24
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      29
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[5]), STR_1(CODE[19]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _DIGITOS->___awdiv
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3354
                                              9 COMRAM     2     2      0
                         _ADC_CONFIG
                      _ADC_CONVERTIR
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                            _DIGITOS
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _DIGITOS                                              0     0      0    1675
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_CONVERTIR                                        5     3      2      25
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CONFIG                                           3     3      0     210
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CONFIG
   _ADC_CONVERTIR
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _DIGITOS
     ___awdiv
     ___wmul
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      B      1D       1       30.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1D      20        0.0%
DATA                 0      0      1D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 22 09:28:09 2019

     __size_of_ADC_CONFIG 00B0           ADC_CONFIG@canal 0015              ___awdiv@sign 0018  
     ___wmul@multiplicand 0015        __CFG_FOSC$XTPLL_XT 000000             ENVIA_CHAR@aux 0015  
                     l116 0B56                       l162 0C80                       l861 0B4C  
                     l877 0B7A                       l997 09FA                       u220 0AE4  
                     u307 0932                       u317 0946                       u407 0B2E  
                     u327 0960                       u417 0B3C                       u337 0996  
                     u427 0B46                       u347 09E2                       u437 0B5A  
                     u357 0B94                       u447 0B68                       u367 0BA2  
                     u457 0B72                       u377 0BB2                       u297 091C  
                     u467 0D22                       u387 0BF2                       u397 0C26  
            __CFG_BOR$OFF 000000    __size_of_ADC_CONVERTIR 002C               LEER_LCD@aux 0013  
                     wreg 000FE8              ?_CURSOR_HOME 0013           __end_of_DIGITOS 090C  
          ??_ENVIA_NIBBLE 0013              __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0014  
            __CFG_WDT$OFF 000000                      l1001 0A08                      l1021 0A1C  
                    l1013 0A14                      l1005 0A0C                      l1041 0A30  
                    l1033 0A28                      l1025 0A20                      l1017 0A18  
                    l1009 0A10                      l1051 0A38                      l1211 0AB2  
                    l1045 0A34                      l1037 0A2C                      l1029 0A24  
                    l1053 0A96                      l1301 097A                      l1223 0AD8  
                    l1225 0AE0                      l1217 0AC2                      l1091 0D02  
                    l1243 0B18                      l1235 0B00                      l1261 0C56  
                    l1239 0B0A                      l1265 0C74                      l1283 0CE2  
                    STR_1 0801                      STR_2 0814                      _LATD 000F8C  
            __CFG_PWRT$ON 000000                      _main 090C                      prodh 000FF4  
                    prodl 000FF3                      start 0000             ?_CURSOR_ONOFF 0013  
           __CFG_MCLRE$ON 000000              ___param_bank 000000           ??_ENVIA_LCD_CMD 0014  
        __end_of_LEER_LCD 0B84       __size_of_BORRAR_LCD 0008             __CFG_PLLDIV$1 000000  
          __CFG_CCP2MX$ON 000000                     ?_main 0013           __end_of___awdiv 0B22  
         ___awdiv@divisor 0015           ___awdiv@counter 0017                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISA 000F92                     _TRISB 000F93  
                   _TRISD 000F95                     _TRISE 000F96       __size_of_ENVIA_CHAR 0034  
             ?_POS_CURSOR 0016                     tablat 000FF5                     status 000FD8  
          ??_CURSOR_ONOFF 0016             _ADC_CONVERTIR 0C7E           __initialization 0D2C  
            __end_of_main 09EE           _ESCRIBE_MENSAJE 0C4C                 ??_DIGITOS 001B  
                  ??_main 001C             __activetblptr 000002          ADC_CONVERTIR@num 0016  
            ??_ADC_CONFIG 0013                    _ADCON0 000FC2                    _ADCON1 000FC1  
                  _ADCON2 000FC0                    _ADRESH 000FC4                    _ADRESL 000FC3  
        ___awdiv@dividend 0013            ?_ADC_CONVERTIR 0013                    _canal0 0011  
      __end_of_ADC_CONFIG 0A9E                    ___wmul 0CAA                 ??___awdiv 0017  
    __end_of_ENVIA_NIBBLE 0D2C                    _digdec 0009                    _digcen 000B  
                  _digdmi 000F                    _digmil 000D                    _diguni 0007  
     __size_of_POS_CURSOR 0024                    clear_0 0D32          ___awdiv@quotient 0019  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0016      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0013                __accesstop 0060   __end_of__initialization 0D38  
         __CFG_PBADEN$OFF 000000              ??_LCD_CONFIG 0016             ___rparam_used 000001  
            ??_ENVIA_CHAR 0014   __end_of_ESCRIBE_MENSAJE 0C7E            __pcstackCOMRAM 0013  
      __end_of_BORRAR_LCD 0D52          ENVIA_LCD_CMD@aux 0015      __end_of_CURSOR_ONOFF 0D10  
      __end_of_LCD_CONFIG 0BE4        __end_of_ENVIA_CHAR 0C18           ??_ADC_CONVERTIR 0015  
              ??_LEER_LCD 0013          ENVIA_NIBBLE@dato 0013                   ?___wmul 0013  
                 _DIGITOS 081A              ??_POS_CURSOR 0017     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0016  
                 ___awdiv 0A9E           __size_of___wmul 0026              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0C4C                   __pcinit 0D2C        __end_of_POS_CURSOR 0CF4  
                 __ramtop 0800                   __ptext0 090C                   __ptext1 0CD0  
                 __ptext2 0B84                   __ptext3 0C4C                   __ptext4 0BE4  
                 __ptext5 081A                   __ptext6 0CAA                   __ptext7 0A9E  
                 __ptext8 0CF4                   __ptext9 0D42              _ENVIA_NIBBLE 0D10  
    end_of_initialization 0D38             __Lmediumconst 0000                   postinc0 000FEE  
   __size_of_CURSOR_ONOFF 001C         __size_of_LEER_LCD 0062              _CURSOR_ONOFF 0CF4  
      CURSOR_ONOFF@estado 0016            __end_of___wmul 0CD0             ??_CURSOR_HOME 0016  
     start_initialization 0D2C         ENVIA_LCD_CMD@dato 0014                  ??___wmul 0017  
                ?_DIGITOS 0013               __pbssCOMRAM 0001       __end_of_CURSOR_HOME 0D4A  
   __end_of_ADC_CONVERTIR 0CAA                  ?___awdiv 0013               __smallconst 0800  
                _LEER_LCD 0B22            ___wmul@product 0017                  _LATDbits 000F8C  
               _temporal2 0003                 _temporal3 0001          ESCRIBE_MENSAJE@i 001B  
          POS_CURSOR@fila 0017  __size_of_ESCRIBE_MENSAJE 0032                _ADCON0bits 000FC2  
       ___wmul@multiplier 0013          __size_of_DIGITOS 00F2               _CURSOR_HOME 0D42  
              _ADC_CONFIG 09EE    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000          __size_of___awdiv 0084                  __ptext10 0D4A  
                __ptext11 0C18                  __ptext12 0B22                  __ptext13 0D10  
                __ptext14 0C7E                  __ptext15 09EE                _BORRAR_LCD 0D4A  
           __size_of_main 00E2                _LCD_CONFIG 0B84                _ENVIA_CHAR 0BE4  
                _temporal 0005             _ENVIA_LCD_CMD 0C18     __CFG_CPUDIV$OSC1_PLL2 000000  
             ?_ADC_CONFIG 0013         ??_ESCRIBE_MENSAJE 0019     ESCRIBE_MENSAJE@cadena 0016  
          ?_ENVIA_LCD_CMD 0013               ?_BORRAR_LCD 0013             ?_ENVIA_NIBBLE 0013  
              _POS_CURSOR 0CD0               ?_LCD_CONFIG 0013        ESCRIBE_MENSAJE@tam 0018  
             ?_ENVIA_CHAR 0013         POS_CURSOR@columna 0016  
