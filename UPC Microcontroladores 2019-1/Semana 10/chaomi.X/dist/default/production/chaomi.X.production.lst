

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu May 23 18:11:25 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 2.05
    29                           ; Generated 20/12/2018 GMT
    30                           ; 
    31                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4550 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     _PORTD	set	3971
    63  0000                     _LATD	set	3980
    64  0000                     _LATDbits	set	3980
    65  0000                     _ADRESL	set	4035
    66  0000                     _ADCON0bits	set	4034
    67  0000                     _ADCON2	set	4032
    68  0000                     _ADCON0	set	4034
    69  0000                     _ADCON1	set	4033
    70  0000                     _TRISB	set	3987
    71  0000                     _TRISE	set	3990
    72  0000                     _TRISA	set	3986
    73  0000                     _LATCbits	set	3979
    74  0000                     _TRISCbits	set	3988
    75  0000                     _TRISD	set	3989
    76  0000                     _ADRESH	set	4036
    77                           
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	opt callstack 0
    81  000800  00                 	db	0
    82  000801                     STR_1:
    83  000801  4C                 	db	76	;'L'
    84  000802  65                 	db	101	;'e'
    85  000803  63                 	db	99	;'c'
    86  000804  74                 	db	116	;'t'
    87  000805  75                 	db	117	;'u'
    88  000806  72                 	db	114	;'r'
    89  000807  61                 	db	97	;'a'
    90  000808  20                 	db	32
    91  000809  41                 	db	65	;'A'
    92  00080A  44                 	db	68	;'D'
    93  00080B  43                 	db	67	;'C'
    94  00080C  00                 	db	0
    95                           
    96                           ; #config settings
    97  00080D  00                 	db	0	; dummy byte at the end
    98  0000                     
    99                           	psect	cinit
   100  000D12                     __pcinit:
   101                           	opt callstack 0
   102  000D12                     start_initialization:
   103                           	opt callstack 0
   104  000D12                     __initialization:
   105                           	opt callstack 0
   106                           
   107                           ; Clear objects allocated to COMRAM (18 bytes)
   108  000D12  EE00  F001         	lfsr	0,__pbssCOMRAM
   109  000D16  0E12               	movlw	18
   110  000D18                     clear_0:
   111  000D18  6AEE               	clrf	postinc0,c
   112  000D1A  06E8               	decf	wreg,f,c
   113  000D1C  E1FD               	bnz	clear_0
   114  000D1E                     end_of_initialization:
   115                           	opt callstack 0
   116  000D1E                     __end_of__initialization:
   117                           	opt callstack 0
   118  000D1E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   119  000D20  6EF8               	movwf	tblptru,c
   120  000D22  0100               	movlb	0
   121  000D24  EFD8  F004         	goto	_main	;jump to C main() function
   122                           
   123                           	psect	bssCOMRAM
   124  000001                     __pbssCOMRAM:
   125                           	opt callstack 0
   126  000001                     _temporal3:
   127                           	opt callstack 0
   128  000001                     	ds	2
   129  000003                     _temporal2:
   130                           	opt callstack 0
   131  000003                     	ds	2
   132  000005                     _temporal:
   133                           	opt callstack 0
   134  000005                     	ds	2
   135  000007                     _diguni:
   136                           	opt callstack 0
   137  000007                     	ds	2
   138  000009                     _digdec:
   139                           	opt callstack 0
   140  000009                     	ds	2
   141  00000B                     _digcen:
   142                           	opt callstack 0
   143  00000B                     	ds	2
   144  00000D                     _digmil:
   145                           	opt callstack 0
   146  00000D                     	ds	2
   147  00000F                     _digdmi:
   148                           	opt callstack 0
   149  00000F                     	ds	2
   150  000011                     _resultado:
   151                           	opt callstack 0
   152  000011                     	ds	2
   153                           
   154                           	psect	cstackCOMRAM
   155  000013                     __pcstackCOMRAM:
   156                           	opt callstack 0
   157  000013                     ??_ADC_CONFIG:
   158  000013                     ?_ADC_CONVERTIR:
   159                           	opt callstack 0
   160  000013                     ?___wmul:
   161                           	opt callstack 0
   162  000013                     ?___awdiv:
   163                           	opt callstack 0
   164  000013                     ENVIA_NIBBLE@dato:
   165                           	opt callstack 0
   166  000013                     LEER_LCD@aux:
   167                           	opt callstack 0
   168  000013                     ___wmul@multiplier:
   169                           	opt callstack 0
   170  000013                     ___awdiv@dividend:
   171                           	opt callstack 0
   172                           
   173                           ; 2 bytes @ 0x0
   174  000013                     	ds	1
   175  000014                     ENVIA_CHAR@dato:
   176                           	opt callstack 0
   177  000014                     ENVIA_LCD_CMD@dato:
   178                           	opt callstack 0
   179                           
   180                           ; 1 bytes @ 0x1
   181  000014                     	ds	1
   182  000015                     ??_ADC_CONVERTIR:
   183  000015                     ADC_CONFIG@canal:
   184                           	opt callstack 0
   185  000015                     ENVIA_CHAR@aux:
   186                           	opt callstack 0
   187  000015                     ENVIA_LCD_CMD@aux:
   188                           	opt callstack 0
   189  000015                     ___wmul@multiplicand:
   190                           	opt callstack 0
   191  000015                     ___awdiv@divisor:
   192                           	opt callstack 0
   193                           
   194                           ; 2 bytes @ 0x2
   195  000015                     	ds	1
   196  000016                     ??_LCD_CONFIG:
   197  000016                     POS_CURSOR@columna:
   198                           	opt callstack 0
   199  000016                     CURSOR_ONOFF@estado:
   200                           	opt callstack 0
   201  000016                     ADC_CONVERTIR@num:
   202                           	opt callstack 0
   203  000016                     ESCRIBE_MENSAJE@cadena:
   204                           	opt callstack 0
   205                           
   206                           ; 2 bytes @ 0x3
   207  000016                     	ds	1
   208  000017                     POS_CURSOR@fila:
   209                           	opt callstack 0
   210  000017                     ___awdiv@counter:
   211                           	opt callstack 0
   212  000017                     ___wmul@product:
   213                           	opt callstack 0
   214                           
   215                           ; 2 bytes @ 0x4
   216  000017                     	ds	1
   217  000018                     ESCRIBE_MENSAJE@tam:
   218                           	opt callstack 0
   219  000018                     ___awdiv@sign:
   220                           	opt callstack 0
   221                           
   222                           ; 1 bytes @ 0x5
   223  000018                     	ds	1
   224  000019                     ??_ESCRIBE_MENSAJE:
   225  000019                     ___awdiv@quotient:
   226                           	opt callstack 0
   227                           
   228                           ; 2 bytes @ 0x6
   229  000019                     	ds	2
   230  00001B                     ESCRIBE_MENSAJE@i:
   231                           	opt callstack 0
   232                           
   233                           ; 1 bytes @ 0x8
   234  00001B                     	ds	1
   235  00001C                     ??_main:
   236                           
   237                           ; 1 bytes @ 0x9
   238  00001C                     	ds	2
   239                           
   240 ;;
   241 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   242 ;;
   243 ;; *************** function _main *****************
   244 ;; Defined at:
   245 ;;		line 48 in file "juaguey.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : 0/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   259 ;;      Params:         0       0       0       0       0       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0       0       0       0       0
   261 ;;      Temps:          2       0       0       0       0       0       0       0       0
   262 ;;      Totals:         2       0       0       0       0       0       0       0       0
   263 ;;Total ram usage:        2 bytes
   264 ;; Hardware stack levels required when called:    3
   265 ;; This function calls:
   266 ;;		_ADC_CONFIG
   267 ;;		_ADC_CONVERTIR
   268 ;;		_BORRAR_LCD
   269 ;;		_CURSOR_HOME
   270 ;;		_CURSOR_ONOFF
   271 ;;		_DIGITOS
   272 ;;		_ENVIA_CHAR
   273 ;;		_ESCRIBE_MENSAJE
   274 ;;		_LCD_CONFIG
   275 ;;		_POS_CURSOR
   276 ;; This function is called by:
   277 ;;		Startup code after reset
   278 ;; This function uses a non-reentrant model
   279 ;;
   280                           
   281                           	psect	text0
   282  0009B0                     __ptext0:
   283                           	opt callstack 0
   284  0009B0                     _main:
   285                           	opt callstack 28
   286                           
   287                           ;juaguey.c: 49:     TRISD = 0x00;
   288                           
   289                           ;incstack = 0
   290  0009B0  0E00               	movlw	0
   291  0009B2  6E95               	movwf	3989,c	;volatile
   292                           
   293                           ;juaguey.c: 50:     TRISCbits.RC2 = 0;
   294  0009B4  9494               	bcf	3988,2,c	;volatile
   295                           
   296                           ;juaguey.c: 51:     LATCbits.LC2 = 1;
   297  0009B6  848B               	bsf	3979,2,c	;volatile
   298                           
   299                           ;juaguey.c: 52:     _delay((unsigned long)((500)*(4000000UL/4000.0)));
   300  0009B8  0E03               	movlw	3
   301  0009BA  6E1D               	movwf	(??_main+1)& (0+255),c
   302  0009BC  0E8A               	movlw	138
   303  0009BE  6E1C               	movwf	??_main& (0+255),c
   304  0009C0  0E56               	movlw	86
   305  0009C2                     u297:
   306  0009C2  2EE8               	decfsz	wreg,f,c
   307  0009C4  D7FE               	bra	u297
   308  0009C6  2E1C               	decfsz	??_main& (0+255),f,c
   309  0009C8  D7FC               	bra	u297
   310  0009CA  2E1D               	decfsz	(??_main+1)& (0+255),f,c
   311  0009CC  D7FA               	bra	u297
   312                           
   313                           ;juaguey.c: 53:     LCD_CONFIG();
   314  0009CE  EC24  F005         	call	_LCD_CONFIG	;wreg free
   315                           
   316                           ;juaguey.c: 54:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
   317  0009D2  0E14               	movlw	20
   318  0009D4  6E1C               	movwf	??_main& (0+255),c
   319  0009D6  0E7A               	movlw	122
   320  0009D8                     u307:
   321  0009D8  2EE8               	decfsz	wreg,f,c
   322  0009DA  D7FE               	bra	u307
   323  0009DC  2E1C               	decfsz	??_main& (0+255),f,c
   324  0009DE  D7FC               	bra	u307
   325                           
   326                           ;juaguey.c: 55:     BORRAR_LCD();
   327  0009E0  EC98  F006         	call	_BORRAR_LCD	;wreg free
   328                           
   329                           ;juaguey.c: 56:     CURSOR_ONOFF(1);
   330  0009E4  0E01               	movlw	1
   331  0009E6  EC7B  F006         	call	_CURSOR_ONOFF
   332                           
   333                           ;juaguey.c: 57:     ADC_CONFIG(0);
   334  0009EA  0E00               	movlw	0
   335  0009EC  EC80  F004         	call	_ADC_CONFIG
   336  0009F0                     l1321:
   337                           
   338                           ;juaguey.c: 59:         CURSOR_HOME();
   339  0009F0  EC94  F006         	call	_CURSOR_HOME	;wreg free
   340                           
   341                           ;juaguey.c: 60:         ESCRIBE_MENSAJE("Lectura ADC", 11);
   342  0009F4  0E01               	movlw	low STR_1
   343  0009F6  6E16               	movwf	ESCRIBE_MENSAJE@cadena,c
   344  0009F8  0E08               	movlw	high STR_1
   345  0009FA  6E17               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   346  0009FC  0E0B               	movlw	11
   347  0009FE  6E18               	movwf	ESCRIBE_MENSAJE@tam,c
   348  000A00  EC15  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   349                           
   350                           ;juaguey.c: 61:         resultado = ADC_CONVERTIR();
   351  000A04  EC2E  F006         	call	_ADC_CONVERTIR	;wreg free
   352  000A08  C013  F011         	movff	?_ADC_CONVERTIR,_resultado
   353  000A0C  C014  F012         	movff	?_ADC_CONVERTIR+1,_resultado+1
   354                           
   355                           ;juaguey.c: 62:         DIGITOS();
   356  000A10  EC07  F004         	call	_DIGITOS	;wreg free
   357                           
   358                           ;juaguey.c: 63:         POS_CURSOR(2, 0);
   359  000A14  0E00               	movlw	0
   360  000A16  6E16               	movwf	POS_CURSOR@columna,c
   361  000A18  0E02               	movlw	2
   362  000A1A  EC57  F006         	call	_POS_CURSOR
   363                           
   364                           ;juaguey.c: 64:         ENVIA_CHAR(digdmi+0x30);
   365  000A1E  500F               	movf	_digdmi,w,c
   366  000A20  0F30               	addlw	48
   367  000A22  ECFB  F005         	call	_ENVIA_CHAR
   368                           
   369                           ;juaguey.c: 65:         ENVIA_CHAR(digmil+0x30);
   370  000A26  500D               	movf	_digmil,w,c
   371  000A28  0F30               	addlw	48
   372  000A2A  ECFB  F005         	call	_ENVIA_CHAR
   373                           
   374                           ;juaguey.c: 66:         ENVIA_CHAR(digcen+0x30);
   375  000A2E  500B               	movf	_digcen,w,c
   376  000A30  0F30               	addlw	48
   377  000A32  ECFB  F005         	call	_ENVIA_CHAR
   378                           
   379                           ;juaguey.c: 67:         ENVIA_CHAR(digdec+0x30);
   380  000A36  5009               	movf	_digdec,w,c
   381  000A38  0F30               	addlw	48
   382  000A3A  ECFB  F005         	call	_ENVIA_CHAR
   383                           
   384                           ;juaguey.c: 68:         ENVIA_CHAR(diguni+0x30);
   385  000A3E  5007               	movf	_diguni,w,c
   386  000A40  0F30               	addlw	48
   387  000A42  ECFB  F005         	call	_ENVIA_CHAR
   388  000A46  D7D4               	goto	l1321
   389  000A48                     __end_of_main:
   390                           	opt callstack 0
   391                           
   392 ;; *************** function _POS_CURSOR *****************
   393 ;; Defined at:
   394 ;;		line 6 in file "LCD.c"
   395 ;; Parameters:    Size  Location     Type
   396 ;;  fila            1    wreg     unsigned char 
   397 ;;  columna         1    3[COMRAM] unsigned char 
   398 ;; Auto vars:     Size  Location     Type
   399 ;;  fila            1    4[COMRAM] unsigned char 
   400 ;; Return value:  Size  Location     Type
   401 ;;                  1    wreg      void 
   402 ;; Registers used:
   403 ;;		wreg, status,2, status,0, cstack
   404 ;; Tracked objects:
   405 ;;		On entry : 0/0
   406 ;;		On exit  : 0/0
   407 ;;		Unchanged: 0/0
   408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   409 ;;      Params:         1       0       0       0       0       0       0       0       0
   410 ;;      Locals:         1       0       0       0       0       0       0       0       0
   411 ;;      Temps:          0       0       0       0       0       0       0       0       0
   412 ;;      Totals:         2       0       0       0       0       0       0       0       0
   413 ;;Total ram usage:        2 bytes
   414 ;; Hardware stack levels used:    1
   415 ;; Hardware stack levels required when called:    2
   416 ;; This function calls:
   417 ;;		_ENVIA_LCD_CMD
   418 ;; This function is called by:
   419 ;;		_main
   420 ;; This function uses a non-reentrant model
   421 ;;
   422                           
   423                           	psect	text1
   424  000CAE                     __ptext1:
   425                           	opt callstack 0
   426  000CAE                     _POS_CURSOR:
   427                           	opt callstack 28
   428                           
   429                           ;incstack = 0
   430                           ;POS_CURSOR@fila stored from wreg
   431  000CAE  6E17               	movwf	POS_CURSOR@fila,c
   432                           
   433                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   434  000CB0  0417               	decf	POS_CURSOR@fila,w,c
   435  000CB2  A4D8               	btfss	status,2,c
   436  000CB4  D005               	goto	l1299
   437                           
   438                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   439  000CB6  5016               	movf	POS_CURSOR@columna,w,c
   440  000CB8  0F80               	addlw	128
   441  000CBA  ECDD  F005         	call	_ENVIA_LCD_CMD
   442                           
   443                           ;LCD.c: 11:  }
   444  000CBE  0012               	return	
   445  000CC0                     l1299:
   446  000CC0  0E02               	movlw	2
   447  000CC2  1817               	xorwf	POS_CURSOR@fila,w,c
   448  000CC4  A4D8               	btfss	status,2,c
   449  000CC6  0012               	return	
   450                           
   451                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   452  000CC8  5016               	movf	POS_CURSOR@columna,w,c
   453  000CCA  0FC0               	addlw	192
   454  000CCC  ECDD  F005         	call	_ENVIA_LCD_CMD
   455  000CD0  0012               	return		;funcret
   456  000CD2                     __end_of_POS_CURSOR:
   457                           	opt callstack 0
   458                           
   459 ;; *************** function _LCD_CONFIG *****************
   460 ;; Defined at:
   461 ;;		line 73 in file "LCD.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;		None
   464 ;; Auto vars:     Size  Location     Type
   465 ;;		None
   466 ;; Return value:  Size  Location     Type
   467 ;;                  1    wreg      void 
   468 ;; Registers used:
   469 ;;		wreg, status,2, status,0, cstack
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   475 ;;      Params:         0       0       0       0       0       0       0       0       0
   476 ;;      Locals:         0       0       0       0       0       0       0       0       0
   477 ;;      Temps:          1       0       0       0       0       0       0       0       0
   478 ;;      Totals:         1       0       0       0       0       0       0       0       0
   479 ;;Total ram usage:        1 bytes
   480 ;; Hardware stack levels used:    1
   481 ;; Hardware stack levels required when called:    2
   482 ;; This function calls:
   483 ;;		_ENVIA_LCD_CMD
   484 ;;		_ENVIA_NIBBLE
   485 ;; This function is called by:
   486 ;;		_main
   487 ;; This function uses a non-reentrant model
   488 ;;
   489                           
   490                           	psect	text2
   491  000A48                     __ptext2:
   492                           	opt callstack 0
   493  000A48                     _LCD_CONFIG:
   494                           	opt callstack 28
   495                           
   496                           ;LCD.c: 75:  LATDbits.LATD0 = 0;
   497                           
   498                           ;incstack = 0
   499  000A48  908C               	bcf	3980,0,c	;volatile
   500                           
   501                           ;LCD.c: 76:  LATDbits.LATD1 = 0;
   502  000A4A  928C               	bcf	3980,1,c	;volatile
   503                           
   504                           ;LCD.c: 77:  ENVIA_NIBBLE(0x30);
   505  000A4C  0E30               	movlw	48
   506  000A4E  EC69  F006         	call	_ENVIA_NIBBLE
   507                           
   508                           ;LCD.c: 82:     _delay((unsigned long)((4)*(4000000UL/4000.0)));
   509  000A52  0E06               	movlw	6
   510  000A54  6E16               	movwf	??_LCD_CONFIG& (0+255),c
   511  000A56  0E30               	movlw	48
   512  000A58                     u317:
   513  000A58  2EE8               	decfsz	wreg,f,c
   514  000A5A  D7FE               	bra	u317
   515  000A5C  2E16               	decfsz	??_LCD_CONFIG& (0+255),f,c
   516  000A5E  D7FC               	bra	u317
   517  000A60  D000               	nop2	
   518                           
   519                           ;LCD.c: 83:  ENVIA_NIBBLE(0x30);
   520  000A62  0E30               	movlw	48
   521  000A64  EC69  F006         	call	_ENVIA_NIBBLE
   522                           
   523                           ;LCD.c: 86:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   524  000A68  0E21               	movlw	33
   525  000A6A                     u327:
   526  000A6A  2EE8               	decfsz	wreg,f,c
   527  000A6C  D7FE               	bra	u327
   528  000A6E  F000               	nop	
   529                           
   530                           ;LCD.c: 88:     ENVIA_NIBBLE(0x30);
   531  000A70  0E30               	movlw	48
   532  000A72  EC69  F006         	call	_ENVIA_NIBBLE
   533                           
   534                           ;LCD.c: 89:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   535  000A76  0E21               	movlw	33
   536  000A78                     u337:
   537  000A78  2EE8               	decfsz	wreg,f,c
   538  000A7A  D7FE               	bra	u337
   539  000A7C  F000               	nop	
   540                           
   541                           ;LCD.c: 90:  ENVIA_NIBBLE(0x20);
   542  000A7E  0E20               	movlw	32
   543  000A80  EC69  F006         	call	_ENVIA_NIBBLE
   544                           
   545                           ;LCD.c: 91:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   546  000A84  0E21               	movlw	33
   547  000A86                     u347:
   548  000A86  2EE8               	decfsz	wreg,f,c
   549  000A88  D7FE               	bra	u347
   550  000A8A  F000               	nop	
   551                           
   552                           ;LCD.c: 92:  ENVIA_LCD_CMD(0x01);
   553  000A8C  0E01               	movlw	1
   554  000A8E  ECDD  F005         	call	_ENVIA_LCD_CMD
   555                           
   556                           ;LCD.c: 93:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   557  000A92  0E21               	movlw	33
   558  000A94                     u357:
   559  000A94  2EE8               	decfsz	wreg,f,c
   560  000A96  D7FE               	bra	u357
   561  000A98  F000               	nop	
   562                           
   563                           ;LCD.c: 94:  ENVIA_LCD_CMD(0x28);
   564  000A9A  0E28               	movlw	40
   565  000A9C  ECDD  F005         	call	_ENVIA_LCD_CMD
   566                           
   567                           ;LCD.c: 95:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   568  000AA0  0E21               	movlw	33
   569  000AA2                     u367:
   570  000AA2  2EE8               	decfsz	wreg,f,c
   571  000AA4  D7FE               	bra	u367
   572  000AA6  F000               	nop	
   573                           
   574                           ;LCD.c: 96:  ENVIA_LCD_CMD(0x0F);
   575  000AA8  0E0F               	movlw	15
   576  000AAA  ECDD  F005         	call	_ENVIA_LCD_CMD
   577                           
   578                           ;LCD.c: 97:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   579  000AAE  0E21               	movlw	33
   580  000AB0                     u377:
   581  000AB0  2EE8               	decfsz	wreg,f,c
   582  000AB2  D7FE               	bra	u377
   583  000AB4  F000               	nop	
   584                           
   585                           ;LCD.c: 98:  ENVIA_LCD_CMD(0x06);
   586  000AB6  0E06               	movlw	6
   587  000AB8  ECDD  F005         	call	_ENVIA_LCD_CMD
   588                           
   589                           ;LCD.c: 99:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   590  000ABC  0E21               	movlw	33
   591  000ABE                     u387:
   592  000ABE  2EE8               	decfsz	wreg,f,c
   593  000AC0  D7FE               	bra	u387
   594  000AC2  F000               	nop	
   595                           
   596                           ;LCD.c: 100:  ENVIA_LCD_CMD(0x01);
   597  000AC4  0E01               	movlw	1
   598  000AC6  ECDD  F005         	call	_ENVIA_LCD_CMD
   599                           
   600                           ;LCD.c: 101:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   601  000ACA  0E21               	movlw	33
   602  000ACC                     u397:
   603  000ACC  2EE8               	decfsz	wreg,f,c
   604  000ACE  D7FE               	bra	u397
   605  000AD0  F000               	nop	
   606  000AD2  0012               	return		;funcret
   607  000AD4                     __end_of_LCD_CONFIG:
   608                           	opt callstack 0
   609                           
   610 ;; *************** function _ESCRIBE_MENSAJE *****************
   611 ;; Defined at:
   612 ;;		line 41 in file "LCD.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   615 ;;		 -> STR_1(12), 
   616 ;;  tam             1    5[COMRAM] unsigned char 
   617 ;; Auto vars:     Size  Location     Type
   618 ;;  i               1    8[COMRAM] unsigned char 
   619 ;; Return value:  Size  Location     Type
   620 ;;                  1    wreg      void 
   621 ;; Registers used:
   622 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   623 ;; Tracked objects:
   624 ;;		On entry : 0/0
   625 ;;		On exit  : 0/0
   626 ;;		Unchanged: 0/0
   627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   628 ;;      Params:         3       0       0       0       0       0       0       0       0
   629 ;;      Locals:         1       0       0       0       0       0       0       0       0
   630 ;;      Temps:          2       0       0       0       0       0       0       0       0
   631 ;;      Totals:         6       0       0       0       0       0       0       0       0
   632 ;;Total ram usage:        6 bytes
   633 ;; Hardware stack levels used:    1
   634 ;; Hardware stack levels required when called:    2
   635 ;; This function calls:
   636 ;;		_ENVIA_CHAR
   637 ;; This function is called by:
   638 ;;		_main
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           	psect	text3
   643  000C2A                     __ptext3:
   644                           	opt callstack 0
   645  000C2A                     _ESCRIBE_MENSAJE:
   646                           	opt callstack 28
   647                           
   648                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   649                           
   650                           ;incstack = 0
   651  000C2A  0E00               	movlw	0
   652  000C2C  6E1B               	movwf	ESCRIBE_MENSAJE@i,c
   653                           
   654                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   655  000C2E  0E00               	movlw	0
   656  000C30  6E1B               	movwf	ESCRIBE_MENSAJE@i,c
   657  000C32  D00F               	goto	l1281
   658  000C34                     l1277:
   659                           
   660                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   661  000C34  501B               	movf	ESCRIBE_MENSAJE@i,w,c
   662  000C36  2416               	addwf	ESCRIBE_MENSAJE@cadena,w,c
   663  000C38  6E19               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
   664  000C3A  0E00               	movlw	0
   665  000C3C  2017               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
   666  000C3E  6E1A               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
   667  000C40  C019  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   668  000C44  C01A  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   669  000C48                     	if	0	;tblptru may be non-zero
   670  000C48                     	endif
   671  000C48                     	if	0	;tblptru may be non-zero
   672  000C48                     	endif
   673  000C48  0008               	tblrd		*
   674  000C4A  50F5               	movf	tablat,w,c
   675  000C4C  ECFB  F005         	call	_ENVIA_CHAR
   676                           
   677                           ;LCD.c: 47:  }
   678  000C50  2A1B               	incf	ESCRIBE_MENSAJE@i,f,c
   679  000C52                     l1281:
   680  000C52  5018               	movf	ESCRIBE_MENSAJE@tam,w,c
   681  000C54  5C1B               	subwf	ESCRIBE_MENSAJE@i,w,c
   682  000C56  B0D8               	btfsc	status,0,c
   683  000C58  0012               	return	
   684  000C5A  D7EC               	goto	l1277
   685  000C5C                     __end_of_ESCRIBE_MENSAJE:
   686                           	opt callstack 0
   687                           
   688 ;; *************** function _ENVIA_CHAR *****************
   689 ;; Defined at:
   690 ;;		line 50 in file "LCD.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  dato            1    wreg     unsigned char 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;  dato            1    1[COMRAM] unsigned char 
   695 ;;  aux             1    2[COMRAM] unsigned char 
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, status,2, status,0, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   705 ;;      Params:         0       0       0       0       0       0       0       0       0
   706 ;;      Locals:         2       0       0       0       0       0       0       0       0
   707 ;;      Temps:          0       0       0       0       0       0       0       0       0
   708 ;;      Totals:         2       0       0       0       0       0       0       0       0
   709 ;;Total ram usage:        2 bytes
   710 ;; Hardware stack levels used:    1
   711 ;; Hardware stack levels required when called:    1
   712 ;; This function calls:
   713 ;;		_ENVIA_NIBBLE
   714 ;;		_LEER_LCD
   715 ;; This function is called by:
   716 ;;		_main
   717 ;;		_ESCRIBE_MENSAJE
   718 ;;		_GENERACARACTER
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text4
   723  000BF6                     __ptext4:
   724                           	opt callstack 0
   725  000BF6                     _ENVIA_CHAR:
   726                           	opt callstack 28
   727                           
   728                           ;incstack = 0
   729                           ;ENVIA_CHAR@dato stored from wreg
   730  000BF6  6E14               	movwf	ENVIA_CHAR@dato,c
   731                           
   732                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   733  000BF8  808C               	bsf	3980,0,c	;volatile
   734                           
   735                           ;LCD.c: 54:  LEER_LCD();
   736  000BFA  ECAC  F005         	call	_LEER_LCD	;wreg free
   737                           
   738                           ;LCD.c: 55:  TRISD = 0x00;
   739  000BFE  0E00               	movlw	0
   740  000C00  6E95               	movwf	3989,c	;volatile
   741                           
   742                           ;LCD.c: 57:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   743  000C02  0E21               	movlw	33
   744  000C04                     u407:
   745  000C04  2EE8               	decfsz	wreg,f,c
   746  000C06  D7FE               	bra	u407
   747  000C08  F000               	nop	
   748                           
   749                           ;LCD.c: 59:  LATDbits.LATD1 = 0;
   750  000C0A  928C               	bcf	3980,1,c	;volatile
   751                           
   752                           ;LCD.c: 60:  LATDbits.LATD2 = 0;
   753  000C0C  948C               	bcf	3980,2,c	;volatile
   754                           
   755                           ;LCD.c: 61:  LATDbits.LATD0 = 1;
   756  000C0E  808C               	bsf	3980,0,c	;volatile
   757                           
   758                           ;LCD.c: 62:  aux = dato & 0xF0;
   759  000C10  5014               	movf	ENVIA_CHAR@dato,w,c
   760  000C12  0BF0               	andlw	240
   761  000C14  6E15               	movwf	ENVIA_CHAR@aux,c
   762                           
   763                           ;LCD.c: 63:  ENVIA_NIBBLE(aux);
   764  000C16  5015               	movf	ENVIA_CHAR@aux,w,c
   765  000C18  EC69  F006         	call	_ENVIA_NIBBLE
   766                           
   767                           ;LCD.c: 64:  aux = dato << 4;
   768  000C1C  3814               	swapf	ENVIA_CHAR@dato,w,c
   769  000C1E  0BF0               	andlw	240
   770  000C20  6E15               	movwf	ENVIA_CHAR@aux,c
   771                           
   772                           ;LCD.c: 65:  ENVIA_NIBBLE(aux);
   773  000C22  5015               	movf	ENVIA_CHAR@aux,w,c
   774  000C24  EC69  F006         	call	_ENVIA_NIBBLE
   775  000C28  0012               	return		;funcret
   776  000C2A                     __end_of_ENVIA_CHAR:
   777                           	opt callstack 0
   778                           
   779 ;; *************** function _DIGITOS *****************
   780 ;; Defined at:
   781 ;;		line 37 in file "juaguey.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;		None
   784 ;; Auto vars:     Size  Location     Type
   785 ;;		None
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   795 ;;      Params:         0       0       0       0       0       0       0       0       0
   796 ;;      Locals:         0       0       0       0       0       0       0       0       0
   797 ;;      Temps:          0       0       0       0       0       0       0       0       0
   798 ;;      Totals:         0       0       0       0       0       0       0       0       0
   799 ;;Total ram usage:        0 bytes
   800 ;; Hardware stack levels used:    1
   801 ;; Hardware stack levels required when called:    1
   802 ;; This function calls:
   803 ;;		___awdiv
   804 ;;		___wmul
   805 ;; This function is called by:
   806 ;;		_main
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           	psect	text5
   811  00080E                     __ptext5:
   812                           	opt callstack 0
   813  00080E                     _DIGITOS:
   814                           	opt callstack 29
   815                           
   816                           ;juaguey.c: 38:     digdmi = resultado / 10000;
   817                           
   818                           ;incstack = 0
   819  00080E  C011  F013         	movff	_resultado,___awdiv@dividend
   820  000812  C012  F014         	movff	_resultado+1,___awdiv@dividend+1
   821  000816  0E27               	movlw	39
   822  000818  6E16               	movwf	___awdiv@divisor+1,c
   823  00081A  0E10               	movlw	16
   824  00081C  6E15               	movwf	___awdiv@divisor,c
   825  00081E  EC6A  F005         	call	___awdiv	;wreg free
   826  000822  C013  F00F         	movff	?___awdiv,_digdmi
   827  000826  C014  F010         	movff	?___awdiv+1,_digdmi+1
   828                           
   829                           ;juaguey.c: 39:     temporal3 = resultado - (digdmi * 10000);
   830  00082A  C00F  F013         	movff	_digdmi,___wmul@multiplier
   831  00082E  C010  F014         	movff	_digdmi+1,___wmul@multiplier+1
   832  000832  0ED8               	movlw	216
   833  000834  6E16               	movwf	___wmul@multiplicand+1,c
   834  000836  0EF0               	movlw	240
   835  000838  6E15               	movwf	___wmul@multiplicand,c
   836  00083A  EC44  F006         	call	___wmul	;wreg free
   837  00083E  5011               	movf	_resultado,w,c
   838  000840  2413               	addwf	?___wmul,w,c
   839  000842  6E01               	movwf	_temporal3,c
   840  000844  5012               	movf	_resultado+1,w,c
   841  000846  2014               	addwfc	?___wmul+1,w,c
   842  000848  6E02               	movwf	_temporal3+1,c
   843                           
   844                           ;juaguey.c: 40:     digmil = temporal3 / 1000;
   845  00084A  C001  F013         	movff	_temporal3,___awdiv@dividend
   846  00084E  C002  F014         	movff	_temporal3+1,___awdiv@dividend+1
   847  000852  0E03               	movlw	3
   848  000854  6E16               	movwf	___awdiv@divisor+1,c
   849  000856  0EE8               	movlw	232
   850  000858  6E15               	movwf	___awdiv@divisor,c
   851  00085A  EC6A  F005         	call	___awdiv	;wreg free
   852  00085E  C013  F00D         	movff	?___awdiv,_digmil
   853  000862  C014  F00E         	movff	?___awdiv+1,_digmil+1
   854                           
   855                           ;juaguey.c: 41:     temporal = temporal3 - (digmil * 1000);
   856  000866  C00D  F013         	movff	_digmil,___wmul@multiplier
   857  00086A  C00E  F014         	movff	_digmil+1,___wmul@multiplier+1
   858  00086E  0EFC               	movlw	252
   859  000870  6E16               	movwf	___wmul@multiplicand+1,c
   860  000872  0E18               	movlw	24
   861  000874  6E15               	movwf	___wmul@multiplicand,c
   862  000876  EC44  F006         	call	___wmul	;wreg free
   863  00087A  5001               	movf	_temporal3,w,c
   864  00087C  2413               	addwf	?___wmul,w,c
   865  00087E  6E05               	movwf	_temporal,c
   866  000880  5002               	movf	_temporal3+1,w,c
   867  000882  2014               	addwfc	?___wmul+1,w,c
   868  000884  6E06               	movwf	_temporal+1,c
   869                           
   870                           ;juaguey.c: 42:     digcen = temporal / 100;
   871  000886  C005  F013         	movff	_temporal,___awdiv@dividend
   872  00088A  C006  F014         	movff	_temporal+1,___awdiv@dividend+1
   873  00088E  0E00               	movlw	0
   874  000890  6E16               	movwf	___awdiv@divisor+1,c
   875  000892  0E64               	movlw	100
   876  000894  6E15               	movwf	___awdiv@divisor,c
   877  000896  EC6A  F005         	call	___awdiv	;wreg free
   878  00089A  C013  F00B         	movff	?___awdiv,_digcen
   879  00089E  C014  F00C         	movff	?___awdiv+1,_digcen+1
   880                           
   881                           ;juaguey.c: 43:     temporal2 = temporal - (digcen * 100);
   882  0008A2  C00B  F013         	movff	_digcen,___wmul@multiplier
   883  0008A6  C00C  F014         	movff	_digcen+1,___wmul@multiplier+1
   884  0008AA  0EFF               	movlw	255
   885  0008AC  6E16               	movwf	___wmul@multiplicand+1,c
   886  0008AE  0E9C               	movlw	156
   887  0008B0  6E15               	movwf	___wmul@multiplicand,c
   888  0008B2  EC44  F006         	call	___wmul	;wreg free
   889  0008B6  5005               	movf	_temporal,w,c
   890  0008B8  2413               	addwf	?___wmul,w,c
   891  0008BA  6E03               	movwf	_temporal2,c
   892  0008BC  5006               	movf	_temporal+1,w,c
   893  0008BE  2014               	addwfc	?___wmul+1,w,c
   894  0008C0  6E04               	movwf	_temporal2+1,c
   895                           
   896                           ;juaguey.c: 44:     digdec = temporal2 / 10;
   897  0008C2  C003  F013         	movff	_temporal2,___awdiv@dividend
   898  0008C6  C004  F014         	movff	_temporal2+1,___awdiv@dividend+1
   899  0008CA  0E00               	movlw	0
   900  0008CC  6E16               	movwf	___awdiv@divisor+1,c
   901  0008CE  0E0A               	movlw	10
   902  0008D0  6E15               	movwf	___awdiv@divisor,c
   903  0008D2  EC6A  F005         	call	___awdiv	;wreg free
   904  0008D6  C013  F009         	movff	?___awdiv,_digdec
   905  0008DA  C014  F00A         	movff	?___awdiv+1,_digdec+1
   906                           
   907                           ;juaguey.c: 45:     diguni = temporal2 - (digdec * 10);
   908  0008DE  C009  F013         	movff	_digdec,___wmul@multiplier
   909  0008E2  C00A  F014         	movff	_digdec+1,___wmul@multiplier+1
   910  0008E6  0EFF               	movlw	255
   911  0008E8  6E16               	movwf	___wmul@multiplicand+1,c
   912  0008EA  0EF6               	movlw	246
   913  0008EC  6E15               	movwf	___wmul@multiplicand,c
   914  0008EE  EC44  F006         	call	___wmul	;wreg free
   915  0008F2  5003               	movf	_temporal2,w,c
   916  0008F4  2413               	addwf	?___wmul,w,c
   917  0008F6  6E07               	movwf	_diguni,c
   918  0008F8  5004               	movf	_temporal2+1,w,c
   919  0008FA  2014               	addwfc	?___wmul+1,w,c
   920  0008FC  6E08               	movwf	_diguni+1,c
   921  0008FE  0012               	return		;funcret
   922  000900                     __end_of_DIGITOS:
   923                           	opt callstack 0
   924                           
   925 ;; *************** function ___wmul *****************
   926 ;; Defined at:
   927 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;  multiplier      2    0[COMRAM] unsigned int 
   930 ;;  multiplicand    2    2[COMRAM] unsigned int 
   931 ;; Auto vars:     Size  Location     Type
   932 ;;  product         2    4[COMRAM] unsigned int 
   933 ;; Return value:  Size  Location     Type
   934 ;;                  2    0[COMRAM] unsigned int 
   935 ;; Registers used:
   936 ;;		wreg, status,2, status,0, prodl, prodh
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   942 ;;      Params:         4       0       0       0       0       0       0       0       0
   943 ;;      Locals:         2       0       0       0       0       0       0       0       0
   944 ;;      Temps:          0       0       0       0       0       0       0       0       0
   945 ;;      Totals:         6       0       0       0       0       0       0       0       0
   946 ;;Total ram usage:        6 bytes
   947 ;; Hardware stack levels used:    1
   948 ;; This function calls:
   949 ;;		Nothing
   950 ;; This function is called by:
   951 ;;		_DIGITOS
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text6
   956  000C88                     __ptext6:
   957                           	opt callstack 0
   958  000C88                     ___wmul:
   959                           	opt callstack 29
   960                           
   961                           ;incstack = 0
   962  000C88  5013               	movf	___wmul@multiplier,w,c
   963  000C8A  0215               	mulwf	___wmul@multiplicand,c
   964  000C8C  CFF3 F017          	movff	prodl,___wmul@product
   965  000C90  CFF4 F018          	movff	prodh,___wmul@product+1
   966  000C94  5013               	movf	___wmul@multiplier,w,c
   967  000C96  0216               	mulwf	___wmul@multiplicand+1,c
   968  000C98  50F3               	movf	prodl,w,c
   969  000C9A  2618               	addwf	___wmul@product+1,f,c
   970  000C9C  5014               	movf	___wmul@multiplier+1,w,c
   971  000C9E  0215               	mulwf	___wmul@multiplicand,c
   972  000CA0  50F3               	movf	prodl,w,c
   973  000CA2  2618               	addwf	___wmul@product+1,f,c
   974  000CA4  C017  F013         	movff	___wmul@product,?___wmul
   975  000CA8  C018  F014         	movff	___wmul@product+1,?___wmul+1
   976  000CAC  0012               	return		;funcret
   977  000CAE                     __end_of___wmul:
   978                           	opt callstack 0
   979                           
   980 ;; *************** function ___awdiv *****************
   981 ;; Defined at:
   982 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;  dividend        2    0[COMRAM] int 
   985 ;;  divisor         2    2[COMRAM] int 
   986 ;; Auto vars:     Size  Location     Type
   987 ;;  quotient        2    6[COMRAM] int 
   988 ;;  sign            1    5[COMRAM] unsigned char 
   989 ;;  counter         1    4[COMRAM] unsigned char 
   990 ;; Return value:  Size  Location     Type
   991 ;;                  2    0[COMRAM] int 
   992 ;; Registers used:
   993 ;;		wreg, status,2, status,0
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   999 ;;      Params:         4       0       0       0       0       0       0       0       0
  1000 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1001 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1002 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1003 ;;Total ram usage:        8 bytes
  1004 ;; Hardware stack levels used:    1
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_DIGITOS
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012                           	psect	text7
  1013  000AD4                     __ptext7:
  1014                           	opt callstack 0
  1015  000AD4                     ___awdiv:
  1016                           	opt callstack 29
  1017                           
  1018                           ;incstack = 0
  1019  000AD4  0E00               	movlw	0
  1020  000AD6  6E18               	movwf	___awdiv@sign,c
  1021  000AD8  AE16               	btfss	___awdiv@divisor+1,7,c
  1022  000ADA  D006               	goto	l1227
  1023  000ADC  6C15               	negf	___awdiv@divisor,c
  1024  000ADE  1E16               	comf	___awdiv@divisor+1,f,c
  1025  000AE0  B0D8               	btfsc	status,0,c
  1026  000AE2  2A16               	incf	___awdiv@divisor+1,f,c
  1027  000AE4  0E01               	movlw	1
  1028  000AE6  6E18               	movwf	___awdiv@sign,c
  1029  000AE8                     l1227:
  1030  000AE8  AE14               	btfss	___awdiv@dividend+1,7,c
  1031  000AEA  D006               	goto	l1233
  1032  000AEC  6C13               	negf	___awdiv@dividend,c
  1033  000AEE  1E14               	comf	___awdiv@dividend+1,f,c
  1034  000AF0  B0D8               	btfsc	status,0,c
  1035  000AF2  2A14               	incf	___awdiv@dividend+1,f,c
  1036  000AF4  0E01               	movlw	1
  1037  000AF6  1A18               	xorwf	___awdiv@sign,f,c
  1038  000AF8                     l1233:
  1039  000AF8  0E00               	movlw	0
  1040  000AFA  6E1A               	movwf	___awdiv@quotient+1,c
  1041  000AFC  0E00               	movlw	0
  1042  000AFE  6E19               	movwf	___awdiv@quotient,c
  1043  000B00  5015               	movf	___awdiv@divisor,w,c
  1044  000B02  1016               	iorwf	___awdiv@divisor+1,w,c
  1045  000B04  B4D8               	btfsc	status,2,c
  1046  000B06  D01C               	goto	l1255
  1047  000B08  0E01               	movlw	1
  1048  000B0A  6E17               	movwf	___awdiv@counter,c
  1049  000B0C  D004               	goto	l1241
  1050  000B0E                     l1239:
  1051  000B0E  90D8               	bcf	status,0,c
  1052  000B10  3615               	rlcf	___awdiv@divisor,f,c
  1053  000B12  3616               	rlcf	___awdiv@divisor+1,f,c
  1054  000B14  2A17               	incf	___awdiv@counter,f,c
  1055  000B16                     l1241:
  1056  000B16  AE16               	btfss	___awdiv@divisor+1,7,c
  1057  000B18  D7FA               	goto	l1239
  1058  000B1A                     u220:
  1059  000B1A  90D8               	bcf	status,0,c
  1060  000B1C  3619               	rlcf	___awdiv@quotient,f,c
  1061  000B1E  361A               	rlcf	___awdiv@quotient+1,f,c
  1062  000B20  5015               	movf	___awdiv@divisor,w,c
  1063  000B22  5C13               	subwf	___awdiv@dividend,w,c
  1064  000B24  5016               	movf	___awdiv@divisor+1,w,c
  1065  000B26  5814               	subwfb	___awdiv@dividend+1,w,c
  1066  000B28  A0D8               	btfss	status,0,c
  1067  000B2A  D005               	goto	l1251
  1068  000B2C  5015               	movf	___awdiv@divisor,w,c
  1069  000B2E  5E13               	subwf	___awdiv@dividend,f,c
  1070  000B30  5016               	movf	___awdiv@divisor+1,w,c
  1071  000B32  5A14               	subwfb	___awdiv@dividend+1,f,c
  1072  000B34  8019               	bsf	___awdiv@quotient,0,c
  1073  000B36                     l1251:
  1074  000B36  90D8               	bcf	status,0,c
  1075  000B38  3216               	rrcf	___awdiv@divisor+1,f,c
  1076  000B3A  3215               	rrcf	___awdiv@divisor,f,c
  1077  000B3C  2E17               	decfsz	___awdiv@counter,f,c
  1078  000B3E  D7ED               	goto	u220
  1079  000B40                     l1255:
  1080  000B40  5018               	movf	___awdiv@sign,w,c
  1081  000B42  B4D8               	btfsc	status,2,c
  1082  000B44  D004               	goto	l1259
  1083  000B46  6C19               	negf	___awdiv@quotient,c
  1084  000B48  1E1A               	comf	___awdiv@quotient+1,f,c
  1085  000B4A  B0D8               	btfsc	status,0,c
  1086  000B4C  2A1A               	incf	___awdiv@quotient+1,f,c
  1087  000B4E                     l1259:
  1088  000B4E  C019  F013         	movff	___awdiv@quotient,?___awdiv
  1089  000B52  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  1090  000B56  0012               	return		;funcret
  1091  000B58                     __end_of___awdiv:
  1092                           	opt callstack 0
  1093                           
  1094 ;; *************** function _CURSOR_ONOFF *****************
  1095 ;; Defined at:
  1096 ;;		line 35 in file "LCD.c"
  1097 ;; Parameters:    Size  Location     Type
  1098 ;;  estado          1    wreg     unsigned char 
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  estado          1    3[COMRAM] unsigned char 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  1    wreg      void 
  1103 ;; Registers used:
  1104 ;;		wreg, status,2, status,0, cstack
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1110 ;;      Params:         0       0       0       0       0       0       0       0       0
  1111 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1112 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1113 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1114 ;;Total ram usage:        1 bytes
  1115 ;; Hardware stack levels used:    1
  1116 ;; Hardware stack levels required when called:    2
  1117 ;; This function calls:
  1118 ;;		_ENVIA_LCD_CMD
  1119 ;; This function is called by:
  1120 ;;		_main
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           	psect	text8
  1125  000CF6                     __ptext8:
  1126                           	opt callstack 0
  1127  000CF6                     _CURSOR_ONOFF:
  1128                           	opt callstack 28
  1129                           
  1130                           ;incstack = 0
  1131                           ;CURSOR_ONOFF@estado stored from wreg
  1132  000CF6  6E16               	movwf	CURSOR_ONOFF@estado,c
  1133                           
  1134                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1135  000CF8  5016               	movf	CURSOR_ONOFF@estado,w,c
  1136  000CFA  A4D8               	btfss	status,2,c
  1137  000CFC  D003               	goto	l1037
  1138  000CFE  0E0E               	movlw	14
  1139  000D00  ECDD  F005         	call	_ENVIA_LCD_CMD
  1140  000D04                     l1037:
  1141                           
  1142                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1143  000D04  0416               	decf	CURSOR_ONOFF@estado,w,c
  1144  000D06  A4D8               	btfss	status,2,c
  1145  000D08  0012               	return	
  1146  000D0A  0E0C               	movlw	12
  1147  000D0C  ECDD  F005         	call	_ENVIA_LCD_CMD
  1148  000D10  0012               	return		;funcret
  1149  000D12                     __end_of_CURSOR_ONOFF:
  1150                           	opt callstack 0
  1151                           
  1152 ;; *************** function _CURSOR_HOME *****************
  1153 ;; Defined at:
  1154 ;;		line 30 in file "LCD.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1168 ;;      Params:         0       0       0       0       0       0       0       0       0
  1169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1171 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1172 ;;Total ram usage:        0 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    2
  1175 ;; This function calls:
  1176 ;;		_ENVIA_LCD_CMD
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           	psect	text9
  1183  000D28                     __ptext9:
  1184                           	opt callstack 0
  1185  000D28                     _CURSOR_HOME:
  1186                           	opt callstack 28
  1187                           
  1188                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1189                           
  1190                           ;incstack = 0
  1191  000D28  0E02               	movlw	2
  1192  000D2A  ECDD  F005         	call	_ENVIA_LCD_CMD
  1193  000D2E  0012               	return		;funcret
  1194  000D30                     __end_of_CURSOR_HOME:
  1195                           	opt callstack 0
  1196                           
  1197 ;; *************** function _BORRAR_LCD *****************
  1198 ;; Defined at:
  1199 ;;		line 68 in file "LCD.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;		None
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;		None
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, status,0, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1213 ;;      Params:         0       0       0       0       0       0       0       0       0
  1214 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1215 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1216 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1217 ;;Total ram usage:        0 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    2
  1220 ;; This function calls:
  1221 ;;		_ENVIA_LCD_CMD
  1222 ;; This function is called by:
  1223 ;;		_main
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           	psect	text10
  1228  000D30                     __ptext10:
  1229                           	opt callstack 0
  1230  000D30                     _BORRAR_LCD:
  1231                           	opt callstack 28
  1232                           
  1233                           ;LCD.c: 70:  ENVIA_LCD_CMD(0x01);
  1234                           
  1235                           ;incstack = 0
  1236  000D30  0E01               	movlw	1
  1237  000D32  ECDD  F005         	call	_ENVIA_LCD_CMD
  1238  000D36  0012               	return		;funcret
  1239  000D38                     __end_of_BORRAR_LCD:
  1240                           	opt callstack 0
  1241                           
  1242 ;; *************** function _ENVIA_LCD_CMD *****************
  1243 ;; Defined at:
  1244 ;;		line 117 in file "LCD.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;  dato            1    wreg     unsigned char 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;  dato            1    1[COMRAM] unsigned char 
  1249 ;;  aux             1    2[COMRAM] unsigned char 
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      void 
  1252 ;; Registers used:
  1253 ;;		wreg, status,2, status,0, cstack
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1259 ;;      Params:         0       0       0       0       0       0       0       0       0
  1260 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1262 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1263 ;;Total ram usage:        2 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; Hardware stack levels required when called:    1
  1266 ;; This function calls:
  1267 ;;		_ENVIA_NIBBLE
  1268 ;;		_LEER_LCD
  1269 ;; This function is called by:
  1270 ;;		_POS_CURSOR
  1271 ;;		_CURSOR_HOME
  1272 ;;		_CURSOR_ONOFF
  1273 ;;		_BORRAR_LCD
  1274 ;;		_LCD_CONFIG
  1275 ;;		_BLINK_CURSOR
  1276 ;;		_DISPLAY_ONOFF
  1277 ;;		_GENERACARACTER
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           	psect	text11
  1282  000BBA                     __ptext11:
  1283                           	opt callstack 0
  1284  000BBA                     _ENVIA_LCD_CMD:
  1285                           	opt callstack 28
  1286                           
  1287                           ;incstack = 0
  1288                           ;ENVIA_LCD_CMD@dato stored from wreg
  1289  000BBA  6E14               	movwf	ENVIA_LCD_CMD@dato,c
  1290                           
  1291                           ;LCD.c: 117: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 118: {;LCD.c: 119:  unsigned 
      +                          char aux;;LCD.c: 120:  LATDbits.LATD0 = 0;
  1292  000BBC  908C               	bcf	3980,0,c	;volatile
  1293                           
  1294                           ;LCD.c: 121:  LEER_LCD();
  1295  000BBE  ECAC  F005         	call	_LEER_LCD	;wreg free
  1296                           
  1297                           ;LCD.c: 122:  TRISD = 0b00000000;
  1298  000BC2  0E00               	movlw	0
  1299  000BC4  6E95               	movwf	3989,c	;volatile
  1300                           
  1301                           ;LCD.c: 125:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1302  000BC6  0E21               	movlw	33
  1303  000BC8                     u417:
  1304  000BC8  2EE8               	decfsz	wreg,f,c
  1305  000BCA  D7FE               	bra	u417
  1306  000BCC  F000               	nop	
  1307                           
  1308                           ;LCD.c: 126:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1309  000BCE  0E21               	movlw	33
  1310  000BD0                     u427:
  1311  000BD0  2EE8               	decfsz	wreg,f,c
  1312  000BD2  D7FE               	bra	u427
  1313  000BD4  F000               	nop	
  1314                           
  1315                           ;LCD.c: 127:     LATDbits.LATD1 = 0;
  1316  000BD6  928C               	bcf	3980,1,c	;volatile
  1317                           
  1318                           ;LCD.c: 128:  LATDbits.LATD2 = 0;
  1319  000BD8  948C               	bcf	3980,2,c	;volatile
  1320                           
  1321                           ;LCD.c: 129:  LATDbits.LATD0 = 0;
  1322  000BDA  908C               	bcf	3980,0,c	;volatile
  1323                           
  1324                           ;LCD.c: 130:  aux = dato & 0xF0;
  1325  000BDC  5014               	movf	ENVIA_LCD_CMD@dato,w,c
  1326  000BDE  0BF0               	andlw	240
  1327  000BE0  6E15               	movwf	ENVIA_LCD_CMD@aux,c
  1328                           
  1329                           ;LCD.c: 131:  ENVIA_NIBBLE(aux);
  1330  000BE2  5015               	movf	ENVIA_LCD_CMD@aux,w,c
  1331  000BE4  EC69  F006         	call	_ENVIA_NIBBLE
  1332                           
  1333                           ;LCD.c: 132:  aux = dato<<4;
  1334  000BE8  3814               	swapf	ENVIA_LCD_CMD@dato,w,c
  1335  000BEA  0BF0               	andlw	240
  1336  000BEC  6E15               	movwf	ENVIA_LCD_CMD@aux,c
  1337                           
  1338                           ;LCD.c: 133:  ENVIA_NIBBLE(aux);
  1339  000BEE  5015               	movf	ENVIA_LCD_CMD@aux,w,c
  1340  000BF0  EC69  F006         	call	_ENVIA_NIBBLE
  1341  000BF4  0012               	return		;funcret
  1342  000BF6                     __end_of_ENVIA_LCD_CMD:
  1343                           	opt callstack 0
  1344                           
  1345 ;; *************** function _LEER_LCD *****************
  1346 ;; Defined at:
  1347 ;;		line 136 in file "LCD.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  aux             1    0[COMRAM] unsigned char 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1361 ;;      Params:         0       0       0       0       0       0       0       0       0
  1362 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1364 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1365 ;;Total ram usage:        1 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; This function calls:
  1368 ;;		Nothing
  1369 ;; This function is called by:
  1370 ;;		_ENVIA_CHAR
  1371 ;;		_ENVIA_LCD_CMD
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text12
  1376  000B58                     __ptext12:
  1377                           	opt callstack 0
  1378  000B58                     _LEER_LCD:
  1379                           	opt callstack 28
  1380                           
  1381                           ;LCD.c: 138:  unsigned char aux;;LCD.c: 139:  TRISD = 0xF8;
  1382                           
  1383                           ;incstack = 0
  1384  000B58  0EF8               	movlw	248
  1385  000B5A  6E95               	movwf	3989,c	;volatile
  1386                           
  1387                           ;LCD.c: 140:  LATDbits.LATD0 = 0;
  1388  000B5C  908C               	bcf	3980,0,c	;volatile
  1389                           
  1390                           ;LCD.c: 141:  LATDbits.LATD1 = 1;
  1391  000B5E  828C               	bsf	3980,1,c	;volatile
  1392                           
  1393                           ;LCD.c: 142:  LATDbits.LATD2 = 1;
  1394  000B60  848C               	bsf	3980,2,c	;volatile
  1395                           
  1396                           ;LCD.c: 143:         _delay(1200);
  1397  000B62  0EF0               	movlw	240
  1398  000B64                     u437:
  1399  000B64  D000               	nop2	
  1400  000B66  2EE8               	decfsz	wreg,f,c
  1401  000B68  D7FD               	bra	u437
  1402                           
  1403                           ;LCD.c: 145:  aux = PORTD;
  1404  000B6A  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1405                           
  1406                           ;LCD.c: 146:  LATDbits.LATD2 = 0;
  1407  000B6E  948C               	bcf	3980,2,c	;volatile
  1408                           
  1409                           ;LCD.c: 147:         _delay(1200);
  1410  000B70  0EF0               	movlw	240
  1411  000B72                     u447:
  1412  000B72  D000               	nop2	
  1413  000B74  2EE8               	decfsz	wreg,f,c
  1414  000B76  D7FD               	bra	u447
  1415                           
  1416                           ;LCD.c: 149:  LATDbits.LATD2 = 1;
  1417  000B78  848C               	bsf	3980,2,c	;volatile
  1418                           
  1419                           ;LCD.c: 150:         _delay(1200);
  1420  000B7A  0EF0               	movlw	240
  1421  000B7C                     u457:
  1422  000B7C  D000               	nop2	
  1423  000B7E  2EE8               	decfsz	wreg,f,c
  1424  000B80  D7FD               	bra	u457
  1425  000B82                     l867:
  1426                           
  1427                           ;LCD.c: 152:  LATDbits.LATD2 = 0;
  1428  000B82  948C               	bcf	3980,2,c	;volatile
  1429                           
  1430                           ;LCD.c: 153:  aux = aux & 0x80;
  1431  000B84  5013               	movf	LEER_LCD@aux,w,c
  1432  000B86  0B80               	andlw	128
  1433  000B88  6E13               	movwf	LEER_LCD@aux,c
  1434                           
  1435                           ;LCD.c: 154:  while(aux == 0x80)
  1436  000B8A  D012               	goto	l883
  1437  000B8C                     l164:
  1438                           
  1439                           ;LCD.c: 155:         {;LCD.c: 156:             LATDbits.LATD2 = 1;
  1440  000B8C  848C               	bsf	3980,2,c	;volatile
  1441                           
  1442                           ;LCD.c: 157:             _delay(1200);
  1443  000B8E  0EF0               	movlw	240
  1444  000B90                     u467:
  1445  000B90  D000               	nop2	
  1446  000B92  2EE8               	decfsz	wreg,f,c
  1447  000B94  D7FD               	bra	u467
  1448                           
  1449                           ;LCD.c: 158:             aux = PORTD;
  1450  000B96  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1451                           
  1452                           ;LCD.c: 159:             LATDbits.LATD2 = 0;
  1453  000B9A  948C               	bcf	3980,2,c	;volatile
  1454                           
  1455                           ;LCD.c: 160:             _delay(1200);
  1456  000B9C  0EF0               	movlw	240
  1457  000B9E                     u477:
  1458  000B9E  D000               	nop2	
  1459  000BA0  2EE8               	decfsz	wreg,f,c
  1460  000BA2  D7FD               	bra	u477
  1461                           
  1462                           ;LCD.c: 161:             LATDbits.LATD2 = 1;
  1463  000BA4  848C               	bsf	3980,2,c	;volatile
  1464                           
  1465                           ;LCD.c: 162:             _delay(1200);
  1466  000BA6  0EF0               	movlw	240
  1467  000BA8                     u487:
  1468  000BA8  D000               	nop2	
  1469  000BAA  2EE8               	decfsz	wreg,f,c
  1470  000BAC  D7FD               	bra	u487
  1471  000BAE  D7E9               	goto	l867
  1472  000BB0                     l883:
  1473                           
  1474                           ;LCD.c: 154:  while(aux == 0x80)
  1475  000BB0  0E80               	movlw	128
  1476  000BB2  1813               	xorwf	LEER_LCD@aux,w,c
  1477  000BB4  A4D8               	btfss	status,2,c
  1478  000BB6  0012               	return	
  1479  000BB8  D7E9               	goto	l164
  1480  000BBA                     __end_of_LEER_LCD:
  1481                           	opt callstack 0
  1482                           
  1483 ;; *************** function _ENVIA_NIBBLE *****************
  1484 ;; Defined at:
  1485 ;;		line 104 in file "LCD.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  dato            1    wreg     unsigned char 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  dato            1    0[COMRAM] unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, status,2, status,0
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1499 ;;      Params:         0       0       0       0       0       0       0       0       0
  1500 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1501 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1502 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1503 ;;Total ram usage:        1 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; This function calls:
  1506 ;;		Nothing
  1507 ;; This function is called by:
  1508 ;;		_ENVIA_CHAR
  1509 ;;		_LCD_CONFIG
  1510 ;;		_ENVIA_LCD_CMD
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           	psect	text13
  1515  000CD2                     __ptext13:
  1516                           	opt callstack 0
  1517  000CD2                     _ENVIA_NIBBLE:
  1518                           	opt callstack 28
  1519                           
  1520                           ;incstack = 0
  1521                           ;ENVIA_NIBBLE@dato stored from wreg
  1522  000CD2  6E13               	movwf	ENVIA_NIBBLE@dato,c
  1523                           
  1524                           ;LCD.c: 104: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  LATD &= 0x
      +                          0F;
  1525  000CD4  0E0F               	movlw	15
  1526  000CD6  168C               	andwf	3980,f,c	;volatile
  1527                           
  1528                           ;LCD.c: 107:  dato &= 0xF0;
  1529  000CD8  0EF0               	movlw	240
  1530  000CDA  1613               	andwf	ENVIA_NIBBLE@dato,f,c
  1531                           
  1532                           ;LCD.c: 108:  LATD|= dato;
  1533  000CDC  5013               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1534  000CDE  128C               	iorwf	3980,f,c	;volatile
  1535                           
  1536                           ;LCD.c: 109:  LATDbits.LATD2 = 1;
  1537  000CE0  848C               	bsf	3980,2,c	;volatile
  1538                           
  1539                           ;LCD.c: 112:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1540  000CE2  0E21               	movlw	33
  1541  000CE4                     u497:
  1542  000CE4  2EE8               	decfsz	wreg,f,c
  1543  000CE6  D7FE               	bra	u497
  1544  000CE8  F000               	nop	
  1545                           
  1546                           ;LCD.c: 113:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1547  000CEA  0E21               	movlw	33
  1548  000CEC                     u507:
  1549  000CEC  2EE8               	decfsz	wreg,f,c
  1550  000CEE  D7FE               	bra	u507
  1551  000CF0  F000               	nop	
  1552                           
  1553                           ;LCD.c: 114:  LATDbits.LATD2 = 0;
  1554  000CF2  948C               	bcf	3980,2,c	;volatile
  1555  000CF4  0012               	return		;funcret
  1556  000CF6                     __end_of_ENVIA_NIBBLE:
  1557                           	opt callstack 0
  1558                           
  1559 ;; *************** function _ADC_CONVERTIR *****************
  1560 ;; Defined at:
  1561 ;;		line 69 in file "ADC.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;		None
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  num             2    3[COMRAM] int 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  2    0[COMRAM] int 
  1568 ;; Registers used:
  1569 ;;		wreg, status,2, status,0
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1575 ;;      Params:         2       0       0       0       0       0       0       0       0
  1576 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1577 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1578 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1579 ;;Total ram usage:        5 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_main
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	text14
  1589  000C5C                     __ptext14:
  1590                           	opt callstack 0
  1591  000C5C                     _ADC_CONVERTIR:
  1592                           	opt callstack 30
  1593                           
  1594                           ;ADC.c: 71:  int num;;ADC.c: 72:  ADCON0bits.GO = 1;
  1595                           
  1596                           ;incstack = 0
  1597  000C5C  82C2               	bsf	4034,1,c	;volatile
  1598  000C5E                     l94:
  1599  000C5E  B2C2               	btfsc	4034,1,c	;volatile
  1600  000C60  D7FE               	goto	l94
  1601                           
  1602                           ;ADC.c: 74:  num = 0x03 & ADRESH;
  1603  000C62  CFC4 F015          	movff	4036,??_ADC_CONVERTIR	;volatile
  1604  000C66  0E03               	movlw	3
  1605  000C68  1615               	andwf	??_ADC_CONVERTIR,f,c
  1606  000C6A  5015               	movf	??_ADC_CONVERTIR,w,c
  1607  000C6C  6E16               	movwf	ADC_CONVERTIR@num,c
  1608  000C6E  6A17               	clrf	ADC_CONVERTIR@num+1,c
  1609                           
  1610                           ;ADC.c: 75:  num<<= 8;
  1611  000C70  5016               	movf	ADC_CONVERTIR@num,w,c
  1612  000C72  6E17               	movwf	ADC_CONVERTIR@num+1,c
  1613  000C74  6A16               	clrf	ADC_CONVERTIR@num,c
  1614                           
  1615                           ;ADC.c: 76:  num +=ADRESL;
  1616  000C76  50C3               	movf	4035,w,c	;volatile
  1617  000C78  2616               	addwf	ADC_CONVERTIR@num,f,c
  1618  000C7A  0E00               	movlw	0
  1619  000C7C  2217               	addwfc	ADC_CONVERTIR@num+1,f,c
  1620                           
  1621                           ;ADC.c: 77:  return(num);
  1622  000C7E  C016  F013         	movff	ADC_CONVERTIR@num,?_ADC_CONVERTIR
  1623  000C82  C017  F014         	movff	ADC_CONVERTIR@num+1,?_ADC_CONVERTIR+1
  1624  000C86  0012               	return		;funcret
  1625  000C88                     __end_of_ADC_CONVERTIR:
  1626                           	opt callstack 0
  1627                           
  1628 ;; *************** function _ADC_CONFIG *****************
  1629 ;; Defined at:
  1630 ;;		line 6 in file "ADC.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  canal           1    wreg     unsigned char 
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  canal           1    2[COMRAM] unsigned char 
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg, status,2, status,0
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1644 ;;      Params:         0       0       0       0       0       0       0       0       0
  1645 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1646 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1647 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1648 ;;Total ram usage:        3 bytes
  1649 ;; Hardware stack levels used:    1
  1650 ;; This function calls:
  1651 ;;		Nothing
  1652 ;; This function is called by:
  1653 ;;		_main
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657                           	psect	text15
  1658  000900                     __ptext15:
  1659                           	opt callstack 0
  1660  000900                     _ADC_CONFIG:
  1661                           	opt callstack 30
  1662                           
  1663                           ;incstack = 0
  1664                           ;ADC_CONFIG@canal stored from wreg
  1665  000900  6E15               	movwf	ADC_CONFIG@canal,c
  1666                           
  1667                           ;ADC.c: 6: void ADC_CONFIG(char canal);ADC.c: 7: {;ADC.c: 8:  TRISA = 0xFF;
  1668  000902  6892               	setf	3986,c	;volatile
  1669                           
  1670                           ;ADC.c: 9:  TRISE = 0xFF;
  1671  000904  6896               	setf	3990,c	;volatile
  1672                           
  1673                           ;ADC.c: 10:  TRISB = 0x0F;
  1674  000906  0E0F               	movlw	15
  1675  000908  6E93               	movwf	3987,c	;volatile
  1676                           
  1677                           ;ADC.c: 11:  switch(canal)
  1678  00090A  D01F               	goto	l1099
  1679  00090C                     l1045:
  1680                           
  1681                           ;ADC.c: 14:    ADCON1=0x0E;
  1682  00090C  0E0E               	movlw	14
  1683  00090E                     L1:
  1684  00090E  6EC1               	movwf	4033,c	;volatile
  1685                           
  1686                           ;ADC.c: 15:    ADCON0=canal<<2;
  1687  000910  4415               	rlncf	ADC_CONFIG@canal,w,c
  1688  000912  46E8               	rlncf	wreg,f,c
  1689  000914  0BFC               	andlw	252
  1690  000916  6EC2               	movwf	4034,c	;volatile
  1691                           
  1692                           ;ADC.c: 16:   break;
  1693  000918  D047               	goto	l1101
  1694  00091A                     l1049:
  1695                           
  1696                           ;ADC.c: 18:    ADCON1=0x0D;
  1697  00091A  0E0D               	movlw	13
  1698  00091C  D7F8               	goto	L1
  1699  00091E                     l1053:
  1700                           
  1701                           ;ADC.c: 22:    ADCON1=0x0C;
  1702  00091E  0E0C               	movlw	12
  1703  000920  D7F6               	goto	L1
  1704  000922                     l1057:
  1705                           
  1706                           ;ADC.c: 26:    ADCON1=0x0B;
  1707  000922  0E0B               	movlw	11
  1708  000924  D7F4               	goto	L1
  1709  000926                     l1061:
  1710                           
  1711                           ;ADC.c: 30:    ADCON1=0x0A;
  1712  000926  0E0A               	movlw	10
  1713  000928  D7F2               	goto	L1
  1714  00092A                     l1065:
  1715                           
  1716                           ;ADC.c: 34:    ADCON1=0x09;
  1717  00092A  0E09               	movlw	9
  1718  00092C  D7F0               	goto	L1
  1719  00092E                     l1069:
  1720                           
  1721                           ;ADC.c: 38:    ADCON1=0x08;
  1722  00092E  0E08               	movlw	8
  1723  000930  D7EE               	goto	L1
  1724  000932                     l1073:
  1725                           
  1726                           ;ADC.c: 42:    ADCON1=0x07;
  1727  000932  0E07               	movlw	7
  1728  000934  D7EC               	goto	L1
  1729  000936                     l1077:
  1730                           
  1731                           ;ADC.c: 46:    ADCON1=0x06;
  1732  000936  0E06               	movlw	6
  1733  000938  D7EA               	goto	L1
  1734  00093A                     l1081:
  1735                           
  1736                           ;ADC.c: 50:    ADCON1=0x05;
  1737  00093A  0E05               	movlw	5
  1738  00093C  D7E8               	goto	L1
  1739  00093E                     l1085:
  1740                           
  1741                           ;ADC.c: 54:    ADCON1=0x04;
  1742  00093E  0E04               	movlw	4
  1743  000940  D7E6               	goto	L1
  1744  000942                     l1089:
  1745                           
  1746                           ;ADC.c: 58:    ADCON1=0x03;
  1747  000942  0E03               	movlw	3
  1748  000944  D7E4               	goto	L1
  1749  000946                     l1093:
  1750                           
  1751                           ;ADC.c: 62:    ADCON1=0x02;
  1752  000946  0E02               	movlw	2
  1753  000948  D7E2               	goto	L1
  1754  00094A                     l1099:
  1755  00094A  5015               	movf	ADC_CONFIG@canal,w,c
  1756  00094C  6E13               	movwf	??_ADC_CONFIG& (0+255),c
  1757  00094E  6A14               	clrf	(??_ADC_CONFIG+1)& (0+255),c
  1758                           
  1759                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1760                           ; Switch size 1, requested type "simple"
  1761                           ; Number of cases is 1, Range of values is 0 to 0
  1762                           ; switch strategies available:
  1763                           ; Name         Instructions Cycles
  1764                           ; simple_byte            4     3 (average)
  1765                           ;	Chosen strategy is simple_byte
  1766  000950  5014               	movf	??_ADC_CONFIG+1,w,c
  1767  000952  0A00               	xorlw	0	; case 0
  1768  000954  A4D8               	btfss	status,2,c
  1769  000956  D028               	goto	l1101
  1770                           
  1771                           ; Switch size 1, requested type "simple"
  1772                           ; Number of cases is 13, Range of values is 0 to 12
  1773                           ; switch strategies available:
  1774                           ; Name         Instructions Cycles
  1775                           ; simple_byte           40    21 (average)
  1776                           ;	Chosen strategy is simple_byte
  1777  000958  5013               	movf	??_ADC_CONFIG,w,c
  1778  00095A  0A00               	xorlw	0	; case 0
  1779  00095C  B4D8               	btfsc	status,2,c
  1780  00095E  D7D6               	goto	l1045
  1781  000960  0A01               	xorlw	1	; case 1
  1782  000962  B4D8               	btfsc	status,2,c
  1783  000964  D7DA               	goto	l1049
  1784  000966  0A03               	xorlw	3	; case 2
  1785  000968  B4D8               	btfsc	status,2,c
  1786  00096A  D7D9               	goto	l1053
  1787  00096C  0A01               	xorlw	1	; case 3
  1788  00096E  B4D8               	btfsc	status,2,c
  1789  000970  D7D8               	goto	l1057
  1790  000972  0A07               	xorlw	7	; case 4
  1791  000974  B4D8               	btfsc	status,2,c
  1792  000976  D7D7               	goto	l1061
  1793  000978  0A01               	xorlw	1	; case 5
  1794  00097A  B4D8               	btfsc	status,2,c
  1795  00097C  D7D6               	goto	l1065
  1796  00097E  0A03               	xorlw	3	; case 6
  1797  000980  B4D8               	btfsc	status,2,c
  1798  000982  D7D5               	goto	l1069
  1799  000984  0A01               	xorlw	1	; case 7
  1800  000986  B4D8               	btfsc	status,2,c
  1801  000988  D7D4               	goto	l1073
  1802  00098A  0A0F               	xorlw	15	; case 8
  1803  00098C  B4D8               	btfsc	status,2,c
  1804  00098E  D7D3               	goto	l1077
  1805  000990  0A01               	xorlw	1	; case 9
  1806  000992  B4D8               	btfsc	status,2,c
  1807  000994  D7D2               	goto	l1081
  1808  000996  0A03               	xorlw	3	; case 10
  1809  000998  B4D8               	btfsc	status,2,c
  1810  00099A  D7D1               	goto	l1085
  1811  00099C  0A01               	xorlw	1	; case 11
  1812  00099E  B4D8               	btfsc	status,2,c
  1813  0009A0  D7D0               	goto	l1089
  1814  0009A2  0A07               	xorlw	7	; case 12
  1815  0009A4  B4D8               	btfsc	status,2,c
  1816  0009A6  D7CF               	goto	l1093
  1817  0009A8                     l1101:
  1818                           
  1819                           ;ADC.c: 66:  ADCON2 = 0x91;
  1820  0009A8  0E91               	movlw	145
  1821  0009AA  6EC0               	movwf	4032,c	;volatile
  1822                           
  1823                           ;ADC.c: 67:  ADCON0bits.ADON = 1;
  1824  0009AC  80C2               	bsf	4034,0,c	;volatile
  1825  0009AE  0012               	return		;funcret
  1826  0009B0                     __end_of_ADC_CONFIG:
  1827                           	opt callstack 0
  1828                           
  1829                           	psect	rparam
  1830  0000                     tosu	equ	0xFFF
  1831                           tosh	equ	0xFFE
  1832                           tosl	equ	0xFFD
  1833                           stkptr	equ	0xFFC
  1834                           pclatu	equ	0xFFB
  1835                           pclath	equ	0xFFA
  1836                           pcl	equ	0xFF9
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           prodh	equ	0xFF4
  1842                           prodl	equ	0xFF3
  1843                           indf0	equ	0xFEF
  1844                           postinc0	equ	0xFEE
  1845                           postdec0	equ	0xFED
  1846                           preinc0	equ	0xFEC
  1847                           plusw0	equ	0xFEB
  1848                           fsr0h	equ	0xFEA
  1849                           fsr0l	equ	0xFE9
  1850                           wreg	equ	0xFE8
  1851                           indf1	equ	0xFE7
  1852                           postinc1	equ	0xFE6
  1853                           postdec1	equ	0xFE5
  1854                           preinc1	equ	0xFE4
  1855                           plusw1	equ	0xFE3
  1856                           fsr1h	equ	0xFE2
  1857                           fsr1l	equ	0xFE1
  1858                           bsr	equ	0xFE0
  1859                           indf2	equ	0xFDF
  1860                           postinc2	equ	0xFDE
  1861                           postdec2	equ	0xFDD
  1862                           preinc2	equ	0xFDC
  1863                           plusw2	equ	0xFDB
  1864                           fsr2h	equ	0xFDA
  1865                           fsr2l	equ	0xFD9
  1866                           status	equ	0xFD8


Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      29
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _DIGITOS->___awdiv
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3202
                                              9 COMRAM     2     2      0
                         _ADC_CONFIG
                      _ADC_CONVERTIR
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                            _DIGITOS
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     363
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _DIGITOS                                              0     0      0    1675
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_CONVERTIR                                        5     3      2      25
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CONFIG                                           3     3      0     210
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CONFIG
   _ADC_CONVERTIR
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _DIGITOS
     ___awdiv
     ___wmul
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      B      1D       1       30.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1D      20        0.0%
DATA                 0      0      1D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu May 23 18:11:25 2019

     __size_of_ADC_CONFIG 00B0           ADC_CONFIG@canal 0015                        l94 0C5E  
            ___awdiv@sign 0018       ___wmul@multiplicand 0015               __CFG_BORV$3 000000  
           ENVIA_CHAR@aux 0015                       l164 0B8C                       l883 0BB0  
                     l867 0B82                       u220 0B1A                       u307 09D8  
                     u317 0A58                       u407 0C04                       u327 0A6A  
                     u417 0BC8                       u337 0A78                       u507 0CEC  
                     u427 0BD0                       u347 0A86                       u437 0B64  
                     u357 0A94                       u447 0B72                       u367 0AA2  
                     u457 0B7C                       u377 0AB0                       u297 09C2  
                     u467 0B90                       u387 0ABE                       u477 0B9E  
                     u397 0ACC                       u487 0BA8                       u497 0CE4  
            __CFG_BOR$OFF 000000    __size_of_ADC_CONVERTIR 002C               LEER_LCD@aux 0013  
                     wreg 000FE8              ?_CURSOR_HOME 0013           __end_of_DIGITOS 0900  
          ??_ENVIA_NIBBLE 0013              __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0014  
            __CFG_WDT$OFF 000000                      l1101 09A8                      l1061 0926  
                    l1053 091E                      l1045 090C                      l1037 0D04  
                    l1081 093A                      l1073 0932                      l1065 092A  
                    l1057 0922                      l1049 091A                      l1241 0B16  
                    l1233 0AF8                      l1321 09F0                      l1251 0B36  
                    l1227 0AE8                      l1093 0946                      l1085 093E  
                    l1077 0936                      l1069 092E                      l1239 0B0E  
                    l1255 0B40                      l1089 0942                      l1281 0C52  
                    l1099 094A                      l1259 0B4E                      l1277 0C34  
                    l1299 0CC0                      STR_1 0801                      _LATD 000F8C  
            __CFG_PWRT$ON 000000                      _main 09B0                      prodh 000FF4  
                    prodl 000FF3                      start 0000             ?_CURSOR_ONOFF 0013  
           __CFG_MCLRE$ON 000000              ___param_bank 000000           ??_ENVIA_LCD_CMD 0014  
        __end_of_LEER_LCD 0BBA       __size_of_BORRAR_LCD 0008             __CFG_PLLDIV$1 000000  
          __CFG_CCP2MX$ON 000000                     ?_main 0013           __end_of___awdiv 0B58  
         ___awdiv@divisor 0015           ___awdiv@counter 0017                     _PORTD 000F83  
     __size_of_LCD_CONFIG 008C                     _TRISA 000F92                     _TRISB 000F93  
                   _TRISD 000F95                     _TRISE 000F96       __size_of_ENVIA_CHAR 0034  
             ?_POS_CURSOR 0016                     tablat 000FF5                     status 000FD8  
          ??_CURSOR_ONOFF 0016             _ADC_CONVERTIR 0C5C            __CFG_PBADEN$ON 000000  
         __initialization 0D12              __end_of_main 0A48           _ESCRIBE_MENSAJE 0C2A  
               ??_DIGITOS 001B                    ??_main 001C             __activetblptr 000002  
        ADC_CONVERTIR@num 0016              ??_ADC_CONFIG 0013                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  _ADRESL 000FC3          ___awdiv@dividend 0013            ?_ADC_CONVERTIR 0013  
      __end_of_ADC_CONFIG 09B0                    ___wmul 0C88                 ??___awdiv 0017  
    __end_of_ENVIA_NIBBLE 0CF6                    _digdec 0009                    _digcen 000B  
                  _digdmi 000F                    _digmil 000D                    _diguni 0007  
     __size_of_POS_CURSOR 0024                    clear_0 0D18          ___awdiv@quotient 0019  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0016      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0013                __accesstop 0060   __end_of__initialization 0D1E  
         __CFG_FOSC$XT_XT 000000              ??_LCD_CONFIG 0016             ___rparam_used 000001  
            ??_ENVIA_CHAR 0014   __end_of_ESCRIBE_MENSAJE 0C5C            __pcstackCOMRAM 0013  
      __end_of_BORRAR_LCD 0D38          ENVIA_LCD_CMD@aux 0015      __end_of_CURSOR_ONOFF 0D12  
      __end_of_LCD_CONFIG 0AD4        __end_of_ENVIA_CHAR 0C2A           ??_ADC_CONVERTIR 0015  
              ??_LEER_LCD 0013          ENVIA_NIBBLE@dato 0013                   ?___wmul 0013  
                 _DIGITOS 080E              ??_POS_CURSOR 0017     __size_of_ENVIA_NIBBLE 0024  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0016  
                 ___awdiv 0AD4           __size_of___wmul 0026              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0BF6                   __pcinit 0D12        __end_of_POS_CURSOR 0CD2  
                 __ramtop 0800                   __ptext0 09B0                   __ptext1 0CAE  
                 __ptext2 0A48                   __ptext3 0C2A                   __ptext4 0BF6  
                 __ptext5 080E                   __ptext6 0C88                   __ptext7 0AD4  
                 __ptext8 0CF6                   __ptext9 0D28              _ENVIA_NIBBLE 0CD2  
    end_of_initialization 0D1E             __Lmediumconst 0000                   postinc0 000FEE  
   __size_of_CURSOR_ONOFF 001C                 _TRISCbits 000F94         __size_of_LEER_LCD 0062  
            _CURSOR_ONOFF 0CF6        CURSOR_ONOFF@estado 0016            __end_of___wmul 0CAE  
           ??_CURSOR_HOME 0016       start_initialization 0D12         ENVIA_LCD_CMD@dato 0014  
                ??___wmul 0017                  ?_DIGITOS 0013               __pbssCOMRAM 0001  
     __end_of_CURSOR_HOME 0D30     __end_of_ADC_CONVERTIR 0C88                  ?___awdiv 0013  
             __smallconst 0800                  _LEER_LCD 0B58            ___wmul@product 0017  
                _LATCbits 000F8B                  _LATDbits 000F8C                 _temporal2 0003  
               _temporal3 0001                 _resultado 0011          ESCRIBE_MENSAJE@i 001B  
          POS_CURSOR@fila 0017  __size_of_ESCRIBE_MENSAJE 0032                _ADCON0bits 000FC2  
       ___wmul@multiplier 0013          __size_of_DIGITOS 00F2               _CURSOR_HOME 0D28  
              _ADC_CONFIG 0900    __size_of_ENVIA_LCD_CMD 003C                  __Hrparam 0000  
                __Lrparam 0000          __size_of___awdiv 0084                  __ptext10 0D30  
                __ptext11 0BBA                  __ptext12 0B58                  __ptext13 0CD2  
                __ptext14 0C5C                  __ptext15 0900                _BORRAR_LCD 0D30  
           __size_of_main 0098                _LCD_CONFIG 0A48                _ENVIA_CHAR 0BF6  
                _temporal 0005             _ENVIA_LCD_CMD 0BBA     __CFG_CPUDIV$OSC1_PLL2 000000  
             ?_ADC_CONFIG 0013         ??_ESCRIBE_MENSAJE 0019     ESCRIBE_MENSAJE@cadena 0016  
          ?_ENVIA_LCD_CMD 0013               ?_BORRAR_LCD 0013             ?_ENVIA_NIBBLE 0013  
              _POS_CURSOR 0CAE               ?_LCD_CONFIG 0013        ESCRIBE_MENSAJE@tam 0018  
             ?_ENVIA_CHAR 0013         POS_CURSOR@columna 0016  
