

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 24 17:09:52 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 2.05
    28                           ; Generated 20/12/2018 GMT
    29                           ; 
    30                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     _LATCbits	set	3979
    62  0000                     _TRISCbits	set	3988
    63  0000                     _PORTD	set	3971
    64  0000                     _LATD	set	3980
    65  0000                     _TRISD	set	3989
    66  0000                     _LATDbits	set	3980
    67  0000                     _ADRESL	set	4035
    68  0000                     _ADCON0bits	set	4034
    69  0000                     _ADCON2	set	4032
    70  0000                     _ADCON0	set	4034
    71  0000                     _ADCON1	set	4033
    72  0000                     _TRISB	set	3987
    73  0000                     _TRISE	set	3990
    74  0000                     _TRISA	set	3986
    75  0000                     _ADRESH	set	4036
    76                           
    77                           	psect	smallconst
    78  000800                     __psmallconst:
    79                           	opt callstack 0
    80  000800  00                 	db	0
    81  000801                     STR_1:
    82  000801  4C                 	db	76	;'L'
    83  000802  65                 	db	101	;'e'
    84  000803  63                 	db	99	;'c'
    85  000804  74                 	db	116	;'t'
    86  000805  75                 	db	117	;'u'
    87  000806  72                 	db	114	;'r'
    88  000807  61                 	db	97	;'a'
    89  000808  20                 	db	32
    90  000809  41                 	db	65	;'A'
    91  00080A  44                 	db	68	;'D'
    92  00080B  43                 	db	67	;'C'
    93  00080C  3A                 	db	58	;':'
    94  00080D  00                 	db	0
    95                           
    96                           ; #config settings
    97  00080E  00                 	db	0	; dummy byte at the end
    98  0000                     
    99                           	psect	cinit
   100  000CE0                     __pcinit:
   101                           	opt callstack 0
   102  000CE0                     start_initialization:
   103                           	opt callstack 0
   104  000CE0                     __initialization:
   105                           	opt callstack 0
   106                           
   107                           ; Clear objects allocated to COMRAM (18 bytes)
   108  000CE0  EE00  F001         	lfsr	0,__pbssCOMRAM
   109  000CE4  0E12               	movlw	18
   110  000CE6                     clear_0:
   111  000CE6  6AEE               	clrf	postinc0,c
   112  000CE8  06E8               	decf	wreg,f,c
   113  000CEA  E1FD               	bnz	clear_0
   114  000CEC                     end_of_initialization:
   115                           	opt callstack 0
   116  000CEC                     __end_of__initialization:
   117                           	opt callstack 0
   118  000CEC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   119  000CEE  6EF8               	movwf	tblptru,c
   120  000CF0  0100               	movlb	0
   121  000CF2  EFD9  F004         	goto	_main	;jump to C main() function
   122                           
   123                           	psect	bssCOMRAM
   124  000001                     __pbssCOMRAM:
   125                           	opt callstack 0
   126  000001                     _temporal3:
   127                           	opt callstack 0
   128  000001                     	ds	2
   129  000003                     _temporal2:
   130                           	opt callstack 0
   131  000003                     	ds	2
   132  000005                     _temporal:
   133                           	opt callstack 0
   134  000005                     	ds	2
   135  000007                     _diguni:
   136                           	opt callstack 0
   137  000007                     	ds	2
   138  000009                     _digdec:
   139                           	opt callstack 0
   140  000009                     	ds	2
   141  00000B                     _digcen:
   142                           	opt callstack 0
   143  00000B                     	ds	2
   144  00000D                     _digmil:
   145                           	opt callstack 0
   146  00000D                     	ds	2
   147  00000F                     _digdmi:
   148                           	opt callstack 0
   149  00000F                     	ds	2
   150  000011                     _resultaso:
   151                           	opt callstack 0
   152  000011                     	ds	2
   153                           
   154                           	psect	cstackCOMRAM
   155  000013                     __pcstackCOMRAM:
   156                           	opt callstack 0
   157  000013                     ??_ADC_CONFIG:
   158  000013                     ?_ADC_CONVERTIR:
   159                           	opt callstack 0
   160  000013                     ?___wmul:
   161                           	opt callstack 0
   162  000013                     ?___awdiv:
   163                           	opt callstack 0
   164  000013                     ENVIA_NIBBLE@dato:
   165                           	opt callstack 0
   166  000013                     LEER_LCD@aux:
   167                           	opt callstack 0
   168  000013                     ___wmul@multiplier:
   169                           	opt callstack 0
   170  000013                     ___awdiv@dividend:
   171                           	opt callstack 0
   172                           
   173                           ; 2 bytes @ 0x0
   174  000013                     	ds	1
   175  000014                     ENVIA_CHAR@dato:
   176                           	opt callstack 0
   177  000014                     ENVIA_LCD_CMD@dato:
   178                           	opt callstack 0
   179                           
   180                           ; 1 bytes @ 0x1
   181  000014                     	ds	1
   182  000015                     ??_ADC_CONVERTIR:
   183  000015                     ADC_CONFIG@canal:
   184                           	opt callstack 0
   185  000015                     ENVIA_CHAR@aux:
   186                           	opt callstack 0
   187  000015                     ENVIA_LCD_CMD@aux:
   188                           	opt callstack 0
   189  000015                     ___wmul@multiplicand:
   190                           	opt callstack 0
   191  000015                     ___awdiv@divisor:
   192                           	opt callstack 0
   193                           
   194                           ; 2 bytes @ 0x2
   195  000015                     	ds	1
   196  000016                     ??_LCD_CONFIG:
   197  000016                     POS_CURSOR@columna:
   198                           	opt callstack 0
   199  000016                     CURSOR_ONOFF@estado:
   200                           	opt callstack 0
   201  000016                     ADC_CONVERTIR@num:
   202                           	opt callstack 0
   203  000016                     ESCRIBE_MENSAJE@cadena:
   204                           	opt callstack 0
   205                           
   206                           ; 2 bytes @ 0x3
   207  000016                     	ds	1
   208  000017                     POS_CURSOR@fila:
   209                           	opt callstack 0
   210  000017                     ___awdiv@counter:
   211                           	opt callstack 0
   212  000017                     ___wmul@product:
   213                           	opt callstack 0
   214                           
   215                           ; 2 bytes @ 0x4
   216  000017                     	ds	1
   217  000018                     ESCRIBE_MENSAJE@tam:
   218                           	opt callstack 0
   219  000018                     ___awdiv@sign:
   220                           	opt callstack 0
   221                           
   222                           ; 1 bytes @ 0x5
   223  000018                     	ds	1
   224  000019                     ??_ESCRIBE_MENSAJE:
   225  000019                     ___awdiv@quotient:
   226                           	opt callstack 0
   227                           
   228                           ; 2 bytes @ 0x6
   229  000019                     	ds	2
   230  00001B                     ESCRIBE_MENSAJE@i:
   231                           	opt callstack 0
   232  00001B                     DIGITOS@valor:
   233                           	opt callstack 0
   234                           
   235                           ; 2 bytes @ 0x8
   236  00001B                     	ds	2
   237  00001D                     ??_main:
   238                           
   239                           ; 1 bytes @ 0xA
   240  00001D                     	ds	2
   241                           
   242 ;;
   243 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   244 ;;
   245 ;; *************** function _main *****************
   246 ;; Defined at:
   247 ;;		line 48 in file "vaguey2.c"
   248 ;; Parameters:    Size  Location     Type
   249 ;;		None
   250 ;; Auto vars:     Size  Location     Type
   251 ;;		None
   252 ;; Return value:  Size  Location     Type
   253 ;;                  1    wreg      void 
   254 ;; Registers used:
   255 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   256 ;; Tracked objects:
   257 ;;		On entry : 0/0
   258 ;;		On exit  : 0/0
   259 ;;		Unchanged: 0/0
   260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   261 ;;      Params:         0       0       0       0       0       0       0       0       0
   262 ;;      Locals:         0       0       0       0       0       0       0       0       0
   263 ;;      Temps:          2       0       0       0       0       0       0       0       0
   264 ;;      Totals:         2       0       0       0       0       0       0       0       0
   265 ;;Total ram usage:        2 bytes
   266 ;; Hardware stack levels required when called:    3
   267 ;; This function calls:
   268 ;;		_ADC_CONFIG
   269 ;;		_ADC_CONVERTIR
   270 ;;		_CURSOR_HOME
   271 ;;		_CURSOR_ONOFF
   272 ;;		_DIGITOS
   273 ;;		_ENVIA_CHAR
   274 ;;		_ESCRIBE_MENSAJE
   275 ;;		_LCD_CONFIG
   276 ;;		_POS_CURSOR
   277 ;; This function is called by:
   278 ;;		Startup code after reset
   279 ;; This function uses a non-reentrant model
   280 ;;
   281                           
   282                           	psect	text0
   283  0009B2                     __ptext0:
   284                           	opt callstack 0
   285  0009B2                     _main:
   286                           	opt callstack 28
   287                           
   288                           ;vaguey2.c: 49:     TRISCbits.RC2 = 0;
   289                           
   290                           ;incstack = 0
   291  0009B2  9494               	bcf	3988,2,c	;volatile
   292                           
   293                           ;vaguey2.c: 50:     LATCbits.LC2 = 1;
   294  0009B4  848B               	bsf	3979,2,c	;volatile
   295                           
   296                           ;vaguey2.c: 51:     TRISD = 0x00;
   297  0009B6  0E00               	movlw	0
   298  0009B8  6E95               	movwf	3989,c	;volatile
   299                           
   300                           ;vaguey2.c: 52:     _delay((unsigned long)((500)*(48000000UL/4000.0)));
   301  0009BA  0E1F               	movlw	31
   302  0009BC  6E1E               	movwf	(??_main+1)& (0+255),c
   303  0009BE  0E71               	movlw	113
   304  0009C0  6E1D               	movwf	??_main& (0+255),c
   305  0009C2  0E1E               	movlw	30
   306  0009C4                     u297:
   307  0009C4  2EE8               	decfsz	wreg,f,c
   308  0009C6  D7FE               	bra	u297
   309  0009C8  2E1D               	decfsz	??_main& (0+255),f,c
   310  0009CA  D7FC               	bra	u297
   311  0009CC  2E1E               	decfsz	(??_main+1)& (0+255),f,c
   312  0009CE  D7FA               	bra	u297
   313  0009D0  D000               	nop2	
   314                           
   315                           ;vaguey2.c: 53:     LCD_CONFIG();
   316  0009D2  EC9C  F005         	call	_LCD_CONFIG	;wreg free
   317                           
   318                           ;vaguey2.c: 54:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   319  0009D6  0EEA               	movlw	234
   320  0009D8  6E1D               	movwf	??_main& (0+255),c
   321  0009DA  0EC3               	movlw	195
   322  0009DC                     u307:
   323  0009DC  2EE8               	decfsz	wreg,f,c
   324  0009DE  D7FE               	bra	u307
   325  0009E0  2E1D               	decfsz	??_main& (0+255),f,c
   326  0009E2  D7FC               	bra	u307
   327  0009E4  F000               	nop	
   328                           
   329                           ;vaguey2.c: 55:     CURSOR_ONOFF(1);
   330  0009E6  0E01               	movlw	1
   331  0009E8  EC54  F006         	call	_CURSOR_ONOFF
   332                           
   333                           ;vaguey2.c: 56:     ADC_CONFIG(0);
   334  0009EC  0E00               	movlw	0
   335  0009EE  EC81  F004         	call	_ADC_CONFIG
   336  0009F2                     l1303:
   337                           
   338                           ;vaguey2.c: 58:         CURSOR_HOME();
   339  0009F2  EC7B  F006         	call	_CURSOR_HOME	;wreg free
   340                           
   341                           ;vaguey2.c: 59:         ESCRIBE_MENSAJE("Lectura ADC:", 12);
   342  0009F6  0E01               	movlw	low STR_1
   343  0009F8  6E16               	movwf	ESCRIBE_MENSAJE@cadena,c
   344  0009FA  0E08               	movlw	high STR_1
   345  0009FC  6E17               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   346  0009FE  0E0C               	movlw	12
   347  000A00  6E18               	movwf	ESCRIBE_MENSAJE@tam,c
   348  000A02  EC00  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   349                           
   350                           ;vaguey2.c: 60:         resultaso = ADC_CONVERTIR();
   351  000A06  EC19  F006         	call	_ADC_CONVERTIR	;wreg free
   352  000A0A  C013  F011         	movff	?_ADC_CONVERTIR,_resultaso
   353  000A0E  C014  F012         	movff	?_ADC_CONVERTIR+1,_resultaso+1
   354                           
   355                           ;vaguey2.c: 61:         DIGITOS(resultaso);
   356  000A12  C011  F01B         	movff	_resultaso,DIGITOS@valor
   357  000A16  C012  F01C         	movff	_resultaso+1,DIGITOS@valor+1
   358  000A1A  EC08  F004         	call	_DIGITOS	;wreg free
   359                           
   360                           ;vaguey2.c: 62:         POS_CURSOR(2,0);
   361  000A1E  0E00               	movlw	0
   362  000A20  6E16               	movwf	POS_CURSOR@columna,c
   363  000A22  0E02               	movlw	2
   364  000A24  EC42  F006         	call	_POS_CURSOR
   365                           
   366                           ;vaguey2.c: 63:         ENVIA_CHAR(digdmi+0x30);
   367  000A28  500F               	movf	_digdmi,w,c
   368  000A2A  0F30               	addlw	48
   369  000A2C  ECCC  F005         	call	_ENVIA_CHAR
   370                           
   371                           ;vaguey2.c: 64:         ENVIA_CHAR(digmil+0x30);
   372  000A30  500D               	movf	_digmil,w,c
   373  000A32  0F30               	addlw	48
   374  000A34  ECCC  F005         	call	_ENVIA_CHAR
   375                           
   376                           ;vaguey2.c: 65:         ENVIA_CHAR(digcen+0x30);
   377  000A38  500B               	movf	_digcen,w,c
   378  000A3A  0F30               	addlw	48
   379  000A3C  ECCC  F005         	call	_ENVIA_CHAR
   380                           
   381                           ;vaguey2.c: 66:         ENVIA_CHAR(digdec+0x30);
   382  000A40  5009               	movf	_digdec,w,c
   383  000A42  0F30               	addlw	48
   384  000A44  ECCC  F005         	call	_ENVIA_CHAR
   385                           
   386                           ;vaguey2.c: 67:         ENVIA_CHAR(diguni+0x30);
   387  000A48  5007               	movf	_diguni,w,c
   388  000A4A  0F30               	addlw	48
   389  000A4C  ECCC  F005         	call	_ENVIA_CHAR
   390  000A50  D7D0               	goto	l1303
   391  000A52                     __end_of_main:
   392                           	opt callstack 0
   393                           
   394 ;; *************** function _POS_CURSOR *****************
   395 ;; Defined at:
   396 ;;		line 6 in file "LCD.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;  fila            1    wreg     unsigned char 
   399 ;;  columna         1    3[COMRAM] unsigned char 
   400 ;; Auto vars:     Size  Location     Type
   401 ;;  fila            1    4[COMRAM] unsigned char 
   402 ;; Return value:  Size  Location     Type
   403 ;;                  1    wreg      void 
   404 ;; Registers used:
   405 ;;		wreg, status,2, status,0, cstack
   406 ;; Tracked objects:
   407 ;;		On entry : 0/0
   408 ;;		On exit  : 0/0
   409 ;;		Unchanged: 0/0
   410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   411 ;;      Params:         1       0       0       0       0       0       0       0       0
   412 ;;      Locals:         1       0       0       0       0       0       0       0       0
   413 ;;      Temps:          0       0       0       0       0       0       0       0       0
   414 ;;      Totals:         2       0       0       0       0       0       0       0       0
   415 ;;Total ram usage:        2 bytes
   416 ;; Hardware stack levels used:    1
   417 ;; Hardware stack levels required when called:    2
   418 ;; This function calls:
   419 ;;		_ENVIA_LCD_CMD
   420 ;; This function is called by:
   421 ;;		_main
   422 ;; This function uses a non-reentrant model
   423 ;;
   424                           
   425                           	psect	text1
   426  000C84                     __ptext1:
   427                           	opt callstack 0
   428  000C84                     _POS_CURSOR:
   429                           	opt callstack 28
   430                           
   431                           ;incstack = 0
   432                           ;POS_CURSOR@fila stored from wreg
   433  000C84  6E17               	movwf	POS_CURSOR@fila,c
   434                           
   435                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   436  000C86  0417               	decf	POS_CURSOR@fila,w,c
   437  000C88  A4D8               	btfss	status,2,c
   438  000C8A  D005               	goto	l1265
   439                           
   440                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   441  000C8C  5016               	movf	POS_CURSOR@columna,w,c
   442  000C8E  0F80               	addlw	128
   443  000C90  ECE6  F005         	call	_ENVIA_LCD_CMD
   444                           
   445                           ;LCD.c: 11:  }
   446  000C94  0012               	return	
   447  000C96                     l1265:
   448  000C96  0E02               	movlw	2
   449  000C98  1817               	xorwf	POS_CURSOR@fila,w,c
   450  000C9A  A4D8               	btfss	status,2,c
   451  000C9C  0012               	return	
   452                           
   453                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   454  000C9E  5016               	movf	POS_CURSOR@columna,w,c
   455  000CA0  0FC0               	addlw	192
   456  000CA2  ECE6  F005         	call	_ENVIA_LCD_CMD
   457  000CA6  0012               	return		;funcret
   458  000CA8                     __end_of_POS_CURSOR:
   459                           	opt callstack 0
   460                           
   461 ;; *************** function _LCD_CONFIG *****************
   462 ;; Defined at:
   463 ;;		line 72 in file "LCD.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;		None
   466 ;; Auto vars:     Size  Location     Type
   467 ;;		None
   468 ;; Return value:  Size  Location     Type
   469 ;;                  1    wreg      void 
   470 ;; Registers used:
   471 ;;		wreg, status,2, status,0, cstack
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   477 ;;      Params:         0       0       0       0       0       0       0       0       0
   478 ;;      Locals:         0       0       0       0       0       0       0       0       0
   479 ;;      Temps:          1       0       0       0       0       0       0       0       0
   480 ;;      Totals:         1       0       0       0       0       0       0       0       0
   481 ;;Total ram usage:        1 bytes
   482 ;; Hardware stack levels used:    1
   483 ;; Hardware stack levels required when called:    2
   484 ;; This function calls:
   485 ;;		_ENVIA_LCD_CMD
   486 ;;		_ENVIA_NIBBLE
   487 ;; This function is called by:
   488 ;;		_main
   489 ;; This function uses a non-reentrant model
   490 ;;
   491                           
   492                           	psect	text2
   493  000B38                     __ptext2:
   494                           	opt callstack 0
   495  000B38                     _LCD_CONFIG:
   496                           	opt callstack 28
   497                           
   498                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   499                           
   500                           ;incstack = 0
   501  000B38  908C               	bcf	3980,0,c	;volatile
   502                           
   503                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   504  000B3A  928C               	bcf	3980,1,c	;volatile
   505                           
   506                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   507  000B3C  0E30               	movlw	48
   508  000B3E  EC62  F006         	call	_ENVIA_NIBBLE
   509                           
   510                           ;LCD.c: 77:         _delay(24000);
   511  000B42  0E20               	movlw	32
   512  000B44  6E16               	movwf	??_LCD_CONFIG& (0+255),c
   513  000B46  0E2A               	movlw	42
   514  000B48                     u317:
   515  000B48  2EE8               	decfsz	wreg,f,c
   516  000B4A  D7FE               	bra	u317
   517  000B4C  2E16               	decfsz	??_LCD_CONFIG& (0+255),f,c
   518  000B4E  D7FC               	bra	u317
   519                           
   520                           ;LCD.c: 78:         _delay(24000);
   521  000B50  0E20               	movlw	32
   522  000B52  6E16               	movwf	??_LCD_CONFIG& (0+255),c
   523  000B54  0E2A               	movlw	42
   524  000B56                     u327:
   525  000B56  2EE8               	decfsz	wreg,f,c
   526  000B58  D7FE               	bra	u327
   527  000B5A  2E16               	decfsz	??_LCD_CONFIG& (0+255),f,c
   528  000B5C  D7FC               	bra	u327
   529                           
   530                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   531  000B5E  0E30               	movlw	48
   532  000B60  EC62  F006         	call	_ENVIA_NIBBLE
   533                           
   534                           ;LCD.c: 83:  _delay(1200);
   535  000B64  0EF0               	movlw	240
   536  000B66                     u337:
   537  000B66  D000               	nop2	
   538  000B68  2EE8               	decfsz	wreg,f,c
   539  000B6A  D7FD               	bra	u337
   540                           
   541                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   542  000B6C  0E30               	movlw	48
   543  000B6E  EC62  F006         	call	_ENVIA_NIBBLE
   544                           
   545                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   546  000B72  0E20               	movlw	32
   547  000B74  EC62  F006         	call	_ENVIA_NIBBLE
   548                           
   549                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   550  000B78  0E01               	movlw	1
   551  000B7A  ECE6  F005         	call	_ENVIA_LCD_CMD
   552                           
   553                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   554  000B7E  0E28               	movlw	40
   555  000B80  ECE6  F005         	call	_ENVIA_LCD_CMD
   556                           
   557                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   558  000B84  0E0F               	movlw	15
   559  000B86  ECE6  F005         	call	_ENVIA_LCD_CMD
   560                           
   561                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   562  000B8A  0E06               	movlw	6
   563  000B8C  ECE6  F005         	call	_ENVIA_LCD_CMD
   564                           
   565                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   566  000B90  0E01               	movlw	1
   567  000B92  ECE6  F005         	call	_ENVIA_LCD_CMD
   568  000B96  0012               	return		;funcret
   569  000B98                     __end_of_LCD_CONFIG:
   570                           	opt callstack 0
   571                           
   572 ;; *************** function _ESCRIBE_MENSAJE *****************
   573 ;; Defined at:
   574 ;;		line 41 in file "LCD.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   577 ;;		 -> STR_1(13), 
   578 ;;  tam             1    5[COMRAM] unsigned char 
   579 ;; Auto vars:     Size  Location     Type
   580 ;;  i               1    8[COMRAM] unsigned char 
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   590 ;;      Params:         3       0       0       0       0       0       0       0       0
   591 ;;      Locals:         1       0       0       0       0       0       0       0       0
   592 ;;      Temps:          2       0       0       0       0       0       0       0       0
   593 ;;      Totals:         6       0       0       0       0       0       0       0       0
   594 ;;Total ram usage:        6 bytes
   595 ;; Hardware stack levels used:    1
   596 ;; Hardware stack levels required when called:    2
   597 ;; This function calls:
   598 ;;		_ENVIA_CHAR
   599 ;; This function is called by:
   600 ;;		_main
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           	psect	text3
   605  000C00                     __ptext3:
   606                           	opt callstack 0
   607  000C00                     _ESCRIBE_MENSAJE:
   608                           	opt callstack 28
   609                           
   610                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   611                           
   612                           ;incstack = 0
   613  000C00  0E00               	movlw	0
   614  000C02  6E1B               	movwf	ESCRIBE_MENSAJE@i,c
   615                           
   616                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   617  000C04  0E00               	movlw	0
   618  000C06  6E1B               	movwf	ESCRIBE_MENSAJE@i,c
   619  000C08  D00F               	goto	l1275
   620  000C0A                     l1271:
   621                           
   622                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   623  000C0A  501B               	movf	ESCRIBE_MENSAJE@i,w,c
   624  000C0C  2416               	addwf	ESCRIBE_MENSAJE@cadena,w,c
   625  000C0E  6E19               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
   626  000C10  0E00               	movlw	0
   627  000C12  2017               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
   628  000C14  6E1A               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
   629  000C16  C019  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   630  000C1A  C01A  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   631  000C1E                     	if	0	;tblptru may be non-zero
   632  000C1E                     	endif
   633  000C1E                     	if	0	;tblptru may be non-zero
   634  000C1E                     	endif
   635  000C1E  0008               	tblrd		*
   636  000C20  50F5               	movf	tablat,w,c
   637  000C22  ECCC  F005         	call	_ENVIA_CHAR
   638                           
   639                           ;LCD.c: 47:  }
   640  000C26  2A1B               	incf	ESCRIBE_MENSAJE@i,f,c
   641  000C28                     l1275:
   642  000C28  5018               	movf	ESCRIBE_MENSAJE@tam,w,c
   643  000C2A  5C1B               	subwf	ESCRIBE_MENSAJE@i,w,c
   644  000C2C  B0D8               	btfsc	status,0,c
   645  000C2E  0012               	return	
   646  000C30  D7EC               	goto	l1271
   647  000C32                     __end_of_ESCRIBE_MENSAJE:
   648                           	opt callstack 0
   649                           
   650 ;; *************** function _ENVIA_CHAR *****************
   651 ;; Defined at:
   652 ;;		line 50 in file "LCD.c"
   653 ;; Parameters:    Size  Location     Type
   654 ;;  dato            1    wreg     unsigned char 
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  dato            1    1[COMRAM] unsigned char 
   657 ;;  aux             1    2[COMRAM] unsigned char 
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, status,2, status,0, cstack
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   667 ;;      Params:         0       0       0       0       0       0       0       0       0
   668 ;;      Locals:         2       0       0       0       0       0       0       0       0
   669 ;;      Temps:          0       0       0       0       0       0       0       0       0
   670 ;;      Totals:         2       0       0       0       0       0       0       0       0
   671 ;;Total ram usage:        2 bytes
   672 ;; Hardware stack levels used:    1
   673 ;; Hardware stack levels required when called:    1
   674 ;; This function calls:
   675 ;;		_ENVIA_NIBBLE
   676 ;;		_LEER_LCD
   677 ;; This function is called by:
   678 ;;		_ESCRIBE_MENSAJE
   679 ;;		_main
   680 ;;		_GENERACARACTER
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           	psect	text4
   685  000B98                     __ptext4:
   686                           	opt callstack 0
   687  000B98                     _ENVIA_CHAR:
   688                           	opt callstack 28
   689                           
   690                           ;incstack = 0
   691                           ;ENVIA_CHAR@dato stored from wreg
   692  000B98  6E14               	movwf	ENVIA_CHAR@dato,c
   693                           
   694                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   695  000B9A  808C               	bsf	3980,0,c	;volatile
   696                           
   697                           ;LCD.c: 54:  LEER_LCD();
   698  000B9C  EC6B  F005         	call	_LEER_LCD	;wreg free
   699                           
   700                           ;LCD.c: 55:  TRISD = 0x00;
   701  000BA0  0E00               	movlw	0
   702  000BA2  6E95               	movwf	3989,c	;volatile
   703                           
   704                           ;LCD.c: 56:         _delay(1200);
   705  000BA4  0EF0               	movlw	240
   706  000BA6                     u347:
   707  000BA6  D000               	nop2	
   708  000BA8  2EE8               	decfsz	wreg,f,c
   709  000BAA  D7FD               	bra	u347
   710                           
   711                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
   712  000BAC  928C               	bcf	3980,1,c	;volatile
   713                           
   714                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
   715  000BAE  948C               	bcf	3980,2,c	;volatile
   716                           
   717                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
   718  000BB0  808C               	bsf	3980,0,c	;volatile
   719                           
   720                           ;LCD.c: 61:  aux = dato & 0xF0;
   721  000BB2  5014               	movf	ENVIA_CHAR@dato,w,c
   722  000BB4  0BF0               	andlw	240
   723  000BB6  6E15               	movwf	ENVIA_CHAR@aux,c
   724                           
   725                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
   726  000BB8  5015               	movf	ENVIA_CHAR@aux,w,c
   727  000BBA  EC62  F006         	call	_ENVIA_NIBBLE
   728                           
   729                           ;LCD.c: 63:  aux = dato << 4;
   730  000BBE  3814               	swapf	ENVIA_CHAR@dato,w,c
   731  000BC0  0BF0               	andlw	240
   732  000BC2  6E15               	movwf	ENVIA_CHAR@aux,c
   733                           
   734                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
   735  000BC4  5015               	movf	ENVIA_CHAR@aux,w,c
   736  000BC6  EC62  F006         	call	_ENVIA_NIBBLE
   737  000BCA  0012               	return		;funcret
   738  000BCC                     __end_of_ENVIA_CHAR:
   739                           	opt callstack 0
   740                           
   741 ;; *************** function _DIGITOS *****************
   742 ;; Defined at:
   743 ;;		line 37 in file "vaguey2.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  valor           2    8[COMRAM] int 
   746 ;; Auto vars:     Size  Location     Type
   747 ;;		None
   748 ;; Return value:  Size  Location     Type
   749 ;;                  1    wreg      void 
   750 ;; Registers used:
   751 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   757 ;;      Params:         2       0       0       0       0       0       0       0       0
   758 ;;      Locals:         0       0       0       0       0       0       0       0       0
   759 ;;      Temps:          0       0       0       0       0       0       0       0       0
   760 ;;      Totals:         2       0       0       0       0       0       0       0       0
   761 ;;Total ram usage:        2 bytes
   762 ;; Hardware stack levels used:    1
   763 ;; Hardware stack levels required when called:    1
   764 ;; This function calls:
   765 ;;		___awdiv
   766 ;;		___wmul
   767 ;; This function is called by:
   768 ;;		_main
   769 ;; This function uses a non-reentrant model
   770 ;;
   771                           
   772                           	psect	text5
   773  000810                     __ptext5:
   774                           	opt callstack 0
   775  000810                     _DIGITOS:
   776                           	opt callstack 29
   777                           
   778                           ;vaguey2.c: 38:     digdmi = valor / 10000;
   779                           
   780                           ;incstack = 0
   781  000810  C01B  F013         	movff	DIGITOS@valor,___awdiv@dividend
   782  000814  C01C  F014         	movff	DIGITOS@valor+1,___awdiv@dividend+1
   783  000818  0E27               	movlw	39
   784  00081A  6E16               	movwf	___awdiv@divisor+1,c
   785  00081C  0E10               	movlw	16
   786  00081E  6E15               	movwf	___awdiv@divisor,c
   787  000820  EC29  F005         	call	___awdiv	;wreg free
   788  000824  C013  F00F         	movff	?___awdiv,_digdmi
   789  000828  C014  F010         	movff	?___awdiv+1,_digdmi+1
   790                           
   791                           ;vaguey2.c: 39:     temporal3 = valor - (digdmi * 10000);
   792  00082C  C00F  F013         	movff	_digdmi,___wmul@multiplier
   793  000830  C010  F014         	movff	_digdmi+1,___wmul@multiplier+1
   794  000834  0ED8               	movlw	216
   795  000836  6E16               	movwf	___wmul@multiplicand+1,c
   796  000838  0EF0               	movlw	240
   797  00083A  6E15               	movwf	___wmul@multiplicand,c
   798  00083C  EC2F  F006         	call	___wmul	;wreg free
   799  000840  501B               	movf	DIGITOS@valor,w,c
   800  000842  2413               	addwf	?___wmul,w,c
   801  000844  6E01               	movwf	_temporal3,c
   802  000846  501C               	movf	DIGITOS@valor+1,w,c
   803  000848  2014               	addwfc	?___wmul+1,w,c
   804  00084A  6E02               	movwf	_temporal3+1,c
   805                           
   806                           ;vaguey2.c: 40:     digmil = temporal3 / 1000;
   807  00084C  C001  F013         	movff	_temporal3,___awdiv@dividend
   808  000850  C002  F014         	movff	_temporal3+1,___awdiv@dividend+1
   809  000854  0E03               	movlw	3
   810  000856  6E16               	movwf	___awdiv@divisor+1,c
   811  000858  0EE8               	movlw	232
   812  00085A  6E15               	movwf	___awdiv@divisor,c
   813  00085C  EC29  F005         	call	___awdiv	;wreg free
   814  000860  C013  F00D         	movff	?___awdiv,_digmil
   815  000864  C014  F00E         	movff	?___awdiv+1,_digmil+1
   816                           
   817                           ;vaguey2.c: 41:     temporal = temporal3 - (digmil * 1000);
   818  000868  C00D  F013         	movff	_digmil,___wmul@multiplier
   819  00086C  C00E  F014         	movff	_digmil+1,___wmul@multiplier+1
   820  000870  0EFC               	movlw	252
   821  000872  6E16               	movwf	___wmul@multiplicand+1,c
   822  000874  0E18               	movlw	24
   823  000876  6E15               	movwf	___wmul@multiplicand,c
   824  000878  EC2F  F006         	call	___wmul	;wreg free
   825  00087C  5001               	movf	_temporal3,w,c
   826  00087E  2413               	addwf	?___wmul,w,c
   827  000880  6E05               	movwf	_temporal,c
   828  000882  5002               	movf	_temporal3+1,w,c
   829  000884  2014               	addwfc	?___wmul+1,w,c
   830  000886  6E06               	movwf	_temporal+1,c
   831                           
   832                           ;vaguey2.c: 42:     digcen = temporal / 100;
   833  000888  C005  F013         	movff	_temporal,___awdiv@dividend
   834  00088C  C006  F014         	movff	_temporal+1,___awdiv@dividend+1
   835  000890  0E00               	movlw	0
   836  000892  6E16               	movwf	___awdiv@divisor+1,c
   837  000894  0E64               	movlw	100
   838  000896  6E15               	movwf	___awdiv@divisor,c
   839  000898  EC29  F005         	call	___awdiv	;wreg free
   840  00089C  C013  F00B         	movff	?___awdiv,_digcen
   841  0008A0  C014  F00C         	movff	?___awdiv+1,_digcen+1
   842                           
   843                           ;vaguey2.c: 43:     temporal2 = temporal - (digcen * 100);
   844  0008A4  C00B  F013         	movff	_digcen,___wmul@multiplier
   845  0008A8  C00C  F014         	movff	_digcen+1,___wmul@multiplier+1
   846  0008AC  0EFF               	movlw	255
   847  0008AE  6E16               	movwf	___wmul@multiplicand+1,c
   848  0008B0  0E9C               	movlw	156
   849  0008B2  6E15               	movwf	___wmul@multiplicand,c
   850  0008B4  EC2F  F006         	call	___wmul	;wreg free
   851  0008B8  5005               	movf	_temporal,w,c
   852  0008BA  2413               	addwf	?___wmul,w,c
   853  0008BC  6E03               	movwf	_temporal2,c
   854  0008BE  5006               	movf	_temporal+1,w,c
   855  0008C0  2014               	addwfc	?___wmul+1,w,c
   856  0008C2  6E04               	movwf	_temporal2+1,c
   857                           
   858                           ;vaguey2.c: 44:     digdec = temporal2 / 10;
   859  0008C4  C003  F013         	movff	_temporal2,___awdiv@dividend
   860  0008C8  C004  F014         	movff	_temporal2+1,___awdiv@dividend+1
   861  0008CC  0E00               	movlw	0
   862  0008CE  6E16               	movwf	___awdiv@divisor+1,c
   863  0008D0  0E0A               	movlw	10
   864  0008D2  6E15               	movwf	___awdiv@divisor,c
   865  0008D4  EC29  F005         	call	___awdiv	;wreg free
   866  0008D8  C013  F009         	movff	?___awdiv,_digdec
   867  0008DC  C014  F00A         	movff	?___awdiv+1,_digdec+1
   868                           
   869                           ;vaguey2.c: 45:     diguni = temporal2 - (digdec * 10);
   870  0008E0  C009  F013         	movff	_digdec,___wmul@multiplier
   871  0008E4  C00A  F014         	movff	_digdec+1,___wmul@multiplier+1
   872  0008E8  0EFF               	movlw	255
   873  0008EA  6E16               	movwf	___wmul@multiplicand+1,c
   874  0008EC  0EF6               	movlw	246
   875  0008EE  6E15               	movwf	___wmul@multiplicand,c
   876  0008F0  EC2F  F006         	call	___wmul	;wreg free
   877  0008F4  5003               	movf	_temporal2,w,c
   878  0008F6  2413               	addwf	?___wmul,w,c
   879  0008F8  6E07               	movwf	_diguni,c
   880  0008FA  5004               	movf	_temporal2+1,w,c
   881  0008FC  2014               	addwfc	?___wmul+1,w,c
   882  0008FE  6E08               	movwf	_diguni+1,c
   883  000900  0012               	return		;funcret
   884  000902                     __end_of_DIGITOS:
   885                           	opt callstack 0
   886                           
   887 ;; *************** function ___wmul *****************
   888 ;; Defined at:
   889 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;  multiplier      2    0[COMRAM] unsigned int 
   892 ;;  multiplicand    2    2[COMRAM] unsigned int 
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  product         2    4[COMRAM] unsigned int 
   895 ;; Return value:  Size  Location     Type
   896 ;;                  2    0[COMRAM] unsigned int 
   897 ;; Registers used:
   898 ;;		wreg, status,2, status,0, prodl, prodh
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   904 ;;      Params:         4       0       0       0       0       0       0       0       0
   905 ;;      Locals:         2       0       0       0       0       0       0       0       0
   906 ;;      Temps:          0       0       0       0       0       0       0       0       0
   907 ;;      Totals:         6       0       0       0       0       0       0       0       0
   908 ;;Total ram usage:        6 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; This function calls:
   911 ;;		Nothing
   912 ;; This function is called by:
   913 ;;		_DIGITOS
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text6
   918  000C5E                     __ptext6:
   919                           	opt callstack 0
   920  000C5E                     ___wmul:
   921                           	opt callstack 29
   922                           
   923                           ;incstack = 0
   924  000C5E  5013               	movf	___wmul@multiplier,w,c
   925  000C60  0215               	mulwf	___wmul@multiplicand,c
   926  000C62  CFF3 F017          	movff	prodl,___wmul@product
   927  000C66  CFF4 F018          	movff	prodh,___wmul@product+1
   928  000C6A  5013               	movf	___wmul@multiplier,w,c
   929  000C6C  0216               	mulwf	___wmul@multiplicand+1,c
   930  000C6E  50F3               	movf	prodl,w,c
   931  000C70  2618               	addwf	___wmul@product+1,f,c
   932  000C72  5014               	movf	___wmul@multiplier+1,w,c
   933  000C74  0215               	mulwf	___wmul@multiplicand,c
   934  000C76  50F3               	movf	prodl,w,c
   935  000C78  2618               	addwf	___wmul@product+1,f,c
   936  000C7A  C017  F013         	movff	___wmul@product,?___wmul
   937  000C7E  C018  F014         	movff	___wmul@product+1,?___wmul+1
   938  000C82  0012               	return		;funcret
   939  000C84                     __end_of___wmul:
   940                           	opt callstack 0
   941                           
   942 ;; *************** function ___awdiv *****************
   943 ;; Defined at:
   944 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;  dividend        2    0[COMRAM] int 
   947 ;;  divisor         2    2[COMRAM] int 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  quotient        2    6[COMRAM] int 
   950 ;;  sign            1    5[COMRAM] unsigned char 
   951 ;;  counter         1    4[COMRAM] unsigned char 
   952 ;; Return value:  Size  Location     Type
   953 ;;                  2    0[COMRAM] int 
   954 ;; Registers used:
   955 ;;		wreg, status,2, status,0
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   961 ;;      Params:         4       0       0       0       0       0       0       0       0
   962 ;;      Locals:         4       0       0       0       0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0       0       0       0       0
   964 ;;      Totals:         8       0       0       0       0       0       0       0       0
   965 ;;Total ram usage:        8 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; This function calls:
   968 ;;		Nothing
   969 ;; This function is called by:
   970 ;;		_DIGITOS
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           	psect	text7
   975  000A52                     __ptext7:
   976                           	opt callstack 0
   977  000A52                     ___awdiv:
   978                           	opt callstack 29
   979                           
   980                           ;incstack = 0
   981  000A52  0E00               	movlw	0
   982  000A54  6E18               	movwf	___awdiv@sign,c
   983  000A56  AE16               	btfss	___awdiv@divisor+1,7,c
   984  000A58  D006               	goto	l1213
   985  000A5A  6C15               	negf	___awdiv@divisor,c
   986  000A5C  1E16               	comf	___awdiv@divisor+1,f,c
   987  000A5E  B0D8               	btfsc	status,0,c
   988  000A60  2A16               	incf	___awdiv@divisor+1,f,c
   989  000A62  0E01               	movlw	1
   990  000A64  6E18               	movwf	___awdiv@sign,c
   991  000A66                     l1213:
   992  000A66  AE14               	btfss	___awdiv@dividend+1,7,c
   993  000A68  D006               	goto	l1219
   994  000A6A  6C13               	negf	___awdiv@dividend,c
   995  000A6C  1E14               	comf	___awdiv@dividend+1,f,c
   996  000A6E  B0D8               	btfsc	status,0,c
   997  000A70  2A14               	incf	___awdiv@dividend+1,f,c
   998  000A72  0E01               	movlw	1
   999  000A74  1A18               	xorwf	___awdiv@sign,f,c
  1000  000A76                     l1219:
  1001  000A76  0E00               	movlw	0
  1002  000A78  6E1A               	movwf	___awdiv@quotient+1,c
  1003  000A7A  0E00               	movlw	0
  1004  000A7C  6E19               	movwf	___awdiv@quotient,c
  1005  000A7E  5015               	movf	___awdiv@divisor,w,c
  1006  000A80  1016               	iorwf	___awdiv@divisor+1,w,c
  1007  000A82  B4D8               	btfsc	status,2,c
  1008  000A84  D01C               	goto	l1241
  1009  000A86  0E01               	movlw	1
  1010  000A88  6E17               	movwf	___awdiv@counter,c
  1011  000A8A  D004               	goto	l1227
  1012  000A8C                     l1225:
  1013  000A8C  90D8               	bcf	status,0,c
  1014  000A8E  3615               	rlcf	___awdiv@divisor,f,c
  1015  000A90  3616               	rlcf	___awdiv@divisor+1,f,c
  1016  000A92  2A17               	incf	___awdiv@counter,f,c
  1017  000A94                     l1227:
  1018  000A94  AE16               	btfss	___awdiv@divisor+1,7,c
  1019  000A96  D7FA               	goto	l1225
  1020  000A98                     u220:
  1021  000A98  90D8               	bcf	status,0,c
  1022  000A9A  3619               	rlcf	___awdiv@quotient,f,c
  1023  000A9C  361A               	rlcf	___awdiv@quotient+1,f,c
  1024  000A9E  5015               	movf	___awdiv@divisor,w,c
  1025  000AA0  5C13               	subwf	___awdiv@dividend,w,c
  1026  000AA2  5016               	movf	___awdiv@divisor+1,w,c
  1027  000AA4  5814               	subwfb	___awdiv@dividend+1,w,c
  1028  000AA6  A0D8               	btfss	status,0,c
  1029  000AA8  D005               	goto	l1237
  1030  000AAA  5015               	movf	___awdiv@divisor,w,c
  1031  000AAC  5E13               	subwf	___awdiv@dividend,f,c
  1032  000AAE  5016               	movf	___awdiv@divisor+1,w,c
  1033  000AB0  5A14               	subwfb	___awdiv@dividend+1,f,c
  1034  000AB2  8019               	bsf	___awdiv@quotient,0,c
  1035  000AB4                     l1237:
  1036  000AB4  90D8               	bcf	status,0,c
  1037  000AB6  3216               	rrcf	___awdiv@divisor+1,f,c
  1038  000AB8  3215               	rrcf	___awdiv@divisor,f,c
  1039  000ABA  2E17               	decfsz	___awdiv@counter,f,c
  1040  000ABC  D7ED               	goto	u220
  1041  000ABE                     l1241:
  1042  000ABE  5018               	movf	___awdiv@sign,w,c
  1043  000AC0  B4D8               	btfsc	status,2,c
  1044  000AC2  D004               	goto	l1245
  1045  000AC4  6C19               	negf	___awdiv@quotient,c
  1046  000AC6  1E1A               	comf	___awdiv@quotient+1,f,c
  1047  000AC8  B0D8               	btfsc	status,0,c
  1048  000ACA  2A1A               	incf	___awdiv@quotient+1,f,c
  1049  000ACC                     l1245:
  1050  000ACC  C019  F013         	movff	___awdiv@quotient,?___awdiv
  1051  000AD0  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  1052  000AD4  0012               	return		;funcret
  1053  000AD6                     __end_of___awdiv:
  1054                           	opt callstack 0
  1055                           
  1056 ;; *************** function _CURSOR_ONOFF *****************
  1057 ;; Defined at:
  1058 ;;		line 35 in file "LCD.c"
  1059 ;; Parameters:    Size  Location     Type
  1060 ;;  estado          1    wreg     unsigned char 
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;  estado          1    3[COMRAM] unsigned char 
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  1    wreg      void 
  1065 ;; Registers used:
  1066 ;;		wreg, status,2, status,0, cstack
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1072 ;;      Params:         0       0       0       0       0       0       0       0       0
  1073 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1074 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1075 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1076 ;;Total ram usage:        1 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; Hardware stack levels required when called:    2
  1079 ;; This function calls:
  1080 ;;		_ENVIA_LCD_CMD
  1081 ;; This function is called by:
  1082 ;;		_main
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           	psect	text8
  1087  000CA8                     __ptext8:
  1088                           	opt callstack 0
  1089  000CA8                     _CURSOR_ONOFF:
  1090                           	opt callstack 28
  1091                           
  1092                           ;incstack = 0
  1093                           ;CURSOR_ONOFF@estado stored from wreg
  1094  000CA8  6E16               	movwf	CURSOR_ONOFF@estado,c
  1095                           
  1096                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1097  000CAA  5016               	movf	CURSOR_ONOFF@estado,w,c
  1098  000CAC  A4D8               	btfss	status,2,c
  1099  000CAE  D003               	goto	l1079
  1100  000CB0  0E0E               	movlw	14
  1101  000CB2  ECE6  F005         	call	_ENVIA_LCD_CMD
  1102  000CB6                     l1079:
  1103                           
  1104                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1105  000CB6  0416               	decf	CURSOR_ONOFF@estado,w,c
  1106  000CB8  A4D8               	btfss	status,2,c
  1107  000CBA  0012               	return	
  1108  000CBC  0E0C               	movlw	12
  1109  000CBE  ECE6  F005         	call	_ENVIA_LCD_CMD
  1110  000CC2  0012               	return		;funcret
  1111  000CC4                     __end_of_CURSOR_ONOFF:
  1112                           	opt callstack 0
  1113                           
  1114 ;; *************** function _CURSOR_HOME *****************
  1115 ;; Defined at:
  1116 ;;		line 30 in file "LCD.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;		None
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, status,2, status,0, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1130 ;;      Params:         0       0       0       0       0       0       0       0       0
  1131 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1132 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1133 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1134 ;;Total ram usage:        0 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    2
  1137 ;; This function calls:
  1138 ;;		_ENVIA_LCD_CMD
  1139 ;; This function is called by:
  1140 ;;		_main
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text9
  1145  000CF6                     __ptext9:
  1146                           	opt callstack 0
  1147  000CF6                     _CURSOR_HOME:
  1148                           	opt callstack 28
  1149                           
  1150                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1151                           
  1152                           ;incstack = 0
  1153  000CF6  0E02               	movlw	2
  1154  000CF8  ECE6  F005         	call	_ENVIA_LCD_CMD
  1155  000CFC  0012               	return		;funcret
  1156  000CFE                     __end_of_CURSOR_HOME:
  1157                           	opt callstack 0
  1158                           
  1159 ;; *************** function _ENVIA_LCD_CMD *****************
  1160 ;; Defined at:
  1161 ;;		line 104 in file "LCD.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  dato            1    wreg     unsigned char 
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  dato            1    1[COMRAM] unsigned char 
  1166 ;;  aux             1    2[COMRAM] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		wreg, status,2, status,0, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1176 ;;      Params:         0       0       0       0       0       0       0       0       0
  1177 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1179 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1180 ;;Total ram usage:        2 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    1
  1183 ;; This function calls:
  1184 ;;		_ENVIA_NIBBLE
  1185 ;;		_LEER_LCD
  1186 ;; This function is called by:
  1187 ;;		_POS_CURSOR
  1188 ;;		_CURSOR_HOME
  1189 ;;		_CURSOR_ONOFF
  1190 ;;		_LCD_CONFIG
  1191 ;;		_BLINK_CURSOR
  1192 ;;		_DISPLAY_ONOFF
  1193 ;;		_BORRAR_LCD
  1194 ;;		_GENERACARACTER
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text10
  1199  000BCC                     __ptext10:
  1200                           	opt callstack 0
  1201  000BCC                     _ENVIA_LCD_CMD:
  1202                           	opt callstack 28
  1203                           
  1204                           ;incstack = 0
  1205                           ;ENVIA_LCD_CMD@dato stored from wreg
  1206  000BCC  6E14               	movwf	ENVIA_LCD_CMD@dato,c
  1207                           
  1208                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1209  000BCE  908C               	bcf	3980,0,c	;volatile
  1210                           
  1211                           ;LCD.c: 108:  LEER_LCD();
  1212  000BD0  EC6B  F005         	call	_LEER_LCD	;wreg free
  1213                           
  1214                           ;LCD.c: 109:  TRISD = 0b00000000;
  1215  000BD4  0E00               	movlw	0
  1216  000BD6  6E95               	movwf	3989,c	;volatile
  1217                           
  1218                           ;LCD.c: 111:         _delay(1200);
  1219  000BD8  0EF0               	movlw	240
  1220  000BDA                     u357:
  1221  000BDA  D000               	nop2	
  1222  000BDC  2EE8               	decfsz	wreg,f,c
  1223  000BDE  D7FD               	bra	u357
  1224                           
  1225                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1226  000BE0  928C               	bcf	3980,1,c	;volatile
  1227                           
  1228                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1229  000BE2  948C               	bcf	3980,2,c	;volatile
  1230                           
  1231                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1232  000BE4  908C               	bcf	3980,0,c	;volatile
  1233                           
  1234                           ;LCD.c: 115:  aux = dato & 0xF0;
  1235  000BE6  5014               	movf	ENVIA_LCD_CMD@dato,w,c
  1236  000BE8  0BF0               	andlw	240
  1237  000BEA  6E15               	movwf	ENVIA_LCD_CMD@aux,c
  1238                           
  1239                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1240  000BEC  5015               	movf	ENVIA_LCD_CMD@aux,w,c
  1241  000BEE  EC62  F006         	call	_ENVIA_NIBBLE
  1242                           
  1243                           ;LCD.c: 117:  aux = dato<<4;
  1244  000BF2  3814               	swapf	ENVIA_LCD_CMD@dato,w,c
  1245  000BF4  0BF0               	andlw	240
  1246  000BF6  6E15               	movwf	ENVIA_LCD_CMD@aux,c
  1247                           
  1248                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1249  000BF8  5015               	movf	ENVIA_LCD_CMD@aux,w,c
  1250  000BFA  EC62  F006         	call	_ENVIA_NIBBLE
  1251  000BFE  0012               	return		;funcret
  1252  000C00                     __end_of_ENVIA_LCD_CMD:
  1253                           	opt callstack 0
  1254                           
  1255 ;; *************** function _LEER_LCD *****************
  1256 ;; Defined at:
  1257 ;;		line 121 in file "LCD.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;		None
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;  aux             1    0[COMRAM] unsigned char 
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  1    wreg      void 
  1264 ;; Registers used:
  1265 ;;		wreg, status,2, status,0
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1271 ;;      Params:         0       0       0       0       0       0       0       0       0
  1272 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1273 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1274 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1275 ;;Total ram usage:        1 bytes
  1276 ;; Hardware stack levels used:    1
  1277 ;; This function calls:
  1278 ;;		Nothing
  1279 ;; This function is called by:
  1280 ;;		_ENVIA_CHAR
  1281 ;;		_ENVIA_LCD_CMD
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text11
  1286  000AD6                     __ptext11:
  1287                           	opt callstack 0
  1288  000AD6                     _LEER_LCD:
  1289                           	opt callstack 28
  1290                           
  1291                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1292                           
  1293                           ;incstack = 0
  1294  000AD6  0EF8               	movlw	248
  1295  000AD8  6E95               	movwf	3989,c	;volatile
  1296                           
  1297                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1298  000ADA  908C               	bcf	3980,0,c	;volatile
  1299                           
  1300                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1301  000ADC  828C               	bsf	3980,1,c	;volatile
  1302                           
  1303                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1304  000ADE  848C               	bsf	3980,2,c	;volatile
  1305                           
  1306                           ;LCD.c: 128:         _delay(1200);
  1307  000AE0  0EF0               	movlw	240
  1308  000AE2                     u367:
  1309  000AE2  D000               	nop2	
  1310  000AE4  2EE8               	decfsz	wreg,f,c
  1311  000AE6  D7FD               	bra	u367
  1312                           
  1313                           ;LCD.c: 130:  aux = PORTD;
  1314  000AE8  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1315                           
  1316                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1317  000AEC  948C               	bcf	3980,2,c	;volatile
  1318                           
  1319                           ;LCD.c: 132:         _delay(1200);
  1320  000AEE  0EF0               	movlw	240
  1321  000AF0                     u377:
  1322  000AF0  D000               	nop2	
  1323  000AF2  2EE8               	decfsz	wreg,f,c
  1324  000AF4  D7FD               	bra	u377
  1325                           
  1326                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1327  000AF6  848C               	bsf	3980,2,c	;volatile
  1328                           
  1329                           ;LCD.c: 135:         _delay(1200);
  1330  000AF8  0EF0               	movlw	240
  1331  000AFA                     u387:
  1332  000AFA  D000               	nop2	
  1333  000AFC  2EE8               	decfsz	wreg,f,c
  1334  000AFE  D7FD               	bra	u387
  1335  000B00                     l865:
  1336                           
  1337                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1338  000B00  948C               	bcf	3980,2,c	;volatile
  1339                           
  1340                           ;LCD.c: 138:  aux = aux & 0x80;
  1341  000B02  5013               	movf	LEER_LCD@aux,w,c
  1342  000B04  0B80               	andlw	128
  1343  000B06  6E13               	movwf	LEER_LCD@aux,c
  1344                           
  1345                           ;LCD.c: 139:  while(aux == 0x80)
  1346  000B08  D012               	goto	l881
  1347  000B0A                     l109:
  1348                           
  1349                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1350  000B0A  848C               	bsf	3980,2,c	;volatile
  1351                           
  1352                           ;LCD.c: 142:             _delay(1200);
  1353  000B0C  0EF0               	movlw	240
  1354  000B0E                     u397:
  1355  000B0E  D000               	nop2	
  1356  000B10  2EE8               	decfsz	wreg,f,c
  1357  000B12  D7FD               	bra	u397
  1358                           
  1359                           ;LCD.c: 143:             aux = PORTD;
  1360  000B14  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1361                           
  1362                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1363  000B18  948C               	bcf	3980,2,c	;volatile
  1364                           
  1365                           ;LCD.c: 145:             _delay(1200);
  1366  000B1A  0EF0               	movlw	240
  1367  000B1C                     u407:
  1368  000B1C  D000               	nop2	
  1369  000B1E  2EE8               	decfsz	wreg,f,c
  1370  000B20  D7FD               	bra	u407
  1371                           
  1372                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1373  000B22  848C               	bsf	3980,2,c	;volatile
  1374                           
  1375                           ;LCD.c: 147:             _delay(1200);
  1376  000B24  0EF0               	movlw	240
  1377  000B26                     u417:
  1378  000B26  D000               	nop2	
  1379  000B28  2EE8               	decfsz	wreg,f,c
  1380  000B2A  D7FD               	bra	u417
  1381  000B2C  D7E9               	goto	l865
  1382  000B2E                     l881:
  1383                           
  1384                           ;LCD.c: 139:  while(aux == 0x80)
  1385  000B2E  0E80               	movlw	128
  1386  000B30  1813               	xorwf	LEER_LCD@aux,w,c
  1387  000B32  A4D8               	btfss	status,2,c
  1388  000B34  0012               	return	
  1389  000B36  D7E9               	goto	l109
  1390  000B38                     __end_of_LEER_LCD:
  1391                           	opt callstack 0
  1392                           
  1393 ;; *************** function _ENVIA_NIBBLE *****************
  1394 ;; Defined at:
  1395 ;;		line 93 in file "LCD.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;  dato            1    wreg     unsigned char 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  dato            1    0[COMRAM] unsigned char 
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  1    wreg      void 
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1409 ;;      Params:         0       0       0       0       0       0       0       0       0
  1410 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1411 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1412 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1413 ;;Total ram usage:        1 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; This function calls:
  1416 ;;		Nothing
  1417 ;; This function is called by:
  1418 ;;		_ENVIA_CHAR
  1419 ;;		_LCD_CONFIG
  1420 ;;		_ENVIA_LCD_CMD
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text12
  1425  000CC4                     __ptext12:
  1426                           	opt callstack 0
  1427  000CC4                     _ENVIA_NIBBLE:
  1428                           	opt callstack 28
  1429                           
  1430                           ;incstack = 0
  1431                           ;ENVIA_NIBBLE@dato stored from wreg
  1432  000CC4  6E13               	movwf	ENVIA_NIBBLE@dato,c
  1433                           
  1434                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1435  000CC6  0E0F               	movlw	15
  1436  000CC8  168C               	andwf	3980,f,c	;volatile
  1437                           
  1438                           ;LCD.c: 96:  dato &= 0xF0;
  1439  000CCA  0EF0               	movlw	240
  1440  000CCC  1613               	andwf	ENVIA_NIBBLE@dato,f,c
  1441                           
  1442                           ;LCD.c: 97:  LATD|= dato;
  1443  000CCE  5013               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1444  000CD0  128C               	iorwf	3980,f,c	;volatile
  1445                           
  1446                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1447  000CD2  848C               	bsf	3980,2,c	;volatile
  1448                           
  1449                           ;LCD.c: 100:         _delay(1200);
  1450  000CD4  0EF0               	movlw	240
  1451  000CD6                     u427:
  1452  000CD6  D000               	nop2	
  1453  000CD8  2EE8               	decfsz	wreg,f,c
  1454  000CDA  D7FD               	bra	u427
  1455                           
  1456                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1457  000CDC  948C               	bcf	3980,2,c	;volatile
  1458  000CDE  0012               	return		;funcret
  1459  000CE0                     __end_of_ENVIA_NIBBLE:
  1460                           	opt callstack 0
  1461                           
  1462 ;; *************** function _ADC_CONVERTIR *****************
  1463 ;; Defined at:
  1464 ;;		line 69 in file "ADC.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;		None
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  num             2    3[COMRAM] int 
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  2    0[COMRAM] int 
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1478 ;;      Params:         2       0       0       0       0       0       0       0       0
  1479 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1480 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1481 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1482 ;;Total ram usage:        5 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; This function calls:
  1485 ;;		Nothing
  1486 ;; This function is called by:
  1487 ;;		_main
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text13
  1492  000C32                     __ptext13:
  1493                           	opt callstack 0
  1494  000C32                     _ADC_CONVERTIR:
  1495                           	opt callstack 30
  1496                           
  1497                           ;ADC.c: 71:  int num;;ADC.c: 72:  ADCON0bits.GO = 1;
  1498                           
  1499                           ;incstack = 0
  1500  000C32  82C2               	bsf	4034,1,c	;volatile
  1501  000C34                     l39:
  1502  000C34  B2C2               	btfsc	4034,1,c	;volatile
  1503  000C36  D7FE               	goto	l39
  1504                           
  1505                           ;ADC.c: 74:  num = 0x03 & ADRESH;
  1506  000C38  CFC4 F015          	movff	4036,??_ADC_CONVERTIR	;volatile
  1507  000C3C  0E03               	movlw	3
  1508  000C3E  1615               	andwf	??_ADC_CONVERTIR,f,c
  1509  000C40  5015               	movf	??_ADC_CONVERTIR,w,c
  1510  000C42  6E16               	movwf	ADC_CONVERTIR@num,c
  1511  000C44  6A17               	clrf	ADC_CONVERTIR@num+1,c
  1512                           
  1513                           ;ADC.c: 75:  num<<= 8;
  1514  000C46  5016               	movf	ADC_CONVERTIR@num,w,c
  1515  000C48  6E17               	movwf	ADC_CONVERTIR@num+1,c
  1516  000C4A  6A16               	clrf	ADC_CONVERTIR@num,c
  1517                           
  1518                           ;ADC.c: 76:  num +=ADRESL;
  1519  000C4C  50C3               	movf	4035,w,c	;volatile
  1520  000C4E  2616               	addwf	ADC_CONVERTIR@num,f,c
  1521  000C50  0E00               	movlw	0
  1522  000C52  2217               	addwfc	ADC_CONVERTIR@num+1,f,c
  1523                           
  1524                           ;ADC.c: 77:  return(num);
  1525  000C54  C016  F013         	movff	ADC_CONVERTIR@num,?_ADC_CONVERTIR
  1526  000C58  C017  F014         	movff	ADC_CONVERTIR@num+1,?_ADC_CONVERTIR+1
  1527  000C5C  0012               	return		;funcret
  1528  000C5E                     __end_of_ADC_CONVERTIR:
  1529                           	opt callstack 0
  1530                           
  1531 ;; *************** function _ADC_CONFIG *****************
  1532 ;; Defined at:
  1533 ;;		line 6 in file "ADC.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  canal           1    wreg     unsigned char 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  canal           1    2[COMRAM] unsigned char 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1547 ;;      Params:         0       0       0       0       0       0       0       0       0
  1548 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1549 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1550 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1551 ;;Total ram usage:        3 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; This function calls:
  1554 ;;		Nothing
  1555 ;; This function is called by:
  1556 ;;		_main
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text14
  1561  000902                     __ptext14:
  1562                           	opt callstack 0
  1563  000902                     _ADC_CONFIG:
  1564                           	opt callstack 30
  1565                           
  1566                           ;incstack = 0
  1567                           ;ADC_CONFIG@canal stored from wreg
  1568  000902  6E15               	movwf	ADC_CONFIG@canal,c
  1569                           
  1570                           ;ADC.c: 6: void ADC_CONFIG(char canal);ADC.c: 7: {;ADC.c: 8:  TRISA = 0xFF;
  1571  000904  6892               	setf	3986,c	;volatile
  1572                           
  1573                           ;ADC.c: 9:  TRISE = 0xFF;
  1574  000906  6896               	setf	3990,c	;volatile
  1575                           
  1576                           ;ADC.c: 10:  TRISB = 0x0F;
  1577  000908  0E0F               	movlw	15
  1578  00090A  6E93               	movwf	3987,c	;volatile
  1579                           
  1580                           ;ADC.c: 11:  switch(canal)
  1581  00090C  D01F               	goto	l1043
  1582  00090E                     l989:
  1583                           
  1584                           ;ADC.c: 14:    ADCON1=0x0E;
  1585  00090E  0E0E               	movlw	14
  1586  000910                     L1:
  1587  000910  6EC1               	movwf	4033,c	;volatile
  1588                           
  1589                           ;ADC.c: 15:    ADCON0=canal<<2;
  1590  000912  4415               	rlncf	ADC_CONFIG@canal,w,c
  1591  000914  46E8               	rlncf	wreg,f,c
  1592  000916  0BFC               	andlw	252
  1593  000918  6EC2               	movwf	4034,c	;volatile
  1594                           
  1595                           ;ADC.c: 16:   break;
  1596  00091A  D047               	goto	l1045
  1597  00091C                     l993:
  1598                           
  1599                           ;ADC.c: 18:    ADCON1=0x0D;
  1600  00091C  0E0D               	movlw	13
  1601  00091E  D7F8               	goto	L1
  1602  000920                     l997:
  1603                           
  1604                           ;ADC.c: 22:    ADCON1=0x0C;
  1605  000920  0E0C               	movlw	12
  1606  000922  D7F6               	goto	L1
  1607  000924                     l1001:
  1608                           
  1609                           ;ADC.c: 26:    ADCON1=0x0B;
  1610  000924  0E0B               	movlw	11
  1611  000926  D7F4               	goto	L1
  1612  000928                     l1005:
  1613                           
  1614                           ;ADC.c: 30:    ADCON1=0x0A;
  1615  000928  0E0A               	movlw	10
  1616  00092A  D7F2               	goto	L1
  1617  00092C                     l1009:
  1618                           
  1619                           ;ADC.c: 34:    ADCON1=0x09;
  1620  00092C  0E09               	movlw	9
  1621  00092E  D7F0               	goto	L1
  1622  000930                     l1013:
  1623                           
  1624                           ;ADC.c: 38:    ADCON1=0x08;
  1625  000930  0E08               	movlw	8
  1626  000932  D7EE               	goto	L1
  1627  000934                     l1017:
  1628                           
  1629                           ;ADC.c: 42:    ADCON1=0x07;
  1630  000934  0E07               	movlw	7
  1631  000936  D7EC               	goto	L1
  1632  000938                     l1021:
  1633                           
  1634                           ;ADC.c: 46:    ADCON1=0x06;
  1635  000938  0E06               	movlw	6
  1636  00093A  D7EA               	goto	L1
  1637  00093C                     l1025:
  1638                           
  1639                           ;ADC.c: 50:    ADCON1=0x05;
  1640  00093C  0E05               	movlw	5
  1641  00093E  D7E8               	goto	L1
  1642  000940                     l1029:
  1643                           
  1644                           ;ADC.c: 54:    ADCON1=0x04;
  1645  000940  0E04               	movlw	4
  1646  000942  D7E6               	goto	L1
  1647  000944                     l1033:
  1648                           
  1649                           ;ADC.c: 58:    ADCON1=0x03;
  1650  000944  0E03               	movlw	3
  1651  000946  D7E4               	goto	L1
  1652  000948                     l1037:
  1653                           
  1654                           ;ADC.c: 62:    ADCON1=0x02;
  1655  000948  0E02               	movlw	2
  1656  00094A  D7E2               	goto	L1
  1657  00094C                     l1043:
  1658  00094C  5015               	movf	ADC_CONFIG@canal,w,c
  1659  00094E  6E13               	movwf	??_ADC_CONFIG& (0+255),c
  1660  000950  6A14               	clrf	(??_ADC_CONFIG+1)& (0+255),c
  1661                           
  1662                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1663                           ; Switch size 1, requested type "simple"
  1664                           ; Number of cases is 1, Range of values is 0 to 0
  1665                           ; switch strategies available:
  1666                           ; Name         Instructions Cycles
  1667                           ; simple_byte            4     3 (average)
  1668                           ;	Chosen strategy is simple_byte
  1669  000952  5014               	movf	??_ADC_CONFIG+1,w,c
  1670  000954  0A00               	xorlw	0	; case 0
  1671  000956  A4D8               	btfss	status,2,c
  1672  000958  D028               	goto	l1045
  1673                           
  1674                           ; Switch size 1, requested type "simple"
  1675                           ; Number of cases is 13, Range of values is 0 to 12
  1676                           ; switch strategies available:
  1677                           ; Name         Instructions Cycles
  1678                           ; simple_byte           40    21 (average)
  1679                           ;	Chosen strategy is simple_byte
  1680  00095A  5013               	movf	??_ADC_CONFIG,w,c
  1681  00095C  0A00               	xorlw	0	; case 0
  1682  00095E  B4D8               	btfsc	status,2,c
  1683  000960  D7D6               	goto	l989
  1684  000962  0A01               	xorlw	1	; case 1
  1685  000964  B4D8               	btfsc	status,2,c
  1686  000966  D7DA               	goto	l993
  1687  000968  0A03               	xorlw	3	; case 2
  1688  00096A  B4D8               	btfsc	status,2,c
  1689  00096C  D7D9               	goto	l997
  1690  00096E  0A01               	xorlw	1	; case 3
  1691  000970  B4D8               	btfsc	status,2,c
  1692  000972  D7D8               	goto	l1001
  1693  000974  0A07               	xorlw	7	; case 4
  1694  000976  B4D8               	btfsc	status,2,c
  1695  000978  D7D7               	goto	l1005
  1696  00097A  0A01               	xorlw	1	; case 5
  1697  00097C  B4D8               	btfsc	status,2,c
  1698  00097E  D7D6               	goto	l1009
  1699  000980  0A03               	xorlw	3	; case 6
  1700  000982  B4D8               	btfsc	status,2,c
  1701  000984  D7D5               	goto	l1013
  1702  000986  0A01               	xorlw	1	; case 7
  1703  000988  B4D8               	btfsc	status,2,c
  1704  00098A  D7D4               	goto	l1017
  1705  00098C  0A0F               	xorlw	15	; case 8
  1706  00098E  B4D8               	btfsc	status,2,c
  1707  000990  D7D3               	goto	l1021
  1708  000992  0A01               	xorlw	1	; case 9
  1709  000994  B4D8               	btfsc	status,2,c
  1710  000996  D7D2               	goto	l1025
  1711  000998  0A03               	xorlw	3	; case 10
  1712  00099A  B4D8               	btfsc	status,2,c
  1713  00099C  D7D1               	goto	l1029
  1714  00099E  0A01               	xorlw	1	; case 11
  1715  0009A0  B4D8               	btfsc	status,2,c
  1716  0009A2  D7D0               	goto	l1033
  1717  0009A4  0A07               	xorlw	7	; case 12
  1718  0009A6  B4D8               	btfsc	status,2,c
  1719  0009A8  D7CF               	goto	l1037
  1720  0009AA                     l1045:
  1721                           
  1722                           ;ADC.c: 66:  ADCON2 = 0x91;
  1723  0009AA  0E91               	movlw	145
  1724  0009AC  6EC0               	movwf	4032,c	;volatile
  1725                           
  1726                           ;ADC.c: 67:  ADCON0bits.ADON = 1;
  1727  0009AE  80C2               	bsf	4034,0,c	;volatile
  1728  0009B0  0012               	return		;funcret
  1729  0009B2                     __end_of_ADC_CONFIG:
  1730                           	opt callstack 0
  1731                           
  1732                           	psect	rparam
  1733  0000                     tosu	equ	0xFFF
  1734                           tosh	equ	0xFFE
  1735                           tosl	equ	0xFFD
  1736                           stkptr	equ	0xFFC
  1737                           pclatu	equ	0xFFB
  1738                           pclath	equ	0xFFA
  1739                           pcl	equ	0xFF9
  1740                           tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           prodh	equ	0xFF4
  1745                           prodl	equ	0xFF3
  1746                           indf0	equ	0xFEF
  1747                           postinc0	equ	0xFEE
  1748                           postdec0	equ	0xFED
  1749                           preinc0	equ	0xFEC
  1750                           plusw0	equ	0xFEB
  1751                           fsr0h	equ	0xFEA
  1752                           fsr0l	equ	0xFE9
  1753                           wreg	equ	0xFE8
  1754                           indf1	equ	0xFE7
  1755                           postinc1	equ	0xFE6
  1756                           postdec1	equ	0xFE5
  1757                           preinc1	equ	0xFE4
  1758                           plusw1	equ	0xFE3
  1759                           fsr1h	equ	0xFE2
  1760                           fsr1l	equ	0xFE1
  1761                           bsr	equ	0xFE0
  1762                           indf2	equ	0xFDF
  1763                           postinc2	equ	0xFDE
  1764                           postdec2	equ	0xFDD
  1765                           preinc2	equ	0xFDC
  1766                           plusw2	equ	0xFDB
  1767                           fsr2h	equ	0xFDA
  1768                           fsr2l	equ	0xFD9
  1769                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_DIGITOS
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _DIGITOS->___awdiv
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3202
                                             10 COMRAM     2     2      0
                         _ADC_CONFIG
                      _ADC_CONVERTIR
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                            _DIGITOS
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     363
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _DIGITOS                                              2     0      2    1795
                                              8 COMRAM     2     0      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_CONVERTIR                                        5     3      2      25
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CONFIG                                           3     3      0     210
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CONFIG
   _ADC_CONVERTIR
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _DIGITOS
     ___awdiv
     ___wmul
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      1E       1       31.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E      20        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 24 17:09:52 2019

     __size_of_ADC_CONFIG 00B0           ADC_CONFIG@canal 0015                        l39 0C34  
            ___awdiv@sign 0018       ___wmul@multiplicand 0015               __CFG_BORV$3 000000  
      __CFG_FOSC$XTPLL_XT 000000             ENVIA_CHAR@aux 0015                       l109 0B0A  
                     l881 0B2E                       l865 0B00                       l993 091C  
                     l997 0920                       l989 090E                       u220 0A98  
                     u307 09DC                       u317 0B48                       u407 0B1C  
                     u327 0B56                       u417 0B26                       u337 0B66  
                     u427 0CD6                       u347 0BA6                       u357 0BDA  
                     u367 0AE2                       u377 0AF0                       u297 09C4  
                     u387 0AFA                       u397 0B0E              __CFG_BOR$OFF 000000  
  __size_of_ADC_CONVERTIR 002C               LEER_LCD@aux 0013                       wreg 000FE8  
            ?_CURSOR_HOME 0013           __end_of_DIGITOS 0902            ??_ENVIA_NIBBLE 0013  
            __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0014              __CFG_WDT$OFF 000000  
                    l1001 0924                      l1021 0938                      l1013 0930  
                    l1005 0928                      l1033 0944                      l1025 093C  
                    l1017 0934                      l1009 092C                      l1043 094C  
                    l1037 0948                      l1029 0940                      l1045 09AA  
                    l1213 0A66                      l1303 09F2                      l1225 0A8C  
                    l1241 0ABE                      l1227 0A94                      l1219 0A76  
                    l1245 0ACC                      l1237 0AB4                      l1079 0CB6  
                    l1271 0C0A                      l1265 0C96                      l1275 0C28  
                    STR_1 0801                      _LATD 000F8C              __CFG_PWRT$ON 000000  
                    _main 09B2                      prodh 000FF4                      prodl 000FF3  
                    start 0000             ?_CURSOR_ONOFF 0013             __CFG_MCLRE$ON 000000  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0014          __end_of_LEER_LCD 0B38  
           __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000                     ?_main 0013  
         __end_of___awdiv 0AD6           ___awdiv@divisor 0015           ___awdiv@counter 0017  
                   _PORTD 000F83       __size_of_LCD_CONFIG 0060                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISD 000F95                     _TRISE 000F96  
     __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0016                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0016             _ADC_CONVERTIR 0C32  
         __initialization 0CE0              __end_of_main 0A52           _ESCRIBE_MENSAJE 0C00  
               ??_DIGITOS 001D                    ??_main 001D             __activetblptr 000002  
        ADC_CONVERTIR@num 0016              ??_ADC_CONFIG 0013                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  _ADRESL 000FC3          ___awdiv@dividend 0013            ?_ADC_CONVERTIR 0013  
      __end_of_ADC_CONFIG 09B2                    ___wmul 0C5E                 ??___awdiv 0017  
    __end_of_ENVIA_NIBBLE 0CE0                    _digdec 0009                    _digcen 000B  
                  _digdmi 000F                    _digmil 000D                    _diguni 0007  
     __size_of_POS_CURSOR 0024                    clear_0 0CE6          ___awdiv@quotient 0019  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8      __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0013  
              __accesstop 0060   __end_of__initialization 0CEC           __CFG_PBADEN$OFF 000000  
            ??_LCD_CONFIG 0016             ___rparam_used 000001              ??_ENVIA_CHAR 0014  
 __end_of_ESCRIBE_MENSAJE 0C32            __pcstackCOMRAM 0013          ENVIA_LCD_CMD@aux 0015  
    __end_of_CURSOR_ONOFF 0CC4        __end_of_LCD_CONFIG 0B98        __end_of_ENVIA_CHAR 0BCC  
         ??_ADC_CONVERTIR 0015                ??_LEER_LCD 0013          ENVIA_NIBBLE@dato 0013  
                 ?___wmul 0013                   _DIGITOS 0810              ??_POS_CURSOR 0017  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0016                   ___awdiv 0A52           __size_of___wmul 0026  
            __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0C00                   __pcinit 0CE0  
      __end_of_POS_CURSOR 0CA8                   __ramtop 0800                   __ptext0 09B2  
                 __ptext1 0C84                   __ptext2 0B38                   __ptext3 0C00  
                 __ptext4 0B98                   __ptext5 0810                   __ptext6 0C5E  
                 __ptext7 0A52                   __ptext8 0CA8                   __ptext9 0CF6  
            _ENVIA_NIBBLE 0CC4      end_of_initialization 0CEC             __Lmediumconst 0000  
                 postinc0 000FEE     __size_of_CURSOR_ONOFF 001C                 _TRISCbits 000F94  
       __size_of_LEER_LCD 0062              _CURSOR_ONOFF 0CA8        CURSOR_ONOFF@estado 0016  
          __end_of___wmul 0C84             ??_CURSOR_HOME 0016       start_initialization 0CE0  
       ENVIA_LCD_CMD@dato 0014              DIGITOS@valor 001B                  ??___wmul 0017  
                ?_DIGITOS 001B               __pbssCOMRAM 0001       __end_of_CURSOR_HOME 0CFE  
   __end_of_ADC_CONVERTIR 0C5E                  ?___awdiv 0013               __smallconst 0800  
                _LEER_LCD 0AD6            ___wmul@product 0017                  _LATCbits 000F8B  
                _LATDbits 000F8C          __CFG_WDTPS$32768 000000                 _temporal2 0003  
               _temporal3 0001                 _resultaso 0011          ESCRIBE_MENSAJE@i 001B  
          POS_CURSOR@fila 0017  __size_of_ESCRIBE_MENSAJE 0032                _ADCON0bits 000FC2  
       ___wmul@multiplier 0013          __size_of_DIGITOS 00F2               _CURSOR_HOME 0CF6  
              _ADC_CONFIG 0902    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000          __size_of___awdiv 0084                  __ptext10 0BCC  
                __ptext11 0AD6                  __ptext12 0CC4                  __ptext13 0C32  
                __ptext14 0902             __size_of_main 00A0                _LCD_CONFIG 0B38  
              _ENVIA_CHAR 0B98                  _temporal 0005             _ENVIA_LCD_CMD 0BCC  
   __CFG_CPUDIV$OSC1_PLL2 000000               ?_ADC_CONFIG 0013         ??_ESCRIBE_MENSAJE 0019  
   ESCRIBE_MENSAJE@cadena 0016            ?_ENVIA_LCD_CMD 0013             ?_ENVIA_NIBBLE 0013  
              _POS_CURSOR 0C84               ?_LCD_CONFIG 0013        ESCRIBE_MENSAJE@tam 0018  
             ?_ENVIA_CHAR 0013         POS_CURSOR@columna 0016  
