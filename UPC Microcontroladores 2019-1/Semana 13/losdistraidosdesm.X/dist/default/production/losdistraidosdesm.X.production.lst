

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Jun 14 17:36:53 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           ; Version 2.05
    33                           ; Generated 20/12/2018 GMT
    34                           ; 
    35                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4550 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataCOMRAM
    68  0002F4                     __pidataCOMRAM:
    69                           	opt callstack 0
    70                           
    71                           ;initializer for _msghaciapcon
    72  0002F4  42                 	db	66
    73  0002F5  61                 	db	97
    74  0002F6  63                 	db	99
    75  0002F7  6B                 	db	107
    76  0002F8  6C                 	db	108
    77  0002F9  69                 	db	105
    78  0002FA  67                 	db	103
    79  0002FB  68                 	db	104
    80  0002FC  74                 	db	116
    81  0002FD  20                 	db	32
    82  0002FE  65                 	db	101
    83  0002FF  6E                 	db	110
    84  000300  63                 	db	99
    85  000301  65                 	db	101
    86  000302  6E                 	db	110
    87  000303  64                 	db	100
    88  000304  69                 	db	105
    89  000305  64                 	db	100
    90  000306  6F                 	db	111
    91  000307  00                 	db	0
    92                           
    93                           ;initializer for _msghaciapcoff
    94  000308  42                 	db	66
    95  000309  61                 	db	97
    96  00030A  63                 	db	99
    97  00030B  6B                 	db	107
    98  00030C  6C                 	db	108
    99  00030D  69                 	db	105
   100  00030E  67                 	db	103
   101  00030F  68                 	db	104
   102  000310  74                 	db	116
   103  000311  20                 	db	32
   104  000312  61                 	db	97
   105  000313  70                 	db	112
   106  000314  61                 	db	97
   107  000315  67                 	db	103
   108  000316  61                 	db	97
   109  000317  6F                 	db	111
   110  000318  00                 	db	0
   111                           
   112                           ;initializer for _mensaje1
   113  000319  55                 	db	85
   114  00031A  50                 	db	80
   115  00031B  43                 	db	67
   116  00031C  20                 	db	32
   117  00031D  4D                 	db	77
   118  00031E  65                 	db	101
   119  00031F  63                 	db	99
   120  000320  61                 	db	97
   121  000321  73                 	db	115
   122  000322  20                 	db	32
   123  000323  45                 	db	69
   124  000324  6C                 	db	108
   125  000325  65                 	db	101
   126  000326  63                 	db	99
   127  000327  73                 	db	115
   128  000328  00                 	db	0
   129                           
   130                           ;initializer for _mensaje2
   131  000329  4D                 	db	77
   132  00032A  69                 	db	105
   133  00032B  63                 	db	99
   134  00032C  72                 	db	114
   135  00032D  6F                 	db	111
   136  00032E  63                 	db	99
   137  00032F  6F                 	db	111
   138  000330  6E                 	db	110
   139  000331  74                 	db	116
   140  000332  72                 	db	114
   141  000333  6F                 	db	111
   142  000334  6C                 	db	108
   143  000335  61                 	db	97
   144  000336  73                 	db	115
   145  000337  00                 	db	0
   146                           
   147                           	psect	idataBANK0
   148  00015C                     __pidataBANK0:
   149                           	opt callstack 0
   150                           
   151                           ;initializer for _msghaciapc2
   152  00015C  45                 	db	69
   153  00015D  6C                 	db	108
   154  00015E  69                 	db	105
   155  00015F  6A                 	db	106
   156  000160  61                 	db	97
   157  000161  20                 	db	32
   158  000162  6F                 	db	111
   159  000163  70                 	db	112
   160  000164  63                 	db	99
   161  000165  69                 	db	105
   162  000166  6F                 	db	111
   163  000167  6E                 	db	110
   164  000168  3A                 	db	58
   165  000169  20                 	db	32
   166  00016A  27                 	db	39
   167  00016B  51                 	db	81
   168  00016C  27                 	db	39
   169  00016D  20                 	db	32
   170  00016E  70                 	db	112
   171  00016F  61                 	db	97
   172  000170  72                 	db	114
   173  000171  61                 	db	97
   174  000172  20                 	db	32
   175  000173  65                 	db	101
   176  000174  6E                 	db	110
   177  000175  63                 	db	99
   178  000176  65                 	db	101
   179  000177  6E                 	db	110
   180  000178  64                 	db	100
   181  000179  65                 	db	101
   182  00017A  72                 	db	114
   183  00017B  20                 	db	32
   184  00017C  65                 	db	101
   185  00017D  6C                 	db	108
   186  00017E  20                 	db	32
   187  00017F  62                 	db	98
   188  000180  61                 	db	97
   189  000181  63                 	db	99
   190  000182  6B                 	db	107
   191  000183  6C                 	db	108
   192  000184  69                 	db	105
   193  000185  67                 	db	103
   194  000186  68                 	db	104
   195  000187  74                 	db	116
   196  000188  00                 	db	0
   197                           
   198                           ;initializer for _msghaciapcerr
   199  000189  4A                 	db	74
   200  00018A  6F                 	db	111
   201  00018B  64                 	db	100
   202  00018C  65                 	db	101
   203  00018D  72                 	db	114
   204  00018E  20                 	db	32
   205  00018F  70                 	db	112
   206  000190  72                 	db	114
   207  000191  65                 	db	101
   208  000192  73                 	db	115
   209  000193  69                 	db	105
   210  000194  6F                 	db	111
   211  000195  6E                 	db	110
   212  000196  61                 	db	97
   213  000197  73                 	db	115
   214  000198  74                 	db	116
   215  000199  65                 	db	101
   216  00019A  20                 	db	32
   217  00019B  74                 	db	116
   218  00019C  65                 	db	101
   219  00019D  63                 	db	99
   220  00019E  6C                 	db	108
   221  00019F  61                 	db	97
   222  0001A0  20                 	db	32
   223  0001A1  69                 	db	105
   224  0001A2  6E                 	db	110
   225  0001A3  76                 	db	118
   226  0001A4  61                 	db	97
   227  0001A5  6C                 	db	108
   228  0001A6  69                 	db	105
   229  0001A7  64                 	db	100
   230  0001A8  61                 	db	97
   231  0001A9  00                 	db	0
   232                           
   233                           ;initializer for _msghaciapc1
   234  0001AA  42                 	db	66
   235  0001AB  69                 	db	105
   236  0001AC  65                 	db	101
   237  0001AD  6E                 	db	110
   238  0001AE  76                 	db	118
   239  0001AF  65                 	db	101
   240  0001B0  6E                 	db	110
   241  0001B1  69                 	db	105
   242  0001B2  64                 	db	100
   243  0001B3  6F                 	db	111
   244  0001B4  73                 	db	115
   245  0001B5  20                 	db	32
   246  0001B6  61                 	db	97
   247  0001B7  6C                 	db	108
   248  0001B8  20                 	db	32
   249  0001B9  63                 	db	99
   250  0001BA  6F                 	db	111
   251  0001BB  6E                 	db	110
   252  0001BC  74                 	db	116
   253  0001BD  72                 	db	114
   254  0001BE  6F                 	db	111
   255  0001BF  6C                 	db	108
   256  0001C0  20                 	db	32
   257  0001C1  72                 	db	114
   258  0001C2  65                 	db	101
   259  0001C3  6D                 	db	109
   260  0001C4  6F                 	db	111
   261  0001C5  74                 	db	116
   262  0001C6  6F                 	db	111
   263  0001C7  00                 	db	0
   264                           
   265                           ;initializer for _msghaciapc3
   266  0001C8  27                 	db	39
   267  0001C9  52                 	db	82
   268  0001CA  27                 	db	39
   269  0001CB  20                 	db	32
   270  0001CC  70                 	db	112
   271  0001CD  61                 	db	97
   272  0001CE  72                 	db	114
   273  0001CF  61                 	db	97
   274  0001D0  20                 	db	32
   275  0001D1  61                 	db	97
   276  0001D2  70                 	db	112
   277  0001D3  61                 	db	97
   278  0001D4  67                 	db	103
   279  0001D5  61                 	db	97
   280  0001D6  72                 	db	114
   281  0001D7  20                 	db	32
   282  0001D8  65                 	db	101
   283  0001D9  6C                 	db	108
   284  0001DA  20                 	db	32
   285  0001DB  62                 	db	98
   286  0001DC  61                 	db	97
   287  0001DD  63                 	db	99
   288  0001DE  6B                 	db	107
   289  0001DF  6C                 	db	108
   290  0001E0  69                 	db	105
   291  0001E1  67                 	db	103
   292  0001E2  68                 	db	104
   293  0001E3  74                 	db	116
   294  0001E4  00                 	db	0
   295  0000                     _PORTD	set	3971
   296  0000                     _LATD	set	3980
   297  0000                     _LATDbits	set	3980
   298  0000                     _RCREG	set	4014
   299  0000                     _PIR1bits	set	3998
   300  0000                     _LATCbits	set	3979
   301  0000                     _PIE1bits	set	3997
   302  0000                     _INTCONbits	set	4082
   303  0000                     _RCSTAbits	set	4011
   304  0000                     _SPBRGH	set	4016
   305  0000                     _SPBRG	set	4015
   306  0000                     _BAUDCONbits	set	4024
   307  0000                     _TRISCbits	set	3988
   308  0000                     _TRISD	set	3989
   309  0000                     _TXSTAbits	set	4012
   310  0000                     _TXREG	set	4013
   311                           
   312                           ; #config settings
   313  0000                     
   314                           	psect	cinit
   315  0002A8                     __pcinit:
   316                           	opt callstack 0
   317  0002A8                     start_initialization:
   318                           	opt callstack 0
   319  0002A8                     __initialization:
   320                           	opt callstack 0
   321                           
   322                           ; Initialize objects allocated to BANK0 (137 bytes)
   323                           ; load TBLPTR registers with __pidataBANK0
   324  0002A8  0E5C               	movlw	low __pidataBANK0
   325  0002AA  6EF6               	movwf	tblptrl,c
   326  0002AC  0E01               	movlw	high __pidataBANK0
   327  0002AE  6EF7               	movwf	tblptrh,c
   328  0002B0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   329  0002B2  6EF8               	movwf	tblptru,c
   330  0002B4  EE00  F060         	lfsr	0,__pdataBANK0
   331  0002B8  EE10 F089          	lfsr	1,137
   332  0002BC                     copy_data0:
   333  0002BC  0009               	tblrd		*+
   334  0002BE  CFF5 FFEE          	movff	tablat,postinc0
   335  0002C2  50E5               	movf	postdec1,w,c
   336  0002C4  50E1               	movf	fsr1l,w,c
   337  0002C6  E1FA               	bnz	copy_data0
   338                           
   339                           ; Initialize objects allocated to COMRAM (68 bytes)
   340                           ; load TBLPTR registers with __pidataCOMRAM
   341  0002C8  0EF4               	movlw	low __pidataCOMRAM
   342  0002CA  6EF6               	movwf	tblptrl,c
   343  0002CC  0E02               	movlw	high __pidataCOMRAM
   344  0002CE  6EF7               	movwf	tblptrh,c
   345  0002D0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   346  0002D2  6EF8               	movwf	tblptru,c
   347  0002D4  EE00  F001         	lfsr	0,__pdataCOMRAM
   348  0002D8  EE10 F044          	lfsr	1,68
   349  0002DC                     copy_data1:
   350  0002DC  0009               	tblrd		*+
   351  0002DE  CFF5 FFEE          	movff	tablat,postinc0
   352  0002E2  50E5               	movf	postdec1,w,c
   353  0002E4  50E1               	movf	fsr1l,w,c
   354  0002E6  E1FA               	bnz	copy_data1
   355                           
   356                           ; Clear objects allocated to COMRAM (1 bytes)
   357  0002E8  6A4E               	clrf	__pbssCOMRAM& (0+255),c
   358  0002EA                     end_of_initialization:
   359                           	opt callstack 0
   360  0002EA                     __end_of__initialization:
   361                           	opt callstack 0
   362  0002EA  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   363  0002EC  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   364  0002EE  0100               	movlb	0
   365  0002F0  EF09  F000         	goto	_main	;jump to C main() function
   366                           
   367                           	psect	bssCOMRAM
   368  00004E                     __pbssCOMRAM:
   369                           	opt callstack 0
   370  00004E                     _estadomon:
   371                           	opt callstack 0
   372  00004E                     	ds	1
   373                           
   374                           	psect	dataCOMRAM
   375  000001                     __pdataCOMRAM:
   376                           	opt callstack 0
   377  000001                     _msghaciapcon:
   378                           	opt callstack 0
   379  000001                     	ds	20
   380  000015                     _msghaciapcoff:
   381                           	opt callstack 0
   382  000015                     	ds	17
   383  000026                     _mensaje1:
   384                           	opt callstack 0
   385  000026                     	ds	16
   386  000036                     _mensaje2:
   387                           	opt callstack 0
   388  000036                     	ds	15
   389                           
   390                           	psect	dataBANK0
   391  000060                     __pdataBANK0:
   392                           	opt callstack 0
   393  000060                     _msghaciapc2:
   394                           	opt callstack 0
   395  000060                     	ds	45
   396  00008D                     _msghaciapcerr:
   397                           	opt callstack 0
   398  00008D                     	ds	33
   399  0000AE                     _msghaciapc1:
   400                           	opt callstack 0
   401  0000AE                     	ds	30
   402  0000CC                     _msghaciapc3:
   403                           	opt callstack 0
   404  0000CC                     	ds	29
   405                           
   406                           	psect	cstackCOMRAM
   407  000045                     __pcstackCOMRAM:
   408                           	opt callstack 0
   409  000045                     TX_CHAR_EUSART@num:
   410                           	opt callstack 0
   411  000045                     ENVIA_NIBBLE@dato:
   412                           	opt callstack 0
   413  000045                     LEER_LCD@aux:
   414                           	opt callstack 0
   415                           
   416                           ; 1 bytes @ 0x0
   417  000045                     	ds	1
   418  000046                     ENVIA_CHAR@dato:
   419                           	opt callstack 0
   420  000046                     ENVIA_LCD_CMD@dato:
   421                           	opt callstack 0
   422  000046                     SEND_MSG@vectormon:
   423                           	opt callstack 0
   424                           
   425                           ; 2 bytes @ 0x1
   426  000046                     	ds	1
   427  000047                     ENVIA_CHAR@aux:
   428                           	opt callstack 0
   429  000047                     ENVIA_LCD_CMD@aux:
   430                           	opt callstack 0
   431                           
   432                           ; 1 bytes @ 0x2
   433  000047                     	ds	1
   434  000048                     ??_LCD_CONFIG:
   435  000048                     SEND_MSG@posicionmon:
   436                           	opt callstack 0
   437  000048                     POS_CURSOR@columna:
   438                           	opt callstack 0
   439  000048                     CURSOR_ONOFF@estado:
   440                           	opt callstack 0
   441  000048                     ESCRIBE_MENSAJE@cadena:
   442                           	opt callstack 0
   443                           
   444                           ; 2 bytes @ 0x3
   445  000048                     	ds	1
   446  000049                     SEND_MSG@i:
   447                           	opt callstack 0
   448  000049                     POS_CURSOR@fila:
   449                           	opt callstack 0
   450                           
   451                           ; 1 bytes @ 0x4
   452  000049                     	ds	1
   453  00004A                     ESCRIBE_MENSAJE@tam:
   454                           	opt callstack 0
   455                           
   456                           ; 1 bytes @ 0x5
   457  00004A                     	ds	1
   458  00004B                     ESCRIBE_MENSAJE@i:
   459                           	opt callstack 0
   460                           
   461                           ; 1 bytes @ 0x6
   462  00004B                     	ds	1
   463  00004C                     ??_main:
   464                           
   465                           ; 1 bytes @ 0x7
   466  00004C                     	ds	2
   467                           
   468 ;;
   469 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   470 ;;
   471 ;; *************** function _main *****************
   472 ;; Defined at:
   473 ;;		line 76 in file "lamilkulez.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;		None
   476 ;; Auto vars:     Size  Location     Type
   477 ;;		None
   478 ;; Return value:  Size  Location     Type
   479 ;;                  1    wreg      void 
   480 ;; Registers used:
   481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   487 ;;      Params:         0       0       0       0       0       0       0       0       0
   488 ;;      Locals:         0       0       0       0       0       0       0       0       0
   489 ;;      Temps:          2       0       0       0       0       0       0       0       0
   490 ;;      Totals:         2       0       0       0       0       0       0       0       0
   491 ;;Total ram usage:        2 bytes
   492 ;; Hardware stack levels required when called:    4
   493 ;; This function calls:
   494 ;;		_BORRAR_LCD
   495 ;;		_CURSOR_HOME
   496 ;;		_CURSOR_ONOFF
   497 ;;		_ENTERMON
   498 ;;		_ESCRIBE_MENSAJE
   499 ;;		_LCD_CONFIG
   500 ;;		_POS_CURSOR
   501 ;;		_SEND_MSG
   502 ;; This function is called by:
   503 ;;		Startup code after reset
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           	psect	text0
   508  000012                     __ptext0:
   509                           	opt callstack 0
   510  000012                     _main:
   511                           	opt callstack 27
   512                           
   513                           ;lamilkulez.c: 78:     _delay((unsigned long)((500)*(48000000UL/4000.0)));
   514                           
   515                           ;incstack = 0
   516  000012  0E1F               	movlw	31
   517  000014  6E4D               	movwf	(??_main+1)& (0+255),c
   518  000016  0E71               	movlw	113
   519  000018  6E4C               	movwf	??_main& (0+255),c
   520  00001A  0E1E               	movlw	30
   521  00001C                     u427:
   522  00001C  2EE8               	decfsz	wreg,f,c
   523  00001E  D7FE               	bra	u427
   524  000020  2E4C               	decfsz	??_main& (0+255),f,c
   525  000022  D7FC               	bra	u427
   526  000024  2E4D               	decfsz	(??_main+1)& (0+255),f,c
   527  000026  D7FA               	bra	u427
   528  000028  D000               	nop2	
   529                           
   530                           ;lamilkulez.c: 79:     TRISD = 0x00;
   531  00002A  0E00               	movlw	0
   532  00002C  6E95               	movwf	3989,c	;volatile
   533                           
   534                           ;lamilkulez.c: 80:     LCD_CONFIG();
   535  00002E  EC24  F001         	call	_LCD_CONFIG	;wreg free
   536                           
   537                           ;lamilkulez.c: 81:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   538  000032  0EEA               	movlw	234
   539  000034  6E4C               	movwf	??_main& (0+255),c
   540  000036  0EC3               	movlw	195
   541  000038                     u437:
   542  000038  2EE8               	decfsz	wreg,f,c
   543  00003A  D7FE               	bra	u437
   544  00003C  2E4C               	decfsz	??_main& (0+255),f,c
   545  00003E  D7FC               	bra	u437
   546  000040  F000               	nop	
   547                           
   548                           ;lamilkulez.c: 82:     CURSOR_ONOFF(1);
   549  000042  0E01               	movlw	1
   550  000044  EC20  F002         	call	_CURSOR_ONOFF
   551                           
   552                           ;lamilkulez.c: 83:     BORRAR_LCD();
   553  000048  EC4F  F002         	call	_BORRAR_LCD	;wreg free
   554                           
   555                           ;lamilkulez.c: 84:     CURSOR_HOME();
   556  00004C  EC4B  F002         	call	_CURSOR_HOME	;wreg free
   557                           
   558                           ;lamilkulez.c: 85:     _delay((unsigned long)((100)*(48000000UL/4000.0)));
   559  000050  0E07               	movlw	7
   560  000052  6E4D               	movwf	(??_main+1)& (0+255),c
   561  000054  0E17               	movlw	23
   562  000056  6E4C               	movwf	??_main& (0+255),c
   563  000058  0E6A               	movlw	106
   564  00005A                     u447:
   565  00005A  2EE8               	decfsz	wreg,f,c
   566  00005C  D7FE               	bra	u447
   567  00005E  2E4C               	decfsz	??_main& (0+255),f,c
   568  000060  D7FC               	bra	u447
   569  000062  2E4D               	decfsz	(??_main+1)& (0+255),f,c
   570  000064  D7FA               	bra	u447
   571  000066  D000               	nop2	
   572                           
   573                           ;lamilkulez.c: 89:     TRISCbits.RC6 = 0;
   574  000068  9C94               	bcf	3988,6,c	;volatile
   575                           
   576                           ;lamilkulez.c: 90:     BAUDCONbits.BRG16 = 0;
   577  00006A  96B8               	bcf	4024,3,c	;volatile
   578                           
   579                           ;lamilkulez.c: 91:     TXSTAbits.SYNC = 0;
   580  00006C  98AC               	bcf	4012,4,c	;volatile
   581                           
   582                           ;lamilkulez.c: 92:     TXSTAbits.BRGH = 0;
   583  00006E  94AC               	bcf	4012,2,c	;volatile
   584                           
   585                           ;lamilkulez.c: 93:     SPBRG = 19;
   586  000070  0E13               	movlw	19
   587  000072  6EAF               	movwf	4015,c	;volatile
   588                           
   589                           ;lamilkulez.c: 94:     SPBRGH = 0;
   590  000074  0E00               	movlw	0
   591  000076  6EB0               	movwf	4016,c	;volatile
   592                           
   593                           ;lamilkulez.c: 95:     RCSTAbits.SPEN = 1;
   594  000078  8EAB               	bsf	4011,7,c	;volatile
   595                           
   596                           ;lamilkulez.c: 96:     RCSTAbits.CREN = 1;
   597  00007A  88AB               	bsf	4011,4,c	;volatile
   598                           
   599                           ;lamilkulez.c: 97:     TXSTAbits.TXEN = 1;
   600  00007C  8AAC               	bsf	4012,5,c	;volatile
   601                           
   602                           ;lamilkulez.c: 98:     INTCONbits.GIE = 1;
   603  00007E  8EF2               	bsf	4082,7,c	;volatile
   604                           
   605                           ;lamilkulez.c: 99:     INTCONbits.PEIE = 1;
   606  000080  8CF2               	bsf	4082,6,c	;volatile
   607                           
   608                           ;lamilkulez.c: 100:     PIE1bits.RC1IE = 1;
   609  000082  8A9D               	bsf	3997,5,c	;volatile
   610                           
   611                           ;lamilkulez.c: 103:     TRISCbits.RC2 = 0;
   612  000084  9494               	bcf	3988,2,c	;volatile
   613  000086                     l1349:
   614                           
   615                           ;lamilkulez.c: 107:         POS_CURSOR(1,0);
   616  000086  0E00               	movlw	0
   617  000088  6E48               	movwf	POS_CURSOR@columna,c
   618  00008A  0E01               	movlw	1
   619  00008C  EC0E  F002         	call	_POS_CURSOR
   620                           
   621                           ;lamilkulez.c: 108:         ESCRIBE_MENSAJE(mensaje1,15);
   622  000090  0E26               	movlw	low _mensaje1
   623  000092  6E48               	movwf	ESCRIBE_MENSAJE@cadena,c
   624  000094  0E00               	movlw	high _mensaje1
   625  000096  6E49               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   626  000098  0E0F               	movlw	15
   627  00009A  6E4A               	movwf	ESCRIBE_MENSAJE@tam,c
   628  00009C  ECE8  F001         	call	_ESCRIBE_MENSAJE	;wreg free
   629                           
   630                           ;lamilkulez.c: 109:         POS_CURSOR(2,0);
   631  0000A0  0E00               	movlw	0
   632  0000A2  6E48               	movwf	POS_CURSOR@columna,c
   633  0000A4  0E02               	movlw	2
   634  0000A6  EC0E  F002         	call	_POS_CURSOR
   635                           
   636                           ;lamilkulez.c: 110:         ESCRIBE_MENSAJE(mensaje2,14);
   637  0000AA  0E36               	movlw	low _mensaje2
   638  0000AC  6E48               	movwf	ESCRIBE_MENSAJE@cadena,c
   639  0000AE  0E00               	movlw	high _mensaje2
   640  0000B0  6E49               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   641  0000B2  0E0E               	movlw	14
   642  0000B4  6E4A               	movwf	ESCRIBE_MENSAJE@tam,c
   643  0000B6  ECE8  F001         	call	_ESCRIBE_MENSAJE	;wreg free
   644                           
   645                           ;lamilkulez.c: 112:         if(estadomon == 1){
   646  0000BA  044E               	decf	_estadomon,w,c
   647  0000BC  A4D8               	btfss	status,2,c
   648  0000BE  D021               	goto	l1371
   649                           
   650                           ;lamilkulez.c: 113:             SEND_MSG(msghaciapc1,29);
   651  0000C0  0EAE               	movlw	low _msghaciapc1
   652  0000C2  6E46               	movwf	SEND_MSG@vectormon,c
   653  0000C4  0E00               	movlw	high _msghaciapc1
   654  0000C6  6E47               	movwf	SEND_MSG@vectormon+1,c
   655  0000C8  0E1D               	movlw	29
   656  0000CA  6E48               	movwf	SEND_MSG@posicionmon,c
   657  0000CC  ECFC  F001         	call	_SEND_MSG	;wreg free
   658                           
   659                           ;lamilkulez.c: 114:             ENTERMON();
   660  0000D0  EC3C  F002         	call	_ENTERMON	;wreg free
   661                           
   662                           ;lamilkulez.c: 115:             SEND_MSG(msghaciapc2,44);
   663  0000D4  0E60               	movlw	low _msghaciapc2
   664  0000D6  6E46               	movwf	SEND_MSG@vectormon,c
   665  0000D8  0E00               	movlw	high _msghaciapc2
   666  0000DA  6E47               	movwf	SEND_MSG@vectormon+1,c
   667  0000DC  0E2C               	movlw	44
   668  0000DE  6E48               	movwf	SEND_MSG@posicionmon,c
   669  0000E0  ECFC  F001         	call	_SEND_MSG	;wreg free
   670                           
   671                           ;lamilkulez.c: 116:             ENTERMON();
   672  0000E4  EC3C  F002         	call	_ENTERMON	;wreg free
   673                           
   674                           ;lamilkulez.c: 117:             SEND_MSG(msghaciapc3,28);
   675  0000E8  0ECC               	movlw	low _msghaciapc3
   676  0000EA  6E46               	movwf	SEND_MSG@vectormon,c
   677  0000EC  0E00               	movlw	high _msghaciapc3
   678  0000EE  6E47               	movwf	SEND_MSG@vectormon+1,c
   679  0000F0  0E1C               	movlw	28
   680  0000F2  6E48               	movwf	SEND_MSG@posicionmon,c
   681  0000F4  ECFC  F001         	call	_SEND_MSG	;wreg free
   682  0000F8                     l1367:
   683                           
   684                           ;lamilkulez.c: 118:             ENTERMON();
   685  0000F8  EC3C  F002         	call	_ENTERMON	;wreg free
   686  0000FC                     l1369:
   687                           
   688                           ;lamilkulez.c: 119:             estadomon = 0;
   689  0000FC  0E00               	movlw	0
   690  0000FE  6E4E               	movwf	_estadomon,c
   691                           
   692                           ;lamilkulez.c: 120:         }
   693  000100  D7C2               	goto	l1349
   694  000102                     l1371:
   695  000102  0E02               	movlw	2
   696  000104  184E               	xorwf	_estadomon,w,c
   697  000106  A4D8               	btfss	status,2,c
   698  000108  D00C               	goto	l1381
   699                           
   700                           ;lamilkulez.c: 122:             SEND_MSG(msghaciapcon,19);
   701  00010A  0E01               	movlw	low _msghaciapcon
   702  00010C  6E46               	movwf	SEND_MSG@vectormon,c
   703  00010E  0E00               	movlw	high _msghaciapcon
   704  000110  6E47               	movwf	SEND_MSG@vectormon+1,c
   705  000112  0E13               	movlw	19
   706  000114  6E48               	movwf	SEND_MSG@posicionmon,c
   707  000116  ECFC  F001         	call	_SEND_MSG	;wreg free
   708                           
   709                           ;lamilkulez.c: 123:             ENTERMON();
   710  00011A  EC3C  F002         	call	_ENTERMON	;wreg free
   711                           
   712                           ;lamilkulez.c: 124:             LATCbits.LC2 = 1;
   713  00011E  848B               	bsf	3979,2,c	;volatile
   714  000120  D7ED               	goto	l1369
   715  000122                     l1381:
   716  000122  0E03               	movlw	3
   717  000124  184E               	xorwf	_estadomon,w,c
   718  000126  A4D8               	btfss	status,2,c
   719  000128  D00C               	goto	l1391
   720                           
   721                           ;lamilkulez.c: 128:             SEND_MSG(msghaciapcoff,16);
   722  00012A  0E15               	movlw	low _msghaciapcoff
   723  00012C  6E46               	movwf	SEND_MSG@vectormon,c
   724  00012E  0E00               	movlw	high _msghaciapcoff
   725  000130  6E47               	movwf	SEND_MSG@vectormon+1,c
   726  000132  0E10               	movlw	16
   727  000134  6E48               	movwf	SEND_MSG@posicionmon,c
   728  000136  ECFC  F001         	call	_SEND_MSG	;wreg free
   729                           
   730                           ;lamilkulez.c: 129:             ENTERMON();
   731  00013A  EC3C  F002         	call	_ENTERMON	;wreg free
   732                           
   733                           ;lamilkulez.c: 130:             LATCbits.LC2 = 0;
   734  00013E  948B               	bcf	3979,2,c	;volatile
   735  000140  D7DD               	goto	l1369
   736  000142                     l1391:
   737  000142  0E04               	movlw	4
   738  000144  184E               	xorwf	_estadomon,w,c
   739  000146  A4D8               	btfss	status,2,c
   740  000148  D79E               	goto	l1349
   741                           
   742                           ;lamilkulez.c: 134:             SEND_MSG(msghaciapcerr,32);
   743  00014A  0E8D               	movlw	low _msghaciapcerr
   744  00014C  6E46               	movwf	SEND_MSG@vectormon,c
   745  00014E  0E00               	movlw	high _msghaciapcerr
   746  000150  6E47               	movwf	SEND_MSG@vectormon+1,c
   747  000152  0E20               	movlw	32
   748  000154  6E48               	movwf	SEND_MSG@posicionmon,c
   749  000156  ECFC  F001         	call	_SEND_MSG	;wreg free
   750  00015A  D7CE               	goto	l1367
   751  00015C                     __end_of_main:
   752                           	opt callstack 0
   753                           
   754 ;; *************** function _SEND_MSG *****************
   755 ;; Defined at:
   756 ;;		line 59 in file "lamilkulez.c"
   757 ;; Parameters:    Size  Location     Type
   758 ;;  vectormon       2    1[COMRAM] PTR const unsigned char 
   759 ;;		 -> msghaciapcerr(33), msghaciapcoff(17), msghaciapcon(20), msghaciapc3(29), 
   760 ;;		 -> msghaciapc2(45), msghaciapc1(30), 
   761 ;;  posicionmon     1    3[COMRAM] unsigned char 
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  i               1    4[COMRAM] unsigned char 
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   773 ;;      Params:         3       0       0       0       0       0       0       0       0
   774 ;;      Locals:         1       0       0       0       0       0       0       0       0
   775 ;;      Temps:          0       0       0       0       0       0       0       0       0
   776 ;;      Totals:         4       0       0       0       0       0       0       0       0
   777 ;;Total ram usage:        4 bytes
   778 ;; Hardware stack levels used:    1
   779 ;; Hardware stack levels required when called:    2
   780 ;; This function calls:
   781 ;;		_TX_CHAR_EUSART
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text1
   788  0003F8                     __ptext1:
   789                           	opt callstack 0
   790  0003F8                     _SEND_MSG:
   791                           	opt callstack 28
   792                           
   793                           ;lamilkulez.c: 59: void SEND_MSG(const char *vectormon,char posicionmon);lamilkulez.c: 6
      +                          0: {;lamilkulez.c: 61:  for(char i = 0; i<posicionmon; i++)
   794                           
   795                           ;incstack = 0
   796  0003F8  0E00               	movlw	0
   797  0003FA  6E49               	movwf	SEND_MSG@i,c
   798  0003FC  D00A               	goto	l1249
   799  0003FE                     l1245:
   800                           
   801                           ;lamilkulez.c: 62:  {;lamilkulez.c: 63:   TX_CHAR_EUSART(vectormon[i]);
   802  0003FE  5049               	movf	SEND_MSG@i,w,c
   803  000400  2446               	addwf	SEND_MSG@vectormon,w,c
   804  000402  6ED9               	movwf	fsr2l,c
   805  000404  0E00               	movlw	0
   806  000406  2047               	addwfc	SEND_MSG@vectormon+1,w,c
   807  000408  6EDA               	movwf	fsr2h,c
   808  00040A  50DF               	movf	indf2,w,c
   809  00040C  EC45  F002         	call	_TX_CHAR_EUSART
   810                           
   811                           ;lamilkulez.c: 64:  }
   812  000410  2A49               	incf	SEND_MSG@i,f,c
   813  000412                     l1249:
   814  000412  5048               	movf	SEND_MSG@posicionmon,w,c
   815  000414  5C49               	subwf	SEND_MSG@i,w,c
   816  000416  B0D8               	btfsc	status,0,c
   817  000418  0012               	return	
   818  00041A  D7F1               	goto	l1245
   819  00041C                     __end_of_SEND_MSG:
   820                           	opt callstack 0
   821                           
   822 ;; *************** function _TX_CHAR_EUSART *****************
   823 ;; Defined at:
   824 ;;		line 53 in file "lamilkulez.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;  num             1    wreg     unsigned char 
   827 ;; Auto vars:     Size  Location     Type
   828 ;;  num             1    0[COMRAM] unsigned char 
   829 ;; Return value:  Size  Location     Type
   830 ;;                  1    wreg      void 
   831 ;; Registers used:
   832 ;;		wreg
   833 ;; Tracked objects:
   834 ;;		On entry : 0/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   838 ;;      Params:         0       0       0       0       0       0       0       0       0
   839 ;;      Locals:         1       0       0       0       0       0       0       0       0
   840 ;;      Temps:          0       0       0       0       0       0       0       0       0
   841 ;;      Totals:         1       0       0       0       0       0       0       0       0
   842 ;;Total ram usage:        1 bytes
   843 ;; Hardware stack levels used:    1
   844 ;; Hardware stack levels required when called:    1
   845 ;; This function calls:
   846 ;;		Nothing
   847 ;; This function is called by:
   848 ;;		_SEND_MSG
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           	psect	text2
   853  00048A                     __ptext2:
   854                           	opt callstack 0
   855  00048A                     _TX_CHAR_EUSART:
   856                           	opt callstack 28
   857                           
   858                           ;incstack = 0
   859                           ;TX_CHAR_EUSART@num stored from wreg
   860  00048A  6E45               	movwf	TX_CHAR_EUSART@num,c
   861                           
   862                           ;lamilkulez.c: 53: void TX_CHAR_EUSART(char num);lamilkulez.c: 54: {;lamilkulez.c: 55:  
      +                          TXREG = num;
   863  00048C  C045  FFAD         	movff	TX_CHAR_EUSART@num,4013	;volatile
   864  000490                     l61:
   865  000490  B2AC               	btfsc	4012,1,c	;volatile
   866  000492  0012               	return	
   867  000494  D7FD               	goto	l61
   868  000496                     __end_of_TX_CHAR_EUSART:
   869                           	opt callstack 0
   870                           
   871 ;; *************** function _POS_CURSOR *****************
   872 ;; Defined at:
   873 ;;		line 6 in file "LCD.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  fila            1    wreg     unsigned char 
   876 ;;  columna         1    3[COMRAM] unsigned char 
   877 ;; Auto vars:     Size  Location     Type
   878 ;;  fila            1    4[COMRAM] unsigned char 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  1    wreg      void 
   881 ;; Registers used:
   882 ;;		wreg, status,2, status,0, cstack
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   888 ;;      Params:         1       0       0       0       0       0       0       0       0
   889 ;;      Locals:         1       0       0       0       0       0       0       0       0
   890 ;;      Temps:          0       0       0       0       0       0       0       0       0
   891 ;;      Totals:         2       0       0       0       0       0       0       0       0
   892 ;;Total ram usage:        2 bytes
   893 ;; Hardware stack levels used:    1
   894 ;; Hardware stack levels required when called:    3
   895 ;; This function calls:
   896 ;;		_ENVIA_LCD_CMD
   897 ;; This function is called by:
   898 ;;		_main
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text3
   903  00041C                     __ptext3:
   904                           	opt callstack 0
   905  00041C                     _POS_CURSOR:
   906                           	opt callstack 27
   907                           
   908                           ;incstack = 0
   909                           ;POS_CURSOR@fila stored from wreg
   910  00041C  6E49               	movwf	POS_CURSOR@fila,c
   911                           
   912                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   913  00041E  0449               	decf	POS_CURSOR@fila,w,c
   914  000420  A4D8               	btfss	status,2,c
   915  000422  D005               	goto	l1295
   916                           
   917                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   918  000424  5048               	movf	POS_CURSOR@columna,w,c
   919  000426  0F80               	addlw	128
   920  000428  ECB6  F001         	call	_ENVIA_LCD_CMD
   921                           
   922                           ;LCD.c: 11:  }
   923  00042C  0012               	return	
   924  00042E                     l1295:
   925  00042E  0E02               	movlw	2
   926  000430  1849               	xorwf	POS_CURSOR@fila,w,c
   927  000432  A4D8               	btfss	status,2,c
   928  000434  0012               	return	
   929                           
   930                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   931  000436  5048               	movf	POS_CURSOR@columna,w,c
   932  000438  0FC0               	addlw	192
   933  00043A  ECB6  F001         	call	_ENVIA_LCD_CMD
   934  00043E  0012               	return		;funcret
   935  000440                     __end_of_POS_CURSOR:
   936                           	opt callstack 0
   937                           
   938 ;; *************** function _LCD_CONFIG *****************
   939 ;; Defined at:
   940 ;;		line 72 in file "LCD.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;		None
   943 ;; Auto vars:     Size  Location     Type
   944 ;;		None
   945 ;; Return value:  Size  Location     Type
   946 ;;                  1    wreg      void 
   947 ;; Registers used:
   948 ;;		wreg, status,2, status,0, cstack
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   954 ;;      Params:         0       0       0       0       0       0       0       0       0
   955 ;;      Locals:         0       0       0       0       0       0       0       0       0
   956 ;;      Temps:          1       0       0       0       0       0       0       0       0
   957 ;;      Totals:         1       0       0       0       0       0       0       0       0
   958 ;;Total ram usage:        1 bytes
   959 ;; Hardware stack levels used:    1
   960 ;; Hardware stack levels required when called:    3
   961 ;; This function calls:
   962 ;;		_ENVIA_LCD_CMD
   963 ;;		_ENVIA_NIBBLE
   964 ;; This function is called by:
   965 ;;		_main
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969                           	psect	text4
   970  000248                     __ptext4:
   971                           	opt callstack 0
   972  000248                     _LCD_CONFIG:
   973                           	opt callstack 27
   974                           
   975                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   976                           
   977                           ;incstack = 0
   978  000248  908C               	bcf	3980,0,c	;volatile
   979                           
   980                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   981  00024A  928C               	bcf	3980,1,c	;volatile
   982                           
   983                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   984  00024C  0E30               	movlw	48
   985  00024E  EC2E  F002         	call	_ENVIA_NIBBLE
   986                           
   987                           ;LCD.c: 77:         _delay(24000);
   988  000252  0E20               	movlw	32
   989  000254  6E48               	movwf	??_LCD_CONFIG& (0+255),c
   990  000256  0E2A               	movlw	42
   991  000258                     u457:
   992  000258  2EE8               	decfsz	wreg,f,c
   993  00025A  D7FE               	bra	u457
   994  00025C  2E48               	decfsz	??_LCD_CONFIG& (0+255),f,c
   995  00025E  D7FC               	bra	u457
   996                           
   997                           ;LCD.c: 78:         _delay(24000);
   998  000260  0E20               	movlw	32
   999  000262  6E48               	movwf	??_LCD_CONFIG& (0+255),c
  1000  000264  0E2A               	movlw	42
  1001  000266                     u467:
  1002  000266  2EE8               	decfsz	wreg,f,c
  1003  000268  D7FE               	bra	u467
  1004  00026A  2E48               	decfsz	??_LCD_CONFIG& (0+255),f,c
  1005  00026C  D7FC               	bra	u467
  1006                           
  1007                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
  1008  00026E  0E30               	movlw	48
  1009  000270  EC2E  F002         	call	_ENVIA_NIBBLE
  1010                           
  1011                           ;LCD.c: 83:  _delay(1200);
  1012  000274  0EF0               	movlw	240
  1013  000276                     u477:
  1014  000276  D000               	nop2	
  1015  000278  2EE8               	decfsz	wreg,f,c
  1016  00027A  D7FD               	bra	u477
  1017                           
  1018                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
  1019  00027C  0E30               	movlw	48
  1020  00027E  EC2E  F002         	call	_ENVIA_NIBBLE
  1021                           
  1022                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
  1023  000282  0E20               	movlw	32
  1024  000284  EC2E  F002         	call	_ENVIA_NIBBLE
  1025                           
  1026                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
  1027  000288  0E01               	movlw	1
  1028  00028A  ECB6  F001         	call	_ENVIA_LCD_CMD
  1029                           
  1030                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
  1031  00028E  0E28               	movlw	40
  1032  000290  ECB6  F001         	call	_ENVIA_LCD_CMD
  1033                           
  1034                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
  1035  000294  0E0F               	movlw	15
  1036  000296  ECB6  F001         	call	_ENVIA_LCD_CMD
  1037                           
  1038                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
  1039  00029A  0E06               	movlw	6
  1040  00029C  ECB6  F001         	call	_ENVIA_LCD_CMD
  1041                           
  1042                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
  1043  0002A0  0E01               	movlw	1
  1044  0002A2  ECB6  F001         	call	_ENVIA_LCD_CMD
  1045  0002A6  0012               	return		;funcret
  1046  0002A8                     __end_of_LCD_CONFIG:
  1047                           	opt callstack 0
  1048                           
  1049 ;; *************** function _ESCRIBE_MENSAJE *****************
  1050 ;; Defined at:
  1051 ;;		line 41 in file "LCD.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1054 ;;		 -> mensaje2(15), mensaje1(16), 
  1055 ;;  tam             1    5[COMRAM] unsigned char 
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  i               1    6[COMRAM] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1067 ;;      Params:         3       0       0       0       0       0       0       0       0
  1068 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1069 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1070 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1071 ;;Total ram usage:        4 bytes
  1072 ;; Hardware stack levels used:    1
  1073 ;; Hardware stack levels required when called:    3
  1074 ;; This function calls:
  1075 ;;		_ENVIA_CHAR
  1076 ;; This function is called by:
  1077 ;;		_main
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           	psect	text5
  1082  0003D0                     __ptext5:
  1083                           	opt callstack 0
  1084  0003D0                     _ESCRIBE_MENSAJE:
  1085                           	opt callstack 27
  1086                           
  1087                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1088                           
  1089                           ;incstack = 0
  1090  0003D0  0E00               	movlw	0
  1091  0003D2  6E4B               	movwf	ESCRIBE_MENSAJE@i,c
  1092                           
  1093                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1094  0003D4  0E00               	movlw	0
  1095  0003D6  6E4B               	movwf	ESCRIBE_MENSAJE@i,c
  1096  0003D8  D00A               	goto	l1305
  1097  0003DA                     l1301:
  1098                           
  1099                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1100  0003DA  504B               	movf	ESCRIBE_MENSAJE@i,w,c
  1101  0003DC  2448               	addwf	ESCRIBE_MENSAJE@cadena,w,c
  1102  0003DE  6ED9               	movwf	fsr2l,c
  1103  0003E0  0E00               	movlw	0
  1104  0003E2  2049               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
  1105  0003E4  6EDA               	movwf	fsr2h,c
  1106  0003E6  50DF               	movf	indf2,w,c
  1107  0003E8  EC9C  F001         	call	_ENVIA_CHAR
  1108                           
  1109                           ;LCD.c: 47:  }
  1110  0003EC  2A4B               	incf	ESCRIBE_MENSAJE@i,f,c
  1111  0003EE                     l1305:
  1112  0003EE  504A               	movf	ESCRIBE_MENSAJE@tam,w,c
  1113  0003F0  5C4B               	subwf	ESCRIBE_MENSAJE@i,w,c
  1114  0003F2  B0D8               	btfsc	status,0,c
  1115  0003F4  0012               	return	
  1116  0003F6  D7F1               	goto	l1301
  1117  0003F8                     __end_of_ESCRIBE_MENSAJE:
  1118                           	opt callstack 0
  1119                           
  1120 ;; *************** function _ENVIA_CHAR *****************
  1121 ;; Defined at:
  1122 ;;		line 50 in file "LCD.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;  dato            1    wreg     unsigned char 
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  dato            1    1[COMRAM] unsigned char 
  1127 ;;  aux             1    2[COMRAM] unsigned char 
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, status,2, status,0, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1137 ;;      Params:         0       0       0       0       0       0       0       0       0
  1138 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1139 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1140 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1141 ;;Total ram usage:        2 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; Hardware stack levels required when called:    2
  1144 ;; This function calls:
  1145 ;;		_ENVIA_NIBBLE
  1146 ;;		_LEER_LCD
  1147 ;; This function is called by:
  1148 ;;		_ESCRIBE_MENSAJE
  1149 ;;		_GENERACARACTER
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text6
  1154  000338                     __ptext6:
  1155                           	opt callstack 0
  1156  000338                     _ENVIA_CHAR:
  1157                           	opt callstack 27
  1158                           
  1159                           ;incstack = 0
  1160                           ;ENVIA_CHAR@dato stored from wreg
  1161  000338  6E46               	movwf	ENVIA_CHAR@dato,c
  1162                           
  1163                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1164  00033A  808C               	bsf	3980,0,c	;volatile
  1165                           
  1166                           ;LCD.c: 54:  LEER_LCD();
  1167  00033C  ECF3  F000         	call	_LEER_LCD	;wreg free
  1168                           
  1169                           ;LCD.c: 55:  TRISD = 0x00;
  1170  000340  0E00               	movlw	0
  1171  000342  6E95               	movwf	3989,c	;volatile
  1172                           
  1173                           ;LCD.c: 56:         _delay(1200);
  1174  000344  0EF0               	movlw	240
  1175  000346                     u487:
  1176  000346  D000               	nop2	
  1177  000348  2EE8               	decfsz	wreg,f,c
  1178  00034A  D7FD               	bra	u487
  1179                           
  1180                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1181  00034C  928C               	bcf	3980,1,c	;volatile
  1182                           
  1183                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1184  00034E  948C               	bcf	3980,2,c	;volatile
  1185                           
  1186                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1187  000350  808C               	bsf	3980,0,c	;volatile
  1188                           
  1189                           ;LCD.c: 61:  aux = dato & 0xF0;
  1190  000352  5046               	movf	ENVIA_CHAR@dato,w,c
  1191  000354  0BF0               	andlw	240
  1192  000356  6E47               	movwf	ENVIA_CHAR@aux,c
  1193                           
  1194                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1195  000358  5047               	movf	ENVIA_CHAR@aux,w,c
  1196  00035A  EC2E  F002         	call	_ENVIA_NIBBLE
  1197                           
  1198                           ;LCD.c: 63:  aux = dato << 4;
  1199  00035E  3846               	swapf	ENVIA_CHAR@dato,w,c
  1200  000360  0BF0               	andlw	240
  1201  000362  6E47               	movwf	ENVIA_CHAR@aux,c
  1202                           
  1203                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1204  000364  5047               	movf	ENVIA_CHAR@aux,w,c
  1205  000366  EC2E  F002         	call	_ENVIA_NIBBLE
  1206  00036A  0012               	return		;funcret
  1207  00036C                     __end_of_ENVIA_CHAR:
  1208                           	opt callstack 0
  1209                           
  1210 ;; *************** function _ENTERMON *****************
  1211 ;; Defined at:
  1212 ;;		line 67 in file "lamilkulez.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;		None
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;		None
  1217 ;; Return value:  Size  Location     Type
  1218 ;;                  1    wreg      void 
  1219 ;; Registers used:
  1220 ;;		wreg, status,2
  1221 ;; Tracked objects:
  1222 ;;		On entry : 0/0
  1223 ;;		On exit  : 0/0
  1224 ;;		Unchanged: 0/0
  1225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1226 ;;      Params:         0       0       0       0       0       0       0       0       0
  1227 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1228 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1229 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1230 ;;Total ram usage:        0 bytes
  1231 ;; Hardware stack levels used:    1
  1232 ;; Hardware stack levels required when called:    1
  1233 ;; This function calls:
  1234 ;;		Nothing
  1235 ;; This function is called by:
  1236 ;;		_main
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           	psect	text7
  1241  000478                     __ptext7:
  1242                           	opt callstack 0
  1243  000478                     _ENTERMON:
  1244                           	opt callstack 29
  1245                           
  1246                           ;lamilkulez.c: 68:     TXREG = 0x0A;
  1247                           
  1248                           ;incstack = 0
  1249  000478  0E0A               	movlw	10
  1250  00047A  6EAD               	movwf	4013,c	;volatile
  1251  00047C                     l73:
  1252  00047C  A2AC               	btfss	4012,1,c	;volatile
  1253  00047E  D7FE               	goto	l73
  1254                           
  1255                           ;lamilkulez.c: 70:     TXREG = 0x0D;
  1256  000480  0E0D               	movlw	13
  1257  000482  6EAD               	movwf	4013,c	;volatile
  1258  000484                     l76:
  1259  000484  B2AC               	btfsc	4012,1,c	;volatile
  1260  000486  0012               	return	
  1261  000488  D7FD               	goto	l76
  1262  00048A                     __end_of_ENTERMON:
  1263                           	opt callstack 0
  1264                           
  1265 ;; *************** function _CURSOR_ONOFF *****************
  1266 ;; Defined at:
  1267 ;;		line 35 in file "LCD.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;  estado          1    wreg     unsigned char 
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;  estado          1    3[COMRAM] unsigned char 
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg, status,2, status,0, cstack
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1281 ;;      Params:         0       0       0       0       0       0       0       0       0
  1282 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1283 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1284 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1285 ;;Total ram usage:        1 bytes
  1286 ;; Hardware stack levels used:    1
  1287 ;; Hardware stack levels required when called:    3
  1288 ;; This function calls:
  1289 ;;		_ENVIA_LCD_CMD
  1290 ;; This function is called by:
  1291 ;;		_main
  1292 ;; This function uses a non-reentrant model
  1293 ;;
  1294                           
  1295                           	psect	text8
  1296  000440                     __ptext8:
  1297                           	opt callstack 0
  1298  000440                     _CURSOR_ONOFF:
  1299                           	opt callstack 27
  1300                           
  1301                           ;incstack = 0
  1302                           ;CURSOR_ONOFF@estado stored from wreg
  1303  000440  6E48               	movwf	CURSOR_ONOFF@estado,c
  1304                           
  1305                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1306  000442  5048               	movf	CURSOR_ONOFF@estado,w,c
  1307  000444  A4D8               	btfss	status,2,c
  1308  000446  D003               	goto	l1283
  1309  000448  0E0E               	movlw	14
  1310  00044A  ECB6  F001         	call	_ENVIA_LCD_CMD
  1311  00044E                     l1283:
  1312                           
  1313                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1314  00044E  0448               	decf	CURSOR_ONOFF@estado,w,c
  1315  000450  A4D8               	btfss	status,2,c
  1316  000452  0012               	return	
  1317  000454  0E0C               	movlw	12
  1318  000456  ECB6  F001         	call	_ENVIA_LCD_CMD
  1319  00045A  0012               	return		;funcret
  1320  00045C                     __end_of_CURSOR_ONOFF:
  1321                           	opt callstack 0
  1322                           
  1323 ;; *************** function _CURSOR_HOME *****************
  1324 ;; Defined at:
  1325 ;;		line 30 in file "LCD.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;		None
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;		None
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      void 
  1332 ;; Registers used:
  1333 ;;		wreg, status,2, status,0, cstack
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1339 ;;      Params:         0       0       0       0       0       0       0       0       0
  1340 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1341 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1342 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1343 ;;Total ram usage:        0 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    3
  1346 ;; This function calls:
  1347 ;;		_ENVIA_LCD_CMD
  1348 ;; This function is called by:
  1349 ;;		_main
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text9
  1354  000496                     __ptext9:
  1355                           	opt callstack 0
  1356  000496                     _CURSOR_HOME:
  1357                           	opt callstack 27
  1358                           
  1359                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1360                           
  1361                           ;incstack = 0
  1362  000496  0E02               	movlw	2
  1363  000498  ECB6  F001         	call	_ENVIA_LCD_CMD
  1364  00049C  0012               	return		;funcret
  1365  00049E                     __end_of_CURSOR_HOME:
  1366                           	opt callstack 0
  1367                           
  1368 ;; *************** function _BORRAR_LCD *****************
  1369 ;; Defined at:
  1370 ;;		line 67 in file "LCD.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;		None
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      void 
  1377 ;; Registers used:
  1378 ;;		wreg, status,2, status,0, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1384 ;;      Params:         0       0       0       0       0       0       0       0       0
  1385 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1387 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1388 ;;Total ram usage:        0 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    3
  1391 ;; This function calls:
  1392 ;;		_ENVIA_LCD_CMD
  1393 ;; This function is called by:
  1394 ;;		_main
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text10
  1399  00049E                     __ptext10:
  1400                           	opt callstack 0
  1401  00049E                     _BORRAR_LCD:
  1402                           	opt callstack 27
  1403                           
  1404                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1405                           
  1406                           ;incstack = 0
  1407  00049E  0E01               	movlw	1
  1408  0004A0  ECB6  F001         	call	_ENVIA_LCD_CMD
  1409  0004A4  0012               	return		;funcret
  1410  0004A6                     __end_of_BORRAR_LCD:
  1411                           	opt callstack 0
  1412                           
  1413 ;; *************** function _ENVIA_LCD_CMD *****************
  1414 ;; Defined at:
  1415 ;;		line 104 in file "LCD.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  dato            1    wreg     unsigned char 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  dato            1    1[COMRAM] unsigned char 
  1420 ;;  aux             1    2[COMRAM] unsigned char 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, status,2, status,0, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1430 ;;      Params:         0       0       0       0       0       0       0       0       0
  1431 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1433 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1434 ;;Total ram usage:        2 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    2
  1437 ;; This function calls:
  1438 ;;		_ENVIA_NIBBLE
  1439 ;;		_LEER_LCD
  1440 ;; This function is called by:
  1441 ;;		_POS_CURSOR
  1442 ;;		_CURSOR_HOME
  1443 ;;		_CURSOR_ONOFF
  1444 ;;		_BORRAR_LCD
  1445 ;;		_LCD_CONFIG
  1446 ;;		_BLINK_CURSOR
  1447 ;;		_DISPLAY_ONOFF
  1448 ;;		_GENERACARACTER
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text11
  1453  00036C                     __ptext11:
  1454                           	opt callstack 0
  1455  00036C                     _ENVIA_LCD_CMD:
  1456                           	opt callstack 27
  1457                           
  1458                           ;incstack = 0
  1459                           ;ENVIA_LCD_CMD@dato stored from wreg
  1460  00036C  6E46               	movwf	ENVIA_LCD_CMD@dato,c
  1461                           
  1462                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1463  00036E  908C               	bcf	3980,0,c	;volatile
  1464                           
  1465                           ;LCD.c: 108:  LEER_LCD();
  1466  000370  ECF3  F000         	call	_LEER_LCD	;wreg free
  1467                           
  1468                           ;LCD.c: 109:  TRISD = 0b00000000;
  1469  000374  0E00               	movlw	0
  1470  000376  6E95               	movwf	3989,c	;volatile
  1471                           
  1472                           ;LCD.c: 111:         _delay(1200);
  1473  000378  0EF0               	movlw	240
  1474  00037A                     u497:
  1475  00037A  D000               	nop2	
  1476  00037C  2EE8               	decfsz	wreg,f,c
  1477  00037E  D7FD               	bra	u497
  1478                           
  1479                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1480  000380  928C               	bcf	3980,1,c	;volatile
  1481                           
  1482                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1483  000382  948C               	bcf	3980,2,c	;volatile
  1484                           
  1485                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1486  000384  908C               	bcf	3980,0,c	;volatile
  1487                           
  1488                           ;LCD.c: 115:  aux = dato & 0xF0;
  1489  000386  5046               	movf	ENVIA_LCD_CMD@dato,w,c
  1490  000388  0BF0               	andlw	240
  1491  00038A  6E47               	movwf	ENVIA_LCD_CMD@aux,c
  1492                           
  1493                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1494  00038C  5047               	movf	ENVIA_LCD_CMD@aux,w,c
  1495  00038E  EC2E  F002         	call	_ENVIA_NIBBLE
  1496                           
  1497                           ;LCD.c: 117:  aux = dato<<4;
  1498  000392  3846               	swapf	ENVIA_LCD_CMD@dato,w,c
  1499  000394  0BF0               	andlw	240
  1500  000396  6E47               	movwf	ENVIA_LCD_CMD@aux,c
  1501                           
  1502                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1503  000398  5047               	movf	ENVIA_LCD_CMD@aux,w,c
  1504  00039A  EC2E  F002         	call	_ENVIA_NIBBLE
  1505  00039E  0012               	return		;funcret
  1506  0003A0                     __end_of_ENVIA_LCD_CMD:
  1507                           	opt callstack 0
  1508                           
  1509 ;; *************** function _LEER_LCD *****************
  1510 ;; Defined at:
  1511 ;;		line 121 in file "LCD.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;		None
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  aux             1    0[COMRAM] unsigned char 
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      void 
  1518 ;; Registers used:
  1519 ;;		wreg, status,2, status,0
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1525 ;;      Params:         0       0       0       0       0       0       0       0       0
  1526 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1527 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1528 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1529 ;;Total ram usage:        1 bytes
  1530 ;; Hardware stack levels used:    1
  1531 ;; Hardware stack levels required when called:    1
  1532 ;; This function calls:
  1533 ;;		Nothing
  1534 ;; This function is called by:
  1535 ;;		_ENVIA_CHAR
  1536 ;;		_ENVIA_LCD_CMD
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           	psect	text12
  1541  0001E6                     __ptext12:
  1542                           	opt callstack 0
  1543  0001E6                     _LEER_LCD:
  1544                           	opt callstack 27
  1545                           
  1546                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1547                           
  1548                           ;incstack = 0
  1549  0001E6  0EF8               	movlw	248
  1550  0001E8  6E95               	movwf	3989,c	;volatile
  1551                           
  1552                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1553  0001EA  908C               	bcf	3980,0,c	;volatile
  1554                           
  1555                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1556  0001EC  828C               	bsf	3980,1,c	;volatile
  1557                           
  1558                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1559  0001EE  848C               	bsf	3980,2,c	;volatile
  1560                           
  1561                           ;LCD.c: 128:         _delay(1200);
  1562  0001F0  0EF0               	movlw	240
  1563  0001F2                     u507:
  1564  0001F2  D000               	nop2	
  1565  0001F4  2EE8               	decfsz	wreg,f,c
  1566  0001F6  D7FD               	bra	u507
  1567                           
  1568                           ;LCD.c: 130:  aux = PORTD;
  1569  0001F8  CF83 F045          	movff	3971,LEER_LCD@aux	;volatile
  1570                           
  1571                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1572  0001FC  948C               	bcf	3980,2,c	;volatile
  1573                           
  1574                           ;LCD.c: 132:         _delay(1200);
  1575  0001FE  0EF0               	movlw	240
  1576  000200                     u517:
  1577  000200  D000               	nop2	
  1578  000202  2EE8               	decfsz	wreg,f,c
  1579  000204  D7FD               	bra	u517
  1580                           
  1581                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1582  000206  848C               	bsf	3980,2,c	;volatile
  1583                           
  1584                           ;LCD.c: 135:         _delay(1200);
  1585  000208  0EF0               	movlw	240
  1586  00020A                     u527:
  1587  00020A  D000               	nop2	
  1588  00020C  2EE8               	decfsz	wreg,f,c
  1589  00020E  D7FD               	bra	u527
  1590  000210                     l1171:
  1591                           
  1592                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1593  000210  948C               	bcf	3980,2,c	;volatile
  1594                           
  1595                           ;LCD.c: 138:  aux = aux & 0x80;
  1596  000212  5045               	movf	LEER_LCD@aux,w,c
  1597  000214  0B80               	andlw	128
  1598  000216  6E45               	movwf	LEER_LCD@aux,c
  1599                           
  1600                           ;LCD.c: 139:  while(aux == 0x80)
  1601  000218  D012               	goto	l1187
  1602  00021A                     l172:
  1603                           
  1604                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1605  00021A  848C               	bsf	3980,2,c	;volatile
  1606                           
  1607                           ;LCD.c: 142:             _delay(1200);
  1608  00021C  0EF0               	movlw	240
  1609  00021E                     u537:
  1610  00021E  D000               	nop2	
  1611  000220  2EE8               	decfsz	wreg,f,c
  1612  000222  D7FD               	bra	u537
  1613                           
  1614                           ;LCD.c: 143:             aux = PORTD;
  1615  000224  CF83 F045          	movff	3971,LEER_LCD@aux	;volatile
  1616                           
  1617                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1618  000228  948C               	bcf	3980,2,c	;volatile
  1619                           
  1620                           ;LCD.c: 145:             _delay(1200);
  1621  00022A  0EF0               	movlw	240
  1622  00022C                     u547:
  1623  00022C  D000               	nop2	
  1624  00022E  2EE8               	decfsz	wreg,f,c
  1625  000230  D7FD               	bra	u547
  1626                           
  1627                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1628  000232  848C               	bsf	3980,2,c	;volatile
  1629                           
  1630                           ;LCD.c: 147:             _delay(1200);
  1631  000234  0EF0               	movlw	240
  1632  000236                     u557:
  1633  000236  D000               	nop2	
  1634  000238  2EE8               	decfsz	wreg,f,c
  1635  00023A  D7FD               	bra	u557
  1636  00023C  D7E9               	goto	l1171
  1637  00023E                     l1187:
  1638                           
  1639                           ;LCD.c: 139:  while(aux == 0x80)
  1640  00023E  0E80               	movlw	128
  1641  000240  1845               	xorwf	LEER_LCD@aux,w,c
  1642  000242  A4D8               	btfss	status,2,c
  1643  000244  0012               	return	
  1644  000246  D7E9               	goto	l172
  1645  000248                     __end_of_LEER_LCD:
  1646                           	opt callstack 0
  1647                           
  1648 ;; *************** function _ENVIA_NIBBLE *****************
  1649 ;; Defined at:
  1650 ;;		line 93 in file "LCD.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;  dato            1    wreg     unsigned char 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  dato            1    0[COMRAM] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1664 ;;      Params:         0       0       0       0       0       0       0       0       0
  1665 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1667 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1668 ;;Total ram usage:        1 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    1
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_ENVIA_CHAR
  1675 ;;		_LCD_CONFIG
  1676 ;;		_ENVIA_LCD_CMD
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text13
  1681  00045C                     __ptext13:
  1682                           	opt callstack 0
  1683  00045C                     _ENVIA_NIBBLE:
  1684                           	opt callstack 27
  1685                           
  1686                           ;incstack = 0
  1687                           ;ENVIA_NIBBLE@dato stored from wreg
  1688  00045C  6E45               	movwf	ENVIA_NIBBLE@dato,c
  1689                           
  1690                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1691  00045E  0E0F               	movlw	15
  1692  000460  168C               	andwf	3980,f,c	;volatile
  1693                           
  1694                           ;LCD.c: 96:  dato &= 0xF0;
  1695  000462  0EF0               	movlw	240
  1696  000464  1645               	andwf	ENVIA_NIBBLE@dato,f,c
  1697                           
  1698                           ;LCD.c: 97:  LATD|= dato;
  1699  000466  5045               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1700  000468  128C               	iorwf	3980,f,c	;volatile
  1701                           
  1702                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1703  00046A  848C               	bsf	3980,2,c	;volatile
  1704                           
  1705                           ;LCD.c: 100:         _delay(1200);
  1706  00046C  0EF0               	movlw	240
  1707  00046E                     u567:
  1708  00046E  D000               	nop2	
  1709  000470  2EE8               	decfsz	wreg,f,c
  1710  000472  D7FD               	bra	u567
  1711                           
  1712                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1713  000474  948C               	bcf	3980,2,c	;volatile
  1714  000476  0012               	return		;funcret
  1715  000478                     __end_of_ENVIA_NIBBLE:
  1716                           	opt callstack 0
  1717                           
  1718 ;; *************** function _RCIsr *****************
  1719 ;; Defined at:
  1720 ;;		line 151 in file "lamilkulez.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;		None
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		wreg, status,2, status,0
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1734 ;;      Params:         0       0       0       0       0       0       0       0       0
  1735 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1736 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1737 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1738 ;;Total ram usage:        0 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		Interrupt level 2
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	intcode
  1748  000008                     __pintcode:
  1749                           	opt callstack 0
  1750  000008                     _RCIsr:
  1751                           	opt callstack 27
  1752                           
  1753                           ;incstack = 0
  1754  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1755  00000A  EDD0  F001         	call	int_func,f	;refresh shadow registers
  1756                           
  1757                           	psect	intcode_body
  1758  0003A0                     __pintcode_body:
  1759                           	opt callstack 27
  1760  0003A0                     int_func:
  1761                           	opt callstack 27
  1762  0003A0  0006               	pop		; remove dummy address from shadow register refresh
  1763                           
  1764                           ;lamilkulez.c: 152:     PIR1bits.RC1IF = 0;
  1765  0003A2  9A9E               	bcf	3998,5,c	;volatile
  1766                           
  1767                           ;lamilkulez.c: 153:     if (RCREG == 'M'){
  1768  0003A4  0E4D               	movlw	77
  1769  0003A6  18AE               	xorwf	4014,w,c	;volatile
  1770  0003A8  A4D8               	btfss	status,2,c
  1771  0003AA  D002               	goto	i2l1109
  1772                           
  1773                           ;lamilkulez.c: 154:         estadomon = 1;
  1774  0003AC  0E01               	movlw	1
  1775  0003AE  D00D               	goto	L1
  1776  0003B0                     i2l1109:
  1777  0003B0  0E51               	movlw	81
  1778  0003B2  18AE               	xorwf	4014,w,c	;volatile
  1779  0003B4  A4D8               	btfss	status,2,c
  1780  0003B6  D002               	goto	i2l1113
  1781                           
  1782                           ;lamilkulez.c: 157:         estadomon = 2;
  1783  0003B8  0E02               	movlw	2
  1784  0003BA  D007               	goto	L1
  1785  0003BC                     i2l1113:
  1786  0003BC  0E53               	movlw	83
  1787  0003BE  18AE               	xorwf	4014,w,c	;volatile
  1788  0003C0  A4D8               	btfss	status,2,c
  1789  0003C2  D002               	goto	i2l1117
  1790                           
  1791                           ;lamilkulez.c: 160:         estadomon = 3;
  1792  0003C4  0E03               	movlw	3
  1793  0003C6  D001               	goto	L1
  1794  0003C8                     i2l1117:
  1795                           
  1796                           ;lamilkulez.c: 163:         estadomon = 4;
  1797  0003C8  0E04               	movlw	4
  1798  0003CA                     L1:
  1799  0003CA  6E4E               	movwf	_estadomon,c
  1800  0003CC  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1801  0003CE  0011               	retfie		f
  1802  0003D0                     __end_of_RCIsr:
  1803                           	opt callstack 0
  1804  0000                     
  1805                           	psect	rparam
  1806  0000                     
  1807                           	psect	temp
  1808  00004F                     btemp:
  1809                           	opt callstack 0
  1810  00004F                     	ds	1
  1811  0000                     int$flags	set	btemp
  1812  0000                     wtemp8	set	btemp+1
  1813  0000                     ttemp5	set	btemp+1
  1814  0000                     ttemp6	set	btemp+4
  1815  0000                     ttemp7	set	btemp+8
  1816                           tosu	equ	0xFFF
  1817                           tosh	equ	0xFFE
  1818                           tosl	equ	0xFFD
  1819                           stkptr	equ	0xFFC
  1820                           pclatu	equ	0xFFB
  1821                           pclath	equ	0xFFA
  1822                           pcl	equ	0xFF9
  1823                           tblptru	equ	0xFF8
  1824                           tblptrh	equ	0xFF7
  1825                           tblptrl	equ	0xFF6
  1826                           tablat	equ	0xFF5
  1827                           prodh	equ	0xFF4
  1828                           prodl	equ	0xFF3
  1829                           indf0	equ	0xFEF
  1830                           postinc0	equ	0xFEE
  1831                           postdec0	equ	0xFED
  1832                           preinc0	equ	0xFEC
  1833                           plusw0	equ	0xFEB
  1834                           fsr0h	equ	0xFEA
  1835                           fsr0l	equ	0xFE9
  1836                           wreg	equ	0xFE8
  1837                           indf1	equ	0xFE7
  1838                           postinc1	equ	0xFE6
  1839                           postdec1	equ	0xFE5
  1840                           preinc1	equ	0xFE4
  1841                           plusw1	equ	0xFE3
  1842                           fsr1h	equ	0xFE2
  1843                           fsr1l	equ	0xFE1
  1844                           bsr	equ	0xFE0
  1845                           indf2	equ	0xFDF
  1846                           postinc2	equ	0xFDE
  1847                           postdec2	equ	0xFDD
  1848                           preinc2	equ	0xFDC
  1849                           plusw2	equ	0xFDB
  1850                           fsr2h	equ	0xFDA
  1851                           fsr2l	equ	0xFD9
  1852                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        205
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      9      78
    BANK0           160      0     137
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 16
		 -> mensaje2(COMRAM[15]), mensaje1(COMRAM[16]), 

    SEND_MSG@vectormon	PTR const unsigned char  size(2) Largest target is 45
		 -> msghaciapcerr(BANK0[33]), msghaciapcoff(COMRAM[17]), msghaciapcon(COMRAM[20]), msghaciapc3(BANK0[29]), 
		 -> msghaciapc2(BANK0[45]), msghaciapc1(BANK0[30]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _SEND_MSG->_TX_CHAR_EUSART
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _RCIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _RCIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RCIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _RCIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _RCIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _RCIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _RCIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _RCIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _RCIsr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2824
                                              7 COMRAM     2     2      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                           _ENTERMON
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
                           _SEND_MSG
 ---------------------------------------------------------------------------------
 (1) _SEND_MSG                                             4     1      3    1024
                                              1 COMRAM     4     1      3
                     _TX_CHAR_EUSART
 ---------------------------------------------------------------------------------
 (2) _TX_CHAR_EUSART                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     423
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     206
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      4     1      3     578
                                              3 COMRAM     4     1      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     183
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ENTERMON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     227
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     183
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _BORRAR_LCD                                           0     0      0     183
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     183
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      70
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _RCIsr                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENTERMON
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _SEND_MSG
     _TX_CHAR_EUSART

 _RCIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      89       5       85.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      9      4E       1       83.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D7      20        0.0%
DATA                 0      0      D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Jun 14 17:36:53 2019

                      l61 0490                        l73 047C                        l76 0484  
             __CFG_BORV$3 000000        __CFG_FOSC$XTPLL_XT 000000             ENVIA_CHAR@aux 0047  
                     l172 021A                       u507 01F2                       u427 001C  
                     u517 0200                       u437 0038                       u527 020A  
                     u447 005A                       u537 021E                       u457 0258  
                     u547 022C                       u467 0266                       u557 0236  
                     u477 0276                       u567 046E                       u487 0346  
                     u497 037A              __CFG_BOR$OFF 000000               LEER_LCD@aux 0045  
                     wreg 000FE8              ?_CURSOR_HOME 0045          ??_TX_CHAR_EUSART 0045  
          ??_ENVIA_NIBBLE 0045              __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0046  
            __CFG_WDT$OFF 000000                      l1301 03DA                      l1305 03EE  
                    l1171 0210                      l1245 03FE                      l1249 0412  
                    l1187 023E                      l1283 044E                      l1371 0102  
                    l1381 0122                      l1349 0086                      l1295 042E  
                    l1391 0142                      l1367 00F8                      l1369 00FC  
                    _LATD 000F8C              __CFG_PWRT$ON 000000                      _main 0012  
                    indf2 000FDF                      fsr1l 000FE1                      fsr2l 000FD9  
                    btemp 004F                      start 000E             ?_CURSOR_ONOFF 0045  
           __CFG_MCLRE$ON 000000              ___param_bank 000000           ??_ENVIA_LCD_CMD 0046  
        __end_of_ENTERMON 048A          __end_of_LEER_LCD 0248       __size_of_BORRAR_LCD 0008  
           __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000                     ?_main 0045  
                   _RCREG 000FAE                     _SPBRG 000FAF                     _PORTD 000F83  
                   _RCIsr 0008          __end_of_SEND_MSG 041C       __size_of_LCD_CONFIG 0060  
                   _TRISD 000F95                     _TXREG 000FAD       __size_of_ENVIA_CHAR 0034  
             ?_POS_CURSOR 0048                     tablat 000FF5                     ttemp5 0050  
                   ttemp6 0053                     ttemp7 0057                     status 000FD8  
                   wtemp8 0050            ??_CURSOR_ONOFF 0048           __initialization 02A8  
            __end_of_main 015C           _ESCRIBE_MENSAJE 03D0                    ??_main 004C  
           __activetblptr 000000                    ?_RCIsr 0045                    i2l1113 03BC  
                  i2l1117 03C8                    i2l1109 03B0                    _SPBRGH 000FB0  
    __end_of_ENVIA_NIBBLE 0478       __size_of_POS_CURSOR 0024              __pdataCOMRAM 0001  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
            ??_BORRAR_LCD 0048      __size_of_CURSOR_HOME 0008                 ?_ENTERMON 0045  
               ?_LEER_LCD 0045                __accesstop 0060   __end_of__initialization 02EA  
         __CFG_PBADEN$OFF 000000              ??_LCD_CONFIG 0048             ___rparam_used 000001  
            ??_ENVIA_CHAR 0046             __end_of_RCIsr 03D0   __end_of_ESCRIBE_MENSAJE 03F8  
               ?_SEND_MSG 0046            __pcstackCOMRAM 0045              __pidataBANK0 015C  
      __end_of_BORRAR_LCD 04A6                   ??_RCIsr 0045          ENVIA_LCD_CMD@aux 0047  
    __end_of_CURSOR_ONOFF 045C        __end_of_LCD_CONFIG 02A8        __end_of_ENVIA_CHAR 036C  
              ??_ENTERMON 0045                ??_LEER_LCD 0045          ENVIA_NIBBLE@dato 0045  
               SEND_MSG@i 0049       SEND_MSG@posicionmon 0048                ??_SEND_MSG 0049  
            ??_POS_CURSOR 0049     __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000  
                 __Lparam 0000          ?_ESCRIBE_MENSAJE 0048     __end_of_ENVIA_LCD_CMD 03A0  
                 __pcinit 02A8        __end_of_POS_CURSOR 0440                   __ramtop 0800  
                 __ptext0 0012                   __ptext1 03F8                   __ptext2 048A  
                 __ptext3 041C                   __ptext4 0248                   __ptext5 03D0  
                 __ptext6 0338                   __ptext7 0478                   __ptext8 0440  
                 __ptext9 0496            __pintcode_body 03A0              _ENVIA_NIBBLE 045C  
    end_of_initialization 02EA                   int_func 03A0   __size_of_TX_CHAR_EUSART 000C  
               _RCSTAbits 000FAB                   postdec1 000FE5                   postinc0 000FEE  
   __size_of_CURSOR_ONOFF 001C                 _TRISCbits 000F94                 _TXSTAbits 000FAC  
       __size_of_ENTERMON 0012         __size_of_LEER_LCD 0062              _CURSOR_ONOFF 0440  
      CURSOR_ONOFF@estado 0048         __size_of_SEND_MSG 0024               _BAUDCONbits 000FB8  
           __pidataCOMRAM 02F4             ??_CURSOR_HOME 0048       start_initialization 02A8  
       ENVIA_LCD_CMD@dato 0046             _msghaciapcerr 008D             _msghaciapcoff 0015  
             __pdataBANK0 0060               __pbssCOMRAM 004E       __end_of_CURSOR_HOME 049E  
          _TX_CHAR_EUSART 048A                 __pintcode 0008            __size_of_RCIsr 03C8  
               _estadomon 004E    __end_of_TX_CHAR_EUSART 0496                  _ENTERMON 0478  
                _LEER_LCD 01E6                  _LATCbits 000F8B                  _LATDbits 000F8C  
                _PIE1bits 000F9D                  _PIR1bits 000F9E                  _SEND_MSG 03F8  
        __CFG_WDTPS$32768 000000          ESCRIBE_MENSAJE@i 004B            POS_CURSOR@fila 0049  
__size_of_ESCRIBE_MENSAJE 0028         TX_CHAR_EUSART@num 0045               _CURSOR_HOME 0496  
               copy_data0 02BC                 copy_data1 02DC           ?_TX_CHAR_EUSART 0045  
  __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000                  __Lrparam 0000  
            _msghaciapcon 0001         SEND_MSG@vectormon 0046                  __ptext10 049E  
                __ptext11 036C                  __ptext12 01E6                  __ptext13 045C  
              _BORRAR_LCD 049E             __size_of_main 014A                  _mensaje1 0026  
                _mensaje2 0036                _LCD_CONFIG 0248                _ENVIA_CHAR 0338  
                int$flags 004F             _ENVIA_LCD_CMD 036C     __CFG_CPUDIV$OSC1_PLL2 000000  
              _INTCONbits 000FF2               _msghaciapc1 00AE               _msghaciapc2 0060  
             _msghaciapc3 00CC         ??_ESCRIBE_MENSAJE 004B                  intlevel2 0000  
   ESCRIBE_MENSAJE@cadena 0048            ?_ENVIA_LCD_CMD 0045               ?_BORRAR_LCD 0045  
           ?_ENVIA_NIBBLE 0045                _POS_CURSOR 041C               ?_LCD_CONFIG 0045  
      ESCRIBE_MENSAJE@tam 004A               ?_ENVIA_CHAR 0045         POS_CURSOR@columna 0048  
