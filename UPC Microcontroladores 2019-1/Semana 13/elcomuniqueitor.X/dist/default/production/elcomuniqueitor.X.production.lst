

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Jun 11 12:13:21 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4550 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     
    54                           	psect	idataCOMRAM
    55  007BD8                     __pidataCOMRAM:
    56                           	opt callstack 0
    57                           
    58                           ;initializer for _cadena3
    59  007BD8  4C                 	db	76
    60  007BD9  65                 	db	101
    61  007BDA  63                 	db	99
    62  007BDB  74                 	db	116
    63  007BDC  75                 	db	117
    64  007BDD  72                 	db	114
    65  007BDE  61                 	db	97
    66  007BDF  20                 	db	32
    67  007BE0  64                 	db	100
    68  007BE1  65                 	db	101
    69  007BE2  20                 	db	32
    70  007BE3  41                 	db	65
    71  007BE4  4E                 	db	78
    72  007BE5  2D                 	db	45
    73  007BE6  55                 	db	85
    74  007BE7  6E                 	db	110
    75  007BE8  6F                 	db	111
    76  007BE9  6F                 	db	111
    77  007BEA  3A                 	db	58
    78  007BEB  00                 	db	0
    79                           
    80                           ;initializer for _cadena2
    81  007BEC  4C                 	db	76
    82  007BED  65                 	db	101
    83  007BEE  63                 	db	99
    84  007BEF  74                 	db	116
    85  007BF0  75                 	db	117
    86  007BF1  72                 	db	114
    87  007BF2  61                 	db	97
    88  007BF3  20                 	db	32
    89  007BF4  64                 	db	100
    90  007BF5  65                 	db	101
    91  007BF6  20                 	db	32
    92  007BF7  41                 	db	65
    93  007BF8  4E                 	db	78
    94  007BF9  2D                 	db	45
    95  007BFA  5A                 	db	90
    96  007BFB  65                 	db	101
    97  007BFC  72                 	db	114
    98  007BFD  6F                 	db	111
    99  007BFE  3A                 	db	58
   100  007BFF  00                 	db	0
   101                           
   102                           ;initializer for _cadena
   103  007C00  55                 	db	85
   104  007C01  50                 	db	80
   105  007C02  43                 	db	67
   106  007C03  7A                 	db	122
   107  007C04  65                 	db	101
   108  007C05  69                 	db	105
   109  007C06  74                 	db	116
   110  007C07  6F                 	db	111
   111  007C08  72                 	db	114
   112  007C09  00                 	db	0
   113  0000                     _TXREG	set	4013
   114  0000                     _RCSTAbits	set	4011
   115  0000                     _SPBRGH	set	4016
   116  0000                     _SPBRG	set	4015
   117  0000                     _TXSTAbits	set	4012
   118  0000                     _BAUDCONbits	set	4024
   119  0000                     _TRISCbits	set	3988
   120  0000                     _TRISDbits	set	3989
   121  0000                     _ADRESL	set	4035
   122  0000                     _ADCON0bits	set	4034
   123  0000                     _ADCON2	set	4032
   124  0000                     _ADCON0	set	4034
   125  0000                     _ADCON1	set	4033
   126  0000                     _TRISB	set	3987
   127  0000                     _TRISE	set	3990
   128  0000                     _TRISA	set	3986
   129  0000                     _ADRESH	set	4036
   130                           
   131                           ; #config settings
   132  0000                     
   133                           	psect	cinit
   134  007C0A                     __pcinit:
   135                           	opt callstack 0
   136  007C0A                     start_initialization:
   137                           	opt callstack 0
   138  007C0A                     __initialization:
   139                           	opt callstack 0
   140                           
   141                           ; Initialize objects allocated to COMRAM (50 bytes)
   142                           ; load TBLPTR registers with __pidataCOMRAM
   143  007C0A  0ED8               	movlw	low __pidataCOMRAM
   144  007C0C  6EF6               	movwf	tblptrl,c
   145  007C0E  0E7B               	movlw	high __pidataCOMRAM
   146  007C10  6EF7               	movwf	tblptrh,c
   147  007C12  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   148  007C14  6EF8               	movwf	tblptru,c
   149  007C16  EE00  F001         	lfsr	0,__pdataCOMRAM
   150  007C1A  EE10 F032          	lfsr	1,50
   151  007C1E                     copy_data0:
   152  007C1E  0009               	tblrd		*+
   153  007C20  CFF5 FFEE          	movff	tablat,postinc0
   154  007C24  50E5               	movf	postdec1,w,c
   155  007C26  50E1               	movf	fsr1l,w,c
   156  007C28  E1FA               	bnz	copy_data0
   157                           
   158                           ; Clear objects allocated to COMRAM (20 bytes)
   159  007C2A  EE00  F033         	lfsr	0,__pbssCOMRAM
   160  007C2E  0E14               	movlw	20
   161  007C30                     clear_0:
   162  007C30  6AEE               	clrf	postinc0,c
   163  007C32  06E8               	decf	wreg,f,c
   164  007C34  E1FD               	bnz	clear_0
   165  007C36                     end_of_initialization:
   166                           	opt callstack 0
   167  007C36                     __end_of__initialization:
   168                           	opt callstack 0
   169  007C36  0E00               	movlw	low (__Lmediumconst shr (0+16))
   170  007C38  6EF8               	movwf	tblptru,c
   171  007C3A  0100               	movlb	0
   172  007C3C  EF33  F03F         	goto	_main	;jump to C main() function
   173                           
   174                           	psect	bssCOMRAM
   175  000033                     __pbssCOMRAM:
   176                           	opt callstack 0
   177  000033                     _temporal3:
   178                           	opt callstack 0
   179  000033                     	ds	2
   180  000035                     _temporal2:
   181                           	opt callstack 0
   182  000035                     	ds	2
   183  000037                     _temporal:
   184                           	opt callstack 0
   185  000037                     	ds	2
   186  000039                     _diguni:
   187                           	opt callstack 0
   188  000039                     	ds	2
   189  00003B                     _digdec:
   190                           	opt callstack 0
   191  00003B                     	ds	2
   192  00003D                     _digcen:
   193                           	opt callstack 0
   194  00003D                     	ds	2
   195  00003F                     _digmil:
   196                           	opt callstack 0
   197  00003F                     	ds	2
   198  000041                     _digdmi:
   199                           	opt callstack 0
   200  000041                     	ds	2
   201  000043                     _RESULTON2:
   202                           	opt callstack 0
   203  000043                     	ds	2
   204  000045                     _RESULTON:
   205                           	opt callstack 0
   206  000045                     	ds	2
   207                           
   208                           	psect	dataCOMRAM
   209  000001                     __pdataCOMRAM:
   210                           	opt callstack 0
   211  000001                     _cadena3:
   212                           	opt callstack 0
   213  000001                     	ds	20
   214  000015                     _cadena2:
   215                           	opt callstack 0
   216  000015                     	ds	20
   217  000029                     _cadena:
   218                           	opt callstack 0
   219  000029                     	ds	10
   220                           
   221                           	psect	cstackCOMRAM
   222  000047                     __pcstackCOMRAM:
   223                           	opt callstack 0
   224  000047                     ??_ADC_CONFIG:
   225  000047                     ?_ADC_CONVERTIR:
   226                           	opt callstack 0
   227  000047                     ?___wmul:
   228                           	opt callstack 0
   229  000047                     ?___awdiv:
   230                           	opt callstack 0
   231  000047                     ___wmul@multiplier:
   232                           	opt callstack 0
   233  000047                     ___awdiv@dividend:
   234                           	opt callstack 0
   235                           
   236                           ; 2 bytes @ 0x0
   237  000047                     	ds	2
   238  000049                     ??_ADC_CONVERTIR:
   239  000049                     ADC_CONFIG@canal:
   240                           	opt callstack 0
   241  000049                     ___wmul@multiplicand:
   242                           	opt callstack 0
   243  000049                     ___awdiv@divisor:
   244                           	opt callstack 0
   245                           
   246                           ; 2 bytes @ 0x2
   247  000049                     	ds	1
   248  00004A                     ADC_CONVERTIR@num:
   249                           	opt callstack 0
   250                           
   251                           ; 2 bytes @ 0x3
   252  00004A                     	ds	1
   253  00004B                     ___awdiv@counter:
   254                           	opt callstack 0
   255  00004B                     ___wmul@product:
   256                           	opt callstack 0
   257                           
   258                           ; 2 bytes @ 0x4
   259  00004B                     	ds	1
   260  00004C                     ___awdiv@sign:
   261                           	opt callstack 0
   262                           
   263                           ; 1 bytes @ 0x5
   264  00004C                     	ds	1
   265  00004D                     ___awdiv@quotient:
   266                           	opt callstack 0
   267                           
   268                           ; 2 bytes @ 0x6
   269  00004D                     	ds	2
   270  00004F                     DIGITOS@valor:
   271                           	opt callstack 0
   272                           
   273                           ; 2 bytes @ 0x8
   274  00004F                     	ds	2
   275  000051                     ??_main:
   276                           
   277                           ; 1 bytes @ 0xA
   278  000051                     	ds	2
   279  000053                     main@c:
   280                           	opt callstack 0
   281                           
   282                           ; 2 bytes @ 0xC
   283  000053                     	ds	2
   284  000055                     main@c_406:
   285                           	opt callstack 0
   286                           
   287                           ; 2 bytes @ 0xE
   288  000055                     	ds	2
   289  000057                     main@c_407:
   290                           	opt callstack 0
   291                           
   292                           ; 2 bytes @ 0x10
   293  000057                     	ds	2
   294                           
   295 ;;
   296 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   297 ;;
   298 ;; *************** function _main *****************
   299 ;; Defined at:
   300 ;;		line 42 in file "holis.c"
   301 ;; Parameters:    Size  Location     Type
   302 ;;		None
   303 ;; Auto vars:     Size  Location     Type
   304 ;;  c               2   16[COMRAM] int 
   305 ;;  c               2   14[COMRAM] int 
   306 ;;  c               2   12[COMRAM] int 
   307 ;; Return value:  Size  Location     Type
   308 ;;                  1    wreg      void 
   309 ;; Registers used:
   310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   311 ;; Tracked objects:
   312 ;;		On entry : 0/0
   313 ;;		On exit  : 0/0
   314 ;;		Unchanged: 0/0
   315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   316 ;;      Params:         0       0       0       0       0       0       0       0       0
   317 ;;      Locals:         6       0       0       0       0       0       0       0       0
   318 ;;      Temps:          2       0       0       0       0       0       0       0       0
   319 ;;      Totals:         8       0       0       0       0       0       0       0       0
   320 ;;Total ram usage:        8 bytes
   321 ;; Hardware stack levels required when called:    2
   322 ;; This function calls:
   323 ;;		_ADC_CONFIG
   324 ;;		_ADC_CONVERTIR
   325 ;;		_DIGITOS
   326 ;; This function is called by:
   327 ;;		Startup code after reset
   328 ;; This function uses a non-reentrant model
   329 ;;
   330                           
   331                           	psect	text0
   332  007E66                     __ptext0:
   333                           	opt callstack 0
   334  007E66                     _main:
   335                           	opt callstack 29
   336                           
   337                           ;holis.c: 45:     TRISDbits.RD0 = 0;
   338                           
   339                           ;incstack = 0
   340  007E66  9095               	bcf	3989,0,c	;volatile
   341                           
   342                           ;holis.c: 48:     TRISCbits.RC6 = 0;
   343  007E68  9C94               	bcf	3988,6,c	;volatile
   344                           
   345                           ;holis.c: 49:     BAUDCONbits.BRG16 = 0;
   346  007E6A  96B8               	bcf	4024,3,c	;volatile
   347                           
   348                           ;holis.c: 50:     TXSTAbits.SYNC = 0;
   349  007E6C  98AC               	bcf	4012,4,c	;volatile
   350                           
   351                           ;holis.c: 51:     TXSTAbits.BRGH = 0;
   352  007E6E  94AC               	bcf	4012,2,c	;volatile
   353                           
   354                           ;holis.c: 52:     SPBRG = 77;
   355  007E70  0E4D               	movlw	77
   356  007E72  6EAF               	movwf	4015,c	;volatile
   357                           
   358                           ;holis.c: 53:     SPBRGH = 0;
   359  007E74  0E00               	movlw	0
   360  007E76  6EB0               	movwf	4016,c	;volatile
   361                           
   362                           ;holis.c: 54:     RCSTAbits.SPEN = 1;
   363  007E78  8EAB               	bsf	4011,7,c	;volatile
   364                           
   365                           ;holis.c: 55:     RCSTAbits.CREN = 1;
   366  007E7A  88AB               	bsf	4011,4,c	;volatile
   367                           
   368                           ;holis.c: 56:     TXSTAbits.TXEN = 1;
   369  007E7C  8AAC               	bsf	4012,5,c	;volatile
   370  007E7E                     l98:
   371                           
   372                           ;holis.c: 62:         for (int c=0;c<9;c++) {
   373  007E7E  0E00               	movlw	0
   374  007E80  6E54               	movwf	main@c+1,c
   375  007E82  0E00               	movlw	0
   376  007E84  6E53               	movwf	main@c,c
   377  007E86                     l1165:
   378                           
   379                           ;holis.c: 63:             TXREG = cadena[c];
   380  007E86  0E29               	movlw	low _cadena
   381  007E88  2453               	addwf	main@c,w,c
   382  007E8A  6ED9               	movwf	fsr2l,c
   383  007E8C  0E00               	movlw	high _cadena
   384  007E8E  2054               	addwfc	main@c+1,w,c
   385  007E90  6EDA               	movwf	fsr2h,c
   386  007E92  50DF               	movf	indf2,w,c
   387  007E94  6EAD               	movwf	4013,c	;volatile
   388  007E96                     l101:
   389  007E96  A2AC               	btfss	4012,1,c	;volatile
   390  007E98  D7FE               	goto	l101
   391                           
   392                           ;holis.c: 65:         }
   393  007E9A  4A53               	infsnz	main@c,f,c
   394  007E9C  2A54               	incf	main@c+1,f,c
   395  007E9E  BE54               	btfsc	main@c+1,7,c
   396  007EA0  D7F2               	goto	l1165
   397  007EA2  5054               	movf	main@c+1,w,c
   398  007EA4  E104               	bnz	u390
   399  007EA6  0E09               	movlw	9
   400  007EA8  5C53               	subwf	main@c,w,c
   401  007EAA  A0D8               	btfss	status,0,c
   402  007EAC  D7EC               	goto	l1165
   403  007EAE                     u390:
   404                           
   405                           ;holis.c: 66:         TXREG = 0x0A;
   406  007EAE  0E0A               	movlw	10
   407  007EB0  6EAD               	movwf	4013,c	;volatile
   408  007EB2                     l104:
   409  007EB2  A2AC               	btfss	4012,1,c	;volatile
   410  007EB4  D7FE               	goto	l104
   411                           
   412                           ;holis.c: 68:         TXREG = 0x0D;
   413  007EB6  0E0D               	movlw	13
   414  007EB8  6EAD               	movwf	4013,c	;volatile
   415  007EBA                     l107:
   416  007EBA  A2AC               	btfss	4012,1,c	;volatile
   417  007EBC  D7FE               	goto	l107
   418                           
   419                           ;holis.c: 70:         ADC_CONFIG(0);
   420  007EBE  0E00               	movlw	0
   421  007EC0  EC62  F03E         	call	_ADC_CONFIG
   422                           
   423                           ;holis.c: 71:         RESULTON = ADC_CONVERTIR();
   424  007EC4  ECD6  F03D         	call	_ADC_CONVERTIR	;wreg free
   425  007EC8  C047  F045         	movff	?_ADC_CONVERTIR,_RESULTON
   426  007ECC  C048  F046         	movff	?_ADC_CONVERTIR+1,_RESULTON+1
   427                           
   428                           ;holis.c: 72:         DIGITOS(RESULTON);
   429  007ED0  C045  F04F         	movff	_RESULTON,DIGITOS@valor
   430  007ED4  C046  F050         	movff	_RESULTON+1,DIGITOS@valor+1
   431  007ED8  ECBA  F03E         	call	_DIGITOS	;wreg free
   432                           
   433                           ;holis.c: 73:         for (int c=0;c<19;c++) {
   434  007EDC  0E00               	movlw	0
   435  007EDE  6E56               	movwf	main@c_406+1,c
   436  007EE0  0E00               	movlw	0
   437  007EE2  6E55               	movwf	main@c_406,c
   438  007EE4                     l1185:
   439                           
   440                           ;holis.c: 74:             TXREG = cadena2[c];
   441  007EE4  0E15               	movlw	low _cadena2
   442  007EE6  2455               	addwf	main@c_406,w,c
   443  007EE8  6ED9               	movwf	fsr2l,c
   444  007EEA  0E00               	movlw	high _cadena2
   445  007EEC  2056               	addwfc	main@c_406+1,w,c
   446  007EEE  6EDA               	movwf	fsr2h,c
   447  007EF0  50DF               	movf	indf2,w,c
   448  007EF2  6EAD               	movwf	4013,c	;volatile
   449  007EF4                     l112:
   450  007EF4  A2AC               	btfss	4012,1,c	;volatile
   451  007EF6  D7FE               	goto	l112
   452                           
   453                           ;holis.c: 76:         }
   454  007EF8  4A55               	infsnz	main@c_406,f,c
   455  007EFA  2A56               	incf	main@c_406+1,f,c
   456  007EFC  BE56               	btfsc	main@c_406+1,7,c
   457  007EFE  D7F2               	goto	l1185
   458  007F00  5056               	movf	main@c_406+1,w,c
   459  007F02  E104               	bnz	u430
   460  007F04  0E13               	movlw	19
   461  007F06  5C55               	subwf	main@c_406,w,c
   462  007F08  A0D8               	btfss	status,0,c
   463  007F0A  D7EC               	goto	l1185
   464  007F0C                     u430:
   465                           
   466                           ;holis.c: 77:         TXREG = digdmi+0x30;
   467  007F0C  5041               	movf	_digdmi,w,c
   468  007F0E  0F30               	addlw	48
   469  007F10  6EAD               	movwf	4013,c	;volatile
   470  007F12                     l115:
   471  007F12  A2AC               	btfss	4012,1,c	;volatile
   472  007F14  D7FE               	goto	l115
   473                           
   474                           ;holis.c: 79:         TXREG = digmil+0x30;
   475  007F16  503F               	movf	_digmil,w,c
   476  007F18  0F30               	addlw	48
   477  007F1A  6EAD               	movwf	4013,c	;volatile
   478  007F1C                     l118:
   479  007F1C  A2AC               	btfss	4012,1,c	;volatile
   480  007F1E  D7FE               	goto	l118
   481                           
   482                           ;holis.c: 81:         TXREG = digcen+0x30;
   483  007F20  503D               	movf	_digcen,w,c
   484  007F22  0F30               	addlw	48
   485  007F24  6EAD               	movwf	4013,c	;volatile
   486  007F26                     l121:
   487  007F26  A2AC               	btfss	4012,1,c	;volatile
   488  007F28  D7FE               	goto	l121
   489                           
   490                           ;holis.c: 83:         TXREG = digdec+0x30;
   491  007F2A  503B               	movf	_digdec,w,c
   492  007F2C  0F30               	addlw	48
   493  007F2E  6EAD               	movwf	4013,c	;volatile
   494  007F30                     l124:
   495  007F30  A2AC               	btfss	4012,1,c	;volatile
   496  007F32  D7FE               	goto	l124
   497                           
   498                           ;holis.c: 85:         TXREG = diguni+0x30;
   499  007F34  5039               	movf	_diguni,w,c
   500  007F36  0F30               	addlw	48
   501  007F38  6EAD               	movwf	4013,c	;volatile
   502  007F3A                     l127:
   503  007F3A  A2AC               	btfss	4012,1,c	;volatile
   504  007F3C  D7FE               	goto	l127
   505                           
   506                           ;holis.c: 87:         TXREG = 0x0A;
   507  007F3E  0E0A               	movlw	10
   508  007F40  6EAD               	movwf	4013,c	;volatile
   509  007F42                     l130:
   510  007F42  A2AC               	btfss	4012,1,c	;volatile
   511  007F44  D7FE               	goto	l130
   512                           
   513                           ;holis.c: 89:         TXREG = 0x0D;
   514  007F46  0E0D               	movlw	13
   515  007F48  6EAD               	movwf	4013,c	;volatile
   516  007F4A                     l133:
   517  007F4A  A2AC               	btfss	4012,1,c	;volatile
   518  007F4C  D7FE               	goto	l133
   519                           
   520                           ;holis.c: 92:         ADC_CONFIG(1);
   521  007F4E  0E01               	movlw	1
   522  007F50  EC62  F03E         	call	_ADC_CONFIG
   523                           
   524                           ;holis.c: 93:         RESULTON2 = ADC_CONVERTIR();
   525  007F54  ECD6  F03D         	call	_ADC_CONVERTIR	;wreg free
   526  007F58  C047  F043         	movff	?_ADC_CONVERTIR,_RESULTON2
   527  007F5C  C048  F044         	movff	?_ADC_CONVERTIR+1,_RESULTON2+1
   528                           
   529                           ;holis.c: 94:         DIGITOS(RESULTON2);
   530  007F60  C043  F04F         	movff	_RESULTON2,DIGITOS@valor
   531  007F64  C044  F050         	movff	_RESULTON2+1,DIGITOS@valor+1
   532  007F68  ECBA  F03E         	call	_DIGITOS	;wreg free
   533                           
   534                           ;holis.c: 95:         for (int c=0;c<19;c++) {
   535  007F6C  0E00               	movlw	0
   536  007F6E  6E58               	movwf	main@c_407+1,c
   537  007F70  0E00               	movlw	0
   538  007F72  6E57               	movwf	main@c_407,c
   539  007F74                     l1215:
   540                           
   541                           ;holis.c: 96:             TXREG = cadena3[c];
   542  007F74  0E01               	movlw	low _cadena3
   543  007F76  2457               	addwf	main@c_407,w,c
   544  007F78  6ED9               	movwf	fsr2l,c
   545  007F7A  0E00               	movlw	high _cadena3
   546  007F7C  2058               	addwfc	main@c_407+1,w,c
   547  007F7E  6EDA               	movwf	fsr2h,c
   548  007F80  50DF               	movf	indf2,w,c
   549  007F82  6EAD               	movwf	4013,c	;volatile
   550  007F84                     l138:
   551  007F84  A2AC               	btfss	4012,1,c	;volatile
   552  007F86  D7FE               	goto	l138
   553                           
   554                           ;holis.c: 98:         }
   555  007F88  4A57               	infsnz	main@c_407,f,c
   556  007F8A  2A58               	incf	main@c_407+1,f,c
   557  007F8C  BE58               	btfsc	main@c_407+1,7,c
   558  007F8E  D7F2               	goto	l1215
   559  007F90  5058               	movf	main@c_407+1,w,c
   560  007F92  E104               	bnz	u520
   561  007F94  0E13               	movlw	19
   562  007F96  5C57               	subwf	main@c_407,w,c
   563  007F98  A0D8               	btfss	status,0,c
   564  007F9A  D7EC               	goto	l1215
   565  007F9C                     u520:
   566                           
   567                           ;holis.c: 99:         TXREG = digdmi+0x30;
   568  007F9C  5041               	movf	_digdmi,w,c
   569  007F9E  0F30               	addlw	48
   570  007FA0  6EAD               	movwf	4013,c	;volatile
   571  007FA2                     l141:
   572  007FA2  A2AC               	btfss	4012,1,c	;volatile
   573  007FA4  D7FE               	goto	l141
   574                           
   575                           ;holis.c: 101:         TXREG = digmil+0x30;
   576  007FA6  503F               	movf	_digmil,w,c
   577  007FA8  0F30               	addlw	48
   578  007FAA  6EAD               	movwf	4013,c	;volatile
   579  007FAC                     l144:
   580  007FAC  A2AC               	btfss	4012,1,c	;volatile
   581  007FAE  D7FE               	goto	l144
   582                           
   583                           ;holis.c: 103:         TXREG = digcen+0x30;
   584  007FB0  503D               	movf	_digcen,w,c
   585  007FB2  0F30               	addlw	48
   586  007FB4  6EAD               	movwf	4013,c	;volatile
   587  007FB6                     l147:
   588  007FB6  A2AC               	btfss	4012,1,c	;volatile
   589  007FB8  D7FE               	goto	l147
   590                           
   591                           ;holis.c: 105:         TXREG = digdec+0x30;
   592  007FBA  503B               	movf	_digdec,w,c
   593  007FBC  0F30               	addlw	48
   594  007FBE  6EAD               	movwf	4013,c	;volatile
   595  007FC0                     l150:
   596  007FC0  A2AC               	btfss	4012,1,c	;volatile
   597  007FC2  D7FE               	goto	l150
   598                           
   599                           ;holis.c: 107:         TXREG = diguni+0x30;
   600  007FC4  5039               	movf	_diguni,w,c
   601  007FC6  0F30               	addlw	48
   602  007FC8  6EAD               	movwf	4013,c	;volatile
   603  007FCA                     l153:
   604  007FCA  A2AC               	btfss	4012,1,c	;volatile
   605  007FCC  D7FE               	goto	l153
   606                           
   607                           ;holis.c: 109:         TXREG = 0x0A;
   608  007FCE  0E0A               	movlw	10
   609  007FD0  6EAD               	movwf	4013,c	;volatile
   610  007FD2                     l156:
   611  007FD2  A2AC               	btfss	4012,1,c	;volatile
   612  007FD4  D7FE               	goto	l156
   613                           
   614                           ;holis.c: 111:         TXREG = 0x0D;
   615  007FD6  0E0D               	movlw	13
   616  007FD8  6EAD               	movwf	4013,c	;volatile
   617  007FDA                     l159:
   618  007FDA  A2AC               	btfss	4012,1,c	;volatile
   619  007FDC  D7FE               	goto	l159
   620                           
   621                           ;holis.c: 113:         TXREG = 0x0D;
   622  007FDE  0E0D               	movlw	13
   623  007FE0  6EAD               	movwf	4013,c	;volatile
   624  007FE2                     l162:
   625  007FE2  A2AC               	btfss	4012,1,c	;volatile
   626  007FE4  D7FE               	goto	l162
   627                           
   628                           ;holis.c: 116:         _delay((unsigned long)((500)*(48000000UL/4000.0)));
   629  007FE6  0E1F               	movlw	31
   630  007FE8  6E52               	movwf	(??_main+1)& (0+255),c
   631  007FEA  0E71               	movlw	113
   632  007FEC  6E51               	movwf	??_main& (0+255),c
   633  007FEE  0E1E               	movlw	30
   634  007FF0                     u617:
   635  007FF0  2EE8               	decfsz	wreg,f,c
   636  007FF2  D7FE               	bra	u617
   637  007FF4  2E51               	decfsz	??_main& (0+255),f,c
   638  007FF6  D7FC               	bra	u617
   639  007FF8  2E52               	decfsz	(??_main+1)& (0+255),f,c
   640  007FFA  D7FA               	bra	u617
   641  007FFC  D000               	nop2	
   642  007FFE  D73F               	goto	l98
   643  008000                     __end_of_main:
   644                           	opt callstack 0
   645                           
   646 ;; *************** function _DIGITOS *****************
   647 ;; Defined at:
   648 ;;		line 31 in file "holis.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;  valor           2    8[COMRAM] int 
   651 ;; Auto vars:     Size  Location     Type
   652 ;;		None
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   662 ;;      Params:         2       0       0       0       0       0       0       0       0
   663 ;;      Locals:         0       0       0       0       0       0       0       0       0
   664 ;;      Temps:          0       0       0       0       0       0       0       0       0
   665 ;;      Totals:         2       0       0       0       0       0       0       0       0
   666 ;;Total ram usage:        2 bytes
   667 ;; Hardware stack levels used:    1
   668 ;; Hardware stack levels required when called:    1
   669 ;; This function calls:
   670 ;;		___awdiv
   671 ;;		___wmul
   672 ;; This function is called by:
   673 ;;		_main
   674 ;; This function uses a non-reentrant model
   675 ;;
   676                           
   677                           	psect	text1
   678  007D74                     __ptext1:
   679                           	opt callstack 0
   680  007D74                     _DIGITOS:
   681                           	opt callstack 29
   682                           
   683                           ;holis.c: 32:     digdmi = valor / 10000;
   684                           
   685                           ;incstack = 0
   686  007D74  C04F  F047         	movff	DIGITOS@valor,___awdiv@dividend
   687  007D78  C050  F048         	movff	DIGITOS@valor+1,___awdiv@dividend+1
   688  007D7C  0E27               	movlw	39
   689  007D7E  6E4A               	movwf	___awdiv@divisor+1,c
   690  007D80  0E10               	movlw	16
   691  007D82  6E49               	movwf	___awdiv@divisor,c
   692  007D84  EC20  F03E         	call	___awdiv	;wreg free
   693  007D88  C047  F041         	movff	?___awdiv,_digdmi
   694  007D8C  C048  F042         	movff	?___awdiv+1,_digdmi+1
   695                           
   696                           ;holis.c: 33:     temporal3 = valor - (digdmi * 10000);
   697  007D90  C041  F047         	movff	_digdmi,___wmul@multiplier
   698  007D94  C042  F048         	movff	_digdmi+1,___wmul@multiplier+1
   699  007D98  0ED8               	movlw	216
   700  007D9A  6E4A               	movwf	___wmul@multiplicand+1,c
   701  007D9C  0EF0               	movlw	240
   702  007D9E  6E49               	movwf	___wmul@multiplicand,c
   703  007DA0  ECC3  F03D         	call	___wmul	;wreg free
   704  007DA4  504F               	movf	DIGITOS@valor,w,c
   705  007DA6  2447               	addwf	?___wmul,w,c
   706  007DA8  6E33               	movwf	_temporal3,c
   707  007DAA  5050               	movf	DIGITOS@valor+1,w,c
   708  007DAC  2048               	addwfc	?___wmul+1,w,c
   709  007DAE  6E34               	movwf	_temporal3+1,c
   710                           
   711                           ;holis.c: 34:     digmil = temporal3 / 1000;
   712  007DB0  C033  F047         	movff	_temporal3,___awdiv@dividend
   713  007DB4  C034  F048         	movff	_temporal3+1,___awdiv@dividend+1
   714  007DB8  0E03               	movlw	3
   715  007DBA  6E4A               	movwf	___awdiv@divisor+1,c
   716  007DBC  0EE8               	movlw	232
   717  007DBE  6E49               	movwf	___awdiv@divisor,c
   718  007DC0  EC20  F03E         	call	___awdiv	;wreg free
   719  007DC4  C047  F03F         	movff	?___awdiv,_digmil
   720  007DC8  C048  F040         	movff	?___awdiv+1,_digmil+1
   721                           
   722                           ;holis.c: 35:     temporal = temporal3 - (digmil * 1000);
   723  007DCC  C03F  F047         	movff	_digmil,___wmul@multiplier
   724  007DD0  C040  F048         	movff	_digmil+1,___wmul@multiplier+1
   725  007DD4  0EFC               	movlw	252
   726  007DD6  6E4A               	movwf	___wmul@multiplicand+1,c
   727  007DD8  0E18               	movlw	24
   728  007DDA  6E49               	movwf	___wmul@multiplicand,c
   729  007DDC  ECC3  F03D         	call	___wmul	;wreg free
   730  007DE0  5033               	movf	_temporal3,w,c
   731  007DE2  2447               	addwf	?___wmul,w,c
   732  007DE4  6E37               	movwf	_temporal,c
   733  007DE6  5034               	movf	_temporal3+1,w,c
   734  007DE8  2048               	addwfc	?___wmul+1,w,c
   735  007DEA  6E38               	movwf	_temporal+1,c
   736                           
   737                           ;holis.c: 36:     digcen = temporal / 100;
   738  007DEC  C037  F047         	movff	_temporal,___awdiv@dividend
   739  007DF0  C038  F048         	movff	_temporal+1,___awdiv@dividend+1
   740  007DF4  0E00               	movlw	0
   741  007DF6  6E4A               	movwf	___awdiv@divisor+1,c
   742  007DF8  0E64               	movlw	100
   743  007DFA  6E49               	movwf	___awdiv@divisor,c
   744  007DFC  EC20  F03E         	call	___awdiv	;wreg free
   745  007E00  C047  F03D         	movff	?___awdiv,_digcen
   746  007E04  C048  F03E         	movff	?___awdiv+1,_digcen+1
   747                           
   748                           ;holis.c: 37:     temporal2 = temporal - (digcen * 100);
   749  007E08  C03D  F047         	movff	_digcen,___wmul@multiplier
   750  007E0C  C03E  F048         	movff	_digcen+1,___wmul@multiplier+1
   751  007E10  0EFF               	movlw	255
   752  007E12  6E4A               	movwf	___wmul@multiplicand+1,c
   753  007E14  0E9C               	movlw	156
   754  007E16  6E49               	movwf	___wmul@multiplicand,c
   755  007E18  ECC3  F03D         	call	___wmul	;wreg free
   756  007E1C  5037               	movf	_temporal,w,c
   757  007E1E  2447               	addwf	?___wmul,w,c
   758  007E20  6E35               	movwf	_temporal2,c
   759  007E22  5038               	movf	_temporal+1,w,c
   760  007E24  2048               	addwfc	?___wmul+1,w,c
   761  007E26  6E36               	movwf	_temporal2+1,c
   762                           
   763                           ;holis.c: 38:     digdec = temporal2 / 10;
   764  007E28  C035  F047         	movff	_temporal2,___awdiv@dividend
   765  007E2C  C036  F048         	movff	_temporal2+1,___awdiv@dividend+1
   766  007E30  0E00               	movlw	0
   767  007E32  6E4A               	movwf	___awdiv@divisor+1,c
   768  007E34  0E0A               	movlw	10
   769  007E36  6E49               	movwf	___awdiv@divisor,c
   770  007E38  EC20  F03E         	call	___awdiv	;wreg free
   771  007E3C  C047  F03B         	movff	?___awdiv,_digdec
   772  007E40  C048  F03C         	movff	?___awdiv+1,_digdec+1
   773                           
   774                           ;holis.c: 39:     diguni = temporal2 - (digdec * 10);
   775  007E44  C03B  F047         	movff	_digdec,___wmul@multiplier
   776  007E48  C03C  F048         	movff	_digdec+1,___wmul@multiplier+1
   777  007E4C  0EFF               	movlw	255
   778  007E4E  6E4A               	movwf	___wmul@multiplicand+1,c
   779  007E50  0EF6               	movlw	246
   780  007E52  6E49               	movwf	___wmul@multiplicand,c
   781  007E54  ECC3  F03D         	call	___wmul	;wreg free
   782  007E58  5035               	movf	_temporal2,w,c
   783  007E5A  2447               	addwf	?___wmul,w,c
   784  007E5C  6E39               	movwf	_diguni,c
   785  007E5E  5036               	movf	_temporal2+1,w,c
   786  007E60  2048               	addwfc	?___wmul+1,w,c
   787  007E62  6E3A               	movwf	_diguni+1,c
   788  007E64  0012               	return		;funcret
   789  007E66                     __end_of_DIGITOS:
   790                           	opt callstack 0
   791                           
   792 ;; *************** function ___wmul *****************
   793 ;; Defined at:
   794 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;  multiplier      2    0[COMRAM] unsigned int 
   797 ;;  multiplicand    2    2[COMRAM] unsigned int 
   798 ;; Auto vars:     Size  Location     Type
   799 ;;  product         2    4[COMRAM] unsigned int 
   800 ;; Return value:  Size  Location     Type
   801 ;;                  2    0[COMRAM] unsigned int 
   802 ;; Registers used:
   803 ;;		wreg, status,2, status,0, prodl, prodh
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   809 ;;      Params:         4       0       0       0       0       0       0       0       0
   810 ;;      Locals:         2       0       0       0       0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0       0       0
   812 ;;      Totals:         6       0       0       0       0       0       0       0       0
   813 ;;Total ram usage:        6 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_DIGITOS
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text2
   823  007B86                     __ptext2:
   824                           	opt callstack 0
   825  007B86                     ___wmul:
   826                           	opt callstack 29
   827                           
   828                           ;incstack = 0
   829  007B86  5047               	movf	___wmul@multiplier,w,c
   830  007B88  0249               	mulwf	___wmul@multiplicand,c
   831  007B8A  CFF3 F04B          	movff	prodl,___wmul@product
   832  007B8E  CFF4 F04C          	movff	prodh,___wmul@product+1
   833  007B92  5047               	movf	___wmul@multiplier,w,c
   834  007B94  024A               	mulwf	___wmul@multiplicand+1,c
   835  007B96  50F3               	movf	prodl,w,c
   836  007B98  264C               	addwf	___wmul@product+1,f,c
   837  007B9A  5048               	movf	___wmul@multiplier+1,w,c
   838  007B9C  0249               	mulwf	___wmul@multiplicand,c
   839  007B9E  50F3               	movf	prodl,w,c
   840  007BA0  264C               	addwf	___wmul@product+1,f,c
   841  007BA2  C04B  F047         	movff	___wmul@product,?___wmul
   842  007BA6  C04C  F048         	movff	___wmul@product+1,?___wmul+1
   843  007BAA  0012               	return		;funcret
   844  007BAC                     __end_of___wmul:
   845                           	opt callstack 0
   846                           
   847 ;; *************** function ___awdiv *****************
   848 ;; Defined at:
   849 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;  dividend        2    0[COMRAM] int 
   852 ;;  divisor         2    2[COMRAM] int 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  quotient        2    6[COMRAM] int 
   855 ;;  sign            1    5[COMRAM] unsigned char 
   856 ;;  counter         1    4[COMRAM] unsigned char 
   857 ;; Return value:  Size  Location     Type
   858 ;;                  2    0[COMRAM] int 
   859 ;; Registers used:
   860 ;;		wreg, status,2, status,0
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   866 ;;      Params:         4       0       0       0       0       0       0       0       0
   867 ;;      Locals:         4       0       0       0       0       0       0       0       0
   868 ;;      Temps:          0       0       0       0       0       0       0       0       0
   869 ;;      Totals:         8       0       0       0       0       0       0       0       0
   870 ;;Total ram usage:        8 bytes
   871 ;; Hardware stack levels used:    1
   872 ;; This function calls:
   873 ;;		Nothing
   874 ;; This function is called by:
   875 ;;		_DIGITOS
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           	psect	text3
   880  007C40                     __ptext3:
   881                           	opt callstack 0
   882  007C40                     ___awdiv:
   883                           	opt callstack 29
   884                           
   885                           ;incstack = 0
   886  007C40  0E00               	movlw	0
   887  007C42  6E4C               	movwf	___awdiv@sign,c
   888  007C44  AE4A               	btfss	___awdiv@divisor+1,7,c
   889  007C46  D006               	goto	l1091
   890  007C48  6C49               	negf	___awdiv@divisor,c
   891  007C4A  1E4A               	comf	___awdiv@divisor+1,f,c
   892  007C4C  B0D8               	btfsc	status,0,c
   893  007C4E  2A4A               	incf	___awdiv@divisor+1,f,c
   894  007C50  0E01               	movlw	1
   895  007C52  6E4C               	movwf	___awdiv@sign,c
   896  007C54                     l1091:
   897  007C54  AE48               	btfss	___awdiv@dividend+1,7,c
   898  007C56  D006               	goto	l1097
   899  007C58  6C47               	negf	___awdiv@dividend,c
   900  007C5A  1E48               	comf	___awdiv@dividend+1,f,c
   901  007C5C  B0D8               	btfsc	status,0,c
   902  007C5E  2A48               	incf	___awdiv@dividend+1,f,c
   903  007C60  0E01               	movlw	1
   904  007C62  1A4C               	xorwf	___awdiv@sign,f,c
   905  007C64                     l1097:
   906  007C64  0E00               	movlw	0
   907  007C66  6E4E               	movwf	___awdiv@quotient+1,c
   908  007C68  0E00               	movlw	0
   909  007C6A  6E4D               	movwf	___awdiv@quotient,c
   910  007C6C  5049               	movf	___awdiv@divisor,w,c
   911  007C6E  104A               	iorwf	___awdiv@divisor+1,w,c
   912  007C70  B4D8               	btfsc	status,2,c
   913  007C72  D01C               	goto	l1119
   914  007C74  0E01               	movlw	1
   915  007C76  6E4B               	movwf	___awdiv@counter,c
   916  007C78  D004               	goto	l1105
   917  007C7A                     l1103:
   918  007C7A  90D8               	bcf	status,0,c
   919  007C7C  3649               	rlcf	___awdiv@divisor,f,c
   920  007C7E  364A               	rlcf	___awdiv@divisor+1,f,c
   921  007C80  2A4B               	incf	___awdiv@counter,f,c
   922  007C82                     l1105:
   923  007C82  AE4A               	btfss	___awdiv@divisor+1,7,c
   924  007C84  D7FA               	goto	l1103
   925  007C86                     u340:
   926  007C86  90D8               	bcf	status,0,c
   927  007C88  364D               	rlcf	___awdiv@quotient,f,c
   928  007C8A  364E               	rlcf	___awdiv@quotient+1,f,c
   929  007C8C  5049               	movf	___awdiv@divisor,w,c
   930  007C8E  5C47               	subwf	___awdiv@dividend,w,c
   931  007C90  504A               	movf	___awdiv@divisor+1,w,c
   932  007C92  5848               	subwfb	___awdiv@dividend+1,w,c
   933  007C94  A0D8               	btfss	status,0,c
   934  007C96  D005               	goto	l1115
   935  007C98  5049               	movf	___awdiv@divisor,w,c
   936  007C9A  5E47               	subwf	___awdiv@dividend,f,c
   937  007C9C  504A               	movf	___awdiv@divisor+1,w,c
   938  007C9E  5A48               	subwfb	___awdiv@dividend+1,f,c
   939  007CA0  804D               	bsf	___awdiv@quotient,0,c
   940  007CA2                     l1115:
   941  007CA2  90D8               	bcf	status,0,c
   942  007CA4  324A               	rrcf	___awdiv@divisor+1,f,c
   943  007CA6  3249               	rrcf	___awdiv@divisor,f,c
   944  007CA8  2E4B               	decfsz	___awdiv@counter,f,c
   945  007CAA  D7ED               	goto	u340
   946  007CAC                     l1119:
   947  007CAC  504C               	movf	___awdiv@sign,w,c
   948  007CAE  B4D8               	btfsc	status,2,c
   949  007CB0  D004               	goto	l1123
   950  007CB2  6C4D               	negf	___awdiv@quotient,c
   951  007CB4  1E4E               	comf	___awdiv@quotient+1,f,c
   952  007CB6  B0D8               	btfsc	status,0,c
   953  007CB8  2A4E               	incf	___awdiv@quotient+1,f,c
   954  007CBA                     l1123:
   955  007CBA  C04D  F047         	movff	___awdiv@quotient,?___awdiv
   956  007CBE  C04E  F048         	movff	___awdiv@quotient+1,?___awdiv+1
   957  007CC2  0012               	return		;funcret
   958  007CC4                     __end_of___awdiv:
   959                           	opt callstack 0
   960                           
   961 ;; *************** function _ADC_CONVERTIR *****************
   962 ;; Defined at:
   963 ;;		line 69 in file "ADC.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;		None
   966 ;; Auto vars:     Size  Location     Type
   967 ;;  num             2    3[COMRAM] int 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  2    0[COMRAM] int 
   970 ;; Registers used:
   971 ;;		wreg, status,2, status,0
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   977 ;;      Params:         2       0       0       0       0       0       0       0       0
   978 ;;      Locals:         2       0       0       0       0       0       0       0       0
   979 ;;      Temps:          1       0       0       0       0       0       0       0       0
   980 ;;      Totals:         5       0       0       0       0       0       0       0       0
   981 ;;Total ram usage:        5 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; This function calls:
   984 ;;		Nothing
   985 ;; This function is called by:
   986 ;;		_main
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text4
   991  007BAC                     __ptext4:
   992                           	opt callstack 0
   993  007BAC                     _ADC_CONVERTIR:
   994                           	opt callstack 30
   995                           
   996                           ;ADC.c: 71:  int num;;ADC.c: 72:  ADCON0bits.GO = 1;
   997                           
   998                           ;incstack = 0
   999  007BAC  82C2               	bsf	4034,1,c	;volatile
  1000  007BAE                     l39:
  1001  007BAE  B2C2               	btfsc	4034,1,c	;volatile
  1002  007BB0  D7FE               	goto	l39
  1003                           
  1004                           ;ADC.c: 74:  num = 0x03 & ADRESH;
  1005  007BB2  CFC4 F049          	movff	4036,??_ADC_CONVERTIR	;volatile
  1006  007BB6  0E03               	movlw	3
  1007  007BB8  1649               	andwf	??_ADC_CONVERTIR,f,c
  1008  007BBA  5049               	movf	??_ADC_CONVERTIR,w,c
  1009  007BBC  6E4A               	movwf	ADC_CONVERTIR@num,c
  1010  007BBE  6A4B               	clrf	ADC_CONVERTIR@num+1,c
  1011                           
  1012                           ;ADC.c: 75:  num<<= 8;
  1013  007BC0  504A               	movf	ADC_CONVERTIR@num,w,c
  1014  007BC2  6E4B               	movwf	ADC_CONVERTIR@num+1,c
  1015  007BC4  6A4A               	clrf	ADC_CONVERTIR@num,c
  1016                           
  1017                           ;ADC.c: 76:  num +=ADRESL;
  1018  007BC6  50C3               	movf	4035,w,c	;volatile
  1019  007BC8  264A               	addwf	ADC_CONVERTIR@num,f,c
  1020  007BCA  0E00               	movlw	0
  1021  007BCC  224B               	addwfc	ADC_CONVERTIR@num+1,f,c
  1022                           
  1023                           ;ADC.c: 77:  return(num);
  1024  007BCE  C04A  F047         	movff	ADC_CONVERTIR@num,?_ADC_CONVERTIR
  1025  007BD2  C04B  F048         	movff	ADC_CONVERTIR@num+1,?_ADC_CONVERTIR+1
  1026  007BD6  0012               	return		;funcret
  1027  007BD8                     __end_of_ADC_CONVERTIR:
  1028                           	opt callstack 0
  1029                           
  1030 ;; *************** function _ADC_CONFIG *****************
  1031 ;; Defined at:
  1032 ;;		line 6 in file "ADC.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;  canal           1    wreg     unsigned char 
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;  canal           1    2[COMRAM] unsigned char 
  1037 ;; Return value:  Size  Location     Type
  1038 ;;                  1    wreg      void 
  1039 ;; Registers used:
  1040 ;;		wreg, status,2, status,0
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1046 ;;      Params:         0       0       0       0       0       0       0       0       0
  1047 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1048 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1049 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1050 ;;Total ram usage:        3 bytes
  1051 ;; Hardware stack levels used:    1
  1052 ;; This function calls:
  1053 ;;		Nothing
  1054 ;; This function is called by:
  1055 ;;		_main
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           	psect	text5
  1060  007CC4                     __ptext5:
  1061                           	opt callstack 0
  1062  007CC4                     _ADC_CONFIG:
  1063                           	opt callstack 30
  1064                           
  1065                           ;incstack = 0
  1066                           ;ADC_CONFIG@canal stored from wreg
  1067  007CC4  6E49               	movwf	ADC_CONFIG@canal,c
  1068                           
  1069                           ;ADC.c: 6: void ADC_CONFIG(char canal);ADC.c: 7: {;ADC.c: 8:  TRISA = 0xFF;
  1070  007CC6  6892               	setf	3986,c	;volatile
  1071                           
  1072                           ;ADC.c: 9:  TRISE = 0xFF;
  1073  007CC8  6896               	setf	3990,c	;volatile
  1074                           
  1075                           ;ADC.c: 10:  TRISB = 0x0F;
  1076  007CCA  0E0F               	movlw	15
  1077  007CCC  6E93               	movwf	3987,c	;volatile
  1078                           
  1079                           ;ADC.c: 11:  switch(canal)
  1080  007CCE  D01F               	goto	l951
  1081  007CD0                     l897:
  1082                           
  1083                           ;ADC.c: 14:    ADCON1=0x0E;
  1084  007CD0  0E0E               	movlw	14
  1085  007CD2                     L1:
  1086  007CD2  6EC1               	movwf	4033,c	;volatile
  1087                           
  1088                           ;ADC.c: 15:    ADCON0=canal<<2;
  1089  007CD4  4449               	rlncf	ADC_CONFIG@canal,w,c
  1090  007CD6  46E8               	rlncf	wreg,f,c
  1091  007CD8  0BFC               	andlw	252
  1092  007CDA  6EC2               	movwf	4034,c	;volatile
  1093                           
  1094                           ;ADC.c: 16:   break;
  1095  007CDC  D047               	goto	l953
  1096  007CDE                     l901:
  1097                           
  1098                           ;ADC.c: 18:    ADCON1=0x0D;
  1099  007CDE  0E0D               	movlw	13
  1100  007CE0  D7F8               	goto	L1
  1101  007CE2                     l905:
  1102                           
  1103                           ;ADC.c: 22:    ADCON1=0x0C;
  1104  007CE2  0E0C               	movlw	12
  1105  007CE4  D7F6               	goto	L1
  1106  007CE6                     l909:
  1107                           
  1108                           ;ADC.c: 26:    ADCON1=0x0B;
  1109  007CE6  0E0B               	movlw	11
  1110  007CE8  D7F4               	goto	L1
  1111  007CEA                     l913:
  1112                           
  1113                           ;ADC.c: 30:    ADCON1=0x0A;
  1114  007CEA  0E0A               	movlw	10
  1115  007CEC  D7F2               	goto	L1
  1116  007CEE                     l917:
  1117                           
  1118                           ;ADC.c: 34:    ADCON1=0x09;
  1119  007CEE  0E09               	movlw	9
  1120  007CF0  D7F0               	goto	L1
  1121  007CF2                     l921:
  1122                           
  1123                           ;ADC.c: 38:    ADCON1=0x08;
  1124  007CF2  0E08               	movlw	8
  1125  007CF4  D7EE               	goto	L1
  1126  007CF6                     l925:
  1127                           
  1128                           ;ADC.c: 42:    ADCON1=0x07;
  1129  007CF6  0E07               	movlw	7
  1130  007CF8  D7EC               	goto	L1
  1131  007CFA                     l929:
  1132                           
  1133                           ;ADC.c: 46:    ADCON1=0x06;
  1134  007CFA  0E06               	movlw	6
  1135  007CFC  D7EA               	goto	L1
  1136  007CFE                     l933:
  1137                           
  1138                           ;ADC.c: 50:    ADCON1=0x05;
  1139  007CFE  0E05               	movlw	5
  1140  007D00  D7E8               	goto	L1
  1141  007D02                     l937:
  1142                           
  1143                           ;ADC.c: 54:    ADCON1=0x04;
  1144  007D02  0E04               	movlw	4
  1145  007D04  D7E6               	goto	L1
  1146  007D06                     l941:
  1147                           
  1148                           ;ADC.c: 58:    ADCON1=0x03;
  1149  007D06  0E03               	movlw	3
  1150  007D08  D7E4               	goto	L1
  1151  007D0A                     l945:
  1152                           
  1153                           ;ADC.c: 62:    ADCON1=0x02;
  1154  007D0A  0E02               	movlw	2
  1155  007D0C  D7E2               	goto	L1
  1156  007D0E                     l951:
  1157  007D0E  5049               	movf	ADC_CONFIG@canal,w,c
  1158  007D10  6E47               	movwf	??_ADC_CONFIG& (0+255),c
  1159  007D12  6A48               	clrf	(??_ADC_CONFIG+1)& (0+255),c
  1160                           
  1161                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1162                           ; Switch size 1, requested type "simple"
  1163                           ; Number of cases is 1, Range of values is 0 to 0
  1164                           ; switch strategies available:
  1165                           ; Name         Instructions Cycles
  1166                           ; simple_byte            4     3 (average)
  1167                           ;	Chosen strategy is simple_byte
  1168  007D14  5048               	movf	??_ADC_CONFIG+1,w,c
  1169  007D16  0A00               	xorlw	0	; case 0
  1170  007D18  A4D8               	btfss	status,2,c
  1171  007D1A  D028               	goto	l953
  1172                           
  1173                           ; Switch size 1, requested type "simple"
  1174                           ; Number of cases is 13, Range of values is 0 to 12
  1175                           ; switch strategies available:
  1176                           ; Name         Instructions Cycles
  1177                           ; simple_byte           40    21 (average)
  1178                           ;	Chosen strategy is simple_byte
  1179  007D1C  5047               	movf	??_ADC_CONFIG,w,c
  1180  007D1E  0A00               	xorlw	0	; case 0
  1181  007D20  B4D8               	btfsc	status,2,c
  1182  007D22  D7D6               	goto	l897
  1183  007D24  0A01               	xorlw	1	; case 1
  1184  007D26  B4D8               	btfsc	status,2,c
  1185  007D28  D7DA               	goto	l901
  1186  007D2A  0A03               	xorlw	3	; case 2
  1187  007D2C  B4D8               	btfsc	status,2,c
  1188  007D2E  D7D9               	goto	l905
  1189  007D30  0A01               	xorlw	1	; case 3
  1190  007D32  B4D8               	btfsc	status,2,c
  1191  007D34  D7D8               	goto	l909
  1192  007D36  0A07               	xorlw	7	; case 4
  1193  007D38  B4D8               	btfsc	status,2,c
  1194  007D3A  D7D7               	goto	l913
  1195  007D3C  0A01               	xorlw	1	; case 5
  1196  007D3E  B4D8               	btfsc	status,2,c
  1197  007D40  D7D6               	goto	l917
  1198  007D42  0A03               	xorlw	3	; case 6
  1199  007D44  B4D8               	btfsc	status,2,c
  1200  007D46  D7D5               	goto	l921
  1201  007D48  0A01               	xorlw	1	; case 7
  1202  007D4A  B4D8               	btfsc	status,2,c
  1203  007D4C  D7D4               	goto	l925
  1204  007D4E  0A0F               	xorlw	15	; case 8
  1205  007D50  B4D8               	btfsc	status,2,c
  1206  007D52  D7D3               	goto	l929
  1207  007D54  0A01               	xorlw	1	; case 9
  1208  007D56  B4D8               	btfsc	status,2,c
  1209  007D58  D7D2               	goto	l933
  1210  007D5A  0A03               	xorlw	3	; case 10
  1211  007D5C  B4D8               	btfsc	status,2,c
  1212  007D5E  D7D1               	goto	l937
  1213  007D60  0A01               	xorlw	1	; case 11
  1214  007D62  B4D8               	btfsc	status,2,c
  1215  007D64  D7D0               	goto	l941
  1216  007D66  0A07               	xorlw	7	; case 12
  1217  007D68  B4D8               	btfsc	status,2,c
  1218  007D6A  D7CF               	goto	l945
  1219  007D6C                     l953:
  1220                           
  1221                           ;ADC.c: 66:  ADCON2 = 0x91;
  1222  007D6C  0E91               	movlw	145
  1223  007D6E  6EC0               	movwf	4032,c	;volatile
  1224                           
  1225                           ;ADC.c: 67:  ADCON0bits.ADON = 1;
  1226  007D70  80C2               	bsf	4034,0,c	;volatile
  1227  007D72  0012               	return		;funcret
  1228  007D74                     __end_of_ADC_CONFIG:
  1229                           	opt callstack 0
  1230  0000                     
  1231                           	psect	rparam
  1232  0000                     tosu	equ	0xFFF
  1233                           tosh	equ	0xFFE
  1234                           tosl	equ	0xFFD
  1235                           stkptr	equ	0xFFC
  1236                           pclatu	equ	0xFFB
  1237                           pclath	equ	0xFFA
  1238                           pcl	equ	0xFF9
  1239                           tblptru	equ	0xFF8
  1240                           tblptrh	equ	0xFF7
  1241                           tblptrl	equ	0xFF6
  1242                           tablat	equ	0xFF5
  1243                           prodh	equ	0xFF4
  1244                           prodl	equ	0xFF3
  1245                           indf0	equ	0xFEF
  1246                           postinc0	equ	0xFEE
  1247                           postdec0	equ	0xFED
  1248                           preinc0	equ	0xFEC
  1249                           plusw0	equ	0xFEB
  1250                           fsr0h	equ	0xFEA
  1251                           fsr0l	equ	0xFE9
  1252                           wreg	equ	0xFE8
  1253                           indf1	equ	0xFE7
  1254                           postinc1	equ	0xFE6
  1255                           postdec1	equ	0xFE5
  1256                           preinc1	equ	0xFE4
  1257                           plusw1	equ	0xFE3
  1258                           fsr1h	equ	0xFE2
  1259                           fsr1l	equ	0xFE1
  1260                           bsr	equ	0xFE0
  1261                           indf2	equ	0xFDF
  1262                           postinc2	equ	0xFDE
  1263                           postdec2	equ	0xFDD
  1264                           preinc2	equ	0xFDC
  1265                           plusw2	equ	0xFDB
  1266                           fsr2h	equ	0xFDA
  1267                           fsr2l	equ	0xFD9
  1268                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        50
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      88
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_DIGITOS
    _DIGITOS->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    2310
                                             10 COMRAM     8     8      0
                         _ADC_CONFIG
                      _ADC_CONVERTIR
                            _DIGITOS
 ---------------------------------------------------------------------------------
 (1) _DIGITOS                                              2     0      2    1871
                                              8 COMRAM     2     0      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _ADC_CONVERTIR                                        5     3      2      25
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CONFIG                                           3     3      0     210
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CONFIG
   _ADC_CONVERTIR
   _DIGITOS
     ___awdiv
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     12      58       1       92.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      58      20        0.0%
DATA                 0      0      58       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Jun 11 12:13:21 2019

    __size_of_ADC_CONFIG 00B0          ADC_CONFIG@canal 0049                       l39 7BAE  
                     l98 7E7E             ___awdiv@sign 004C      ___wmul@multiplicand 0049  
     __CFG_FOSC$XTPLL_XT 000000                      l101 7E96                      l112 7EF4  
                    l104 7EB2                      l121 7F26                      l130 7F42  
                    l115 7F12                      l107 7EBA                      l124 7F30  
                    l141 7FA2                      l133 7F4A                      l150 7FC0  
                    l118 7F1C                      l127 7F3A                      l144 7FAC  
                    l153 7FCA                      l162 7FE2                      l138 7F84  
                    l147 7FB6                      l156 7FD2                      l159 7FDA  
                    l901 7CDE                      l921 7CF2                      l913 7CEA  
                    l905 7CE2                      l941 7D06                      l933 7CFE  
                    l925 7CF6                      l917 7CEE                      l909 7CE6  
                    l951 7D0E                      l945 7D0A                      l937 7D02  
                    l929 7CFA                      l953 7D6C                      l897 7CD0  
                    u340 7C86                      u430 7F0C                      u520 7F9C  
                    u390 7EAE                      u617 7FF0             __CFG_BOR$OFF 000000  
 __size_of_ADC_CONVERTIR 002C                      wreg 000FE8          __end_of_DIGITOS 7E66  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1103 7C7A  
                   l1105 7C82                     l1123 7CBA                     l1115 7CA2  
                   l1119 7CAC                     l1215 7F74                     l1091 7C54  
                   l1165 7E86                     l1097 7C64                     l1185 7EE4  
           __CFG_PWRT$ON 000000                     _main 7E66                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000            __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0047          __end_of___awdiv 7CC4          ___awdiv@divisor 0049  
        ___awdiv@counter 004B                    _SPBRG 000FAF                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISE 000F96                    _TXREG 000FAD  
                  main@c 0053                    tablat 000FF5                    status 000FD8  
          _ADC_CONVERTIR 7BAC          __initialization 7C0A             __end_of_main 8000  
              ??_DIGITOS 0051                   ??_main 0051            __activetblptr 000002  
       ADC_CONVERTIR@num 004A             ??_ADC_CONFIG 0047                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _ADRESH 000FC4  
                 _ADRESL 000FC3         ___awdiv@dividend 0047                   _SPBRGH 000FB0  
         ?_ADC_CONVERTIR 0047                   _cadena 0029       __end_of_ADC_CONFIG 7D74  
                 ___wmul 7B86                ??___awdiv 004B                   _digdec 003B  
                 _digcen 003D                   _digdmi 0041                   _digmil 003F  
                 _diguni 0039                   clear_0 7C30         ___awdiv@quotient 004D  
           __pdataCOMRAM 0001                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 7C36  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0047  
        ??_ADC_CONVERTIR 0049                  ?___wmul 0047                  _DIGITOS 7D74  
                __Hparam 0000                  __Lparam 0000                  ___awdiv 7C40  
        __size_of___wmul 0026                  _cadena2 0015                  _cadena3 0001  
                __pcinit 7C0A                  __ramtop 0800                  __ptext0 7E66  
                __ptext1 7D74                  __ptext2 7B86                  __ptext3 7C40  
                __ptext4 7BAC                  __ptext5 7CC4     end_of_initialization 7C36  
          __Lmediumconst 0000                _RCSTAbits 000FAB                _RESULTON2 0043  
                postdec1 000FE5                  postinc0 000FEE                _TRISCbits 000F94  
              _TRISDbits 000F95                _TXSTAbits 000FAC           __end_of___wmul 7BAC  
            _BAUDCONbits 000FB8            __pidataCOMRAM 7BD8      start_initialization 7C0A  
           DIGITOS@valor 004F                 ??___wmul 004B                 ?_DIGITOS 004F  
            __pbssCOMRAM 0033    __end_of_ADC_CONVERTIR 7BD8                 ?___awdiv 0047  
         ___wmul@product 004B                 _RESULTON 0045                _temporal2 0035  
              _temporal3 0033                main@c_406 0055                main@c_407 0057  
             _ADCON0bits 000FC2        ___wmul@multiplier 0047         __size_of_DIGITOS 00F2  
             _ADC_CONFIG 7CC4                copy_data0 7C1E                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 0084            __size_of_main 019A  
               _temporal 0037    __CFG_CPUDIV$OSC1_PLL2 000000              ?_ADC_CONFIG 0047  
