

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu May 30 12:28:53 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29  0000                     
    30                           ; Version 2.05
    31                           ; Generated 20/12/2018 GMT
    32                           ; 
    33                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4550 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataCOMRAM
    66  000CDE                     __pidataCOMRAM:
    67                           	opt callstack 0
    68                           
    69                           ;initializer for _segu
    70  000CDE  002D               	dw	45
    71                           
    72                           ;initializer for _minu
    73  000CE0  0013               	dw	19
    74                           
    75                           ;initializer for _hora
    76  000CE2  000C               	dw	12
    77  0000                     _PORTD	set	3971
    78  0000                     _LATD	set	3980
    79  0000                     _LATDbits	set	3980
    80  0000                     _PIR1bits	set	3998
    81  0000                     _PIE1bits	set	3997
    82  0000                     _INTCONbits	set	4082
    83  0000                     _CCPR1L	set	4030
    84  0000                     _CCPR1H	set	4031
    85  0000                     _CCP1CON	set	4029
    86  0000                     _T1CON	set	4045
    87  0000                     _TRISD	set	3989
    88                           
    89                           	psect	smallconst
    90  000800                     __psmallconst:
    91                           	opt callstack 0
    92  000800  00                 	db	0
    93  000801                     STR_1:
    94  000801  55                 	db	85	;'U'
    95  000802  50                 	db	80	;'P'
    96  000803  43                 	db	67	;'C'
    97  000804  54                 	db	84	;'T'
    98  000805  72                 	db	114	;'r'
    99  000806  6F                 	db	111	;'o'
   100  000807  6E                 	db	110	;'n'
   101  000808  69                 	db	105	;'i'
   102  000809  63                 	db	99	;'c'
   103  00080A  73                 	db	115	;'s'
   104  00080B  20                 	db	32
   105  00080C  32                 	db	50	;'2'
   106  00080D  30                 	db	48	;'0'
   107  00080E  31                 	db	49	;'1'
   108  00080F  39                 	db	57	;'9'
   109  000810  00                 	db	0
   110  000811                     STR_2:
   111  000811  48                 	db	72	;'H'
   112  000812  6F                 	db	111	;'o'
   113  000813  72                 	db	114	;'r'
   114  000814  61                 	db	97	;'a'
   115  000815  3A                 	db	58	;':'
   116  000816  00                 	db	0
   117                           
   118                           ; #config settings
   119  000817  00                 	db	0	; dummy byte at the end
   120  0000                     
   121                           	psect	cinit
   122  000B7C                     __pcinit:
   123                           	opt callstack 0
   124  000B7C                     start_initialization:
   125                           	opt callstack 0
   126  000B7C                     __initialization:
   127                           	opt callstack 0
   128                           
   129                           ; Initialize objects allocated to COMRAM (6 bytes)
   130                           ; load TBLPTR registers with __pidataCOMRAM
   131  000B7C  0EDE               	movlw	low __pidataCOMRAM
   132  000B7E  6EF6               	movwf	tblptrl,c
   133  000B80  0E0C               	movlw	high __pidataCOMRAM
   134  000B82  6EF7               	movwf	tblptrh,c
   135  000B84  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   136  000B86  6EF8               	movwf	tblptru,c
   137  000B88  EE00  F01D         	lfsr	0,__pdataCOMRAM
   138  000B8C  EE10 F006          	lfsr	1,6
   139  000B90                     copy_data0:
   140  000B90  0009               	tblrd		*+
   141  000B92  CFF5 FFEE          	movff	tablat,postinc0
   142  000B96  50E5               	movf	postdec1,w,c
   143  000B98  50E1               	movf	fsr1l,w,c
   144  000B9A  E1FA               	bnz	copy_data0
   145                           
   146                           ; Clear objects allocated to COMRAM (16 bytes)
   147  000B9C  EE00  F001         	lfsr	0,__pbssCOMRAM
   148  000BA0  0E10               	movlw	16
   149  000BA2                     clear_0:
   150  000BA2  6AEE               	clrf	postinc0,c
   151  000BA4  06E8               	decf	wreg,f,c
   152  000BA6  E1FD               	bnz	clear_0
   153  000BA8                     end_of_initialization:
   154                           	opt callstack 0
   155  000BA8                     __end_of__initialization:
   156                           	opt callstack 0
   157  000BA8  9023               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   158  000BAA  9223               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   159  000BAC  0E00               	movlw	low (__Lsmallconst shr (0+16))
   160  000BAE  6EF8               	movwf	tblptru,c
   161  000BB0  0E08               	movlw	high __Lsmallconst
   162  000BB2  6EF7               	movwf	tblptrh,c
   163  000BB4  0100               	movlb	0
   164  000BB6  EF85  F004         	goto	_main	;jump to C main() function
   165                           
   166                           	psect	bssCOMRAM
   167  000001                     __pbssCOMRAM:
   168                           	opt callstack 0
   169  000001                     _temporal3:
   170                           	opt callstack 0
   171  000001                     	ds	2
   172  000003                     _temporal2:
   173                           	opt callstack 0
   174  000003                     	ds	2
   175  000005                     _temporal:
   176                           	opt callstack 0
   177  000005                     	ds	2
   178  000007                     _diguni:
   179                           	opt callstack 0
   180  000007                     	ds	2
   181  000009                     _digdec:
   182                           	opt callstack 0
   183  000009                     	ds	2
   184  00000B                     _digcen:
   185                           	opt callstack 0
   186  00000B                     	ds	2
   187  00000D                     _digmil:
   188                           	opt callstack 0
   189  00000D                     	ds	2
   190  00000F                     _digdmi:
   191                           	opt callstack 0
   192  00000F                     	ds	2
   193                           
   194                           	psect	dataCOMRAM
   195  00001D                     __pdataCOMRAM:
   196                           	opt callstack 0
   197  00001D                     _segu:
   198                           	opt callstack 0
   199  00001D                     	ds	2
   200  00001F                     _minu:
   201                           	opt callstack 0
   202  00001F                     	ds	2
   203  000021                     _hora:
   204                           	opt callstack 0
   205  000021                     	ds	2
   206                           
   207                           	psect	cstackCOMRAM
   208  000011                     __pcstackCOMRAM:
   209                           	opt callstack 0
   210  000011                     ?___wmul:
   211                           	opt callstack 0
   212  000011                     ?___awdiv:
   213                           	opt callstack 0
   214  000011                     ENVIA_NIBBLE@dato:
   215                           	opt callstack 0
   216  000011                     LEER_LCD@aux:
   217                           	opt callstack 0
   218  000011                     ___wmul@multiplier:
   219                           	opt callstack 0
   220  000011                     ___awdiv@dividend:
   221                           	opt callstack 0
   222                           
   223                           ; 2 bytes @ 0x0
   224  000011                     	ds	1
   225  000012                     ENVIA_CHAR@dato:
   226                           	opt callstack 0
   227  000012                     ENVIA_LCD_CMD@dato:
   228                           	opt callstack 0
   229                           
   230                           ; 1 bytes @ 0x1
   231  000012                     	ds	1
   232  000013                     ENVIA_CHAR@aux:
   233                           	opt callstack 0
   234  000013                     ENVIA_LCD_CMD@aux:
   235                           	opt callstack 0
   236  000013                     ___wmul@multiplicand:
   237                           	opt callstack 0
   238  000013                     ___awdiv@divisor:
   239                           	opt callstack 0
   240                           
   241                           ; 2 bytes @ 0x2
   242  000013                     	ds	1
   243  000014                     ??_LCD_CONFIG:
   244  000014                     POS_CURSOR@columna:
   245                           	opt callstack 0
   246  000014                     CURSOR_ONOFF@estado:
   247                           	opt callstack 0
   248  000014                     ESCRIBE_MENSAJE@cadena:
   249                           	opt callstack 0
   250                           
   251                           ; 2 bytes @ 0x3
   252  000014                     	ds	1
   253  000015                     POS_CURSOR@fila:
   254                           	opt callstack 0
   255  000015                     ___awdiv@counter:
   256                           	opt callstack 0
   257  000015                     ___wmul@product:
   258                           	opt callstack 0
   259                           
   260                           ; 2 bytes @ 0x4
   261  000015                     	ds	1
   262  000016                     ESCRIBE_MENSAJE@tam:
   263                           	opt callstack 0
   264  000016                     ___awdiv@sign:
   265                           	opt callstack 0
   266                           
   267                           ; 1 bytes @ 0x5
   268  000016                     	ds	1
   269  000017                     ??_ESCRIBE_MENSAJE:
   270  000017                     ___awdiv@quotient:
   271                           	opt callstack 0
   272                           
   273                           ; 2 bytes @ 0x6
   274  000017                     	ds	2
   275  000019                     ESCRIBE_MENSAJE@i:
   276                           	opt callstack 0
   277  000019                     DIGITOS@valor:
   278                           	opt callstack 0
   279                           
   280                           ; 2 bytes @ 0x8
   281  000019                     	ds	2
   282  00001B                     ??_main:
   283                           
   284                           ; 1 bytes @ 0xA
   285  00001B                     	ds	2
   286                           
   287 ;;
   288 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   289 ;;
   290 ;; *************** function _main *****************
   291 ;; Defined at:
   292 ;;		line 49 in file "tictac.c"
   293 ;; Parameters:    Size  Location     Type
   294 ;;		None
   295 ;; Auto vars:     Size  Location     Type
   296 ;;		None
   297 ;; Return value:  Size  Location     Type
   298 ;;                  1    wreg      void 
   299 ;; Registers used:
   300 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   301 ;; Tracked objects:
   302 ;;		On entry : 0/0
   303 ;;		On exit  : 0/0
   304 ;;		Unchanged: 0/0
   305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   306 ;;      Params:         0       0       0       0       0       0       0       0       0
   307 ;;      Locals:         0       0       0       0       0       0       0       0       0
   308 ;;      Temps:          2       0       0       0       0       0       0       0       0
   309 ;;      Totals:         2       0       0       0       0       0       0       0       0
   310 ;;Total ram usage:        2 bytes
   311 ;; Hardware stack levels required when called:    4
   312 ;; This function calls:
   313 ;;		_CURSOR_HOME
   314 ;;		_CURSOR_ONOFF
   315 ;;		_DIGITOS
   316 ;;		_ENVIA_CHAR
   317 ;;		_ESCRIBE_MENSAJE
   318 ;;		_LCD_CONFIG
   319 ;;		_POS_CURSOR
   320 ;; This function is called by:
   321 ;;		Startup code after reset
   322 ;; This function uses a non-reentrant model
   323 ;;
   324                           
   325                           	psect	text0
   326  00090A                     __ptext0:
   327                           	opt callstack 0
   328  00090A                     _main:
   329                           	opt callstack 27
   330                           
   331                           ;tictac.c: 51:     _delay((unsigned long)((500)*(48000000UL/4000.0)));
   332                           
   333                           ;incstack = 0
   334  00090A  0E1F               	movlw	31
   335  00090C  6E1C               	movwf	(??_main+1)& (0+255),c
   336  00090E  0E71               	movlw	113
   337  000910  6E1B               	movwf	??_main& (0+255),c
   338  000912  0E1E               	movlw	30
   339  000914                     u307:
   340  000914  2EE8               	decfsz	wreg,f,c
   341  000916  D7FE               	bra	u307
   342  000918  2E1B               	decfsz	??_main& (0+255),f,c
   343  00091A  D7FC               	bra	u307
   344  00091C  2E1C               	decfsz	(??_main+1)& (0+255),f,c
   345  00091E  D7FA               	bra	u307
   346  000920  D000               	nop2	
   347                           
   348                           ;tictac.c: 52:     TRISD = 0x00;
   349  000922  0E00               	movlw	0
   350  000924  6E95               	movwf	3989,c	;volatile
   351                           
   352                           ;tictac.c: 53:     LCD_CONFIG();
   353  000926  EC66  F005         	call	_LCD_CONFIG	;wreg free
   354                           
   355                           ;tictac.c: 54:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   356  00092A  0EEA               	movlw	234
   357  00092C  6E1B               	movwf	??_main& (0+255),c
   358  00092E  0EC3               	movlw	195
   359  000930                     u317:
   360  000930  2EE8               	decfsz	wreg,f,c
   361  000932  D7FE               	bra	u317
   362  000934  2E1B               	decfsz	??_main& (0+255),f,c
   363  000936  D7FC               	bra	u317
   364  000938  F000               	nop	
   365                           
   366                           ;tictac.c: 55:     CURSOR_ONOFF(1);
   367  00093A  0E01               	movlw	1
   368  00093C  EC4F  F006         	call	_CURSOR_ONOFF
   369                           
   370                           ;tictac.c: 58:     T1CON = 0x83;
   371  000940  0E83               	movlw	131
   372  000942  6ECD               	movwf	4045,c	;volatile
   373                           
   374                           ;tictac.c: 59:     CCP1CON = 0x0B;
   375  000944  0E0B               	movlw	11
   376  000946  6EBD               	movwf	4029,c	;volatile
   377                           
   378                           ;tictac.c: 60:     CCPR1H = 0x80;
   379  000948  0E80               	movlw	128
   380  00094A  6EBF               	movwf	4031,c	;volatile
   381                           
   382                           ;tictac.c: 61:     CCPR1L = 0x00;
   383  00094C  0E00               	movlw	0
   384  00094E  6EBE               	movwf	4030,c	;volatile
   385                           
   386                           ;tictac.c: 62:     INTCONbits.GIE = 1;
   387  000950  8EF2               	bsf	4082,7,c	;volatile
   388                           
   389                           ;tictac.c: 63:     INTCONbits.PEIE = 1;
   390  000952  8CF2               	bsf	4082,6,c	;volatile
   391                           
   392                           ;tictac.c: 64:     PIE1bits.CCP1IE = 1;
   393  000954  849D               	bsf	3997,2,c	;volatile
   394                           
   395                           ;tictac.c: 66:     CURSOR_HOME();
   396  000956  EC6B  F006         	call	_CURSOR_HOME	;wreg free
   397                           
   398                           ;tictac.c: 67:     ESCRIBE_MENSAJE("UPCTronics 2019",15);
   399  00095A  0E01               	movlw	low STR_1
   400  00095C  6E14               	movwf	ESCRIBE_MENSAJE@cadena,c
   401  00095E  0E08               	movlw	high STR_1
   402  000960  6E15               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   403  000962  0E0F               	movlw	15
   404  000964  6E16               	movwf	ESCRIBE_MENSAJE@tam,c
   405  000966  EC11  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   406  00096A                     l1224:
   407                           
   408                           ;tictac.c: 69:         POS_CURSOR(2,0);
   409  00096A  0E00               	movlw	0
   410  00096C  6E14               	movwf	POS_CURSOR@columna,c
   411  00096E  0E02               	movlw	2
   412  000970  EC3D  F006         	call	_POS_CURSOR
   413                           
   414                           ;tictac.c: 70:         ESCRIBE_MENSAJE("Hora:",5);
   415  000974  0E11               	movlw	low STR_2
   416  000976  6E14               	movwf	ESCRIBE_MENSAJE@cadena,c
   417  000978  0E08               	movlw	high STR_2
   418  00097A  6E15               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   419  00097C  0E05               	movlw	5
   420  00097E  6E16               	movwf	ESCRIBE_MENSAJE@tam,c
   421  000980  EC11  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   422                           
   423                           ;tictac.c: 71:         DIGITOS(hora);
   424  000984  C021  F019         	movff	_hora,DIGITOS@valor
   425  000988  C022  F01A         	movff	_hora+1,DIGITOS@valor+1
   426  00098C  EC0C  F004         	call	_DIGITOS	;wreg free
   427                           
   428                           ;tictac.c: 72:         ENVIA_CHAR(digdec+0x30);
   429  000990  5009               	movf	_digdec,w,c
   430  000992  0F30               	addlw	48
   431  000994  ECDD  F005         	call	_ENVIA_CHAR
   432                           
   433                           ;tictac.c: 73:         ENVIA_CHAR(diguni+0x30);
   434  000998  5007               	movf	_diguni,w,c
   435  00099A  0F30               	addlw	48
   436  00099C  ECDD  F005         	call	_ENVIA_CHAR
   437                           
   438                           ;tictac.c: 74:         ENVIA_CHAR(':');
   439  0009A0  0E3A               	movlw	58
   440  0009A2  ECDD  F005         	call	_ENVIA_CHAR
   441                           
   442                           ;tictac.c: 75:         DIGITOS(minu);
   443  0009A6  C01F  F019         	movff	_minu,DIGITOS@valor
   444  0009AA  C020  F01A         	movff	_minu+1,DIGITOS@valor+1
   445  0009AE  EC0C  F004         	call	_DIGITOS	;wreg free
   446                           
   447                           ;tictac.c: 76:         ENVIA_CHAR(digdec+0x30);
   448  0009B2  5009               	movf	_digdec,w,c
   449  0009B4  0F30               	addlw	48
   450  0009B6  ECDD  F005         	call	_ENVIA_CHAR
   451                           
   452                           ;tictac.c: 77:         ENVIA_CHAR(diguni+0x30);
   453  0009BA  5007               	movf	_diguni,w,c
   454  0009BC  0F30               	addlw	48
   455  0009BE  ECDD  F005         	call	_ENVIA_CHAR
   456                           
   457                           ;tictac.c: 78:         ENVIA_CHAR(':');
   458  0009C2  0E3A               	movlw	58
   459  0009C4  ECDD  F005         	call	_ENVIA_CHAR
   460                           
   461                           ;tictac.c: 79:         DIGITOS(segu);
   462  0009C8  C01D  F019         	movff	_segu,DIGITOS@valor
   463  0009CC  C01E  F01A         	movff	_segu+1,DIGITOS@valor+1
   464  0009D0  EC0C  F004         	call	_DIGITOS	;wreg free
   465                           
   466                           ;tictac.c: 80:         ENVIA_CHAR(digdec+0x30);
   467  0009D4  5009               	movf	_digdec,w,c
   468  0009D6  0F30               	addlw	48
   469  0009D8  ECDD  F005         	call	_ENVIA_CHAR
   470                           
   471                           ;tictac.c: 81:         ENVIA_CHAR(diguni+0x30);
   472  0009DC  5007               	movf	_diguni,w,c
   473  0009DE  0F30               	addlw	48
   474  0009E0  ECDD  F005         	call	_ENVIA_CHAR
   475  0009E4  D7C2               	goto	l1224
   476  0009E6                     __end_of_main:
   477                           	opt callstack 0
   478                           
   479 ;; *************** function _POS_CURSOR *****************
   480 ;; Defined at:
   481 ;;		line 6 in file "LCD.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;  fila            1    wreg     unsigned char 
   484 ;;  columna         1    3[COMRAM] unsigned char 
   485 ;; Auto vars:     Size  Location     Type
   486 ;;  fila            1    4[COMRAM] unsigned char 
   487 ;; Return value:  Size  Location     Type
   488 ;;                  1    wreg      void 
   489 ;; Registers used:
   490 ;;		wreg, status,2, status,0, cstack
   491 ;; Tracked objects:
   492 ;;		On entry : 0/0
   493 ;;		On exit  : 0/0
   494 ;;		Unchanged: 0/0
   495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   496 ;;      Params:         1       0       0       0       0       0       0       0       0
   497 ;;      Locals:         1       0       0       0       0       0       0       0       0
   498 ;;      Temps:          0       0       0       0       0       0       0       0       0
   499 ;;      Totals:         2       0       0       0       0       0       0       0       0
   500 ;;Total ram usage:        2 bytes
   501 ;; Hardware stack levels used:    1
   502 ;; Hardware stack levels required when called:    3
   503 ;; This function calls:
   504 ;;		_ENVIA_LCD_CMD
   505 ;; This function is called by:
   506 ;;		_main
   507 ;; This function uses a non-reentrant model
   508 ;;
   509                           
   510                           	psect	text1
   511  000C7A                     __ptext1:
   512                           	opt callstack 0
   513  000C7A                     _POS_CURSOR:
   514                           	opt callstack 27
   515                           
   516                           ;incstack = 0
   517                           ;POS_CURSOR@fila stored from wreg
   518  000C7A  6E15               	movwf	POS_CURSOR@fila,c
   519                           
   520                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   521  000C7C  0415               	decf	POS_CURSOR@fila,w,c
   522  000C7E  A4D8               	btfss	status,2,c
   523  000C80  D005               	goto	l1200
   524                           
   525                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   526  000C82  5014               	movf	POS_CURSOR@columna,w,c
   527  000C84  0F80               	addlw	128
   528  000C86  ECF7  F005         	call	_ENVIA_LCD_CMD
   529                           
   530                           ;LCD.c: 11:  }
   531  000C8A  0012               	return	
   532  000C8C                     l1200:
   533  000C8C  0E02               	movlw	2
   534  000C8E  1815               	xorwf	POS_CURSOR@fila,w,c
   535  000C90  A4D8               	btfss	status,2,c
   536  000C92  0012               	return	
   537                           
   538                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   539  000C94  5014               	movf	POS_CURSOR@columna,w,c
   540  000C96  0FC0               	addlw	192
   541  000C98  ECF7  F005         	call	_ENVIA_LCD_CMD
   542  000C9C  0012               	return		;funcret
   543  000C9E                     __end_of_POS_CURSOR:
   544                           	opt callstack 0
   545                           
   546 ;; *************** function _LCD_CONFIG *****************
   547 ;; Defined at:
   548 ;;		line 72 in file "LCD.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;		None
   551 ;; Auto vars:     Size  Location     Type
   552 ;;		None
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      void 
   555 ;; Registers used:
   556 ;;		wreg, status,2, status,0, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   562 ;;      Params:         0       0       0       0       0       0       0       0       0
   563 ;;      Locals:         0       0       0       0       0       0       0       0       0
   564 ;;      Temps:          1       0       0       0       0       0       0       0       0
   565 ;;      Totals:         1       0       0       0       0       0       0       0       0
   566 ;;Total ram usage:        1 bytes
   567 ;; Hardware stack levels used:    1
   568 ;; Hardware stack levels required when called:    3
   569 ;; This function calls:
   570 ;;		_ENVIA_LCD_CMD
   571 ;;		_ENVIA_NIBBLE
   572 ;; This function is called by:
   573 ;;		_main
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	text2
   578  000ACC                     __ptext2:
   579                           	opt callstack 0
   580  000ACC                     _LCD_CONFIG:
   581                           	opt callstack 27
   582                           
   583                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   584                           
   585                           ;incstack = 0
   586  000ACC  908C               	bcf	3980,0,c	;volatile
   587                           
   588                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   589  000ACE  928C               	bcf	3980,1,c	;volatile
   590                           
   591                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   592  000AD0  0E30               	movlw	48
   593  000AD2  EC5D  F006         	call	_ENVIA_NIBBLE
   594                           
   595                           ;LCD.c: 77:         _delay(24000);
   596  000AD6  0E20               	movlw	32
   597  000AD8  6E14               	movwf	??_LCD_CONFIG& (0+255),c
   598  000ADA  0E2A               	movlw	42
   599  000ADC                     u327:
   600  000ADC  2EE8               	decfsz	wreg,f,c
   601  000ADE  D7FE               	bra	u327
   602  000AE0  2E14               	decfsz	??_LCD_CONFIG& (0+255),f,c
   603  000AE2  D7FC               	bra	u327
   604                           
   605                           ;LCD.c: 78:         _delay(24000);
   606  000AE4  0E20               	movlw	32
   607  000AE6  6E14               	movwf	??_LCD_CONFIG& (0+255),c
   608  000AE8  0E2A               	movlw	42
   609  000AEA                     u337:
   610  000AEA  2EE8               	decfsz	wreg,f,c
   611  000AEC  D7FE               	bra	u337
   612  000AEE  2E14               	decfsz	??_LCD_CONFIG& (0+255),f,c
   613  000AF0  D7FC               	bra	u337
   614                           
   615                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   616  000AF2  0E30               	movlw	48
   617  000AF4  EC5D  F006         	call	_ENVIA_NIBBLE
   618                           
   619                           ;LCD.c: 83:  _delay(1200);
   620  000AF8  0EF0               	movlw	240
   621  000AFA                     u347:
   622  000AFA  D000               	nop2	
   623  000AFC  2EE8               	decfsz	wreg,f,c
   624  000AFE  D7FD               	bra	u347
   625                           
   626                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   627  000B00  0E30               	movlw	48
   628  000B02  EC5D  F006         	call	_ENVIA_NIBBLE
   629                           
   630                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   631  000B06  0E20               	movlw	32
   632  000B08  EC5D  F006         	call	_ENVIA_NIBBLE
   633                           
   634                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   635  000B0C  0E01               	movlw	1
   636  000B0E  ECF7  F005         	call	_ENVIA_LCD_CMD
   637                           
   638                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   639  000B12  0E28               	movlw	40
   640  000B14  ECF7  F005         	call	_ENVIA_LCD_CMD
   641                           
   642                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   643  000B18  0E0F               	movlw	15
   644  000B1A  ECF7  F005         	call	_ENVIA_LCD_CMD
   645                           
   646                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   647  000B1E  0E06               	movlw	6
   648  000B20  ECF7  F005         	call	_ENVIA_LCD_CMD
   649                           
   650                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   651  000B24  0E01               	movlw	1
   652  000B26  ECF7  F005         	call	_ENVIA_LCD_CMD
   653  000B2A  0012               	return		;funcret
   654  000B2C                     __end_of_LCD_CONFIG:
   655                           	opt callstack 0
   656                           
   657 ;; *************** function _ESCRIBE_MENSAJE *****************
   658 ;; Defined at:
   659 ;;		line 41 in file "LCD.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   662 ;;		 -> STR_2(6), STR_1(16), 
   663 ;;  tam             1    5[COMRAM] unsigned char 
   664 ;; Auto vars:     Size  Location     Type
   665 ;;  i               1    8[COMRAM] unsigned char 
   666 ;; Return value:  Size  Location     Type
   667 ;;                  1    wreg      void 
   668 ;; Registers used:
   669 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   670 ;; Tracked objects:
   671 ;;		On entry : 0/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   675 ;;      Params:         3       0       0       0       0       0       0       0       0
   676 ;;      Locals:         1       0       0       0       0       0       0       0       0
   677 ;;      Temps:          2       0       0       0       0       0       0       0       0
   678 ;;      Totals:         6       0       0       0       0       0       0       0       0
   679 ;;Total ram usage:        6 bytes
   680 ;; Hardware stack levels used:    1
   681 ;; Hardware stack levels required when called:    3
   682 ;; This function calls:
   683 ;;		_ENVIA_CHAR
   684 ;; This function is called by:
   685 ;;		_main
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           	psect	text3
   690  000C22                     __ptext3:
   691                           	opt callstack 0
   692  000C22                     _ESCRIBE_MENSAJE:
   693                           	opt callstack 27
   694                           
   695                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   696                           
   697                           ;incstack = 0
   698  000C22  0E00               	movlw	0
   699  000C24  6E19               	movwf	ESCRIBE_MENSAJE@i,c
   700                           
   701                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   702  000C26  0E00               	movlw	0
   703  000C28  6E19               	movwf	ESCRIBE_MENSAJE@i,c
   704  000C2A  D00F               	goto	l1194
   705  000C2C                     l1190:
   706                           
   707                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   708  000C2C  5019               	movf	ESCRIBE_MENSAJE@i,w,c
   709  000C2E  2414               	addwf	ESCRIBE_MENSAJE@cadena,w,c
   710  000C30  6E17               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
   711  000C32  0E00               	movlw	0
   712  000C34  2015               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
   713  000C36  6E18               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
   714  000C38  C017  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   715  000C3C  C018  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   716  000C40                     	if	0	;tblptru may be non-zero
   717  000C40                     	endif
   718  000C40                     	if	0	;tblptru may be non-zero
   719  000C40                     	endif
   720  000C40  0008               	tblrd		*
   721  000C42  50F5               	movf	tablat,w,c
   722  000C44  ECDD  F005         	call	_ENVIA_CHAR
   723                           
   724                           ;LCD.c: 47:  }
   725  000C48  2A19               	incf	ESCRIBE_MENSAJE@i,f,c
   726  000C4A                     l1194:
   727  000C4A  5016               	movf	ESCRIBE_MENSAJE@tam,w,c
   728  000C4C  5C19               	subwf	ESCRIBE_MENSAJE@i,w,c
   729  000C4E  B0D8               	btfsc	status,0,c
   730  000C50  0012               	return	
   731  000C52  D7EC               	goto	l1190
   732  000C54                     __end_of_ESCRIBE_MENSAJE:
   733                           	opt callstack 0
   734                           
   735 ;; *************** function _ENVIA_CHAR *****************
   736 ;; Defined at:
   737 ;;		line 50 in file "LCD.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;  dato            1    wreg     unsigned char 
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  dato            1    1[COMRAM] unsigned char 
   742 ;;  aux             1    2[COMRAM] unsigned char 
   743 ;; Return value:  Size  Location     Type
   744 ;;                  1    wreg      void 
   745 ;; Registers used:
   746 ;;		wreg, status,2, status,0, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   752 ;;      Params:         0       0       0       0       0       0       0       0       0
   753 ;;      Locals:         2       0       0       0       0       0       0       0       0
   754 ;;      Temps:          0       0       0       0       0       0       0       0       0
   755 ;;      Totals:         2       0       0       0       0       0       0       0       0
   756 ;;Total ram usage:        2 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    2
   759 ;; This function calls:
   760 ;;		_ENVIA_NIBBLE
   761 ;;		_LEER_LCD
   762 ;; This function is called by:
   763 ;;		_main
   764 ;;		_ESCRIBE_MENSAJE
   765 ;;		_GENERACARACTER
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	text4
   770  000BBA                     __ptext4:
   771                           	opt callstack 0
   772  000BBA                     _ENVIA_CHAR:
   773                           	opt callstack 27
   774                           
   775                           ;incstack = 0
   776                           ;ENVIA_CHAR@dato stored from wreg
   777  000BBA  6E12               	movwf	ENVIA_CHAR@dato,c
   778                           
   779                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   780  000BBC  808C               	bsf	3980,0,c	;volatile
   781                           
   782                           ;LCD.c: 54:  LEER_LCD();
   783  000BBE  EC35  F005         	call	_LEER_LCD	;wreg free
   784                           
   785                           ;LCD.c: 55:  TRISD = 0x00;
   786  000BC2  0E00               	movlw	0
   787  000BC4  6E95               	movwf	3989,c	;volatile
   788                           
   789                           ;LCD.c: 56:         _delay(1200);
   790  000BC6  0EF0               	movlw	240
   791  000BC8                     u357:
   792  000BC8  D000               	nop2	
   793  000BCA  2EE8               	decfsz	wreg,f,c
   794  000BCC  D7FD               	bra	u357
   795                           
   796                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
   797  000BCE  928C               	bcf	3980,1,c	;volatile
   798                           
   799                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
   800  000BD0  948C               	bcf	3980,2,c	;volatile
   801                           
   802                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
   803  000BD2  808C               	bsf	3980,0,c	;volatile
   804                           
   805                           ;LCD.c: 61:  aux = dato & 0xF0;
   806  000BD4  5012               	movf	ENVIA_CHAR@dato,w,c
   807  000BD6  0BF0               	andlw	240
   808  000BD8  6E13               	movwf	ENVIA_CHAR@aux,c
   809                           
   810                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
   811  000BDA  5013               	movf	ENVIA_CHAR@aux,w,c
   812  000BDC  EC5D  F006         	call	_ENVIA_NIBBLE
   813                           
   814                           ;LCD.c: 63:  aux = dato << 4;
   815  000BE0  3812               	swapf	ENVIA_CHAR@dato,w,c
   816  000BE2  0BF0               	andlw	240
   817  000BE4  6E13               	movwf	ENVIA_CHAR@aux,c
   818                           
   819                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
   820  000BE6  5013               	movf	ENVIA_CHAR@aux,w,c
   821  000BE8  EC5D  F006         	call	_ENVIA_NIBBLE
   822  000BEC  0012               	return		;funcret
   823  000BEE                     __end_of_ENVIA_CHAR:
   824                           	opt callstack 0
   825                           
   826 ;; *************** function _DIGITOS *****************
   827 ;; Defined at:
   828 ;;		line 33 in file "tictac.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;  valor           2    8[COMRAM] int 
   831 ;; Auto vars:     Size  Location     Type
   832 ;;		None
   833 ;; Return value:  Size  Location     Type
   834 ;;                  1    wreg      void 
   835 ;; Registers used:
   836 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   842 ;;      Params:         2       0       0       0       0       0       0       0       0
   843 ;;      Locals:         0       0       0       0       0       0       0       0       0
   844 ;;      Temps:          0       0       0       0       0       0       0       0       0
   845 ;;      Totals:         2       0       0       0       0       0       0       0       0
   846 ;;Total ram usage:        2 bytes
   847 ;; Hardware stack levels used:    1
   848 ;; Hardware stack levels required when called:    2
   849 ;; This function calls:
   850 ;;		___awdiv
   851 ;;		___wmul
   852 ;; This function is called by:
   853 ;;		_main
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           	psect	text5
   858  000818                     __ptext5:
   859                           	opt callstack 0
   860  000818                     _DIGITOS:
   861                           	opt callstack 28
   862                           
   863                           ;tictac.c: 34:     digdmi = valor / 10000;
   864                           
   865                           ;incstack = 0
   866  000818  C019  F011         	movff	DIGITOS@valor,___awdiv@dividend
   867  00081C  C01A  F012         	movff	DIGITOS@valor+1,___awdiv@dividend+1
   868  000820  0E27               	movlw	39
   869  000822  6E14               	movwf	___awdiv@divisor+1,c
   870  000824  0E10               	movlw	16
   871  000826  6E13               	movwf	___awdiv@divisor,c
   872  000828  ECF3  F004         	call	___awdiv	;wreg free
   873  00082C  C011  F00F         	movff	?___awdiv,_digdmi
   874  000830  C012  F010         	movff	?___awdiv+1,_digdmi+1
   875                           
   876                           ;tictac.c: 35:     temporal3 = valor - (digdmi * 10000);
   877  000834  C00F  F011         	movff	_digdmi,___wmul@multiplier
   878  000838  C010  F012         	movff	_digdmi+1,___wmul@multiplier+1
   879  00083C  0ED8               	movlw	216
   880  00083E  6E14               	movwf	___wmul@multiplicand+1,c
   881  000840  0EF0               	movlw	240
   882  000842  6E13               	movwf	___wmul@multiplicand,c
   883  000844  EC2A  F006         	call	___wmul	;wreg free
   884  000848  5019               	movf	DIGITOS@valor,w,c
   885  00084A  2411               	addwf	?___wmul,w,c
   886  00084C  6E01               	movwf	_temporal3,c
   887  00084E  501A               	movf	DIGITOS@valor+1,w,c
   888  000850  2012               	addwfc	?___wmul+1,w,c
   889  000852  6E02               	movwf	_temporal3+1,c
   890                           
   891                           ;tictac.c: 36:     digmil = temporal3 / 1000;
   892  000854  C001  F011         	movff	_temporal3,___awdiv@dividend
   893  000858  C002  F012         	movff	_temporal3+1,___awdiv@dividend+1
   894  00085C  0E03               	movlw	3
   895  00085E  6E14               	movwf	___awdiv@divisor+1,c
   896  000860  0EE8               	movlw	232
   897  000862  6E13               	movwf	___awdiv@divisor,c
   898  000864  ECF3  F004         	call	___awdiv	;wreg free
   899  000868  C011  F00D         	movff	?___awdiv,_digmil
   900  00086C  C012  F00E         	movff	?___awdiv+1,_digmil+1
   901                           
   902                           ;tictac.c: 37:     temporal = temporal3 - (digmil * 1000);
   903  000870  C00D  F011         	movff	_digmil,___wmul@multiplier
   904  000874  C00E  F012         	movff	_digmil+1,___wmul@multiplier+1
   905  000878  0EFC               	movlw	252
   906  00087A  6E14               	movwf	___wmul@multiplicand+1,c
   907  00087C  0E18               	movlw	24
   908  00087E  6E13               	movwf	___wmul@multiplicand,c
   909  000880  EC2A  F006         	call	___wmul	;wreg free
   910  000884  5001               	movf	_temporal3,w,c
   911  000886  2411               	addwf	?___wmul,w,c
   912  000888  6E05               	movwf	_temporal,c
   913  00088A  5002               	movf	_temporal3+1,w,c
   914  00088C  2012               	addwfc	?___wmul+1,w,c
   915  00088E  6E06               	movwf	_temporal+1,c
   916                           
   917                           ;tictac.c: 38:     digcen = temporal / 100;
   918  000890  C005  F011         	movff	_temporal,___awdiv@dividend
   919  000894  C006  F012         	movff	_temporal+1,___awdiv@dividend+1
   920  000898  0E00               	movlw	0
   921  00089A  6E14               	movwf	___awdiv@divisor+1,c
   922  00089C  0E64               	movlw	100
   923  00089E  6E13               	movwf	___awdiv@divisor,c
   924  0008A0  ECF3  F004         	call	___awdiv	;wreg free
   925  0008A4  C011  F00B         	movff	?___awdiv,_digcen
   926  0008A8  C012  F00C         	movff	?___awdiv+1,_digcen+1
   927                           
   928                           ;tictac.c: 39:     temporal2 = temporal - (digcen * 100);
   929  0008AC  C00B  F011         	movff	_digcen,___wmul@multiplier
   930  0008B0  C00C  F012         	movff	_digcen+1,___wmul@multiplier+1
   931  0008B4  0EFF               	movlw	255
   932  0008B6  6E14               	movwf	___wmul@multiplicand+1,c
   933  0008B8  0E9C               	movlw	156
   934  0008BA  6E13               	movwf	___wmul@multiplicand,c
   935  0008BC  EC2A  F006         	call	___wmul	;wreg free
   936  0008C0  5005               	movf	_temporal,w,c
   937  0008C2  2411               	addwf	?___wmul,w,c
   938  0008C4  6E03               	movwf	_temporal2,c
   939  0008C6  5006               	movf	_temporal+1,w,c
   940  0008C8  2012               	addwfc	?___wmul+1,w,c
   941  0008CA  6E04               	movwf	_temporal2+1,c
   942                           
   943                           ;tictac.c: 40:     digdec = temporal2 / 10;
   944  0008CC  C003  F011         	movff	_temporal2,___awdiv@dividend
   945  0008D0  C004  F012         	movff	_temporal2+1,___awdiv@dividend+1
   946  0008D4  0E00               	movlw	0
   947  0008D6  6E14               	movwf	___awdiv@divisor+1,c
   948  0008D8  0E0A               	movlw	10
   949  0008DA  6E13               	movwf	___awdiv@divisor,c
   950  0008DC  ECF3  F004         	call	___awdiv	;wreg free
   951  0008E0  C011  F009         	movff	?___awdiv,_digdec
   952  0008E4  C012  F00A         	movff	?___awdiv+1,_digdec+1
   953                           
   954                           ;tictac.c: 41:     diguni = temporal2 - (digdec * 10);
   955  0008E8  C009  F011         	movff	_digdec,___wmul@multiplier
   956  0008EC  C00A  F012         	movff	_digdec+1,___wmul@multiplier+1
   957  0008F0  0EFF               	movlw	255
   958  0008F2  6E14               	movwf	___wmul@multiplicand+1,c
   959  0008F4  0EF6               	movlw	246
   960  0008F6  6E13               	movwf	___wmul@multiplicand,c
   961  0008F8  EC2A  F006         	call	___wmul	;wreg free
   962  0008FC  5003               	movf	_temporal2,w,c
   963  0008FE  2411               	addwf	?___wmul,w,c
   964  000900  6E07               	movwf	_diguni,c
   965  000902  5004               	movf	_temporal2+1,w,c
   966  000904  2012               	addwfc	?___wmul+1,w,c
   967  000906  6E08               	movwf	_diguni+1,c
   968  000908  0012               	return		;funcret
   969  00090A                     __end_of_DIGITOS:
   970                           	opt callstack 0
   971                           
   972 ;; *************** function ___wmul *****************
   973 ;; Defined at:
   974 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;  multiplier      2    0[COMRAM] unsigned int 
   977 ;;  multiplicand    2    2[COMRAM] unsigned int 
   978 ;; Auto vars:     Size  Location     Type
   979 ;;  product         2    4[COMRAM] unsigned int 
   980 ;; Return value:  Size  Location     Type
   981 ;;                  2    0[COMRAM] unsigned int 
   982 ;; Registers used:
   983 ;;		wreg, status,2, status,0, prodl, prodh
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   989 ;;      Params:         4       0       0       0       0       0       0       0       0
   990 ;;      Locals:         2       0       0       0       0       0       0       0       0
   991 ;;      Temps:          0       0       0       0       0       0       0       0       0
   992 ;;      Totals:         6       0       0       0       0       0       0       0       0
   993 ;;Total ram usage:        6 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; Hardware stack levels required when called:    1
   996 ;; This function calls:
   997 ;;		Nothing
   998 ;; This function is called by:
   999 ;;		_DIGITOS
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text6
  1004  000C54                     __ptext6:
  1005                           	opt callstack 0
  1006  000C54                     ___wmul:
  1007                           	opt callstack 28
  1008                           
  1009                           ;incstack = 0
  1010  000C54  5011               	movf	___wmul@multiplier,w,c
  1011  000C56  0213               	mulwf	___wmul@multiplicand,c
  1012  000C58  CFF3 F015          	movff	prodl,___wmul@product
  1013  000C5C  CFF4 F016          	movff	prodh,___wmul@product+1
  1014  000C60  5011               	movf	___wmul@multiplier,w,c
  1015  000C62  0214               	mulwf	___wmul@multiplicand+1,c
  1016  000C64  50F3               	movf	prodl,w,c
  1017  000C66  2616               	addwf	___wmul@product+1,f,c
  1018  000C68  5012               	movf	___wmul@multiplier+1,w,c
  1019  000C6A  0213               	mulwf	___wmul@multiplicand,c
  1020  000C6C  50F3               	movf	prodl,w,c
  1021  000C6E  2616               	addwf	___wmul@product+1,f,c
  1022  000C70  C015  F011         	movff	___wmul@product,?___wmul
  1023  000C74  C016  F012         	movff	___wmul@product+1,?___wmul+1
  1024  000C78  0012               	return		;funcret
  1025  000C7A                     __end_of___wmul:
  1026                           	opt callstack 0
  1027                           
  1028 ;; *************** function ___awdiv *****************
  1029 ;; Defined at:
  1030 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  dividend        2    0[COMRAM] int 
  1033 ;;  divisor         2    2[COMRAM] int 
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;  quotient        2    6[COMRAM] int 
  1036 ;;  sign            1    5[COMRAM] unsigned char 
  1037 ;;  counter         1    4[COMRAM] unsigned char 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  2    0[COMRAM] int 
  1040 ;; Registers used:
  1041 ;;		wreg, status,2, status,0
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1047 ;;      Params:         4       0       0       0       0       0       0       0       0
  1048 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1050 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1051 ;;Total ram usage:        8 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    1
  1054 ;; This function calls:
  1055 ;;		Nothing
  1056 ;; This function is called by:
  1057 ;;		_DIGITOS
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text7
  1062  0009E6                     __ptext7:
  1063                           	opt callstack 0
  1064  0009E6                     ___awdiv:
  1065                           	opt callstack 28
  1066                           
  1067                           ;incstack = 0
  1068  0009E6  0E00               	movlw	0
  1069  0009E8  6E16               	movwf	___awdiv@sign,c
  1070  0009EA  AE14               	btfss	___awdiv@divisor+1,7,c
  1071  0009EC  D006               	goto	l1140
  1072  0009EE  6C13               	negf	___awdiv@divisor,c
  1073  0009F0  1E14               	comf	___awdiv@divisor+1,f,c
  1074  0009F2  B0D8               	btfsc	status,0,c
  1075  0009F4  2A14               	incf	___awdiv@divisor+1,f,c
  1076  0009F6  0E01               	movlw	1
  1077  0009F8  6E16               	movwf	___awdiv@sign,c
  1078  0009FA                     l1140:
  1079  0009FA  AE12               	btfss	___awdiv@dividend+1,7,c
  1080  0009FC  D006               	goto	l1146
  1081  0009FE  6C11               	negf	___awdiv@dividend,c
  1082  000A00  1E12               	comf	___awdiv@dividend+1,f,c
  1083  000A02  B0D8               	btfsc	status,0,c
  1084  000A04  2A12               	incf	___awdiv@dividend+1,f,c
  1085  000A06  0E01               	movlw	1
  1086  000A08  1A16               	xorwf	___awdiv@sign,f,c
  1087  000A0A                     l1146:
  1088  000A0A  0E00               	movlw	0
  1089  000A0C  6E18               	movwf	___awdiv@quotient+1,c
  1090  000A0E  0E00               	movlw	0
  1091  000A10  6E17               	movwf	___awdiv@quotient,c
  1092  000A12  5013               	movf	___awdiv@divisor,w,c
  1093  000A14  1014               	iorwf	___awdiv@divisor+1,w,c
  1094  000A16  B4D8               	btfsc	status,2,c
  1095  000A18  D01C               	goto	l1168
  1096  000A1A  0E01               	movlw	1
  1097  000A1C  6E15               	movwf	___awdiv@counter,c
  1098  000A1E  D004               	goto	l1154
  1099  000A20                     l1152:
  1100  000A20  90D8               	bcf	status,0,c
  1101  000A22  3613               	rlcf	___awdiv@divisor,f,c
  1102  000A24  3614               	rlcf	___awdiv@divisor+1,f,c
  1103  000A26  2A15               	incf	___awdiv@counter,f,c
  1104  000A28                     l1154:
  1105  000A28  AE14               	btfss	___awdiv@divisor+1,7,c
  1106  000A2A  D7FA               	goto	l1152
  1107  000A2C                     u240:
  1108  000A2C  90D8               	bcf	status,0,c
  1109  000A2E  3617               	rlcf	___awdiv@quotient,f,c
  1110  000A30  3618               	rlcf	___awdiv@quotient+1,f,c
  1111  000A32  5013               	movf	___awdiv@divisor,w,c
  1112  000A34  5C11               	subwf	___awdiv@dividend,w,c
  1113  000A36  5014               	movf	___awdiv@divisor+1,w,c
  1114  000A38  5812               	subwfb	___awdiv@dividend+1,w,c
  1115  000A3A  A0D8               	btfss	status,0,c
  1116  000A3C  D005               	goto	l1164
  1117  000A3E  5013               	movf	___awdiv@divisor,w,c
  1118  000A40  5E11               	subwf	___awdiv@dividend,f,c
  1119  000A42  5014               	movf	___awdiv@divisor+1,w,c
  1120  000A44  5A12               	subwfb	___awdiv@dividend+1,f,c
  1121  000A46  8017               	bsf	___awdiv@quotient,0,c
  1122  000A48                     l1164:
  1123  000A48  90D8               	bcf	status,0,c
  1124  000A4A  3214               	rrcf	___awdiv@divisor+1,f,c
  1125  000A4C  3213               	rrcf	___awdiv@divisor,f,c
  1126  000A4E  2E15               	decfsz	___awdiv@counter,f,c
  1127  000A50  D7ED               	goto	u240
  1128  000A52                     l1168:
  1129  000A52  5016               	movf	___awdiv@sign,w,c
  1130  000A54  B4D8               	btfsc	status,2,c
  1131  000A56  D004               	goto	l1172
  1132  000A58  6C17               	negf	___awdiv@quotient,c
  1133  000A5A  1E18               	comf	___awdiv@quotient+1,f,c
  1134  000A5C  B0D8               	btfsc	status,0,c
  1135  000A5E  2A18               	incf	___awdiv@quotient+1,f,c
  1136  000A60                     l1172:
  1137  000A60  C017  F011         	movff	___awdiv@quotient,?___awdiv
  1138  000A64  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  1139  000A68  0012               	return		;funcret
  1140  000A6A                     __end_of___awdiv:
  1141                           	opt callstack 0
  1142                           
  1143 ;; *************** function _CURSOR_ONOFF *****************
  1144 ;; Defined at:
  1145 ;;		line 35 in file "LCD.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;  estado          1    wreg     unsigned char 
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  estado          1    3[COMRAM] unsigned char 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  1    wreg      void 
  1152 ;; Registers used:
  1153 ;;		wreg, status,2, status,0, cstack
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1159 ;;      Params:         0       0       0       0       0       0       0       0       0
  1160 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1161 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1162 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1163 ;;Total ram usage:        1 bytes
  1164 ;; Hardware stack levels used:    1
  1165 ;; Hardware stack levels required when called:    3
  1166 ;; This function calls:
  1167 ;;		_ENVIA_LCD_CMD
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           	psect	text8
  1174  000C9E                     __ptext8:
  1175                           	opt callstack 0
  1176  000C9E                     _CURSOR_ONOFF:
  1177                           	opt callstack 27
  1178                           
  1179                           ;incstack = 0
  1180                           ;CURSOR_ONOFF@estado stored from wreg
  1181  000C9E  6E14               	movwf	CURSOR_ONOFF@estado,c
  1182                           
  1183                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1184  000CA0  5014               	movf	CURSOR_ONOFF@estado,w,c
  1185  000CA2  A4D8               	btfss	status,2,c
  1186  000CA4  D003               	goto	l1004
  1187  000CA6  0E0E               	movlw	14
  1188  000CA8  ECF7  F005         	call	_ENVIA_LCD_CMD
  1189  000CAC                     l1004:
  1190                           
  1191                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1192  000CAC  0414               	decf	CURSOR_ONOFF@estado,w,c
  1193  000CAE  A4D8               	btfss	status,2,c
  1194  000CB0  0012               	return	
  1195  000CB2  0E0C               	movlw	12
  1196  000CB4  ECF7  F005         	call	_ENVIA_LCD_CMD
  1197  000CB8  0012               	return		;funcret
  1198  000CBA                     __end_of_CURSOR_ONOFF:
  1199                           	opt callstack 0
  1200                           
  1201 ;; *************** function _CURSOR_HOME *****************
  1202 ;; Defined at:
  1203 ;;		line 30 in file "LCD.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1217 ;;      Params:         0       0       0       0       0       0       0       0       0
  1218 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1219 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1220 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1221 ;;Total ram usage:        0 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    3
  1224 ;; This function calls:
  1225 ;;		_ENVIA_LCD_CMD
  1226 ;; This function is called by:
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text9
  1232  000CD6                     __ptext9:
  1233                           	opt callstack 0
  1234  000CD6                     _CURSOR_HOME:
  1235                           	opt callstack 27
  1236                           
  1237                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1238                           
  1239                           ;incstack = 0
  1240  000CD6  0E02               	movlw	2
  1241  000CD8  ECF7  F005         	call	_ENVIA_LCD_CMD
  1242  000CDC  0012               	return		;funcret
  1243  000CDE                     __end_of_CURSOR_HOME:
  1244                           	opt callstack 0
  1245                           
  1246 ;; *************** function _ENVIA_LCD_CMD *****************
  1247 ;; Defined at:
  1248 ;;		line 104 in file "LCD.c"
  1249 ;; Parameters:    Size  Location     Type
  1250 ;;  dato            1    wreg     unsigned char 
  1251 ;; Auto vars:     Size  Location     Type
  1252 ;;  dato            1    1[COMRAM] unsigned char 
  1253 ;;  aux             1    2[COMRAM] unsigned char 
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  1    wreg      void 
  1256 ;; Registers used:
  1257 ;;		wreg, status,2, status,0, cstack
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1263 ;;      Params:         0       0       0       0       0       0       0       0       0
  1264 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1265 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1266 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1267 ;;Total ram usage:        2 bytes
  1268 ;; Hardware stack levels used:    1
  1269 ;; Hardware stack levels required when called:    2
  1270 ;; This function calls:
  1271 ;;		_ENVIA_NIBBLE
  1272 ;;		_LEER_LCD
  1273 ;; This function is called by:
  1274 ;;		_POS_CURSOR
  1275 ;;		_CURSOR_HOME
  1276 ;;		_CURSOR_ONOFF
  1277 ;;		_LCD_CONFIG
  1278 ;;		_BLINK_CURSOR
  1279 ;;		_DISPLAY_ONOFF
  1280 ;;		_BORRAR_LCD
  1281 ;;		_GENERACARACTER
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text10
  1286  000BEE                     __ptext10:
  1287                           	opt callstack 0
  1288  000BEE                     _ENVIA_LCD_CMD:
  1289                           	opt callstack 27
  1290                           
  1291                           ;incstack = 0
  1292                           ;ENVIA_LCD_CMD@dato stored from wreg
  1293  000BEE  6E12               	movwf	ENVIA_LCD_CMD@dato,c
  1294                           
  1295                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1296  000BF0  908C               	bcf	3980,0,c	;volatile
  1297                           
  1298                           ;LCD.c: 108:  LEER_LCD();
  1299  000BF2  EC35  F005         	call	_LEER_LCD	;wreg free
  1300                           
  1301                           ;LCD.c: 109:  TRISD = 0b00000000;
  1302  000BF6  0E00               	movlw	0
  1303  000BF8  6E95               	movwf	3989,c	;volatile
  1304                           
  1305                           ;LCD.c: 111:         _delay(1200);
  1306  000BFA  0EF0               	movlw	240
  1307  000BFC                     u367:
  1308  000BFC  D000               	nop2	
  1309  000BFE  2EE8               	decfsz	wreg,f,c
  1310  000C00  D7FD               	bra	u367
  1311                           
  1312                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1313  000C02  928C               	bcf	3980,1,c	;volatile
  1314                           
  1315                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1316  000C04  948C               	bcf	3980,2,c	;volatile
  1317                           
  1318                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1319  000C06  908C               	bcf	3980,0,c	;volatile
  1320                           
  1321                           ;LCD.c: 115:  aux = dato & 0xF0;
  1322  000C08  5012               	movf	ENVIA_LCD_CMD@dato,w,c
  1323  000C0A  0BF0               	andlw	240
  1324  000C0C  6E13               	movwf	ENVIA_LCD_CMD@aux,c
  1325                           
  1326                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1327  000C0E  5013               	movf	ENVIA_LCD_CMD@aux,w,c
  1328  000C10  EC5D  F006         	call	_ENVIA_NIBBLE
  1329                           
  1330                           ;LCD.c: 117:  aux = dato<<4;
  1331  000C14  3812               	swapf	ENVIA_LCD_CMD@dato,w,c
  1332  000C16  0BF0               	andlw	240
  1333  000C18  6E13               	movwf	ENVIA_LCD_CMD@aux,c
  1334                           
  1335                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1336  000C1A  5013               	movf	ENVIA_LCD_CMD@aux,w,c
  1337  000C1C  EC5D  F006         	call	_ENVIA_NIBBLE
  1338  000C20  0012               	return		;funcret
  1339  000C22                     __end_of_ENVIA_LCD_CMD:
  1340                           	opt callstack 0
  1341                           
  1342 ;; *************** function _LEER_LCD *****************
  1343 ;; Defined at:
  1344 ;;		line 121 in file "LCD.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;		None
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  aux             1    0[COMRAM] unsigned char 
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      void 
  1351 ;; Registers used:
  1352 ;;		wreg, status,2, status,0
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1358 ;;      Params:         0       0       0       0       0       0       0       0       0
  1359 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1360 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1361 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1362 ;;Total ram usage:        1 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; Hardware stack levels required when called:    1
  1365 ;; This function calls:
  1366 ;;		Nothing
  1367 ;; This function is called by:
  1368 ;;		_ENVIA_CHAR
  1369 ;;		_ENVIA_LCD_CMD
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text11
  1374  000A6A                     __ptext11:
  1375                           	opt callstack 0
  1376  000A6A                     _LEER_LCD:
  1377                           	opt callstack 27
  1378                           
  1379                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1380                           
  1381                           ;incstack = 0
  1382  000A6A  0EF8               	movlw	248
  1383  000A6C  6E95               	movwf	3989,c	;volatile
  1384                           
  1385                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1386  000A6E  908C               	bcf	3980,0,c	;volatile
  1387                           
  1388                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1389  000A70  828C               	bsf	3980,1,c	;volatile
  1390                           
  1391                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1392  000A72  848C               	bsf	3980,2,c	;volatile
  1393                           
  1394                           ;LCD.c: 128:         _delay(1200);
  1395  000A74  0EF0               	movlw	240
  1396  000A76                     u377:
  1397  000A76  D000               	nop2	
  1398  000A78  2EE8               	decfsz	wreg,f,c
  1399  000A7A  D7FD               	bra	u377
  1400                           
  1401                           ;LCD.c: 130:  aux = PORTD;
  1402  000A7C  CF83 F011          	movff	3971,LEER_LCD@aux	;volatile
  1403                           
  1404                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1405  000A80  948C               	bcf	3980,2,c	;volatile
  1406                           
  1407                           ;LCD.c: 132:         _delay(1200);
  1408  000A82  0EF0               	movlw	240
  1409  000A84                     u387:
  1410  000A84  D000               	nop2	
  1411  000A86  2EE8               	decfsz	wreg,f,c
  1412  000A88  D7FD               	bra	u387
  1413                           
  1414                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1415  000A8A  848C               	bsf	3980,2,c	;volatile
  1416                           
  1417                           ;LCD.c: 135:         _delay(1200);
  1418  000A8C  0EF0               	movlw	240
  1419  000A8E                     u397:
  1420  000A8E  D000               	nop2	
  1421  000A90  2EE8               	decfsz	wreg,f,c
  1422  000A92  D7FD               	bra	u397
  1423  000A94                     l844:
  1424                           
  1425                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1426  000A94  948C               	bcf	3980,2,c	;volatile
  1427                           
  1428                           ;LCD.c: 138:  aux = aux & 0x80;
  1429  000A96  5011               	movf	LEER_LCD@aux,w,c
  1430  000A98  0B80               	andlw	128
  1431  000A9A  6E11               	movwf	LEER_LCD@aux,c
  1432                           
  1433                           ;LCD.c: 139:  while(aux == 0x80)
  1434  000A9C  D012               	goto	l860
  1435  000A9E                     l141:
  1436                           
  1437                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1438  000A9E  848C               	bsf	3980,2,c	;volatile
  1439                           
  1440                           ;LCD.c: 142:             _delay(1200);
  1441  000AA0  0EF0               	movlw	240
  1442  000AA2                     u407:
  1443  000AA2  D000               	nop2	
  1444  000AA4  2EE8               	decfsz	wreg,f,c
  1445  000AA6  D7FD               	bra	u407
  1446                           
  1447                           ;LCD.c: 143:             aux = PORTD;
  1448  000AA8  CF83 F011          	movff	3971,LEER_LCD@aux	;volatile
  1449                           
  1450                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1451  000AAC  948C               	bcf	3980,2,c	;volatile
  1452                           
  1453                           ;LCD.c: 145:             _delay(1200);
  1454  000AAE  0EF0               	movlw	240
  1455  000AB0                     u417:
  1456  000AB0  D000               	nop2	
  1457  000AB2  2EE8               	decfsz	wreg,f,c
  1458  000AB4  D7FD               	bra	u417
  1459                           
  1460                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1461  000AB6  848C               	bsf	3980,2,c	;volatile
  1462                           
  1463                           ;LCD.c: 147:             _delay(1200);
  1464  000AB8  0EF0               	movlw	240
  1465  000ABA                     u427:
  1466  000ABA  D000               	nop2	
  1467  000ABC  2EE8               	decfsz	wreg,f,c
  1468  000ABE  D7FD               	bra	u427
  1469  000AC0  D7E9               	goto	l844
  1470  000AC2                     l860:
  1471                           
  1472                           ;LCD.c: 139:  while(aux == 0x80)
  1473  000AC2  0E80               	movlw	128
  1474  000AC4  1811               	xorwf	LEER_LCD@aux,w,c
  1475  000AC6  A4D8               	btfss	status,2,c
  1476  000AC8  0012               	return	
  1477  000ACA  D7E9               	goto	l141
  1478  000ACC                     __end_of_LEER_LCD:
  1479                           	opt callstack 0
  1480                           
  1481 ;; *************** function _ENVIA_NIBBLE *****************
  1482 ;; Defined at:
  1483 ;;		line 93 in file "LCD.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  dato            1    wreg     unsigned char 
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;  dato            1    0[COMRAM] unsigned char 
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		wreg, status,2, status,0
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1497 ;;      Params:         0       0       0       0       0       0       0       0       0
  1498 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1499 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1500 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1501 ;;Total ram usage:        1 bytes
  1502 ;; Hardware stack levels used:    1
  1503 ;; Hardware stack levels required when called:    1
  1504 ;; This function calls:
  1505 ;;		Nothing
  1506 ;; This function is called by:
  1507 ;;		_ENVIA_CHAR
  1508 ;;		_LCD_CONFIG
  1509 ;;		_ENVIA_LCD_CMD
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           	psect	text12
  1514  000CBA                     __ptext12:
  1515                           	opt callstack 0
  1516  000CBA                     _ENVIA_NIBBLE:
  1517                           	opt callstack 27
  1518                           
  1519                           ;incstack = 0
  1520                           ;ENVIA_NIBBLE@dato stored from wreg
  1521  000CBA  6E11               	movwf	ENVIA_NIBBLE@dato,c
  1522                           
  1523                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1524  000CBC  0E0F               	movlw	15
  1525  000CBE  168C               	andwf	3980,f,c	;volatile
  1526                           
  1527                           ;LCD.c: 96:  dato &= 0xF0;
  1528  000CC0  0EF0               	movlw	240
  1529  000CC2  1611               	andwf	ENVIA_NIBBLE@dato,f,c
  1530                           
  1531                           ;LCD.c: 97:  LATD|= dato;
  1532  000CC4  5011               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1533  000CC6  128C               	iorwf	3980,f,c	;volatile
  1534                           
  1535                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1536  000CC8  848C               	bsf	3980,2,c	;volatile
  1537                           
  1538                           ;LCD.c: 100:         _delay(1200);
  1539  000CCA  0EF0               	movlw	240
  1540  000CCC                     u437:
  1541  000CCC  D000               	nop2	
  1542  000CCE  2EE8               	decfsz	wreg,f,c
  1543  000CD0  D7FD               	bra	u437
  1544                           
  1545                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1546  000CD2  948C               	bcf	3980,2,c	;volatile
  1547  000CD4  0012               	return		;funcret
  1548  000CD6                     __end_of_ENVIA_NIBBLE:
  1549                           	opt callstack 0
  1550                           
  1551 ;; *************** function _CCP1ISR *****************
  1552 ;; Defined at:
  1553 ;;		line 86 in file "tictac.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;		None
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;		None
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  1    wreg      void 
  1560 ;; Registers used:
  1561 ;;		wreg, status,2, status,0
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1567 ;;      Params:         0       0       0       0       0       0       0       0       0
  1568 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1569 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1570 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1571 ;;Total ram usage:        0 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		Interrupt level 2
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	intcode
  1581  000008                     __pintcode:
  1582                           	opt callstack 0
  1583  000008                     _CCP1ISR:
  1584                           	opt callstack 27
  1585                           
  1586                           ;incstack = 0
  1587  000008  8223               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1588  00000A  ED96  F005         	call	int_func,f	;refresh shadow registers
  1589                           
  1590                           	psect	intcode_body
  1591  000B2C                     __pintcode_body:
  1592                           	opt callstack 27
  1593  000B2C                     int_func:
  1594                           	opt callstack 27
  1595  000B2C  0006               	pop		; remove dummy address from shadow register refresh
  1596                           
  1597                           ;tictac.c: 87:     if(segu == 59){
  1598  000B2E  0E3B               	movlw	59
  1599  000B30  181D               	xorwf	_segu,w,c
  1600  000B32  101E               	iorwf	_segu+1,w,c
  1601  000B34  A4D8               	btfss	status,2,c
  1602  000B36  D01D               	goto	i2l1088
  1603                           
  1604                           ;tictac.c: 88:         segu = 0;
  1605  000B38  0E00               	movlw	0
  1606  000B3A  6E1E               	movwf	_segu+1,c
  1607  000B3C  0E00               	movlw	0
  1608  000B3E  6E1D               	movwf	_segu,c
  1609                           
  1610                           ;tictac.c: 89:         if(minu == 59){
  1611  000B40  0E3B               	movlw	59
  1612  000B42  181F               	xorwf	_minu,w,c
  1613  000B44  1020               	iorwf	_minu+1,w,c
  1614  000B46  A4D8               	btfss	status,2,c
  1615  000B48  D011               	goto	i2l1086
  1616                           
  1617                           ;tictac.c: 90:             minu = 0;
  1618  000B4A  0E00               	movlw	0
  1619  000B4C  6E20               	movwf	_minu+1,c
  1620  000B4E  0E00               	movlw	0
  1621  000B50  6E1F               	movwf	_minu,c
  1622                           
  1623                           ;tictac.c: 91:             if(hora == 23){
  1624  000B52  0E17               	movlw	23
  1625  000B54  1821               	xorwf	_hora,w,c
  1626  000B56  1022               	iorwf	_hora+1,w,c
  1627  000B58  A4D8               	btfss	status,2,c
  1628  000B5A  D005               	goto	i2l1084
  1629                           
  1630                           ;tictac.c: 92:                 hora = 0;
  1631  000B5C  0E00               	movlw	0
  1632  000B5E  6E22               	movwf	_hora+1,c
  1633  000B60  0E00               	movlw	0
  1634  000B62  6E21               	movwf	_hora,c
  1635                           
  1636                           ;tictac.c: 93:             }
  1637  000B64  D008               	goto	i2l1090
  1638  000B66                     i2l1084:
  1639                           
  1640                           ;tictac.c: 95:                 hora++;
  1641  000B66  4A21               	infsnz	_hora,f,c
  1642  000B68  2A22               	incf	_hora+1,f,c
  1643  000B6A  D005               	goto	i2l1090
  1644  000B6C                     i2l1086:
  1645                           
  1646                           ;tictac.c: 99:             minu++;
  1647  000B6C  4A1F               	infsnz	_minu,f,c
  1648  000B6E  2A20               	incf	_minu+1,f,c
  1649  000B70  D002               	goto	i2l1090
  1650  000B72                     i2l1088:
  1651                           
  1652                           ;tictac.c: 103:         segu++;
  1653  000B72  4A1D               	infsnz	_segu,f,c
  1654  000B74  2A1E               	incf	_segu+1,f,c
  1655  000B76                     i2l1090:
  1656                           
  1657                           ;tictac.c: 106:     PIR1bits.CCP1IF = 0;
  1658  000B76  949E               	bcf	3998,2,c	;volatile
  1659  000B78  9223               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1660  000B7A  0011               	retfie		f
  1661  000B7C                     __end_of_CCP1ISR:
  1662                           	opt callstack 0
  1663                           
  1664                           	psect	rparam
  1665  0000                     
  1666                           	psect	temp
  1667  000023                     btemp:
  1668                           	opt callstack 0
  1669  000023                     	ds	1
  1670  0000                     int$flags	set	btemp
  1671  0000                     wtemp8	set	btemp+1
  1672  0000                     ttemp5	set	btemp+1
  1673  0000                     ttemp6	set	btemp+4
  1674  0000                     ttemp7	set	btemp+8
  1675                           tosu	equ	0xFFF
  1676                           tosh	equ	0xFFE
  1677                           tosl	equ	0xFFD
  1678                           stkptr	equ	0xFFC
  1679                           pclatu	equ	0xFFB
  1680                           pclath	equ	0xFFA
  1681                           pcl	equ	0xFF9
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           prodh	equ	0xFF4
  1687                           prodl	equ	0xFF3
  1688                           indf0	equ	0xFEF
  1689                           postinc0	equ	0xFEE
  1690                           postdec0	equ	0xFED
  1691                           preinc0	equ	0xFEC
  1692                           plusw0	equ	0xFEB
  1693                           fsr0h	equ	0xFEA
  1694                           fsr0l	equ	0xFE9
  1695                           wreg	equ	0xFE8
  1696                           indf1	equ	0xFE7
  1697                           postinc1	equ	0xFE6
  1698                           postdec1	equ	0xFE5
  1699                           preinc1	equ	0xFE4
  1700                           plusw1	equ	0xFE3
  1701                           fsr1h	equ	0xFE2
  1702                           fsr1l	equ	0xFE1
  1703                           bsr	equ	0xFE0
  1704                           indf2	equ	0xFDF
  1705                           postinc2	equ	0xFDE
  1706                           postdec2	equ	0xFDD
  1707                           preinc2	equ	0xFDC
  1708                           plusw2	equ	0xFDB
  1709                           fsr2h	equ	0xFDA
  1710                           fsr2l	equ	0xFD9
  1711                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    0
    Data        6
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     12      34
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[6]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_DIGITOS
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _DIGITOS->___awdiv
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _CCP1ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _CCP1ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _CCP1ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _CCP1ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _CCP1ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _CCP1ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _CCP1ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _CCP1ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _CCP1ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3271
                                             10 COMRAM     2     2      0
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                            _DIGITOS
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _DIGITOS                                              2     0      2    1947
                                              8 COMRAM     2     0      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _CCP1ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _DIGITOS
     ___awdiv
     ___wmul
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD

 _CCP1ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      C      22       1       36.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      22      20        0.0%
DATA                 0      0      22       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu May 30 12:28:53 2019

            ___awdiv@sign 0016       ___wmul@multiplicand 0013               __CFG_BORV$3 000000  
      __CFG_FOSC$XTPLL_XT 000000             ENVIA_CHAR@aux 0013                       l141 0A9E  
                     l860 0AC2                       l844 0A94                       u240 0A2C  
                     u307 0914                       u317 0930                       u407 0AA2  
                     u327 0ADC                       u417 0AB0                       u337 0AEA  
                     u427 0ABA                       u347 0AFA                       u437 0CCC  
                     u357 0BC8                       u367 0BFC                       u377 0A76  
                     u387 0A84                       u397 0A8E              __CFG_BOR$OFF 000000  
         __end_of_CCP1ISR 0B7C               LEER_LCD@aux 0011                       wreg 000FE8  
            ?_CURSOR_HOME 0011           __end_of_DIGITOS 090A            ??_ENVIA_NIBBLE 0011  
            __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0012              __CFG_WDT$OFF 000000  
                    l1004 0CAC                      l1200 0C8C                      l1140 09FA  
                    l1152 0A20                      l1224 096A                      l1154 0A28  
                    l1146 0A0A                      l1172 0A60                      l1164 0A48  
                    l1190 0C2C                      l1168 0A52                      l1194 0C4A  
                    STR_1 0801                      STR_2 0811                      _LATD 000F8C  
            __CFG_PWRT$ON 000000                      _main 090A                      _hora 0021  
                    _minu 001F                      _segu 001D                      fsr1l 000FE1  
                    btemp 0023                      prodh 000FF4                      prodl 000FF3  
                    start 000E             ?_CURSOR_ONOFF 0011             __CFG_MCLRE$ON 000000  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0012          __end_of_LEER_LCD 0ACC  
           __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000                     ?_main 0011  
         __end_of___awdiv 0A6A           ___awdiv@divisor 0013                     _T1CON 000FCD  
         ___awdiv@counter 0015                     _PORTD 000F83       __size_of_LCD_CONFIG 0060  
                   _TRISD 000F95       __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0014  
                   tablat 000FF5                     ttemp5 0024                     ttemp6 0027  
                   ttemp7 002B                     status 000FD8                     wtemp8 0024  
          ??_CURSOR_ONOFF 0014           __initialization 0B7C              __end_of_main 09E6  
               ??_CCP1ISR 0011           _ESCRIBE_MENSAJE 0C22                 ??_DIGITOS 001B  
                  ??_main 001B             __activetblptr 000001                    _CCPR1H 000FBF  
                  _CCPR1L 000FBE          ___awdiv@dividend 0011                    i2l1090 0B76  
                  i2l1084 0B66                    i2l1086 0B6C                    i2l1088 0B72  
                  ___wmul 0C54                 ??___awdiv 0015      __end_of_ENVIA_NIBBLE 0CD6  
                  _digdec 0009                    _digcen 000B                    _digdmi 000F  
                  _digmil 000D                    _diguni 0007       __size_of_POS_CURSOR 0024  
                  clear_0 0BA2          ___awdiv@quotient 0017              __pdataCOMRAM 001D  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8      __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0011  
              __accesstop 0060   __end_of__initialization 0BA8           __CFG_PBADEN$OFF 000000  
            ??_LCD_CONFIG 0014             ___rparam_used 000001              ??_ENVIA_CHAR 0012  
 __end_of_ESCRIBE_MENSAJE 0C54            __pcstackCOMRAM 0011          ENVIA_LCD_CMD@aux 0013  
    __end_of_CURSOR_ONOFF 0CBA        __end_of_LCD_CONFIG 0B2C        __end_of_ENVIA_CHAR 0BEE  
              ??_LEER_LCD 0011          ENVIA_NIBBLE@dato 0011                   ?___wmul 0011  
                 _CCP1CON 000FBD                   _CCP1ISR 0008                   _DIGITOS 0818  
            ??_POS_CURSOR 0015     __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000  
                 __Lparam 0000          ?_ESCRIBE_MENSAJE 0014                   ___awdiv 09E6  
         __size_of___wmul 0026              __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0C22  
                 __pcinit 0B7C        __end_of_POS_CURSOR 0C9E                   __ramtop 0800  
                 __ptext0 090A                   __ptext1 0C7A                   __ptext2 0ACC  
                 __ptext3 0C22                   __ptext4 0BBA                   __ptext5 0818  
                 __ptext6 0C54                   __ptext7 09E6                   __ptext8 0C9E  
                 __ptext9 0CD6            __pintcode_body 0B2C              _ENVIA_NIBBLE 0CBA  
    end_of_initialization 0BA8                   int_func 0B2C                   postdec1 000FE5  
                 postinc0 000FEE     __size_of_CURSOR_ONOFF 001C         __size_of_LEER_LCD 0062  
            _CURSOR_ONOFF 0C9E        CURSOR_ONOFF@estado 0014            __end_of___wmul 0C7A  
           __pidataCOMRAM 0CDE             ??_CURSOR_HOME 0014       start_initialization 0B7C  
       ENVIA_LCD_CMD@dato 0012              DIGITOS@valor 0019                  ??___wmul 0015  
                ?_CCP1ISR 0011                  ?_DIGITOS 0019               __pbssCOMRAM 0001  
     __end_of_CURSOR_HOME 0CDE                 __pintcode 0008                  ?___awdiv 0011  
             __smallconst 0800                  _LEER_LCD 0A6A            ___wmul@product 0015  
                _LATDbits 000F8C                  _PIE1bits 000F9D                  _PIR1bits 000F9E  
        __CFG_WDTPS$32768 000000                 _temporal2 0003                 _temporal3 0001  
        ESCRIBE_MENSAJE@i 0019            POS_CURSOR@fila 0015          __size_of_CCP1ISR 0B74  
__size_of_ESCRIBE_MENSAJE 0032         ___wmul@multiplier 0011          __size_of_DIGITOS 00F2  
             _CURSOR_HOME 0CD6                 copy_data0 0B90    __size_of_ENVIA_LCD_CMD 0034  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
        __size_of___awdiv 0084                  __ptext10 0BEE                  __ptext11 0A6A  
                __ptext12 0CBA             __size_of_main 00DC                _LCD_CONFIG 0ACC  
              _ENVIA_CHAR 0BBA                  _temporal 0005                  int$flags 0023  
           _ENVIA_LCD_CMD 0BEE     __CFG_CPUDIV$OSC1_PLL2 000000                _INTCONbits 000FF2  
       ??_ESCRIBE_MENSAJE 0017                  intlevel2 0000     ESCRIBE_MENSAJE@cadena 0014  
          ?_ENVIA_LCD_CMD 0011             ?_ENVIA_NIBBLE 0011                _POS_CURSOR 0C7A  
             ?_LCD_CONFIG 0011        ESCRIBE_MENSAJE@tam 0016               ?_ENVIA_CHAR 0011  
       POS_CURSOR@columna 0014  
