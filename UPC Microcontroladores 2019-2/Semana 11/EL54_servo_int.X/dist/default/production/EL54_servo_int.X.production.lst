

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Oct 22 21:01:18 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           ; Version 2.05
    28                           ; Generated 20/12/2018 GMT
    29                           ; 
    30                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     _LATEbits	set	3981
    62  0000                     _INTCON3bits	set	4080
    63  0000                     _INTCONbits	set	4082
    64  0000                     _TRISEbits	set	3990
    65  0000                     _ADCON1	set	4033
    66  0000                     _PORTD	set	3971
    67  0000                     _LATD	set	3980
    68  0000                     _TRISD	set	3989
    69  0000                     _LATDbits	set	3980
    70                           
    71                           	psect	smallconst
    72  000800                     __psmallconst:
    73                           	opt callstack 0
    74  000800  00                 	db	0
    75  000801                     STR_2:
    76  000801  49                 	db	73	;'I'
    77  000802  6E                 	db	110	;'n'
    78  000803  61                 	db	97	;'a'
    79  000804  63                 	db	99	;'c'
    80  000805  74                 	db	116	;'t'
    81  000806  69                 	db	105	;'i'
    82  000807  76                 	db	118	;'v'
    83  000808  6F                 	db	111	;'o'
    84  000809  20                 	db	32
    85  00080A  20                 	db	32
    86  00080B  20                 	db	32
    87  00080C  20                 	db	32
    88  00080D  20                 	db	32
    89  00080E  20                 	db	32
    90  00080F  20                 	db	32
    91  000810  20                 	db	32
    92  000811  00                 	db	0
    93  000812                     STR_1:
    94  000812  53                 	db	83	;'S'
    95  000813  65                 	db	101	;'e'
    96  000814  72                 	db	114	;'r'
    97  000815  76                 	db	118	;'v'
    98  000816  69                 	db	105	;'i'
    99  000817  74                 	db	116	;'t'
   100  000818  6F                 	db	111	;'o'
   101  000819  20                 	db	32
   102  00081A  55                 	db	85	;'U'
   103  00081B  50                 	db	80	;'P'
   104  00081C  43                 	db	67	;'C'
   105  00081D  20                 	db	32
   106  00081E  32                 	db	50	;'2'
   107  00081F  30                 	db	48	;'0'
   108  000820  31                 	db	49	;'1'
   109  000821  39                 	db	57	;'9'
   110  000822  00                 	db	0
   111  000823                     STR_7:
   112  000823  50                 	db	80	;'P'
   113  000824  6F                 	db	111	;'o'
   114  000825  73                 	db	115	;'s'
   115  000826  69                 	db	105	;'i'
   116  000827  63                 	db	99	;'c'
   117  000828  69                 	db	105	;'i'
   118  000829  6F                 	db	111	;'o'
   119  00082A  6E                 	db	110	;'n'
   120  00082B  20                 	db	32
   121  00082C  31                 	db	49	;'1'
   122  00082D  38                 	db	56	;'8'
   123  00082E  30                 	db	48	;'0'
   124  00082F  00                 	db	0
   125  000830                     STR_5:
   126  000830  50                 	db	80	;'P'
   127  000831  6F                 	db	111	;'o'
   128  000832  73                 	db	115	;'s'
   129  000833  69                 	db	105	;'i'
   130  000834  63                 	db	99	;'c'
   131  000835  69                 	db	105	;'i'
   132  000836  6F                 	db	111	;'o'
   133  000837  6E                 	db	110	;'n'
   134  000838  20                 	db	32
   135  000839  39                 	db	57	;'9'
   136  00083A  30                 	db	48	;'0'
   137  00083B  00                 	db	0
   138  00083C                     STR_3:
   139  00083C  50                 	db	80	;'P'
   140  00083D  6F                 	db	111	;'o'
   141  00083E  73                 	db	115	;'s'
   142  00083F  69                 	db	105	;'i'
   143  000840  63                 	db	99	;'c'
   144  000841  69                 	db	105	;'i'
   145  000842  6F                 	db	111	;'o'
   146  000843  6E                 	db	110	;'n'
   147  000844  20                 	db	32
   148  000845  30                 	db	48	;'0'
   149  000846  00                 	db	0
   150  0000                     
   151                           ; #config settings
   152  000847  00                 	db	0	; dummy byte at the end
   153  0000                     
   154                           	psect	cinit
   155  000B98                     __pcinit:
   156                           	opt callstack 0
   157  000B98                     start_initialization:
   158                           	opt callstack 0
   159  000B98                     __initialization:
   160                           	opt callstack 0
   161                           
   162                           ; Clear objects allocated to COMRAM (1 bytes)
   163  000B98  6A0B               	clrf	__pbssCOMRAM& (0+255),c
   164  000B9A                     end_of_initialization:
   165                           	opt callstack 0
   166  000B9A                     __end_of__initialization:
   167                           	opt callstack 0
   168  000B9A  900C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   169  000B9C  920C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   170  000B9E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   171  000BA0  6EF8               	movwf	tblptru,c
   172  000BA2  0E08               	movlw	high __Lsmallconst
   173  000BA4  6EF7               	movwf	tblptrh,c
   174  000BA6  0100               	movlb	0
   175  000BA8  EF24  F004         	goto	_main	;jump to C main() function
   176                           
   177                           	psect	bssCOMRAM
   178  00000B                     __pbssCOMRAM:
   179                           	opt callstack 0
   180  00000B                     _estado:
   181                           	opt callstack 0
   182  00000B                     	ds	1
   183                           
   184                           	psect	cstackCOMRAM
   185  000001                     __pcstackCOMRAM:
   186                           	opt callstack 0
   187  000001                     ENVIA_NIBBLE@dato:
   188                           	opt callstack 0
   189  000001                     LEER_LCD@aux:
   190                           	opt callstack 0
   191                           
   192                           ; 1 bytes @ 0x0
   193  000001                     	ds	1
   194  000002                     ENVIA_CHAR@dato:
   195                           	opt callstack 0
   196  000002                     ENVIA_LCD_CMD@dato:
   197                           	opt callstack 0
   198                           
   199                           ; 1 bytes @ 0x1
   200  000002                     	ds	1
   201  000003                     ENVIA_CHAR@aux:
   202                           	opt callstack 0
   203  000003                     ENVIA_LCD_CMD@aux:
   204                           	opt callstack 0
   205                           
   206                           ; 1 bytes @ 0x2
   207  000003                     	ds	1
   208  000004                     ??_LCD_CONFIG:
   209  000004                     POS_CURSOR@columna:
   210                           	opt callstack 0
   211  000004                     CURSOR_ONOFF@estado:
   212                           	opt callstack 0
   213  000004                     ESCRIBE_MENSAJE@cadena:
   214                           	opt callstack 0
   215                           
   216                           ; 2 bytes @ 0x3
   217  000004                     	ds	1
   218  000005                     ??_arrancaLCD:
   219  000005                     POS_CURSOR@fila:
   220                           	opt callstack 0
   221                           
   222                           ; 1 bytes @ 0x4
   223  000005                     	ds	1
   224  000006                     ESCRIBE_MENSAJE@tam:
   225                           	opt callstack 0
   226                           
   227                           ; 1 bytes @ 0x5
   228  000006                     	ds	1
   229  000007                     ??_ESCRIBE_MENSAJE:
   230                           
   231                           ; 1 bytes @ 0x6
   232  000007                     	ds	2
   233  000009                     ESCRIBE_MENSAJE@i:
   234                           	opt callstack 0
   235                           
   236                           ; 1 bytes @ 0x8
   237  000009                     	ds	1
   238  00000A                     ??_main:
   239                           
   240                           ; 1 bytes @ 0x9
   241  00000A                     	ds	1
   242                           
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   245 ;;
   246 ;; *************** function _main *****************
   247 ;; Defined at:
   248 ;;		line 30 in file "maincodemon.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;		None
   253 ;; Return value:  Size  Location     Type
   254 ;;                  1    wreg      void 
   255 ;; Registers used:
   256 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   257 ;; Tracked objects:
   258 ;;		On entry : 0/0
   259 ;;		On exit  : 0/0
   260 ;;		Unchanged: 0/0
   261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   262 ;;      Params:         0       0       0       0       0       0       0       0       0
   263 ;;      Locals:         0       0       0       0       0       0       0       0       0
   264 ;;      Temps:          1       0       0       0       0       0       0       0       0
   265 ;;      Totals:         1       0       0       0       0       0       0       0       0
   266 ;;Total ram usage:        1 bytes
   267 ;; Hardware stack levels required when called:    5
   268 ;; This function calls:
   269 ;;		_ENVIA_CHAR
   270 ;;		_ESCRIBE_MENSAJE
   271 ;;		_POS_CURSOR
   272 ;;		_arrancaLCD
   273 ;; This function is called by:
   274 ;;		Startup code after reset
   275 ;; This function uses a non-reentrant model
   276 ;;
   277                           
   278                           	psect	text0
   279  000848                     __ptext0:
   280                           	opt callstack 0
   281  000848                     _main:
   282                           	opt callstack 26
   283                           
   284                           ;maincodemon.c: 31:     arrancaLCD();
   285                           
   286                           ;incstack = 0
   287  000848  EC7A  F005         	call	_arrancaLCD	;wreg free
   288                           
   289                           ;maincodemon.c: 32:     ADCON1 = 0x0F;
   290  00084C  0E0F               	movlw	15
   291  00084E  6EC1               	movwf	4033,c	;volatile
   292                           
   293                           ;maincodemon.c: 33:     TRISEbits.RE0 = 0;
   294  000850  9096               	bcf	3990,0,c	;volatile
   295                           
   296                           ;maincodemon.c: 34:     INTCONbits.GIE = 1;
   297  000852  8EF2               	bsf	4082,7,c	;volatile
   298                           
   299                           ;maincodemon.c: 35:     INTCONbits.INT0IE = 1;
   300  000854  88F2               	bsf	4082,4,c	;volatile
   301                           
   302                           ;maincodemon.c: 36:     INTCON3bits.INT1E = 1;
   303  000856  86F0               	bsf	4080,3,c	;volatile
   304                           
   305                           ;maincodemon.c: 37:     INTCON3bits.INT2IE = 1;
   306  000858  88F0               	bsf	4080,4,c	;volatile
   307                           
   308                           ;maincodemon.c: 38:     ESCRIBE_MENSAJE("Servito UPC 2019", 16);
   309  00085A  0E12               	movlw	low STR_1
   310  00085C  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   311  00085E  0E08               	movlw	high STR_1
   312  000860  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   313  000862  0E10               	movlw	16
   314  000864  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   315  000866  EC61  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   316  00086A                     l1106:
   317                           
   318                           ;maincodemon.c: 40:         if (estado == 0){
   319  00086A  500B               	movf	_estado,w,c
   320  00086C  A4D8               	btfss	status,2,c
   321  00086E  D00E               	goto	l1112
   322                           
   323                           ;maincodemon.c: 41:             POS_CURSOR(2, 0);
   324  000870  0E00               	movlw	0
   325  000872  6E04               	movwf	POS_CURSOR@columna,c
   326  000874  0E02               	movlw	2
   327  000876  EC8E  F005         	call	_POS_CURSOR
   328                           
   329                           ;maincodemon.c: 42:             ESCRIBE_MENSAJE("Inactivo        ", 16);
   330  00087A  0E01               	movlw	low STR_2
   331  00087C  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   332  00087E  0E08               	movlw	high STR_2
   333  000880  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   334  000882  0E10               	movlw	16
   335  000884  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   336  000886  EC61  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   337                           
   338                           ;maincodemon.c: 43:         }
   339  00088A  D7EF               	goto	l1106
   340  00088C                     l1112:
   341  00088C  040B               	decf	_estado,w,c
   342  00088E  A4D8               	btfss	status,2,c
   343  000890  D02A               	goto	l1128
   344                           
   345                           ;maincodemon.c: 45:             POS_CURSOR(2, 0);
   346  000892  0E00               	movlw	0
   347  000894  6E04               	movwf	POS_CURSOR@columna,c
   348  000896  0E02               	movlw	2
   349  000898  EC8E  F005         	call	_POS_CURSOR
   350                           
   351                           ;maincodemon.c: 46:             ESCRIBE_MENSAJE("Posicion 0", 10);
   352  00089C  0E3C               	movlw	low STR_3
   353  00089E  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   354  0008A0  0E08               	movlw	high STR_3
   355  0008A2  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   356  0008A4  0E0A               	movlw	10
   357  0008A6  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   358  0008A8  EC61  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   359                           
   360                           ;maincodemon.c: 47:             ENVIA_CHAR(0xDF);
   361  0008AC  0EDF               	movlw	223
   362  0008AE  EC47  F005         	call	_ENVIA_CHAR
   363                           
   364                           ;maincodemon.c: 48:             ESCRIBE_MENSAJE("     ", 5);
   365  0008B2  0E0C               	movlw	low (STR_2+11)
   366  0008B4  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   367  0008B6  0E08               	movlw	high (STR_2+11)
   368  0008B8  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   369  0008BA  0E05               	movlw	5
   370  0008BC  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   371  0008BE  EC61  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   372                           
   373                           ;maincodemon.c: 49:             LATEbits.LE0 = 1;
   374  0008C2  808D               	bsf	3981,0,c	;volatile
   375                           
   376                           ;maincodemon.c: 50:             _delay((unsigned long)((500)*(32000000UL/4000000.0)));
   377  0008C4  0E06               	movlw	6
   378  0008C6  6E0A               	movwf	??_main& (0+255),c
   379  0008C8  0E30               	movlw	48
   380  0008CA                     u237:
   381  0008CA  2EE8               	decfsz	wreg,f,c
   382  0008CC  D7FE               	bra	u237
   383  0008CE  2E0A               	decfsz	??_main& (0+255),f,c
   384  0008D0  D7FC               	bra	u237
   385  0008D2  D000               	nop2	
   386                           
   387                           ;maincodemon.c: 51:             LATEbits.LE0 = 0;
   388  0008D4  908D               	bcf	3981,0,c	;volatile
   389                           
   390                           ;maincodemon.c: 52:             _delay((unsigned long)((19500)*(32000000UL/4000000.0)));
   391  0008D6  0ECB               	movlw	203
   392  0008D8  6E0A               	movwf	??_main& (0+255),c
   393  0008DA  0E98               	movlw	152
   394  0008DC                     u247:
   395  0008DC  2EE8               	decfsz	wreg,f,c
   396  0008DE  D7FE               	bra	u247
   397  0008E0  2E0A               	decfsz	??_main& (0+255),f,c
   398  0008E2  D7FC               	bra	u247
   399                           
   400                           ;maincodemon.c: 53:         }
   401  0008E4  D7C2               	goto	l1106
   402  0008E6                     l1128:
   403  0008E6  0E02               	movlw	2
   404  0008E8  180B               	xorwf	_estado,w,c
   405  0008EA  A4D8               	btfss	status,2,c
   406  0008EC  D02A               	goto	l1144
   407                           
   408                           ;maincodemon.c: 55:             POS_CURSOR(2, 0);
   409  0008EE  0E00               	movlw	0
   410  0008F0  6E04               	movwf	POS_CURSOR@columna,c
   411  0008F2  0E02               	movlw	2
   412  0008F4  EC8E  F005         	call	_POS_CURSOR
   413                           
   414                           ;maincodemon.c: 56:             ESCRIBE_MENSAJE("Posicion 90", 11);
   415  0008F8  0E30               	movlw	low STR_5
   416  0008FA  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   417  0008FC  0E08               	movlw	high STR_5
   418  0008FE  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   419  000900  0E0B               	movlw	11
   420  000902  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   421  000904  EC61  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   422                           
   423                           ;maincodemon.c: 57:             ENVIA_CHAR(0xDF);
   424  000908  0EDF               	movlw	223
   425  00090A  EC47  F005         	call	_ENVIA_CHAR
   426                           
   427                           ;maincodemon.c: 58:             ESCRIBE_MENSAJE("    ", 4);
   428  00090E  0E0D               	movlw	low (STR_2+12)
   429  000910  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   430  000912  0E08               	movlw	high (STR_2+12)
   431  000914  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   432  000916  0E04               	movlw	4
   433  000918  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   434  00091A  EC61  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   435                           
   436                           ;maincodemon.c: 59:             LATEbits.LE0 = 1;
   437  00091E  808D               	bsf	3981,0,c	;volatile
   438                           
   439                           ;maincodemon.c: 60:             _delay((unsigned long)((1500)*(32000000UL/4000000.0)));
   440  000920  0E10               	movlw	16
   441  000922  6E0A               	movwf	??_main& (0+255),c
   442  000924  0E94               	movlw	148
   443  000926                     u257:
   444  000926  2EE8               	decfsz	wreg,f,c
   445  000928  D7FE               	bra	u257
   446  00092A  2E0A               	decfsz	??_main& (0+255),f,c
   447  00092C  D7FC               	bra	u257
   448  00092E  D000               	nop2	
   449                           
   450                           ;maincodemon.c: 61:             LATEbits.LE0 = 0;
   451  000930  908D               	bcf	3981,0,c	;volatile
   452                           
   453                           ;maincodemon.c: 62:             _delay((unsigned long)((18500)*(32000000UL/4000000.0)));
   454  000932  0EC1               	movlw	193
   455  000934  6E0A               	movwf	??_main& (0+255),c
   456  000936  0E34               	movlw	52
   457  000938                     u267:
   458  000938  2EE8               	decfsz	wreg,f,c
   459  00093A  D7FE               	bra	u267
   460  00093C  2E0A               	decfsz	??_main& (0+255),f,c
   461  00093E  D7FC               	bra	u267
   462                           
   463                           ;maincodemon.c: 64:         }
   464  000940  D794               	goto	l1106
   465  000942                     l1144:
   466                           
   467                           ;maincodemon.c: 66:             POS_CURSOR(2, 0);
   468  000942  0E00               	movlw	0
   469  000944  6E04               	movwf	POS_CURSOR@columna,c
   470  000946  0E02               	movlw	2
   471  000948  EC8E  F005         	call	_POS_CURSOR
   472                           
   473                           ;maincodemon.c: 67:             ESCRIBE_MENSAJE("Posicion 180", 12);
   474  00094C  0E23               	movlw	low STR_7
   475  00094E  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   476  000950  0E08               	movlw	high STR_7
   477  000952  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   478  000954  0E0C               	movlw	12
   479  000956  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   480  000958  EC61  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   481                           
   482                           ;maincodemon.c: 68:             ENVIA_CHAR(0xDF);
   483  00095C  0EDF               	movlw	223
   484  00095E  EC47  F005         	call	_ENVIA_CHAR
   485                           
   486                           ;maincodemon.c: 69:             ESCRIBE_MENSAJE("   ", 3);
   487  000962  0E0E               	movlw	low (STR_2+13)
   488  000964  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   489  000966  0E08               	movlw	high (STR_2+13)
   490  000968  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   491  00096A  0E03               	movlw	3
   492  00096C  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   493  00096E  EC61  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   494                           
   495                           ;maincodemon.c: 70:             LATEbits.LE0 = 1;
   496  000972  808D               	bsf	3981,0,c	;volatile
   497                           
   498                           ;maincodemon.c: 71:             _delay((unsigned long)((2500)*(32000000UL/4000000.0)));
   499  000974  0E1A               	movlw	26
   500  000976  6E0A               	movwf	??_main& (0+255),c
   501  000978  0EF8               	movlw	248
   502  00097A                     u277:
   503  00097A  2EE8               	decfsz	wreg,f,c
   504  00097C  D7FE               	bra	u277
   505  00097E  2E0A               	decfsz	??_main& (0+255),f,c
   506  000980  D7FC               	bra	u277
   507  000982  D000               	nop2	
   508                           
   509                           ;maincodemon.c: 72:             LATEbits.LE0 = 0;
   510  000984  908D               	bcf	3981,0,c	;volatile
   511                           
   512                           ;maincodemon.c: 73:             _delay((unsigned long)((17500)*(32000000UL/4000000.0)));
   513  000986  0EB6               	movlw	182
   514  000988  6E0A               	movwf	??_main& (0+255),c
   515  00098A  0ED0               	movlw	208
   516  00098C                     u287:
   517  00098C  2EE8               	decfsz	wreg,f,c
   518  00098E  D7FE               	bra	u287
   519  000990  2E0A               	decfsz	??_main& (0+255),f,c
   520  000992  D7FC               	bra	u287
   521  000994  D000               	nop2	
   522  000996  D769               	goto	l1106
   523  000998                     __end_of_main:
   524                           	opt callstack 0
   525                           
   526 ;; *************** function _arrancaLCD *****************
   527 ;; Defined at:
   528 ;;		line 21 in file "maincodemon.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;		None
   531 ;; Auto vars:     Size  Location     Type
   532 ;;		None
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, status,2, status,0, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   542 ;;      Params:         0       0       0       0       0       0       0       0       0
   543 ;;      Locals:         0       0       0       0       0       0       0       0       0
   544 ;;      Temps:          1       0       0       0       0       0       0       0       0
   545 ;;      Totals:         1       0       0       0       0       0       0       0       0
   546 ;;Total ram usage:        1 bytes
   547 ;; Hardware stack levels used:    1
   548 ;; Hardware stack levels required when called:    4
   549 ;; This function calls:
   550 ;;		_BORRAR_LCD
   551 ;;		_CURSOR_HOME
   552 ;;		_CURSOR_ONOFF
   553 ;;		_LCD_CONFIG
   554 ;; This function is called by:
   555 ;;		_main
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559                           	psect	text1
   560  000AF4                     __ptext1:
   561                           	opt callstack 0
   562  000AF4                     _arrancaLCD:
   563                           	opt callstack 26
   564                           
   565                           ;maincodemon.c: 22:     TRISD = 0x00;
   566                           
   567                           ;incstack = 0
   568  000AF4  0E00               	movlw	0
   569  000AF6  6E95               	movwf	3989,c	;volatile
   570                           
   571                           ;maincodemon.c: 23:     LCD_CONFIG();
   572  000AF8  ECFD  F004         	call	_LCD_CONFIG	;wreg free
   573                           
   574                           ;maincodemon.c: 24:     _delay((unsigned long)((15)*(32000000UL/4000.0)));
   575  000AFC  0E9C               	movlw	156
   576  000AFE  6E05               	movwf	??_arrancaLCD& (0+255),c
   577  000B00  0ED7               	movlw	215
   578  000B02                     u297:
   579  000B02  2EE8               	decfsz	wreg,f,c
   580  000B04  D7FE               	bra	u297
   581  000B06  2E05               	decfsz	??_arrancaLCD& (0+255),f,c
   582  000B08  D7FC               	bra	u297
   583  000B0A  F000               	nop	
   584                           
   585                           ;maincodemon.c: 25:     CURSOR_ONOFF(1);
   586  000B0C  0E01               	movlw	1
   587  000B0E  ECB0  F005         	call	_CURSOR_ONOFF
   588                           
   589                           ;maincodemon.c: 26:     BORRAR_LCD();
   590  000B12  ECDA  F005         	call	_BORRAR_LCD	;wreg free
   591                           
   592                           ;maincodemon.c: 27:     CURSOR_HOME();
   593  000B16  ECD6  F005         	call	_CURSOR_HOME	;wreg free
   594  000B1A  0012               	return		;funcret
   595  000B1C                     __end_of_arrancaLCD:
   596                           	opt callstack 0
   597                           
   598 ;; *************** function _LCD_CONFIG *****************
   599 ;; Defined at:
   600 ;;		line 72 in file "LCD.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;		None
   603 ;; Auto vars:     Size  Location     Type
   604 ;;		None
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      void 
   607 ;; Registers used:
   608 ;;		wreg, status,2, status,0, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   614 ;;      Params:         0       0       0       0       0       0       0       0       0
   615 ;;      Locals:         0       0       0       0       0       0       0       0       0
   616 ;;      Temps:          1       0       0       0       0       0       0       0       0
   617 ;;      Totals:         1       0       0       0       0       0       0       0       0
   618 ;;Total ram usage:        1 bytes
   619 ;; Hardware stack levels used:    1
   620 ;; Hardware stack levels required when called:    3
   621 ;; This function calls:
   622 ;;		_ENVIA_LCD_CMD
   623 ;;		_ENVIA_NIBBLE
   624 ;; This function is called by:
   625 ;;		_arrancaLCD
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text2
   630  0009FA                     __ptext2:
   631                           	opt callstack 0
   632  0009FA                     _LCD_CONFIG:
   633                           	opt callstack 26
   634                           
   635                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   636                           
   637                           ;incstack = 0
   638  0009FA  908C               	bcf	3980,0,c	;volatile
   639                           
   640                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   641  0009FC  928C               	bcf	3980,1,c	;volatile
   642                           
   643                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   644  0009FE  0E30               	movlw	48
   645  000A00  ECBE  F005         	call	_ENVIA_NIBBLE
   646                           
   647                           ;LCD.c: 77:         _delay(24000);
   648  000A04  0E20               	movlw	32
   649  000A06  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   650  000A08  0E2A               	movlw	42
   651  000A0A                     u307:
   652  000A0A  2EE8               	decfsz	wreg,f,c
   653  000A0C  D7FE               	bra	u307
   654  000A0E  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   655  000A10  D7FC               	bra	u307
   656                           
   657                           ;LCD.c: 78:         _delay(24000);
   658  000A12  0E20               	movlw	32
   659  000A14  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   660  000A16  0E2A               	movlw	42
   661  000A18                     u317:
   662  000A18  2EE8               	decfsz	wreg,f,c
   663  000A1A  D7FE               	bra	u317
   664  000A1C  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   665  000A1E  D7FC               	bra	u317
   666                           
   667                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   668  000A20  0E30               	movlw	48
   669  000A22  ECBE  F005         	call	_ENVIA_NIBBLE
   670                           
   671                           ;LCD.c: 83:  _delay(1200);
   672  000A26  0EF0               	movlw	240
   673  000A28                     u327:
   674  000A28  D000               	nop2	
   675  000A2A  2EE8               	decfsz	wreg,f,c
   676  000A2C  D7FD               	bra	u327
   677                           
   678                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   679  000A2E  0E30               	movlw	48
   680  000A30  ECBE  F005         	call	_ENVIA_NIBBLE
   681                           
   682                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   683  000A34  0E20               	movlw	32
   684  000A36  ECBE  F005         	call	_ENVIA_NIBBLE
   685                           
   686                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   687  000A3A  0E01               	movlw	1
   688  000A3C  EC2D  F005         	call	_ENVIA_LCD_CMD
   689                           
   690                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   691  000A40  0E28               	movlw	40
   692  000A42  EC2D  F005         	call	_ENVIA_LCD_CMD
   693                           
   694                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   695  000A46  0E0F               	movlw	15
   696  000A48  EC2D  F005         	call	_ENVIA_LCD_CMD
   697                           
   698                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   699  000A4C  0E06               	movlw	6
   700  000A4E  EC2D  F005         	call	_ENVIA_LCD_CMD
   701                           
   702                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   703  000A52  0E01               	movlw	1
   704  000A54  EC2D  F005         	call	_ENVIA_LCD_CMD
   705  000A58  0012               	return		;funcret
   706  000A5A                     __end_of_LCD_CONFIG:
   707                           	opt callstack 0
   708                           
   709 ;; *************** function _CURSOR_ONOFF *****************
   710 ;; Defined at:
   711 ;;		line 35 in file "LCD.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;  estado          1    wreg     unsigned char 
   714 ;; Auto vars:     Size  Location     Type
   715 ;;  estado          1    3[COMRAM] unsigned char 
   716 ;; Return value:  Size  Location     Type
   717 ;;                  1    wreg      void 
   718 ;; Registers used:
   719 ;;		wreg, status,2, status,0, cstack
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   725 ;;      Params:         0       0       0       0       0       0       0       0       0
   726 ;;      Locals:         1       0       0       0       0       0       0       0       0
   727 ;;      Temps:          0       0       0       0       0       0       0       0       0
   728 ;;      Totals:         1       0       0       0       0       0       0       0       0
   729 ;;Total ram usage:        1 bytes
   730 ;; Hardware stack levels used:    1
   731 ;; Hardware stack levels required when called:    3
   732 ;; This function calls:
   733 ;;		_ENVIA_LCD_CMD
   734 ;; This function is called by:
   735 ;;		_arrancaLCD
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           	psect	text3
   740  000B60                     __ptext3:
   741                           	opt callstack 0
   742  000B60                     _CURSOR_ONOFF:
   743                           	opt callstack 26
   744                           
   745                           ;incstack = 0
   746                           ;CURSOR_ONOFF@estado stored from wreg
   747  000B60  6E04               	movwf	CURSOR_ONOFF@estado,c
   748                           
   749                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   750  000B62  5004               	movf	CURSOR_ONOFF@estado,w,c
   751  000B64  A4D8               	btfss	status,2,c
   752  000B66  D003               	goto	l880
   753  000B68  0E0E               	movlw	14
   754  000B6A  EC2D  F005         	call	_ENVIA_LCD_CMD
   755  000B6E                     l880:
   756                           
   757                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   758  000B6E  0404               	decf	CURSOR_ONOFF@estado,w,c
   759  000B70  A4D8               	btfss	status,2,c
   760  000B72  0012               	return	
   761  000B74  0E0C               	movlw	12
   762  000B76  EC2D  F005         	call	_ENVIA_LCD_CMD
   763  000B7A  0012               	return		;funcret
   764  000B7C                     __end_of_CURSOR_ONOFF:
   765                           	opt callstack 0
   766                           
   767 ;; *************** function _CURSOR_HOME *****************
   768 ;; Defined at:
   769 ;;		line 30 in file "LCD.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, status,2, status,0, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   783 ;;      Params:         0       0       0       0       0       0       0       0       0
   784 ;;      Locals:         0       0       0       0       0       0       0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0       0       0
   786 ;;      Totals:         0       0       0       0       0       0       0       0       0
   787 ;;Total ram usage:        0 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    3
   790 ;; This function calls:
   791 ;;		_ENVIA_LCD_CMD
   792 ;; This function is called by:
   793 ;;		_arrancaLCD
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           	psect	text4
   798  000BAC                     __ptext4:
   799                           	opt callstack 0
   800  000BAC                     _CURSOR_HOME:
   801                           	opt callstack 26
   802                           
   803                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   804                           
   805                           ;incstack = 0
   806  000BAC  0E02               	movlw	2
   807  000BAE  EC2D  F005         	call	_ENVIA_LCD_CMD
   808  000BB2  0012               	return		;funcret
   809  000BB4                     __end_of_CURSOR_HOME:
   810                           	opt callstack 0
   811                           
   812 ;; *************** function _BORRAR_LCD *****************
   813 ;; Defined at:
   814 ;;		line 67 in file "LCD.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, status,2, status,0, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   828 ;;      Params:         0       0       0       0       0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0       0       0       0       0
   830 ;;      Temps:          0       0       0       0       0       0       0       0       0
   831 ;;      Totals:         0       0       0       0       0       0       0       0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    3
   835 ;; This function calls:
   836 ;;		_ENVIA_LCD_CMD
   837 ;; This function is called by:
   838 ;;		_arrancaLCD
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text5
   843  000BB4                     __ptext5:
   844                           	opt callstack 0
   845  000BB4                     _BORRAR_LCD:
   846                           	opt callstack 26
   847                           
   848                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   849                           
   850                           ;incstack = 0
   851  000BB4  0E01               	movlw	1
   852  000BB6  EC2D  F005         	call	_ENVIA_LCD_CMD
   853  000BBA  0012               	return		;funcret
   854  000BBC                     __end_of_BORRAR_LCD:
   855                           	opt callstack 0
   856                           
   857 ;; *************** function _POS_CURSOR *****************
   858 ;; Defined at:
   859 ;;		line 6 in file "LCD.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;  fila            1    wreg     unsigned char 
   862 ;;  columna         1    3[COMRAM] unsigned char 
   863 ;; Auto vars:     Size  Location     Type
   864 ;;  fila            1    4[COMRAM] unsigned char 
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		wreg, status,2, status,0, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   874 ;;      Params:         1       0       0       0       0       0       0       0       0
   875 ;;      Locals:         1       0       0       0       0       0       0       0       0
   876 ;;      Temps:          0       0       0       0       0       0       0       0       0
   877 ;;      Totals:         2       0       0       0       0       0       0       0       0
   878 ;;Total ram usage:        2 bytes
   879 ;; Hardware stack levels used:    1
   880 ;; Hardware stack levels required when called:    3
   881 ;; This function calls:
   882 ;;		_ENVIA_LCD_CMD
   883 ;; This function is called by:
   884 ;;		_main
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           	psect	text6
   889  000B1C                     __ptext6:
   890                           	opt callstack 0
   891  000B1C                     _POS_CURSOR:
   892                           	opt callstack 27
   893                           
   894                           ;incstack = 0
   895                           ;POS_CURSOR@fila stored from wreg
   896  000B1C  6E05               	movwf	POS_CURSOR@fila,c
   897                           
   898                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   899  000B1E  0405               	decf	POS_CURSOR@fila,w,c
   900  000B20  A4D8               	btfss	status,2,c
   901  000B22  D005               	goto	l1078
   902                           
   903                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   904  000B24  5004               	movf	POS_CURSOR@columna,w,c
   905  000B26  0F80               	addlw	128
   906  000B28  EC2D  F005         	call	_ENVIA_LCD_CMD
   907                           
   908                           ;LCD.c: 11:  }
   909  000B2C  0012               	return	
   910  000B2E                     l1078:
   911  000B2E  0E02               	movlw	2
   912  000B30  1805               	xorwf	POS_CURSOR@fila,w,c
   913  000B32  A4D8               	btfss	status,2,c
   914  000B34  0012               	return	
   915                           
   916                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   917  000B36  5004               	movf	POS_CURSOR@columna,w,c
   918  000B38  0FC0               	addlw	192
   919  000B3A  EC2D  F005         	call	_ENVIA_LCD_CMD
   920  000B3E  0012               	return		;funcret
   921  000B40                     __end_of_POS_CURSOR:
   922                           	opt callstack 0
   923                           
   924 ;; *************** function _ENVIA_LCD_CMD *****************
   925 ;; Defined at:
   926 ;;		line 104 in file "LCD.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;  dato            1    wreg     unsigned char 
   929 ;; Auto vars:     Size  Location     Type
   930 ;;  dato            1    1[COMRAM] unsigned char 
   931 ;;  aux             1    2[COMRAM] unsigned char 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, status,2, status,0, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   941 ;;      Params:         0       0       0       0       0       0       0       0       0
   942 ;;      Locals:         2       0       0       0       0       0       0       0       0
   943 ;;      Temps:          0       0       0       0       0       0       0       0       0
   944 ;;      Totals:         2       0       0       0       0       0       0       0       0
   945 ;;Total ram usage:        2 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    2
   948 ;; This function calls:
   949 ;;		_ENVIA_NIBBLE
   950 ;;		_LEER_LCD
   951 ;; This function is called by:
   952 ;;		_POS_CURSOR
   953 ;;		_CURSOR_HOME
   954 ;;		_CURSOR_ONOFF
   955 ;;		_BORRAR_LCD
   956 ;;		_LCD_CONFIG
   957 ;;		_BLINK_CURSOR
   958 ;;		_DISPLAY_ONOFF
   959 ;;		_GENERACARACTER
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           	psect	text7
   964  000A5A                     __ptext7:
   965                           	opt callstack 0
   966  000A5A                     _ENVIA_LCD_CMD:
   967                           	opt callstack 26
   968                           
   969                           ;incstack = 0
   970                           ;ENVIA_LCD_CMD@dato stored from wreg
   971  000A5A  6E02               	movwf	ENVIA_LCD_CMD@dato,c
   972                           
   973                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
   974  000A5C  908C               	bcf	3980,0,c	;volatile
   975                           
   976                           ;LCD.c: 108:  LEER_LCD();
   977  000A5E  ECCC  F004         	call	_LEER_LCD	;wreg free
   978                           
   979                           ;LCD.c: 109:  TRISD = 0b00000000;
   980  000A62  0E00               	movlw	0
   981  000A64  6E95               	movwf	3989,c	;volatile
   982                           
   983                           ;LCD.c: 111:         _delay(1200);
   984  000A66  0EF0               	movlw	240
   985  000A68                     u337:
   986  000A68  D000               	nop2	
   987  000A6A  2EE8               	decfsz	wreg,f,c
   988  000A6C  D7FD               	bra	u337
   989                           
   990                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
   991  000A6E  928C               	bcf	3980,1,c	;volatile
   992                           
   993                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
   994  000A70  948C               	bcf	3980,2,c	;volatile
   995                           
   996                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
   997  000A72  908C               	bcf	3980,0,c	;volatile
   998                           
   999                           ;LCD.c: 115:  aux = dato & 0xF0;
  1000  000A74  5002               	movf	ENVIA_LCD_CMD@dato,w,c
  1001  000A76  0BF0               	andlw	240
  1002  000A78  6E03               	movwf	ENVIA_LCD_CMD@aux,c
  1003                           
  1004                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1005  000A7A  5003               	movf	ENVIA_LCD_CMD@aux,w,c
  1006  000A7C  ECBE  F005         	call	_ENVIA_NIBBLE
  1007                           
  1008                           ;LCD.c: 117:  aux = dato<<4;
  1009  000A80  3802               	swapf	ENVIA_LCD_CMD@dato,w,c
  1010  000A82  0BF0               	andlw	240
  1011  000A84  6E03               	movwf	ENVIA_LCD_CMD@aux,c
  1012                           
  1013                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1014  000A86  5003               	movf	ENVIA_LCD_CMD@aux,w,c
  1015  000A88  ECBE  F005         	call	_ENVIA_NIBBLE
  1016  000A8C  0012               	return		;funcret
  1017  000A8E                     __end_of_ENVIA_LCD_CMD:
  1018                           	opt callstack 0
  1019                           
  1020 ;; *************** function _ESCRIBE_MENSAJE *****************
  1021 ;; Defined at:
  1022 ;;		line 41 in file "LCD.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1025 ;;		 -> STR_8(4), STR_7(13), STR_6(5), STR_5(12), 
  1026 ;;		 -> STR_4(6), STR_3(11), STR_2(17), STR_1(17), 
  1027 ;;  tam             1    5[COMRAM] unsigned char 
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  i               1    8[COMRAM] unsigned char 
  1030 ;; Return value:  Size  Location     Type
  1031 ;;                  1    wreg      void 
  1032 ;; Registers used:
  1033 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/0
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1039 ;;      Params:         3       0       0       0       0       0       0       0       0
  1040 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1041 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1042 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1043 ;;Total ram usage:        6 bytes
  1044 ;; Hardware stack levels used:    1
  1045 ;; Hardware stack levels required when called:    3
  1046 ;; This function calls:
  1047 ;;		_ENVIA_CHAR
  1048 ;; This function is called by:
  1049 ;;		_main
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052                           
  1053                           	psect	text8
  1054  000AC2                     __ptext8:
  1055                           	opt callstack 0
  1056  000AC2                     _ESCRIBE_MENSAJE:
  1057                           	opt callstack 27
  1058                           
  1059                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1060                           
  1061                           ;incstack = 0
  1062  000AC2  0E00               	movlw	0
  1063  000AC4  6E09               	movwf	ESCRIBE_MENSAJE@i,c
  1064                           
  1065                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1066  000AC6  0E00               	movlw	0
  1067  000AC8  6E09               	movwf	ESCRIBE_MENSAJE@i,c
  1068  000ACA  D00F               	goto	l1088
  1069  000ACC                     l1084:
  1070                           
  1071                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1072  000ACC  5009               	movf	ESCRIBE_MENSAJE@i,w,c
  1073  000ACE  2404               	addwf	ESCRIBE_MENSAJE@cadena,w,c
  1074  000AD0  6E07               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
  1075  000AD2  0E00               	movlw	0
  1076  000AD4  2005               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
  1077  000AD6  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
  1078  000AD8  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1079  000ADC  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1080  000AE0                     	if	0	;tblptru may be non-zero
  1081  000AE0                     	endif
  1082  000AE0                     	if	0	;tblptru may be non-zero
  1083  000AE0                     	endif
  1084  000AE0  0008               	tblrd		*
  1085  000AE2  50F5               	movf	tablat,w,c
  1086  000AE4  EC47  F005         	call	_ENVIA_CHAR
  1087                           
  1088                           ;LCD.c: 47:  }
  1089  000AE8  2A09               	incf	ESCRIBE_MENSAJE@i,f,c
  1090  000AEA                     l1088:
  1091  000AEA  5006               	movf	ESCRIBE_MENSAJE@tam,w,c
  1092  000AEC  5C09               	subwf	ESCRIBE_MENSAJE@i,w,c
  1093  000AEE  B0D8               	btfsc	status,0,c
  1094  000AF0  0012               	return	
  1095  000AF2  D7EC               	goto	l1084
  1096  000AF4                     __end_of_ESCRIBE_MENSAJE:
  1097                           	opt callstack 0
  1098                           
  1099 ;; *************** function _ENVIA_CHAR *****************
  1100 ;; Defined at:
  1101 ;;		line 50 in file "LCD.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;  dato            1    wreg     unsigned char 
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;  dato            1    1[COMRAM] unsigned char 
  1106 ;;  aux             1    2[COMRAM] unsigned char 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      void 
  1109 ;; Registers used:
  1110 ;;		wreg, status,2, status,0, cstack
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1116 ;;      Params:         0       0       0       0       0       0       0       0       0
  1117 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1118 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1119 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1120 ;;Total ram usage:        2 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; Hardware stack levels required when called:    2
  1123 ;; This function calls:
  1124 ;;		_ENVIA_NIBBLE
  1125 ;;		_LEER_LCD
  1126 ;; This function is called by:
  1127 ;;		_ESCRIBE_MENSAJE
  1128 ;;		_main
  1129 ;;		_GENERACARACTER
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133                           	psect	text9
  1134  000A8E                     __ptext9:
  1135                           	opt callstack 0
  1136  000A8E                     _ENVIA_CHAR:
  1137                           	opt callstack 27
  1138                           
  1139                           ;incstack = 0
  1140                           ;ENVIA_CHAR@dato stored from wreg
  1141  000A8E  6E02               	movwf	ENVIA_CHAR@dato,c
  1142                           
  1143                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1144  000A90  808C               	bsf	3980,0,c	;volatile
  1145                           
  1146                           ;LCD.c: 54:  LEER_LCD();
  1147  000A92  ECCC  F004         	call	_LEER_LCD	;wreg free
  1148                           
  1149                           ;LCD.c: 55:  TRISD = 0x00;
  1150  000A96  0E00               	movlw	0
  1151  000A98  6E95               	movwf	3989,c	;volatile
  1152                           
  1153                           ;LCD.c: 56:         _delay(1200);
  1154  000A9A  0EF0               	movlw	240
  1155  000A9C                     u347:
  1156  000A9C  D000               	nop2	
  1157  000A9E  2EE8               	decfsz	wreg,f,c
  1158  000AA0  D7FD               	bra	u347
  1159                           
  1160                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1161  000AA2  928C               	bcf	3980,1,c	;volatile
  1162                           
  1163                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1164  000AA4  948C               	bcf	3980,2,c	;volatile
  1165                           
  1166                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1167  000AA6  808C               	bsf	3980,0,c	;volatile
  1168                           
  1169                           ;LCD.c: 61:  aux = dato & 0xF0;
  1170  000AA8  5002               	movf	ENVIA_CHAR@dato,w,c
  1171  000AAA  0BF0               	andlw	240
  1172  000AAC  6E03               	movwf	ENVIA_CHAR@aux,c
  1173                           
  1174                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1175  000AAE  5003               	movf	ENVIA_CHAR@aux,w,c
  1176  000AB0  ECBE  F005         	call	_ENVIA_NIBBLE
  1177                           
  1178                           ;LCD.c: 63:  aux = dato << 4;
  1179  000AB4  3802               	swapf	ENVIA_CHAR@dato,w,c
  1180  000AB6  0BF0               	andlw	240
  1181  000AB8  6E03               	movwf	ENVIA_CHAR@aux,c
  1182                           
  1183                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1184  000ABA  5003               	movf	ENVIA_CHAR@aux,w,c
  1185  000ABC  ECBE  F005         	call	_ENVIA_NIBBLE
  1186  000AC0  0012               	return		;funcret
  1187  000AC2                     __end_of_ENVIA_CHAR:
  1188                           	opt callstack 0
  1189                           
  1190 ;; *************** function _LEER_LCD *****************
  1191 ;; Defined at:
  1192 ;;		line 121 in file "LCD.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;		None
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  aux             1    0[COMRAM] unsigned char 
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  1    wreg      void 
  1199 ;; Registers used:
  1200 ;;		wreg, status,2, status,0
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1206 ;;      Params:         0       0       0       0       0       0       0       0       0
  1207 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1208 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1209 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1210 ;;Total ram usage:        1 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    1
  1213 ;; This function calls:
  1214 ;;		Nothing
  1215 ;; This function is called by:
  1216 ;;		_ENVIA_CHAR
  1217 ;;		_ENVIA_LCD_CMD
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           	psect	text10
  1222  000998                     __ptext10:
  1223                           	opt callstack 0
  1224  000998                     _LEER_LCD:
  1225                           	opt callstack 26
  1226                           
  1227                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1228                           
  1229                           ;incstack = 0
  1230  000998  0EF8               	movlw	248
  1231  00099A  6E95               	movwf	3989,c	;volatile
  1232                           
  1233                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1234  00099C  908C               	bcf	3980,0,c	;volatile
  1235                           
  1236                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1237  00099E  828C               	bsf	3980,1,c	;volatile
  1238                           
  1239                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1240  0009A0  848C               	bsf	3980,2,c	;volatile
  1241                           
  1242                           ;LCD.c: 128:         _delay(1200);
  1243  0009A2  0EF0               	movlw	240
  1244  0009A4                     u357:
  1245  0009A4  D000               	nop2	
  1246  0009A6  2EE8               	decfsz	wreg,f,c
  1247  0009A8  D7FD               	bra	u357
  1248                           
  1249                           ;LCD.c: 130:  aux = PORTD;
  1250  0009AA  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1251                           
  1252                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1253  0009AE  948C               	bcf	3980,2,c	;volatile
  1254                           
  1255                           ;LCD.c: 132:         _delay(1200);
  1256  0009B0  0EF0               	movlw	240
  1257  0009B2                     u367:
  1258  0009B2  D000               	nop2	
  1259  0009B4  2EE8               	decfsz	wreg,f,c
  1260  0009B6  D7FD               	bra	u367
  1261                           
  1262                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1263  0009B8  848C               	bsf	3980,2,c	;volatile
  1264                           
  1265                           ;LCD.c: 135:         _delay(1200);
  1266  0009BA  0EF0               	movlw	240
  1267  0009BC                     u377:
  1268  0009BC  D000               	nop2	
  1269  0009BE  2EE8               	decfsz	wreg,f,c
  1270  0009C0  D7FD               	bra	u377
  1271  0009C2                     l826:
  1272                           
  1273                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1274  0009C2  948C               	bcf	3980,2,c	;volatile
  1275                           
  1276                           ;LCD.c: 138:  aux = aux & 0x80;
  1277  0009C4  5001               	movf	LEER_LCD@aux,w,c
  1278  0009C6  0B80               	andlw	128
  1279  0009C8  6E01               	movwf	LEER_LCD@aux,c
  1280                           
  1281                           ;LCD.c: 139:  while(aux == 0x80)
  1282  0009CA  D012               	goto	l842
  1283  0009CC                     l67:
  1284                           
  1285                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1286  0009CC  848C               	bsf	3980,2,c	;volatile
  1287                           
  1288                           ;LCD.c: 142:             _delay(1200);
  1289  0009CE  0EF0               	movlw	240
  1290  0009D0                     u387:
  1291  0009D0  D000               	nop2	
  1292  0009D2  2EE8               	decfsz	wreg,f,c
  1293  0009D4  D7FD               	bra	u387
  1294                           
  1295                           ;LCD.c: 143:             aux = PORTD;
  1296  0009D6  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1297                           
  1298                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1299  0009DA  948C               	bcf	3980,2,c	;volatile
  1300                           
  1301                           ;LCD.c: 145:             _delay(1200);
  1302  0009DC  0EF0               	movlw	240
  1303  0009DE                     u397:
  1304  0009DE  D000               	nop2	
  1305  0009E0  2EE8               	decfsz	wreg,f,c
  1306  0009E2  D7FD               	bra	u397
  1307                           
  1308                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1309  0009E4  848C               	bsf	3980,2,c	;volatile
  1310                           
  1311                           ;LCD.c: 147:             _delay(1200);
  1312  0009E6  0EF0               	movlw	240
  1313  0009E8                     u407:
  1314  0009E8  D000               	nop2	
  1315  0009EA  2EE8               	decfsz	wreg,f,c
  1316  0009EC  D7FD               	bra	u407
  1317  0009EE  D7E9               	goto	l826
  1318  0009F0                     l842:
  1319                           
  1320                           ;LCD.c: 139:  while(aux == 0x80)
  1321  0009F0  0E80               	movlw	128
  1322  0009F2  1801               	xorwf	LEER_LCD@aux,w,c
  1323  0009F4  A4D8               	btfss	status,2,c
  1324  0009F6  0012               	return	
  1325  0009F8  D7E9               	goto	l67
  1326  0009FA                     __end_of_LEER_LCD:
  1327                           	opt callstack 0
  1328                           
  1329 ;; *************** function _ENVIA_NIBBLE *****************
  1330 ;; Defined at:
  1331 ;;		line 93 in file "LCD.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;  dato            1    wreg     unsigned char 
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;  dato            1    0[COMRAM] unsigned char 
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  1    wreg      void 
  1338 ;; Registers used:
  1339 ;;		wreg, status,2, status,0
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1345 ;;      Params:         0       0       0       0       0       0       0       0       0
  1346 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1347 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1348 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1349 ;;Total ram usage:        1 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; Hardware stack levels required when called:    1
  1352 ;; This function calls:
  1353 ;;		Nothing
  1354 ;; This function is called by:
  1355 ;;		_ENVIA_CHAR
  1356 ;;		_LCD_CONFIG
  1357 ;;		_ENVIA_LCD_CMD
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           	psect	text11
  1362  000B7C                     __ptext11:
  1363                           	opt callstack 0
  1364  000B7C                     _ENVIA_NIBBLE:
  1365                           	opt callstack 27
  1366                           
  1367                           ;incstack = 0
  1368                           ;ENVIA_NIBBLE@dato stored from wreg
  1369  000B7C  6E01               	movwf	ENVIA_NIBBLE@dato,c
  1370                           
  1371                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1372  000B7E  0E0F               	movlw	15
  1373  000B80  168C               	andwf	3980,f,c	;volatile
  1374                           
  1375                           ;LCD.c: 96:  dato &= 0xF0;
  1376  000B82  0EF0               	movlw	240
  1377  000B84  1601               	andwf	ENVIA_NIBBLE@dato,f,c
  1378                           
  1379                           ;LCD.c: 97:  LATD|= dato;
  1380  000B86  5001               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1381  000B88  128C               	iorwf	3980,f,c	;volatile
  1382                           
  1383                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1384  000B8A  848C               	bsf	3980,2,c	;volatile
  1385                           
  1386                           ;LCD.c: 100:         _delay(1200);
  1387  000B8C  0EF0               	movlw	240
  1388  000B8E                     u417:
  1389  000B8E  D000               	nop2	
  1390  000B90  2EE8               	decfsz	wreg,f,c
  1391  000B92  D7FD               	bra	u417
  1392                           
  1393                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1394  000B94  948C               	bcf	3980,2,c	;volatile
  1395  000B96  0012               	return		;funcret
  1396  000B98                     __end_of_ENVIA_NIBBLE:
  1397                           	opt callstack 0
  1398                           
  1399 ;; *************** function _IntsISR *****************
  1400 ;; Defined at:
  1401 ;;		line 78 in file "maincodemon.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;		None
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;		None
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  1    wreg      void 
  1408 ;; Registers used:
  1409 ;;		wreg, status,2
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1415 ;;      Params:         0       0       0       0       0       0       0       0       0
  1416 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1417 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1418 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1419 ;;Total ram usage:        0 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; This function calls:
  1422 ;;		Nothing
  1423 ;; This function is called by:
  1424 ;;		Interrupt level 2
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           	psect	intcode
  1429  000008                     __pintcode:
  1430                           	opt callstack 0
  1431  000008                     _IntsISR:
  1432                           	opt callstack 26
  1433                           
  1434                           ;incstack = 0
  1435  000008  820C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1436  00000A  EDA0  F005         	call	int_func,f	;refresh shadow registers
  1437                           
  1438                           	psect	intcode_body
  1439  000B40                     __pintcode_body:
  1440                           	opt callstack 26
  1441  000B40                     int_func:
  1442                           	opt callstack 26
  1443  000B40  0006               	pop		; remove dummy address from shadow register refresh
  1444                           
  1445                           ;maincodemon.c: 79:     if (INTCONbits.INT0IF == 1){
  1446  000B42  A2F2               	btfss	4082,1,c	;volatile
  1447  000B44  D002               	goto	i2l126
  1448                           
  1449                           ;maincodemon.c: 80:         estado = 1;
  1450  000B46  0E01               	movlw	1
  1451  000B48  D005               	goto	L1
  1452  000B4A                     i2l126:
  1453  000B4A  A0F0               	btfss	4080,0,c	;volatile
  1454  000B4C  D002               	goto	i2l1066
  1455                           
  1456                           ;maincodemon.c: 83:         estado = 2;
  1457  000B4E  0E02               	movlw	2
  1458  000B50  D001               	goto	L1
  1459  000B52                     i2l1066:
  1460                           
  1461                           ;maincodemon.c: 86:         estado = 3;
  1462  000B52  0E03               	movlw	3
  1463  000B54                     L1:
  1464  000B54  6E0B               	movwf	_estado,c
  1465                           
  1466                           ;maincodemon.c: 88:     INTCONbits.INT0IF = 0;
  1467  000B56  92F2               	bcf	4082,1,c	;volatile
  1468                           
  1469                           ;maincodemon.c: 89:     INTCON3bits.INT1IF = 0;
  1470  000B58  90F0               	bcf	4080,0,c	;volatile
  1471                           
  1472                           ;maincodemon.c: 90:     INTCON3bits.INT2IF = 0;
  1473  000B5A  92F0               	bcf	4080,1,c	;volatile
  1474  000B5C  920C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1475  000B5E  0011               	retfie		f
  1476  000B60                     __end_of_IntsISR:
  1477                           	opt callstack 0
  1478                           
  1479                           	psect	rparam
  1480  0000                     
  1481                           	psect	temp
  1482  00000C                     btemp:
  1483                           	opt callstack 0
  1484  00000C                     	ds	1
  1485  0000                     int$flags	set	btemp
  1486  0000                     wtemp8	set	btemp+1
  1487  0000                     ttemp5	set	btemp+1
  1488  0000                     ttemp6	set	btemp+4
  1489  0000                     ttemp7	set	btemp+8
  1490                           tosu	equ	0xFFF
  1491                           tosh	equ	0xFFE
  1492                           tosl	equ	0xFFD
  1493                           stkptr	equ	0xFFC
  1494                           pclatu	equ	0xFFB
  1495                           pclath	equ	0xFFA
  1496                           pcl	equ	0xFF9
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           prodh	equ	0xFF4
  1502                           prodl	equ	0xFF3
  1503                           indf0	equ	0xFEF
  1504                           postinc0	equ	0xFEE
  1505                           postdec0	equ	0xFED
  1506                           preinc0	equ	0xFEC
  1507                           plusw0	equ	0xFEB
  1508                           fsr0h	equ	0xFEA
  1509                           fsr0l	equ	0xFE9
  1510                           wreg	equ	0xFE8
  1511                           indf1	equ	0xFE7
  1512                           postinc1	equ	0xFE6
  1513                           postdec1	equ	0xFE5
  1514                           preinc1	equ	0xFE4
  1515                           plusw1	equ	0xFE3
  1516                           fsr1h	equ	0xFE2
  1517                           fsr1l	equ	0xFE1
  1518                           bsr	equ	0xFE0
  1519                           indf2	equ	0xFDF
  1520                           postinc2	equ	0xFDE
  1521                           postdec2	equ	0xFDD
  1522                           preinc2	equ	0xFDC
  1523                           plusw2	equ	0xFDB
  1524                           fsr2h	equ	0xFDA
  1525                           fsr2l	equ	0xFD9
  1526                           status	equ	0xFD8


Data Sizes:
    Strings     70
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     10      11
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_8(CODE[4]), STR_7(CODE[13]), STR_6(CODE[5]), STR_5(CODE[12]), 
		 -> STR_4(CODE[6]), STR_3(CODE[11]), STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _arrancaLCD->_CURSOR_ONOFF
    _arrancaLCD->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _IntsISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _IntsISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _IntsISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IntsISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _IntsISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _IntsISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _IntsISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _IntsISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _IntsISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2584
                                              9 COMRAM     1     1      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                         _arrancaLCD
 ---------------------------------------------------------------------------------
 (1) _arrancaLCD                                           1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     512
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3    1427
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IntsISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _arrancaLCD
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE

 _IntsISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      A       B       1       11.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       B      20        0.0%
DATA                 0      0       B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Oct 22 21:01:18 2019

                      l67 09CC               __CFG_BORV$3 000000        __CFG_FOSC$XTPLL_XT 000000  
           ENVIA_CHAR@aux 0003                       l842 09F0                       l826 09C2  
                     l880 0B6E                       u307 0A0A                       u317 0A18  
                     u237 08CA                       u407 09E8                       u327 0A28  
                     u247 08DC                       u417 0B8E                       u337 0A68  
                     u257 0926                       u347 0A9C                       u267 0938  
                     u357 09A4                       u277 097A                       u367 09B2  
                     u287 098C                       u377 09BC                       u297 0B02  
                     u387 09D0                       u397 09DE              __CFG_BOR$OFF 000000  
             LEER_LCD@aux 0001                       wreg 000FE8              ?_CURSOR_HOME 0001  
          ??_ENVIA_NIBBLE 0001              __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0002  
            __CFG_WDT$OFF 000000                      l1112 088C                      l1106 086A  
                    l1144 0942                      l1128 08E6                      l1084 0ACC  
                    l1078 0B2E                      l1088 0AEA                      STR_1 0812  
                    STR_2 0801                      STR_3 083C                      STR_4 080C  
                    STR_5 0830                      STR_6 080D                      STR_7 0823  
                    STR_8 080E                      _LATD 000F8C              __CFG_PWRT$ON 000000  
                    _main 0848                      btemp 000C                      start 000E  
           ?_CURSOR_ONOFF 0001             __CFG_MCLRE$ON 000000              ___param_bank 000000  
         ??_ENVIA_LCD_CMD 0002           __end_of_IntsISR 0B60          __end_of_LEER_LCD 09FA  
     __size_of_BORRAR_LCD 0008             __CFG_PLLDIV$1 000000                     ?_main 0001  
                   i2l126 0B4A                     _PORTD 000F83       __size_of_LCD_CONFIG 0060  
                   _TRISD 000F95       __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0004  
                   tablat 000FF5                     ttemp5 000D                     ttemp6 0010  
                   ttemp7 0014                     status 000FD8                     wtemp8 000D  
          ??_CURSOR_ONOFF 0004           __initialization 0B98              __end_of_main 0998  
         _ESCRIBE_MENSAJE 0AC2                    ??_main 000A             __activetblptr 000001  
         __CFG_CCP2MX$OFF 000000                    _ADCON1 000FC1                    i2l1066 0B52  
               ??_IntsISR 0001      __end_of_ENVIA_NIBBLE 0B98                    _estado 000B  
     __size_of_POS_CURSOR 0024              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8              ??_BORRAR_LCD 0004  
    __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0001                __accesstop 0060  
 __end_of__initialization 0B9A           __CFG_PBADEN$OFF 000000              ??_LCD_CONFIG 0004  
           ___rparam_used 000001              ??_ENVIA_CHAR 0002   __end_of_ESCRIBE_MENSAJE 0AF4  
          __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0BBC          ENVIA_LCD_CMD@aux 0003  
    __end_of_CURSOR_ONOFF 0B7C        __end_of_LCD_CONFIG 0A5A        __end_of_ENVIA_CHAR 0AC2  
              ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001                _arrancaLCD 0AF4  
            ??_POS_CURSOR 0005                   _IntsISR 0008     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0004  
            __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0A8E                   __pcinit 0B98  
      __end_of_POS_CURSOR 0B40                   __ramtop 0800                   __ptext0 0848  
                 __ptext1 0AF4                   __ptext2 09FA                   __ptext3 0B60  
                 __ptext4 0BAC                   __ptext5 0BB4                   __ptext6 0B1C  
                 __ptext7 0A5A                   __ptext8 0AC2                   __ptext9 0A8E  
          __pintcode_body 0B40              _ENVIA_NIBBLE 0B7C      end_of_initialization 0B9A  
                 int_func 0B40     __size_of_CURSOR_ONOFF 001C               ?_arrancaLCD 0001  
               _TRISEbits 000F96         __size_of_LEER_LCD 0062              _CURSOR_ONOFF 0B60  
      CURSOR_ONOFF@estado 0004             ??_CURSOR_HOME 0004       start_initialization 0B98  
       ENVIA_LCD_CMD@dato 0002       __size_of_arrancaLCD 0028          __CFG_LPT1OSC$OFF 000000  
             __pbssCOMRAM 000B       __end_of_CURSOR_HOME 0BB4                  ?_IntsISR 0001  
               __pintcode 0008               __smallconst 0800                  _LEER_LCD 0998  
                _LATDbits 000F8C                  _LATEbits 000F8D          __CFG_WDTPS$32768 000000  
        ESCRIBE_MENSAJE@i 0009            POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 0032  
            ??_arrancaLCD 0005               _CURSOR_HOME 0BAC               _INTCON3bits 000FF0  
  __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000          __size_of_IntsISR 0B58  
                __Lrparam 0000              __Lsmallconst 0800        __end_of_arrancaLCD 0B1C  
                __ptext10 0998                  __ptext11 0B7C                _BORRAR_LCD 0BB4  
           __size_of_main 0150                _LCD_CONFIG 09FA                _ENVIA_CHAR 0A8E  
                int$flags 000C             _ENVIA_LCD_CMD 0A5A     __CFG_CPUDIV$OSC2_PLL3 000000  
              _INTCONbits 000FF2         ??_ESCRIBE_MENSAJE 0007                  intlevel2 0000  
   ESCRIBE_MENSAJE@cadena 0004            ?_ENVIA_LCD_CMD 0001               ?_BORRAR_LCD 0001  
           ?_ENVIA_NIBBLE 0001                _POS_CURSOR 0B1C               ?_LCD_CONFIG 0001  
      ESCRIBE_MENSAJE@tam 0006               ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
