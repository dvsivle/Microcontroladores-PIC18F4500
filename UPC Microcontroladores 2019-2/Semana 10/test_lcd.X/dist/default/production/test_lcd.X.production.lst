

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Oct 15 15:25:40 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 2.10
    28                           ; Generated 31/07/2019 GMT
    29                           ; 
    30                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     _ADRESL	set	4035
    62  0000                     _ADRESH	set	4036
    63  0000                     _ADCON0bits	set	4034
    64  0000                     _ADCON0	set	4034
    65  0000                     _ADCON1	set	4033
    66  0000                     _ADCON2	set	4032
    67  0000                     _PORTD	set	3971
    68  0000                     _LATD	set	3980
    69  0000                     _TRISD	set	3989
    70  0000                     _LATDbits	set	3980
    71                           
    72                           	psect	smallconst
    73  000800                     __psmallconst:
    74                           	opt callstack 0
    75  000800  00                 	db	0
    76  000801                     STR_1:
    77  000801  48                 	db	72	;'H'
    78  000802  6F                 	db	111	;'o'
    79  000803  6C                 	db	108	;'l'
    80  000804  61                 	db	97	;'a'
    81  000805  20                 	db	32
    82  000806  6D                 	db	109	;'m'
    83  000807  75                 	db	117	;'u'
    84  000808  6E                 	db	110	;'n'
    85  000809  64                 	db	100	;'d'
    86  00080A  6F                 	db	111	;'o'
    87  00080B  00                 	db	0
    88  00080C                     STR_2:
    89  00080C  41                 	db	65	;'A'
    90  00080D  44                 	db	68	;'D'
    91  00080E  43                 	db	67	;'C'
    92  00080F  3A                 	db	58	;':'
    93  000810  20                 	db	32
    94  000811  00                 	db	0
    95                           
    96                           ; #config settings
    97  000812  00                 	db	0	; dummy byte at the end
    98  0000                     
    99                           	psect	cinit
   100  000CF2                     __pcinit:
   101                           	opt callstack 0
   102  000CF2                     start_initialization:
   103                           	opt callstack 0
   104  000CF2                     __initialization:
   105                           	opt callstack 0
   106                           
   107                           ; Clear objects allocated to COMRAM (14 bytes)
   108  000CF2  EE00  F001         	lfsr	0,__pbssCOMRAM
   109  000CF6  0E0E               	movlw	14
   110  000CF8                     clear_0:
   111  000CF8  6AEE               	clrf	postinc0,c
   112  000CFA  06E8               	decf	wreg,f,c
   113  000CFC  E1FD               	bnz	clear_0
   114  000CFE                     end_of_initialization:
   115                           	opt callstack 0
   116  000CFE                     __end_of__initialization:
   117                           	opt callstack 0
   118  000CFE  0E00               	movlw	low (__Lsmallconst shr (0+16))
   119  000D00  6EF8               	movwf	tblptru,c
   120  000D02  0E08               	movlw	high __Lsmallconst
   121  000D04  6EF7               	movwf	tblptrh,c
   122  000D06  0100               	movlb	0
   123  000D08  EF0A  F004         	goto	_main	;jump to C main() function
   124                           
   125                           	psect	bssCOMRAM
   126  000001                     __pbssCOMRAM:
   127                           	opt callstack 0
   128  000001                     _an0_raw:
   129                           	opt callstack 0
   130  000001                     	ds	2
   131  000003                     _diguni:
   132                           	opt callstack 0
   133  000003                     	ds	2
   134  000005                     _digdec:
   135                           	opt callstack 0
   136  000005                     	ds	2
   137  000007                     _digcen:
   138                           	opt callstack 0
   139  000007                     	ds	2
   140  000009                     _digmil:
   141                           	opt callstack 0
   142  000009                     	ds	2
   143  00000B                     _temporal2:
   144                           	opt callstack 0
   145  00000B                     	ds	2
   146  00000D                     _temporal:
   147                           	opt callstack 0
   148  00000D                     	ds	2
   149                           
   150                           	psect	cstackCOMRAM
   151  00000F                     __pcstackCOMRAM:
   152                           	opt callstack 0
   153  00000F                     ?___wmul:
   154                           	opt callstack 0
   155  00000F                     ?___awdiv:
   156                           	opt callstack 0
   157  00000F                     ?___lwdiv:
   158                           	opt callstack 0
   159  00000F                     ENVIA_NIBBLE@dato:
   160                           	opt callstack 0
   161  00000F                     LEER_LCD@aux:
   162                           	opt callstack 0
   163  00000F                     ___wmul@multiplier:
   164                           	opt callstack 0
   165  00000F                     ___awdiv@dividend:
   166                           	opt callstack 0
   167  00000F                     ___lwdiv@dividend:
   168                           	opt callstack 0
   169                           
   170                           ; 2 bytes @ 0x0
   171  00000F                     	ds	1
   172  000010                     ENVIA_CHAR@dato:
   173                           	opt callstack 0
   174  000010                     ENVIA_LCD_CMD@dato:
   175                           	opt callstack 0
   176                           
   177                           ; 1 bytes @ 0x1
   178  000010                     	ds	1
   179  000011                     ENVIA_CHAR@aux:
   180                           	opt callstack 0
   181  000011                     ENVIA_LCD_CMD@aux:
   182                           	opt callstack 0
   183  000011                     ___wmul@multiplicand:
   184                           	opt callstack 0
   185  000011                     ___awdiv@divisor:
   186                           	opt callstack 0
   187  000011                     ___lwdiv@divisor:
   188                           	opt callstack 0
   189                           
   190                           ; 2 bytes @ 0x2
   191  000011                     	ds	1
   192  000012                     ??_LCD_CONFIG:
   193  000012                     POS_CURSOR@columna:
   194                           	opt callstack 0
   195  000012                     CURSOR_ONOFF@estado:
   196                           	opt callstack 0
   197  000012                     ESCRIBE_MENSAJE@cadena:
   198                           	opt callstack 0
   199                           
   200                           ; 2 bytes @ 0x3
   201  000012                     	ds	1
   202  000013                     POS_CURSOR@fila:
   203                           	opt callstack 0
   204  000013                     ___awdiv@counter:
   205                           	opt callstack 0
   206  000013                     ___wmul@product:
   207                           	opt callstack 0
   208  000013                     ___lwdiv@quotient:
   209                           	opt callstack 0
   210                           
   211                           ; 2 bytes @ 0x4
   212  000013                     	ds	1
   213  000014                     ESCRIBE_MENSAJE@tam:
   214                           	opt callstack 0
   215  000014                     ___awdiv@sign:
   216                           	opt callstack 0
   217                           
   218                           ; 1 bytes @ 0x5
   219  000014                     	ds	1
   220  000015                     ??_ESCRIBE_MENSAJE:
   221  000015                     ___lwdiv@counter:
   222                           	opt callstack 0
   223  000015                     ___awdiv@quotient:
   224                           	opt callstack 0
   225                           
   226                           ; 2 bytes @ 0x6
   227  000015                     	ds	2
   228  000017                     ESCRIBE_MENSAJE@i:
   229                           	opt callstack 0
   230  000017                     conviertemenso@numero:
   231                           	opt callstack 0
   232                           
   233                           ; 2 bytes @ 0x8
   234  000017                     	ds	2
   235  000019                     ??_main:
   236                           
   237                           ; 1 bytes @ 0xA
   238  000019                     	ds	1
   239                           
   240 ;;
   241 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   242 ;;
   243 ;; *************** function _main *****************
   244 ;; Defined at:
   245 ;;		line 41 in file "newmain2.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : 0/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   259 ;;      Params:         0       0       0       0       0       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0       0       0       0       0
   261 ;;      Temps:          1       0       0       0       0       0       0       0       0
   262 ;;      Totals:         1       0       0       0       0       0       0       0       0
   263 ;;Total ram usage:        1 bytes
   264 ;; Hardware stack levels required when called:    3
   265 ;; This function calls:
   266 ;;		_BORRAR_LCD
   267 ;;		_CURSOR_HOME
   268 ;;		_CURSOR_ONOFF
   269 ;;		_ENVIA_CHAR
   270 ;;		_ESCRIBE_MENSAJE
   271 ;;		_LCD_CONFIG
   272 ;;		_POS_CURSOR
   273 ;;		_conviertemenso
   274 ;; This function is called by:
   275 ;;		Startup code after reset
   276 ;; This function uses a non-reentrant model
   277 ;;
   278                           
   279                           	psect	text0
   280  000814                     __ptext0:
   281                           	opt callstack 0
   282  000814                     _main:
   283                           	opt callstack 28
   284  000814                     
   285                           ;newmain2.c: 42:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   286  000814  0EEA               	movlw	234
   287  000816  6E19               	movwf	??_main^0,c
   288  000818  0EC3               	movlw	195
   289  00081A                     u357:
   290  00081A  2EE8               	decfsz	wreg,f,c
   291  00081C  D7FE               	bra	u357
   292  00081E  2E19               	decfsz	??_main^0,f,c
   293  000820  D7FC               	bra	u357
   294  000822  F000               	nop	
   295  000824                     
   296                           ;newmain2.c: 43:     TRISD = 0x00;
   297  000824  0E00               	movlw	0
   298  000826  6E95               	movwf	149,c	;volatile
   299  000828                     
   300                           ;newmain2.c: 44:     LCD_CONFIG();
   301  000828  ECA0  F005         	call	_LCD_CONFIG	;wreg free
   302  00082C                     
   303                           ;newmain2.c: 45:     _delay((unsigned long)((10)*(48000000UL/4000.0)));
   304  00082C  0E9C               	movlw	156
   305  00082E  6E19               	movwf	??_main^0,c
   306  000830  0ED7               	movlw	215
   307  000832                     u367:
   308  000832  2EE8               	decfsz	wreg,f,c
   309  000834  D7FE               	bra	u367
   310  000836  2E19               	decfsz	??_main^0,f,c
   311  000838  D7FC               	bra	u367
   312  00083A  F000               	nop	
   313  00083C                     
   314                           ;newmain2.c: 46:     CURSOR_ONOFF(1);
   315  00083C  0E01               	movlw	1
   316  00083E  EC40  F006         	call	_CURSOR_ONOFF
   317  000842                     
   318                           ;newmain2.c: 47:     BORRAR_LCD();
   319  000842  EC8A  F006         	call	_BORRAR_LCD	;wreg free
   320  000846                     
   321                           ;newmain2.c: 48:     CURSOR_HOME();
   322  000846  EC86  F006         	call	_CURSOR_HOME	;wreg free
   323  00084A                     
   324                           ;newmain2.c: 49:     ESCRIBE_MENSAJE("Hola mundo",10);
   325  00084A  0E01               	movlw	low STR_1
   326  00084C  6E12               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   327  00084E  0E08               	movlw	high STR_1
   328  000850  6E13               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   329  000852  0E0A               	movlw	10
   330  000854  6E14               	movwf	ESCRIBE_MENSAJE@tam^0,c
   331  000856  ECD0  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   332  00085A                     
   333                           ;newmain2.c: 50:     POS_CURSOR(2,0);
   334  00085A  0E00               	movlw	0
   335  00085C  6E12               	movwf	POS_CURSOR@columna^0,c
   336  00085E  0E02               	movlw	2
   337  000860  ECEF  F005         	call	_POS_CURSOR
   338  000864                     
   339                           ;newmain2.c: 51:     ESCRIBE_MENSAJE("ADC: ",5);
   340  000864  0E0C               	movlw	low STR_2
   341  000866  6E12               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   342  000868  0E08               	movlw	high STR_2
   343  00086A  6E13               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   344  00086C  0E05               	movlw	5
   345  00086E  6E14               	movwf	ESCRIBE_MENSAJE@tam^0,c
   346  000870  ECD0  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   347  000874                     
   348                           ;newmain2.c: 52:     ADCON2 = 0x91;
   349  000874  0E91               	movlw	145
   350  000876  6EC0               	movwf	192,c	;volatile
   351  000878                     
   352                           ;newmain2.c: 53:     ADCON1 = 0x0E;
   353  000878  0E0E               	movlw	14
   354  00087A  6EC1               	movwf	193,c	;volatile
   355  00087C                     
   356                           ;newmain2.c: 54:     ADCON0 = 0x01;
   357  00087C  0E01               	movlw	1
   358  00087E  6EC2               	movwf	194,c	;volatile
   359  000880                     l1232:
   360                           
   361                           ;newmain2.c: 57:         ADCON0bits.GO = 1;
   362  000880  82C2               	bsf	194,1,c	;volatile
   363  000882                     l127:
   364  000882  B2C2               	btfsc	194,1,c	;volatile
   365  000884  EF46  F004         	goto	u341
   366  000888  EF48  F004         	goto	u340
   367  00088C                     u341:
   368  00088C  EF41  F004         	goto	l127
   369  000890                     u340:
   370  000890                     
   371                           ;newmain2.c: 59:         an0_raw = ADRESH << 8;
   372  000890  50C4               	movf	196,w,c	;volatile
   373  000892  6E02               	movwf	(_an0_raw+1)^0,c
   374  000894  6A01               	clrf	_an0_raw^0,c
   375  000896                     
   376                           ;newmain2.c: 60:         an0_raw = an0_raw + ADRESL;
   377  000896  50C3               	movf	195,w,c	;volatile
   378  000898  2401               	addwf	_an0_raw^0,w,c
   379  00089A  6E01               	movwf	_an0_raw^0,c
   380  00089C  0E00               	movlw	0
   381  00089E  2002               	addwfc	(_an0_raw+1)^0,w,c
   382  0008A0  6E02               	movwf	(_an0_raw+1)^0,c
   383  0008A2                     
   384                           ;newmain2.c: 61:         conviertemenso(an0_raw);
   385  0008A2  C001  F017         	movff	_an0_raw,conviertemenso@numero
   386  0008A6  C002  F018         	movff	_an0_raw+1,conviertemenso@numero+1
   387  0008AA  ECD2  F004         	call	_conviertemenso	;wreg free
   388  0008AE                     
   389                           ;newmain2.c: 62:         ENVIA_CHAR(digmil+0x30);
   390  0008AE  5009               	movf	_digmil^0,w,c
   391  0008B0  0F30               	addlw	48
   392  0008B2  EC0C  F006         	call	_ENVIA_CHAR
   393  0008B6                     
   394                           ;newmain2.c: 63:         ENVIA_CHAR(digcen+0x30);
   395  0008B6  5007               	movf	_digcen^0,w,c
   396  0008B8  0F30               	addlw	48
   397  0008BA  EC0C  F006         	call	_ENVIA_CHAR
   398  0008BE                     
   399                           ;newmain2.c: 64:         ENVIA_CHAR(digdec+0x30);
   400  0008BE  5005               	movf	_digdec^0,w,c
   401  0008C0  0F30               	addlw	48
   402  0008C2  EC0C  F006         	call	_ENVIA_CHAR
   403  0008C6                     
   404                           ;newmain2.c: 65:         ENVIA_CHAR(diguni+0x30);
   405  0008C6  5003               	movf	_diguni^0,w,c
   406  0008C8  0F30               	addlw	48
   407  0008CA  EC0C  F006         	call	_ENVIA_CHAR
   408  0008CE                     
   409                           ;newmain2.c: 66:         POS_CURSOR(2,5);
   410  0008CE  0E05               	movlw	5
   411  0008D0  6E12               	movwf	POS_CURSOR@columna^0,c
   412  0008D2  0E02               	movlw	2
   413  0008D4  ECEF  F005         	call	_POS_CURSOR
   414  0008D8  EF40  F004         	goto	l1232
   415  0008DC  EF00  F000         	goto	start
   416  0008E0                     __end_of_main:
   417                           	opt callstack 0
   418                           
   419 ;; *************** function _conviertemenso *****************
   420 ;; Defined at:
   421 ;;		line 32 in file "newmain2.c"
   422 ;; Parameters:    Size  Location     Type
   423 ;;  numero          2    8[COMRAM] int 
   424 ;; Auto vars:     Size  Location     Type
   425 ;;		None
   426 ;; Return value:  Size  Location     Type
   427 ;;                  2    8[COMRAM] unsigned int 
   428 ;; Registers used:
   429 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   435 ;;      Params:         2       0       0       0       0       0       0       0       0
   436 ;;      Locals:         0       0       0       0       0       0       0       0       0
   437 ;;      Temps:          0       0       0       0       0       0       0       0       0
   438 ;;      Totals:         2       0       0       0       0       0       0       0       0
   439 ;;Total ram usage:        2 bytes
   440 ;; Hardware stack levels used:    1
   441 ;; Hardware stack levels required when called:    1
   442 ;; This function calls:
   443 ;;		___awdiv
   444 ;;		___lwdiv
   445 ;;		___wmul
   446 ;; This function is called by:
   447 ;;		_main
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           	psect	text1
   452  0009A4                     __ptext1:
   453                           	opt callstack 0
   454  0009A4                     _conviertemenso:
   455                           	opt callstack 29
   456  0009A4                     
   457                           ;newmain2.c: 33:     digmil = numero / 1000;
   458  0009A4  C017  F00F         	movff	conviertemenso@numero,___awdiv@dividend
   459  0009A8  C018  F010         	movff	conviertemenso@numero+1,___awdiv@dividend+1
   460  0009AC  0E03               	movlw	3
   461  0009AE  6E12               	movwf	(___awdiv@divisor+1)^0,c
   462  0009B0  0EE8               	movlw	232
   463  0009B2  6E11               	movwf	___awdiv@divisor^0,c
   464  0009B4  EC70  F004         	call	___awdiv	;wreg free
   465  0009B8  C00F  F009         	movff	?___awdiv,_digmil
   466  0009BC  C010  F00A         	movff	?___awdiv+1,_digmil+1
   467  0009C0                     
   468                           ;newmain2.c: 34:     temporal = numero - (digmil * 1000);
   469  0009C0  C009  F00F         	movff	_digmil,___wmul@multiplier
   470  0009C4  C00A  F010         	movff	_digmil+1,___wmul@multiplier+1
   471  0009C8  0EFC               	movlw	252
   472  0009CA  6E12               	movwf	(___wmul@multiplicand+1)^0,c
   473  0009CC  0E18               	movlw	24
   474  0009CE  6E11               	movwf	___wmul@multiplicand^0,c
   475  0009D0  EC58  F006         	call	___wmul	;wreg free
   476  0009D4  5017               	movf	conviertemenso@numero^0,w,c
   477  0009D6  240F               	addwf	?___wmul^0,w,c
   478  0009D8  6E0D               	movwf	_temporal^0,c
   479  0009DA  5018               	movf	(conviertemenso@numero+1)^0,w,c
   480  0009DC  2010               	addwfc	(?___wmul+1)^0,w,c
   481  0009DE  6E0E               	movwf	(_temporal+1)^0,c
   482  0009E0                     
   483                           ;newmain2.c: 35:     digcen = temporal / 100;
   484  0009E0  C00D  F00F         	movff	_temporal,___lwdiv@dividend
   485  0009E4  C00E  F010         	movff	_temporal+1,___lwdiv@dividend+1
   486  0009E8  0E00               	movlw	0
   487  0009EA  6E12               	movwf	(___lwdiv@divisor+1)^0,c
   488  0009EC  0E64               	movlw	100
   489  0009EE  6E11               	movwf	___lwdiv@divisor^0,c
   490  0009F0  EC2D  F005         	call	___lwdiv	;wreg free
   491  0009F4  C00F  F007         	movff	?___lwdiv,_digcen
   492  0009F8  C010  F008         	movff	?___lwdiv+1,_digcen+1
   493                           
   494                           ;newmain2.c: 36:     temporal2 = temporal - (digcen * 100);
   495  0009FC  C007  F00F         	movff	_digcen,___wmul@multiplier
   496  000A00  C008  F010         	movff	_digcen+1,___wmul@multiplier+1
   497  000A04  0EFF               	movlw	255
   498  000A06  6E12               	movwf	(___wmul@multiplicand+1)^0,c
   499  000A08  0E9C               	movlw	156
   500  000A0A  6E11               	movwf	___wmul@multiplicand^0,c
   501  000A0C  EC58  F006         	call	___wmul	;wreg free
   502  000A10  500D               	movf	_temporal^0,w,c
   503  000A12  240F               	addwf	?___wmul^0,w,c
   504  000A14  6E0B               	movwf	_temporal2^0,c
   505  000A16  500E               	movf	(_temporal+1)^0,w,c
   506  000A18  2010               	addwfc	(?___wmul+1)^0,w,c
   507  000A1A  6E0C               	movwf	(_temporal2+1)^0,c
   508  000A1C                     
   509                           ;newmain2.c: 37:     digdec = temporal2 / 10;
   510  000A1C  C00B  F00F         	movff	_temporal2,___lwdiv@dividend
   511  000A20  C00C  F010         	movff	_temporal2+1,___lwdiv@dividend+1
   512  000A24  0E00               	movlw	0
   513  000A26  6E12               	movwf	(___lwdiv@divisor+1)^0,c
   514  000A28  0E0A               	movlw	10
   515  000A2A  6E11               	movwf	___lwdiv@divisor^0,c
   516  000A2C  EC2D  F005         	call	___lwdiv	;wreg free
   517  000A30  C00F  F005         	movff	?___lwdiv,_digdec
   518  000A34  C010  F006         	movff	?___lwdiv+1,_digdec+1
   519  000A38                     
   520                           ;newmain2.c: 38:     diguni = temporal2 - (digdec * 10);
   521  000A38  C005  F00F         	movff	_digdec,___wmul@multiplier
   522  000A3C  C006  F010         	movff	_digdec+1,___wmul@multiplier+1
   523  000A40  0EFF               	movlw	255
   524  000A42  6E12               	movwf	(___wmul@multiplicand+1)^0,c
   525  000A44  0EF6               	movlw	246
   526  000A46  6E11               	movwf	___wmul@multiplicand^0,c
   527  000A48  EC58  F006         	call	___wmul	;wreg free
   528  000A4C  500B               	movf	_temporal2^0,w,c
   529  000A4E  240F               	addwf	?___wmul^0,w,c
   530  000A50  6E03               	movwf	_diguni^0,c
   531  000A52  500C               	movf	(_temporal2+1)^0,w,c
   532  000A54  2010               	addwfc	(?___wmul+1)^0,w,c
   533  000A56  6E04               	movwf	(_diguni+1)^0,c
   534  000A58  0012               	return		;funcret
   535  000A5A                     __end_of_conviertemenso:
   536                           	opt callstack 0
   537                           
   538 ;; *************** function ___wmul *****************
   539 ;; Defined at:
   540 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
   541 ;; Parameters:    Size  Location     Type
   542 ;;  multiplier      2    0[COMRAM] unsigned int 
   543 ;;  multiplicand    2    2[COMRAM] unsigned int 
   544 ;; Auto vars:     Size  Location     Type
   545 ;;  product         2    4[COMRAM] unsigned int 
   546 ;; Return value:  Size  Location     Type
   547 ;;                  2    0[COMRAM] unsigned int 
   548 ;; Registers used:
   549 ;;		wreg, status,2, status,0, prodl, prodh
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   555 ;;      Params:         4       0       0       0       0       0       0       0       0
   556 ;;      Locals:         2       0       0       0       0       0       0       0       0
   557 ;;      Temps:          0       0       0       0       0       0       0       0       0
   558 ;;      Totals:         6       0       0       0       0       0       0       0       0
   559 ;;Total ram usage:        6 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; This function calls:
   562 ;;		Nothing
   563 ;; This function is called by:
   564 ;;		_conviertemenso
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text2
   569  000CB0                     __ptext2:
   570                           	opt callstack 0
   571  000CB0                     ___wmul:
   572                           	opt callstack 29
   573  000CB0  500F               	movf	___wmul@multiplier^0,w,c
   574  000CB2  0211               	mulwf	___wmul@multiplicand^0,c
   575  000CB4  CFF3 F013          	movff	prodl,___wmul@product
   576  000CB8  CFF4 F014          	movff	prodh,___wmul@product+1
   577  000CBC  500F               	movf	___wmul@multiplier^0,w,c
   578  000CBE  0212               	mulwf	(___wmul@multiplicand+1)^0,c
   579  000CC0  50F3               	movf	243,w,c
   580  000CC2  2614               	addwf	(___wmul@product+1)^0,f,c
   581  000CC4  5010               	movf	(___wmul@multiplier+1)^0,w,c
   582  000CC6  0211               	mulwf	___wmul@multiplicand^0,c
   583  000CC8  50F3               	movf	243,w,c
   584  000CCA  2614               	addwf	(___wmul@product+1)^0,f,c
   585  000CCC  C013  F00F         	movff	___wmul@product,?___wmul
   586  000CD0  C014  F010         	movff	___wmul@product+1,?___wmul+1
   587  000CD4  0012               	return		;funcret
   588  000CD6                     __end_of___wmul:
   589                           	opt callstack 0
   590                           
   591 ;; *************** function ___lwdiv *****************
   592 ;; Defined at:
   593 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwdiv.c"
   594 ;; Parameters:    Size  Location     Type
   595 ;;  dividend        2    0[COMRAM] unsigned int 
   596 ;;  divisor         2    2[COMRAM] unsigned int 
   597 ;; Auto vars:     Size  Location     Type
   598 ;;  quotient        2    4[COMRAM] unsigned int 
   599 ;;  counter         1    6[COMRAM] unsigned char 
   600 ;; Return value:  Size  Location     Type
   601 ;;                  2    0[COMRAM] unsigned int 
   602 ;; Registers used:
   603 ;;		wreg, status,2, status,0
   604 ;; Tracked objects:
   605 ;;		On entry : 0/0
   606 ;;		On exit  : 0/0
   607 ;;		Unchanged: 0/0
   608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   609 ;;      Params:         4       0       0       0       0       0       0       0       0
   610 ;;      Locals:         3       0       0       0       0       0       0       0       0
   611 ;;      Temps:          0       0       0       0       0       0       0       0       0
   612 ;;      Totals:         7       0       0       0       0       0       0       0       0
   613 ;;Total ram usage:        7 bytes
   614 ;; Hardware stack levels used:    1
   615 ;; This function calls:
   616 ;;		Nothing
   617 ;; This function is called by:
   618 ;;		_conviertemenso
   619 ;; This function uses a non-reentrant model
   620 ;;
   621                           
   622                           	psect	text3
   623  000A5A                     __ptext3:
   624                           	opt callstack 0
   625  000A5A                     ___lwdiv:
   626                           	opt callstack 29
   627  000A5A  0E00               	movlw	0
   628  000A5C  6E14               	movwf	(___lwdiv@quotient+1)^0,c
   629  000A5E  0E00               	movlw	0
   630  000A60  6E13               	movwf	___lwdiv@quotient^0,c
   631  000A62  5011               	movf	___lwdiv@divisor^0,w,c
   632  000A64  1012               	iorwf	(___lwdiv@divisor+1)^0,w,c
   633  000A66  B4D8               	btfsc	status,2,c
   634  000A68  EF38  F005         	goto	u281
   635  000A6C  EF3A  F005         	goto	u280
   636  000A70                     u281:
   637  000A70  EF62  F005         	goto	l626
   638  000A74                     u280:
   639  000A74  0E01               	movlw	1
   640  000A76  6E15               	movwf	___lwdiv@counter^0,c
   641  000A78  EF42  F005         	goto	l1166
   642  000A7C                     l1164:
   643  000A7C  90D8               	bcf	status,0,c
   644  000A7E  3611               	rlcf	___lwdiv@divisor^0,f,c
   645  000A80  3612               	rlcf	(___lwdiv@divisor+1)^0,f,c
   646  000A82  2A15               	incf	___lwdiv@counter^0,f,c
   647  000A84                     l1166:
   648  000A84  AE12               	btfss	(___lwdiv@divisor+1)^0,7,c
   649  000A86  EF47  F005         	goto	u291
   650  000A8A  EF49  F005         	goto	u290
   651  000A8E                     u291:
   652  000A8E  EF3E  F005         	goto	l1164
   653  000A92                     u290:
   654  000A92                     l1168:
   655  000A92  90D8               	bcf	status,0,c
   656  000A94  3613               	rlcf	___lwdiv@quotient^0,f,c
   657  000A96  3614               	rlcf	(___lwdiv@quotient+1)^0,f,c
   658  000A98  5011               	movf	___lwdiv@divisor^0,w,c
   659  000A9A  5C0F               	subwf	___lwdiv@dividend^0,w,c
   660  000A9C  5012               	movf	(___lwdiv@divisor+1)^0,w,c
   661  000A9E  5810               	subwfb	(___lwdiv@dividend+1)^0,w,c
   662  000AA0  A0D8               	btfss	status,0,c
   663  000AA2  EF55  F005         	goto	u301
   664  000AA6  EF57  F005         	goto	u300
   665  000AAA                     u301:
   666  000AAA  EF5C  F005         	goto	l1176
   667  000AAE                     u300:
   668  000AAE  5011               	movf	___lwdiv@divisor^0,w,c
   669  000AB0  5E0F               	subwf	___lwdiv@dividend^0,f,c
   670  000AB2  5012               	movf	(___lwdiv@divisor+1)^0,w,c
   671  000AB4  5A10               	subwfb	(___lwdiv@dividend+1)^0,f,c
   672  000AB6  8013               	bsf	___lwdiv@quotient^0,0,c
   673  000AB8                     l1176:
   674  000AB8  90D8               	bcf	status,0,c
   675  000ABA  3212               	rrcf	(___lwdiv@divisor+1)^0,f,c
   676  000ABC  3211               	rrcf	___lwdiv@divisor^0,f,c
   677  000ABE  2E15               	decfsz	___lwdiv@counter^0,f,c
   678  000AC0  EF49  F005         	goto	l1168
   679  000AC4                     l626:
   680  000AC4  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
   681  000AC8  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
   682  000ACC  0012               	return		;funcret
   683  000ACE                     __end_of___lwdiv:
   684                           	opt callstack 0
   685                           
   686 ;; *************** function ___awdiv *****************
   687 ;; Defined at:
   688 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;  dividend        2    0[COMRAM] int 
   691 ;;  divisor         2    2[COMRAM] int 
   692 ;; Auto vars:     Size  Location     Type
   693 ;;  quotient        2    6[COMRAM] int 
   694 ;;  sign            1    5[COMRAM] unsigned char 
   695 ;;  counter         1    4[COMRAM] unsigned char 
   696 ;; Return value:  Size  Location     Type
   697 ;;                  2    0[COMRAM] int 
   698 ;; Registers used:
   699 ;;		wreg, status,2, status,0
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   705 ;;      Params:         4       0       0       0       0       0       0       0       0
   706 ;;      Locals:         4       0       0       0       0       0       0       0       0
   707 ;;      Temps:          0       0       0       0       0       0       0       0       0
   708 ;;      Totals:         8       0       0       0       0       0       0       0       0
   709 ;;Total ram usage:        8 bytes
   710 ;; Hardware stack levels used:    1
   711 ;; This function calls:
   712 ;;		Nothing
   713 ;; This function is called by:
   714 ;;		_conviertemenso
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text4
   719  0008E0                     __ptext4:
   720                           	opt callstack 0
   721  0008E0                     ___awdiv:
   722                           	opt callstack 29
   723  0008E0  0E00               	movlw	0
   724  0008E2  6E14               	movwf	___awdiv@sign^0,c
   725  0008E4  BE12               	btfsc	(___awdiv@divisor+1)^0,7,c
   726  0008E6  EF79  F004         	goto	u220
   727  0008EA  EF77  F004         	goto	u221
   728  0008EE                     u221:
   729  0008EE  EF7F  F004         	goto	l1122
   730  0008F2                     u220:
   731  0008F2  6C11               	negf	___awdiv@divisor^0,c
   732  0008F4  1E12               	comf	(___awdiv@divisor+1)^0,f,c
   733  0008F6  B0D8               	btfsc	status,0,c
   734  0008F8  2A12               	incf	(___awdiv@divisor+1)^0,f,c
   735  0008FA  0E01               	movlw	1
   736  0008FC  6E14               	movwf	___awdiv@sign^0,c
   737  0008FE                     l1122:
   738  0008FE  BE10               	btfsc	(___awdiv@dividend+1)^0,7,c
   739  000900  EF86  F004         	goto	u230
   740  000904  EF84  F004         	goto	u231
   741  000908                     u231:
   742  000908  EF8C  F004         	goto	l1128
   743  00090C                     u230:
   744  00090C  6C0F               	negf	___awdiv@dividend^0,c
   745  00090E  1E10               	comf	(___awdiv@dividend+1)^0,f,c
   746  000910  B0D8               	btfsc	status,0,c
   747  000912  2A10               	incf	(___awdiv@dividend+1)^0,f,c
   748  000914  0E01               	movlw	1
   749  000916  1A14               	xorwf	___awdiv@sign^0,f,c
   750  000918                     l1128:
   751  000918  0E00               	movlw	0
   752  00091A  6E16               	movwf	(___awdiv@quotient+1)^0,c
   753  00091C  0E00               	movlw	0
   754  00091E  6E15               	movwf	___awdiv@quotient^0,c
   755  000920  5011               	movf	___awdiv@divisor^0,w,c
   756  000922  1012               	iorwf	(___awdiv@divisor+1)^0,w,c
   757  000924  B4D8               	btfsc	status,2,c
   758  000926  EF97  F004         	goto	u241
   759  00092A  EF99  F004         	goto	u240
   760  00092E                     u241:
   761  00092E  EFC1  F004         	goto	l1150
   762  000932                     u240:
   763  000932  0E01               	movlw	1
   764  000934  6E13               	movwf	___awdiv@counter^0,c
   765  000936  EFA1  F004         	goto	l1136
   766  00093A                     l1134:
   767  00093A  90D8               	bcf	status,0,c
   768  00093C  3611               	rlcf	___awdiv@divisor^0,f,c
   769  00093E  3612               	rlcf	(___awdiv@divisor+1)^0,f,c
   770  000940  2A13               	incf	___awdiv@counter^0,f,c
   771  000942                     l1136:
   772  000942  AE12               	btfss	(___awdiv@divisor+1)^0,7,c
   773  000944  EFA6  F004         	goto	u251
   774  000948  EFA8  F004         	goto	u250
   775  00094C                     u251:
   776  00094C  EF9D  F004         	goto	l1134
   777  000950                     u250:
   778  000950                     l1138:
   779  000950  90D8               	bcf	status,0,c
   780  000952  3615               	rlcf	___awdiv@quotient^0,f,c
   781  000954  3616               	rlcf	(___awdiv@quotient+1)^0,f,c
   782  000956  5011               	movf	___awdiv@divisor^0,w,c
   783  000958  5C0F               	subwf	___awdiv@dividend^0,w,c
   784  00095A  5012               	movf	(___awdiv@divisor+1)^0,w,c
   785  00095C  5810               	subwfb	(___awdiv@dividend+1)^0,w,c
   786  00095E  A0D8               	btfss	status,0,c
   787  000960  EFB4  F004         	goto	u261
   788  000964  EFB6  F004         	goto	u260
   789  000968                     u261:
   790  000968  EFBB  F004         	goto	l1146
   791  00096C                     u260:
   792  00096C  5011               	movf	___awdiv@divisor^0,w,c
   793  00096E  5E0F               	subwf	___awdiv@dividend^0,f,c
   794  000970  5012               	movf	(___awdiv@divisor+1)^0,w,c
   795  000972  5A10               	subwfb	(___awdiv@dividend+1)^0,f,c
   796  000974  8015               	bsf	___awdiv@quotient^0,0,c
   797  000976                     l1146:
   798  000976  90D8               	bcf	status,0,c
   799  000978  3212               	rrcf	(___awdiv@divisor+1)^0,f,c
   800  00097A  3211               	rrcf	___awdiv@divisor^0,f,c
   801  00097C  2E13               	decfsz	___awdiv@counter^0,f,c
   802  00097E  EFA8  F004         	goto	l1138
   803  000982                     l1150:
   804  000982  5014               	movf	___awdiv@sign^0,w,c
   805  000984  B4D8               	btfsc	status,2,c
   806  000986  EFC7  F004         	goto	u271
   807  00098A  EFC9  F004         	goto	u270
   808  00098E                     u271:
   809  00098E  EFCD  F004         	goto	l1154
   810  000992                     u270:
   811  000992  6C15               	negf	___awdiv@quotient^0,c
   812  000994  1E16               	comf	(___awdiv@quotient+1)^0,f,c
   813  000996  B0D8               	btfsc	status,0,c
   814  000998  2A16               	incf	(___awdiv@quotient+1)^0,f,c
   815  00099A                     l1154:
   816  00099A  C015  F00F         	movff	___awdiv@quotient,?___awdiv
   817  00099E  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
   818  0009A2  0012               	return		;funcret
   819  0009A4                     __end_of___awdiv:
   820                           	opt callstack 0
   821                           
   822 ;; *************** function _POS_CURSOR *****************
   823 ;; Defined at:
   824 ;;		line 6 in file "LCD.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;  fila            1    wreg     unsigned char 
   827 ;;  columna         1    3[COMRAM] unsigned char 
   828 ;; Auto vars:     Size  Location     Type
   829 ;;  fila            1    4[COMRAM] unsigned char 
   830 ;; Return value:  Size  Location     Type
   831 ;;                  1    wreg      void 
   832 ;; Registers used:
   833 ;;		wreg, status,2, status,0, cstack
   834 ;; Tracked objects:
   835 ;;		On entry : 0/0
   836 ;;		On exit  : 0/0
   837 ;;		Unchanged: 0/0
   838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   839 ;;      Params:         1       0       0       0       0       0       0       0       0
   840 ;;      Locals:         1       0       0       0       0       0       0       0       0
   841 ;;      Temps:          0       0       0       0       0       0       0       0       0
   842 ;;      Totals:         2       0       0       0       0       0       0       0       0
   843 ;;Total ram usage:        2 bytes
   844 ;; Hardware stack levels used:    1
   845 ;; Hardware stack levels required when called:    2
   846 ;; This function calls:
   847 ;;		_ENVIA_LCD_CMD
   848 ;; This function is called by:
   849 ;;		_main
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853                           	psect	text5
   854  000BDE                     __ptext5:
   855                           	opt callstack 0
   856  000BDE                     _POS_CURSOR:
   857                           	opt callstack 28
   858                           
   859                           ;incstack = 0
   860                           ;POS_CURSOR@fila stored from wreg
   861  000BDE  6E13               	movwf	POS_CURSOR@fila^0,c
   862  000BE0                     
   863                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   864  000BE0  0413               	decf	POS_CURSOR@fila^0,w,c
   865  000BE2  A4D8               	btfss	status,2,c
   866  000BE4  EFF6  F005         	goto	u311
   867  000BE8  EFF8  F005         	goto	u310
   868  000BEC                     u311:
   869  000BEC  EFFE  F005         	goto	l1184
   870  000BF0                     u310:
   871  000BF0                     
   872                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   873  000BF0  5012               	movf	POS_CURSOR@columna^0,w,c
   874  000BF2  0F80               	addlw	128
   875  000BF4  EC26  F006         	call	_ENVIA_LCD_CMD
   876                           
   877                           ;LCD.c: 11:  }
   878  000BF8  EF0B  F006         	goto	l24
   879  000BFC                     l1184:
   880  000BFC  0E02               	movlw	2
   881  000BFE  1813               	xorwf	POS_CURSOR@fila^0,w,c
   882  000C00  A4D8               	btfss	status,2,c
   883  000C02  EF05  F006         	goto	u321
   884  000C06  EF07  F006         	goto	u320
   885  000C0A                     u321:
   886  000C0A  EF0B  F006         	goto	l24
   887  000C0E                     u320:
   888  000C0E                     
   889                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   890  000C0E  5012               	movf	POS_CURSOR@columna^0,w,c
   891  000C10  0FC0               	addlw	192
   892  000C12  EC26  F006         	call	_ENVIA_LCD_CMD
   893  000C16                     l24:
   894  000C16  0012               	return		;funcret
   895  000C18                     __end_of_POS_CURSOR:
   896                           	opt callstack 0
   897                           
   898 ;; *************** function _LCD_CONFIG *****************
   899 ;; Defined at:
   900 ;;		line 72 in file "LCD.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;		None
   903 ;; Auto vars:     Size  Location     Type
   904 ;;		None
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg, status,2, status,0, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   914 ;;      Params:         0       0       0       0       0       0       0       0       0
   915 ;;      Locals:         0       0       0       0       0       0       0       0       0
   916 ;;      Temps:          1       0       0       0       0       0       0       0       0
   917 ;;      Totals:         1       0       0       0       0       0       0       0       0
   918 ;;Total ram usage:        1 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; Hardware stack levels required when called:    2
   921 ;; This function calls:
   922 ;;		_ENVIA_LCD_CMD
   923 ;;		_ENVIA_NIBBLE
   924 ;; This function is called by:
   925 ;;		_main
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           	psect	text6
   930  000B40                     __ptext6:
   931                           	opt callstack 0
   932  000B40                     _LCD_CONFIG:
   933                           	opt callstack 28
   934  000B40                     
   935                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   936  000B40  908C               	bcf	140,0,c	;volatile
   937                           
   938                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   939  000B42  928C               	bcf	140,1,c	;volatile
   940  000B44                     
   941                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   942  000B44  0E30               	movlw	48
   943  000B46  EC6B  F006         	call	_ENVIA_NIBBLE
   944  000B4A                     
   945                           ;LCD.c: 77:         _delay(24000);
   946  000B4A  0E20               	movlw	32
   947  000B4C  6E12               	movwf	??_LCD_CONFIG^0,c
   948  000B4E  0E2A               	movlw	42
   949  000B50                     u377:
   950  000B50  2EE8               	decfsz	wreg,f,c
   951  000B52  D7FE               	bra	u377
   952  000B54  2E12               	decfsz	??_LCD_CONFIG^0,f,c
   953  000B56  D7FC               	bra	u377
   954  000B58                     
   955                           ;LCD.c: 78:         _delay(24000);
   956  000B58  0E20               	movlw	32
   957  000B5A  6E12               	movwf	??_LCD_CONFIG^0,c
   958  000B5C  0E2A               	movlw	42
   959  000B5E                     u387:
   960  000B5E  2EE8               	decfsz	wreg,f,c
   961  000B60  D7FE               	bra	u387
   962  000B62  2E12               	decfsz	??_LCD_CONFIG^0,f,c
   963  000B64  D7FC               	bra	u387
   964                           
   965                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   966  000B66  0E30               	movlw	48
   967  000B68  EC6B  F006         	call	_ENVIA_NIBBLE
   968  000B6C                     
   969                           ;LCD.c: 83:  _delay(1200);
   970  000B6C  0EF0               	movlw	240
   971  000B6E                     u397:
   972  000B6E  D000               	nop2	
   973  000B70  2EE8               	decfsz	wreg,f,c
   974  000B72  D7FD               	bra	u397
   975  000B74                     
   976                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   977  000B74  0E30               	movlw	48
   978  000B76  EC6B  F006         	call	_ENVIA_NIBBLE
   979  000B7A                     
   980                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   981  000B7A  0E20               	movlw	32
   982  000B7C  EC6B  F006         	call	_ENVIA_NIBBLE
   983  000B80                     
   984                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   985  000B80  0E01               	movlw	1
   986  000B82  EC26  F006         	call	_ENVIA_LCD_CMD
   987  000B86                     
   988                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   989  000B86  0E28               	movlw	40
   990  000B88  EC26  F006         	call	_ENVIA_LCD_CMD
   991  000B8C                     
   992                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   993  000B8C  0E0F               	movlw	15
   994  000B8E  EC26  F006         	call	_ENVIA_LCD_CMD
   995  000B92                     
   996                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   997  000B92  0E06               	movlw	6
   998  000B94  EC26  F006         	call	_ENVIA_LCD_CMD
   999  000B98                     
  1000                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
  1001  000B98  0E01               	movlw	1
  1002  000B9A  EC26  F006         	call	_ENVIA_LCD_CMD
  1003  000B9E  0012               	return		;funcret
  1004  000BA0                     __end_of_LCD_CONFIG:
  1005                           	opt callstack 0
  1006                           
  1007 ;; *************** function _ESCRIBE_MENSAJE *****************
  1008 ;; Defined at:
  1009 ;;		line 41 in file "LCD.c"
  1010 ;; Parameters:    Size  Location     Type
  1011 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1012 ;;		 -> STR_2(6), STR_1(11), 
  1013 ;;  tam             1    5[COMRAM] unsigned char 
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  i               1    8[COMRAM] unsigned char 
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  1    wreg      void 
  1018 ;; Registers used:
  1019 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1025 ;;      Params:         3       0       0       0       0       0       0       0       0
  1026 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1027 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1028 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1029 ;;Total ram usage:        6 bytes
  1030 ;; Hardware stack levels used:    1
  1031 ;; Hardware stack levels required when called:    2
  1032 ;; This function calls:
  1033 ;;		_ENVIA_CHAR
  1034 ;; This function is called by:
  1035 ;;		_main
  1036 ;; This function uses a non-reentrant model
  1037 ;;
  1038                           
  1039                           	psect	text7
  1040  000BA0                     __ptext7:
  1041                           	opt callstack 0
  1042  000BA0                     _ESCRIBE_MENSAJE:
  1043                           	opt callstack 28
  1044  000BA0                     
  1045                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1046  000BA0  0E00               	movlw	0
  1047  000BA2  6E17               	movwf	ESCRIBE_MENSAJE@i^0,c
  1048                           
  1049                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1050  000BA4  0E00               	movlw	0
  1051  000BA6  6E17               	movwf	ESCRIBE_MENSAJE@i^0,c
  1052  000BA8  EFE5  F005         	goto	l1194
  1053  000BAC                     l1190:
  1054                           
  1055                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1056  000BAC  5017               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1057  000BAE  2412               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1058  000BB0  6E15               	movwf	??_ESCRIBE_MENSAJE^0,c
  1059  000BB2  0E00               	movlw	0
  1060  000BB4  2013               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1061  000BB6  6E16               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1062  000BB8  C015  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1063  000BBC  C016  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1064  000BC0                     	if	0	;tblptru may be non-zero
  1065  000BC0                     	endif
  1066  000BC0                     	if	0	;tblptru may be non-zero
  1067  000BC0                     	endif
  1068  000BC0  0008               	tblrd		*
  1069  000BC2  50F5               	movf	tablat,w,c
  1070  000BC4  EC0C  F006         	call	_ENVIA_CHAR
  1071  000BC8                     
  1072                           ;LCD.c: 47:  }
  1073  000BC8  2A17               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1074  000BCA                     l1194:
  1075  000BCA  5014               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1076  000BCC  5C17               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1077  000BCE  A0D8               	btfss	status,0,c
  1078  000BD0  EFEC  F005         	goto	u331
  1079  000BD4  EFEE  F005         	goto	u330
  1080  000BD8                     u331:
  1081  000BD8  EFD6  F005         	goto	l1190
  1082  000BDC                     u330:
  1083  000BDC  0012               	return		;funcret
  1084  000BDE                     __end_of_ESCRIBE_MENSAJE:
  1085                           	opt callstack 0
  1086                           
  1087 ;; *************** function _ENVIA_CHAR *****************
  1088 ;; Defined at:
  1089 ;;		line 50 in file "LCD.c"
  1090 ;; Parameters:    Size  Location     Type
  1091 ;;  dato            1    wreg     unsigned char 
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;  dato            1    1[COMRAM] unsigned char 
  1094 ;;  aux             1    2[COMRAM] unsigned char 
  1095 ;; Return value:  Size  Location     Type
  1096 ;;                  1    wreg      void 
  1097 ;; Registers used:
  1098 ;;		wreg, status,2, status,0, cstack
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1104 ;;      Params:         0       0       0       0       0       0       0       0       0
  1105 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1106 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1107 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1108 ;;Total ram usage:        2 bytes
  1109 ;; Hardware stack levels used:    1
  1110 ;; Hardware stack levels required when called:    1
  1111 ;; This function calls:
  1112 ;;		_ENVIA_NIBBLE
  1113 ;;		_LEER_LCD
  1114 ;; This function is called by:
  1115 ;;		_ESCRIBE_MENSAJE
  1116 ;;		_main
  1117 ;;		_GENERACARACTER
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           	psect	text8
  1122  000C18                     __ptext8:
  1123                           	opt callstack 0
  1124  000C18                     _ENVIA_CHAR:
  1125                           	opt callstack 28
  1126                           
  1127                           ;incstack = 0
  1128                           ;ENVIA_CHAR@dato stored from wreg
  1129  000C18  6E10               	movwf	ENVIA_CHAR@dato^0,c
  1130  000C1A                     
  1131                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1132  000C1A  808C               	bsf	140,0,c	;volatile
  1133  000C1C                     
  1134                           ;LCD.c: 54:  LEER_LCD();
  1135  000C1C  EC67  F005         	call	_LEER_LCD	;wreg free
  1136  000C20                     
  1137                           ;LCD.c: 55:  TRISD = 0x00;
  1138  000C20  0E00               	movlw	0
  1139  000C22  6E95               	movwf	149,c	;volatile
  1140  000C24                     
  1141                           ;LCD.c: 56:         _delay(1200);
  1142  000C24  0EF0               	movlw	240
  1143  000C26                     u407:
  1144  000C26  D000               	nop2	
  1145  000C28  2EE8               	decfsz	wreg,f,c
  1146  000C2A  D7FD               	bra	u407
  1147  000C2C                     
  1148                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1149  000C2C  928C               	bcf	140,1,c	;volatile
  1150  000C2E                     
  1151                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1152  000C2E  948C               	bcf	140,2,c	;volatile
  1153  000C30                     
  1154                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1155  000C30  808C               	bsf	140,0,c	;volatile
  1156  000C32                     
  1157                           ;LCD.c: 61:  aux = dato & 0xF0;
  1158  000C32  5010               	movf	ENVIA_CHAR@dato^0,w,c
  1159  000C34  0BF0               	andlw	240
  1160  000C36  6E11               	movwf	ENVIA_CHAR@aux^0,c
  1161  000C38                     
  1162                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1163  000C38  5011               	movf	ENVIA_CHAR@aux^0,w,c
  1164  000C3A  EC6B  F006         	call	_ENVIA_NIBBLE
  1165  000C3E                     
  1166                           ;LCD.c: 63:  aux = dato << 4;
  1167  000C3E  3810               	swapf	ENVIA_CHAR@dato^0,w,c
  1168  000C40  0BF0               	andlw	240
  1169  000C42  6E11               	movwf	ENVIA_CHAR@aux^0,c
  1170  000C44                     
  1171                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1172  000C44  5011               	movf	ENVIA_CHAR@aux^0,w,c
  1173  000C46  EC6B  F006         	call	_ENVIA_NIBBLE
  1174  000C4A  0012               	return		;funcret
  1175  000C4C                     __end_of_ENVIA_CHAR:
  1176                           	opt callstack 0
  1177                           
  1178 ;; *************** function _CURSOR_ONOFF *****************
  1179 ;; Defined at:
  1180 ;;		line 35 in file "LCD.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  estado          1    wreg     unsigned char 
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;  estado          1    3[COMRAM] unsigned char 
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  1    wreg      void 
  1187 ;; Registers used:
  1188 ;;		wreg, status,2, status,0, cstack
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1194 ;;      Params:         0       0       0       0       0       0       0       0       0
  1195 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1197 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1198 ;;Total ram usage:        1 bytes
  1199 ;; Hardware stack levels used:    1
  1200 ;; Hardware stack levels required when called:    2
  1201 ;; This function calls:
  1202 ;;		_ENVIA_LCD_CMD
  1203 ;; This function is called by:
  1204 ;;		_main
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208                           	psect	text9
  1209  000C80                     __ptext9:
  1210                           	opt callstack 0
  1211  000C80                     _CURSOR_ONOFF:
  1212                           	opt callstack 28
  1213                           
  1214                           ;incstack = 0
  1215                           ;CURSOR_ONOFF@estado stored from wreg
  1216  000C80  6E12               	movwf	CURSOR_ONOFF@estado^0,c
  1217  000C82                     
  1218                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1219  000C82  5012               	movf	CURSOR_ONOFF@estado^0,w,c
  1220  000C84  A4D8               	btfss	status,2,c
  1221  000C86  EF47  F006         	goto	u131
  1222  000C8A  EF49  F006         	goto	u130
  1223  000C8E                     u131:
  1224  000C8E  EF4C  F006         	goto	l984
  1225  000C92                     u130:
  1226  000C92  0E0E               	movlw	14
  1227  000C94  EC26  F006         	call	_ENVIA_LCD_CMD
  1228  000C98                     l984:
  1229                           
  1230                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1231  000C98  0412               	decf	CURSOR_ONOFF@estado^0,w,c
  1232  000C9A  A4D8               	btfss	status,2,c
  1233  000C9C  EF52  F006         	goto	u141
  1234  000CA0  EF54  F006         	goto	u140
  1235  000CA4                     u141:
  1236  000CA4  EF57  F006         	goto	l42
  1237  000CA8                     u140:
  1238  000CA8  0E0C               	movlw	12
  1239  000CAA  EC26  F006         	call	_ENVIA_LCD_CMD
  1240  000CAE                     l42:
  1241  000CAE  0012               	return		;funcret
  1242  000CB0                     __end_of_CURSOR_ONOFF:
  1243                           	opt callstack 0
  1244                           
  1245 ;; *************** function _CURSOR_HOME *****************
  1246 ;; Defined at:
  1247 ;;		line 30 in file "LCD.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1261 ;;      Params:         0       0       0       0       0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1264 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1265 ;;Total ram usage:        0 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    2
  1268 ;; This function calls:
  1269 ;;		_ENVIA_LCD_CMD
  1270 ;; This function is called by:
  1271 ;;		_main
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text10
  1276  000D0C                     __ptext10:
  1277                           	opt callstack 0
  1278  000D0C                     _CURSOR_HOME:
  1279                           	opt callstack 28
  1280  000D0C                     
  1281                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1282  000D0C  0E02               	movlw	2
  1283  000D0E  EC26  F006         	call	_ENVIA_LCD_CMD
  1284  000D12  0012               	return		;funcret
  1285  000D14                     __end_of_CURSOR_HOME:
  1286                           	opt callstack 0
  1287                           
  1288 ;; *************** function _BORRAR_LCD *****************
  1289 ;; Defined at:
  1290 ;;		line 67 in file "LCD.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;		None
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;		None
  1295 ;; Return value:  Size  Location     Type
  1296 ;;                  1    wreg      void 
  1297 ;; Registers used:
  1298 ;;		wreg, status,2, status,0, cstack
  1299 ;; Tracked objects:
  1300 ;;		On entry : 0/0
  1301 ;;		On exit  : 0/0
  1302 ;;		Unchanged: 0/0
  1303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1304 ;;      Params:         0       0       0       0       0       0       0       0       0
  1305 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1306 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1307 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1308 ;;Total ram usage:        0 bytes
  1309 ;; Hardware stack levels used:    1
  1310 ;; Hardware stack levels required when called:    2
  1311 ;; This function calls:
  1312 ;;		_ENVIA_LCD_CMD
  1313 ;; This function is called by:
  1314 ;;		_main
  1315 ;; This function uses a non-reentrant model
  1316 ;;
  1317                           
  1318                           	psect	text11
  1319  000D14                     __ptext11:
  1320                           	opt callstack 0
  1321  000D14                     _BORRAR_LCD:
  1322                           	opt callstack 28
  1323  000D14                     
  1324                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1325  000D14  0E01               	movlw	1
  1326  000D16  EC26  F006         	call	_ENVIA_LCD_CMD
  1327  000D1A  0012               	return		;funcret
  1328  000D1C                     __end_of_BORRAR_LCD:
  1329                           	opt callstack 0
  1330                           
  1331 ;; *************** function _ENVIA_LCD_CMD *****************
  1332 ;; Defined at:
  1333 ;;		line 104 in file "LCD.c"
  1334 ;; Parameters:    Size  Location     Type
  1335 ;;  dato            1    wreg     unsigned char 
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;  dato            1    1[COMRAM] unsigned char 
  1338 ;;  aux             1    2[COMRAM] unsigned char 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  1    wreg      void 
  1341 ;; Registers used:
  1342 ;;		wreg, status,2, status,0, cstack
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1348 ;;      Params:         0       0       0       0       0       0       0       0       0
  1349 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1350 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1351 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1352 ;;Total ram usage:        2 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; Hardware stack levels required when called:    1
  1355 ;; This function calls:
  1356 ;;		_ENVIA_NIBBLE
  1357 ;;		_LEER_LCD
  1358 ;; This function is called by:
  1359 ;;		_POS_CURSOR
  1360 ;;		_CURSOR_HOME
  1361 ;;		_CURSOR_ONOFF
  1362 ;;		_BORRAR_LCD
  1363 ;;		_LCD_CONFIG
  1364 ;;		_BLINK_CURSOR
  1365 ;;		_DISPLAY_ONOFF
  1366 ;;		_GENERACARACTER
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text12
  1371  000C4C                     __ptext12:
  1372                           	opt callstack 0
  1373  000C4C                     _ENVIA_LCD_CMD:
  1374                           	opt callstack 28
  1375                           
  1376                           ;incstack = 0
  1377                           ;ENVIA_LCD_CMD@dato stored from wreg
  1378  000C4C  6E10               	movwf	ENVIA_LCD_CMD@dato^0,c
  1379  000C4E                     
  1380                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1381  000C4E  908C               	bcf	140,0,c	;volatile
  1382  000C50                     
  1383                           ;LCD.c: 108:  LEER_LCD();
  1384  000C50  EC67  F005         	call	_LEER_LCD	;wreg free
  1385  000C54                     
  1386                           ;LCD.c: 109:  TRISD = 0b00000000;
  1387  000C54  0E00               	movlw	0
  1388  000C56  6E95               	movwf	149,c	;volatile
  1389  000C58                     
  1390                           ;LCD.c: 111:         _delay(1200);
  1391  000C58  0EF0               	movlw	240
  1392  000C5A                     u417:
  1393  000C5A  D000               	nop2	
  1394  000C5C  2EE8               	decfsz	wreg,f,c
  1395  000C5E  D7FD               	bra	u417
  1396  000C60                     
  1397                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1398  000C60  928C               	bcf	140,1,c	;volatile
  1399  000C62                     
  1400                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1401  000C62  948C               	bcf	140,2,c	;volatile
  1402  000C64                     
  1403                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1404  000C64  908C               	bcf	140,0,c	;volatile
  1405  000C66                     
  1406                           ;LCD.c: 115:  aux = dato & 0xF0;
  1407  000C66  5010               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1408  000C68  0BF0               	andlw	240
  1409  000C6A  6E11               	movwf	ENVIA_LCD_CMD@aux^0,c
  1410  000C6C                     
  1411                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1412  000C6C  5011               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1413  000C6E  EC6B  F006         	call	_ENVIA_NIBBLE
  1414  000C72                     
  1415                           ;LCD.c: 117:  aux = dato<<4;
  1416  000C72  3810               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1417  000C74  0BF0               	andlw	240
  1418  000C76  6E11               	movwf	ENVIA_LCD_CMD@aux^0,c
  1419  000C78                     
  1420                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1421  000C78  5011               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1422  000C7A  EC6B  F006         	call	_ENVIA_NIBBLE
  1423  000C7E  0012               	return		;funcret
  1424  000C80                     __end_of_ENVIA_LCD_CMD:
  1425                           	opt callstack 0
  1426                           
  1427 ;; *************** function _LEER_LCD *****************
  1428 ;; Defined at:
  1429 ;;		line 121 in file "LCD.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;		None
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;  aux             1    0[COMRAM] unsigned char 
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		wreg, status,2, status,0
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1443 ;;      Params:         0       0       0       0       0       0       0       0       0
  1444 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1445 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1446 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1447 ;;Total ram usage:        1 bytes
  1448 ;; Hardware stack levels used:    1
  1449 ;; This function calls:
  1450 ;;		Nothing
  1451 ;; This function is called by:
  1452 ;;		_ENVIA_CHAR
  1453 ;;		_ENVIA_LCD_CMD
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text13
  1458  000ACE                     __ptext13:
  1459                           	opt callstack 0
  1460  000ACE                     _LEER_LCD:
  1461                           	opt callstack 28
  1462  000ACE                     
  1463                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1464  000ACE  0EF8               	movlw	248
  1465  000AD0  6E95               	movwf	149,c	;volatile
  1466  000AD2                     
  1467                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1468  000AD2  908C               	bcf	140,0,c	;volatile
  1469  000AD4                     
  1470                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1471  000AD4  828C               	bsf	140,1,c	;volatile
  1472  000AD6                     
  1473                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1474  000AD6  848C               	bsf	140,2,c	;volatile
  1475  000AD8                     
  1476                           ;LCD.c: 128:         _delay(1200);
  1477  000AD8  0EF0               	movlw	240
  1478  000ADA                     u427:
  1479  000ADA  D000               	nop2	
  1480  000ADC  2EE8               	decfsz	wreg,f,c
  1481  000ADE  D7FD               	bra	u427
  1482  000AE0                     
  1483                           ;LCD.c: 130:  aux = PORTD;
  1484  000AE0  CF83 F00F          	movff	3971,LEER_LCD@aux	;volatile
  1485  000AE4                     
  1486                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1487  000AE4  948C               	bcf	140,2,c	;volatile
  1488  000AE6                     
  1489                           ;LCD.c: 132:         _delay(1200);
  1490  000AE6  0EF0               	movlw	240
  1491  000AE8                     u437:
  1492  000AE8  D000               	nop2	
  1493  000AEA  2EE8               	decfsz	wreg,f,c
  1494  000AEC  D7FD               	bra	u437
  1495  000AEE                     
  1496                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1497  000AEE  848C               	bsf	140,2,c	;volatile
  1498  000AF0                     
  1499                           ;LCD.c: 135:         _delay(1200);
  1500  000AF0  0EF0               	movlw	240
  1501  000AF2                     u447:
  1502  000AF2  D000               	nop2	
  1503  000AF4  2EE8               	decfsz	wreg,f,c
  1504  000AF6  D7FD               	bra	u447
  1505  000AF8                     
  1506                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1507  000AF8  948C               	bcf	140,2,c	;volatile
  1508  000AFA                     l830:
  1509                           
  1510                           ;LCD.c: 138:  aux = aux & 0x80;
  1511  000AFA  500F               	movf	LEER_LCD@aux^0,w,c
  1512  000AFC  0B80               	andlw	128
  1513  000AFE  6E0F               	movwf	LEER_LCD@aux^0,c
  1514                           
  1515                           ;LCD.c: 139:  while(aux == 0x80)
  1516  000B00  EF96  F005         	goto	l844
  1517  000B04                     l67:
  1518                           
  1519                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1520  000B04  848C               	bsf	140,2,c	;volatile
  1521  000B06                     
  1522                           ;LCD.c: 142:             _delay(1200);
  1523  000B06  0EF0               	movlw	240
  1524  000B08                     u457:
  1525  000B08  D000               	nop2	
  1526  000B0A  2EE8               	decfsz	wreg,f,c
  1527  000B0C  D7FD               	bra	u457
  1528  000B0E                     
  1529                           ;LCD.c: 143:             aux = PORTD;
  1530  000B0E  CF83 F00F          	movff	3971,LEER_LCD@aux	;volatile
  1531  000B12                     
  1532                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1533  000B12  948C               	bcf	140,2,c	;volatile
  1534                           
  1535                           ;LCD.c: 145:             _delay(1200);
  1536  000B14  0EF0               	movlw	240
  1537  000B16                     u467:
  1538  000B16  D000               	nop2	
  1539  000B18  2EE8               	decfsz	wreg,f,c
  1540  000B1A  D7FD               	bra	u467
  1541  000B1C                     
  1542                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1543  000B1C  848C               	bsf	140,2,c	;volatile
  1544                           
  1545                           ;LCD.c: 147:             _delay(1200);
  1546  000B1E  0EF0               	movlw	240
  1547  000B20                     u477:
  1548  000B20  D000               	nop2	
  1549  000B22  2EE8               	decfsz	wreg,f,c
  1550  000B24  D7FD               	bra	u477
  1551  000B26                     
  1552                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1553  000B26  948C               	bcf	140,2,c	;volatile
  1554  000B28  EF7D  F005         	goto	l830
  1555  000B2C                     l844:
  1556                           
  1557                           ;LCD.c: 139:  while(aux == 0x80)
  1558  000B2C  0E80               	movlw	128
  1559  000B2E  180F               	xorwf	LEER_LCD@aux^0,w,c
  1560  000B30  B4D8               	btfsc	status,2,c
  1561  000B32  EF9D  F005         	goto	u11
  1562  000B36  EF9F  F005         	goto	u10
  1563  000B3A                     u11:
  1564  000B3A  EF82  F005         	goto	l67
  1565  000B3E                     u10:
  1566  000B3E  0012               	return		;funcret
  1567  000B40                     __end_of_LEER_LCD:
  1568                           	opt callstack 0
  1569                           
  1570 ;; *************** function _ENVIA_NIBBLE *****************
  1571 ;; Defined at:
  1572 ;;		line 93 in file "LCD.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;  dato            1    wreg     unsigned char 
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  dato            1    0[COMRAM] unsigned char 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, status,2, status,0
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1586 ;;      Params:         0       0       0       0       0       0       0       0       0
  1587 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1589 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1590 ;;Total ram usage:        1 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; This function calls:
  1593 ;;		Nothing
  1594 ;; This function is called by:
  1595 ;;		_ENVIA_CHAR
  1596 ;;		_LCD_CONFIG
  1597 ;;		_ENVIA_LCD_CMD
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           	psect	text14
  1602  000CD6                     __ptext14:
  1603                           	opt callstack 0
  1604  000CD6                     _ENVIA_NIBBLE:
  1605                           	opt callstack 28
  1606                           
  1607                           ;incstack = 0
  1608                           ;ENVIA_NIBBLE@dato stored from wreg
  1609  000CD6  6E0F               	movwf	ENVIA_NIBBLE@dato^0,c
  1610  000CD8                     
  1611                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1612  000CD8  0E0F               	movlw	15
  1613  000CDA  168C               	andwf	140,f,c	;volatile
  1614                           
  1615                           ;LCD.c: 96:  dato &= 0xF0;
  1616  000CDC  0EF0               	movlw	240
  1617  000CDE  160F               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1618                           
  1619                           ;LCD.c: 97:  LATD|= dato;
  1620  000CE0  500F               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1621  000CE2  128C               	iorwf	140,f,c	;volatile
  1622  000CE4                     
  1623                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1624  000CE4  848C               	bsf	140,2,c	;volatile
  1625  000CE6                     
  1626                           ;LCD.c: 100:         _delay(1200);
  1627  000CE6  0EF0               	movlw	240
  1628  000CE8                     u487:
  1629  000CE8  D000               	nop2	
  1630  000CEA  2EE8               	decfsz	wreg,f,c
  1631  000CEC  D7FD               	bra	u487
  1632  000CEE                     
  1633                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1634  000CEE  948C               	bcf	140,2,c	;volatile
  1635  000CF0  0012               	return		;funcret
  1636  000CF2                     __end_of_ENVIA_NIBBLE:
  1637                           	opt callstack 0
  1638                           
  1639                           	psect	rparam
  1640  0000                     tosu	equ	0xFFF
  1641                           tosh	equ	0xFFE
  1642                           tosl	equ	0xFFD
  1643                           stkptr	equ	0xFFC
  1644                           pclatu	equ	0xFFB
  1645                           pclath	equ	0xFFA
  1646                           pcl	equ	0xFF9
  1647                           tblptru	equ	0xFF8
  1648                           tblptrh	equ	0xFF7
  1649                           tblptrl	equ	0xFF6
  1650                           tablat	equ	0xFF5
  1651                           prodh	equ	0xFF4
  1652                           prodl	equ	0xFF3
  1653                           indf0	equ	0xFEF
  1654                           postinc0	equ	0xFEE
  1655                           postdec0	equ	0xFED
  1656                           preinc0	equ	0xFEC
  1657                           plusw0	equ	0xFEB
  1658                           fsr0h	equ	0xFEA
  1659                           fsr0l	equ	0xFE9
  1660                           wreg	equ	0xFE8
  1661                           indf1	equ	0xFE7
  1662                           postinc1	equ	0xFE6
  1663                           postdec1	equ	0xFE5
  1664                           preinc1	equ	0xFE4
  1665                           plusw1	equ	0xFE3
  1666                           fsr1h	equ	0xFE2
  1667                           fsr1l	equ	0xFE1
  1668                           bsr	equ	0xFE0
  1669                           indf2	equ	0xFDF
  1670                           postinc2	equ	0xFDE
  1671                           postdec2	equ	0xFDD
  1672                           preinc2	equ	0xFDC
  1673                           plusw2	equ	0xFDB
  1674                           fsr2h	equ	0xFDA
  1675                           fsr2l	equ	0xFD9
  1676                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      25
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[6]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_conviertemenso
    _conviertemenso->___awdiv
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3173
                                             10 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
                     _conviertemenso
 ---------------------------------------------------------------------------------
 (1) _conviertemenso                                       2     0      2    1653
                                              8 COMRAM     2     0      2
                            ___awdiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     615
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _conviertemenso
     ___awdiv
     ___lwdiv
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      B      19       1       26.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      19      20        0.0%
DATA                 0      0      19       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Oct 15 15:25:40 2019

                      l24 0C16                        l42 0CAE                        l51 0C4A  
                      l60 0CF0                        l37 0D12                        l54 0D1A  
                      l63 0C7E                        l48 0BDC                        l57 0B9E  
                      l67 0B04                        l69 0B3E                        u10 0B3E  
                      u11 0B3A              ___awdiv@sign 0014       ___wmul@multiplicand 0011  
             __CFG_BORV$3 000000        __CFG_FOSC$XTPLL_XT 000000             ENVIA_CHAR@aux 0011  
                     l121 0A58                       l135 0CD4                       l127 0882  
                     l366 09A2                       l633 0ACC                       l810 0AD2  
                     l626 0AC4                       l820 0AE4                       l812 0AD4  
                     l830 0AFA                       l822 0AE6                       l814 0AD6  
                     l840 0B26                       l832 0B06                       l824 0AEE  
                     l816 0AD8                       l808 0ACE                       l850 0CE6  
                     l834 0B0E                       l826 0AF0                       l818 0AE0  
                     l852 0CEE                       l836 0B12                       l844 0B2C  
                     l828 0AF8                       l860 0C58                       l846 0CD8  
                     l838 0B1C                       l870 0C6C                       l862 0C60  
                     l854 0C4E                       l848 0CE4                       l872 0C72  
                     l864 0C62                       l856 0C50                       l880 0C20  
                     l874 0C78                       l866 0C64                       l858 0C54  
                     l890 0C32                       l882 0C24                       l868 0C66  
                     l980 0C82                       l892 0C38                       l884 0C2C  
                     l876 0C1A                       l982 0C92                       l894 0C3E  
                     l886 0C2E                       l878 0C1C                       l984 0C98  
                     l896 0C44                       l888 0C30                       l978 0D0C  
                     l986 0CA8                       l996 0D14                       l998 0B40  
                     u130 0C92                       u131 0C8E                       u140 0CA8  
                     u220 08F2                       u300 0AAE                       u141 0CA4  
                     u221 08EE                       u301 0AAA                       u310 0BF0  
                     u230 090C                       u311 0BEC                       u231 0908  
                     u320 0C0E                       u240 0932                       u321 0C0A  
                     u241 092E                       u330 0BDC                       u250 0950  
                     u331 0BD8                       u251 094C                       u260 096C  
                     u340 0890                       u261 0968                       u341 088C  
                     u270 0992                       u407 0C26                       u271 098E  
                     u280 0A74                       u417 0C5A                       u281 0A70  
                     u290 0A92                       u427 0ADA                       u291 0A8E  
                     u437 0AE8                       u357 081A                       u447 0AF2  
                     u367 0832                       u457 0B08                       u377 0B50  
                     u467 0B16                       u387 0B5E                       u477 0B20  
                     u397 0B6E                       u487 0CE8              __CFG_BOR$OFF 000000  
             LEER_LCD@aux 000F                       wreg 000FE8              ?_CURSOR_HOME 000F  
          ??_ENVIA_NIBBLE 000F              __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0010  
            __CFG_WDT$OFF 000000                      l1000 0B44                      l1010 0B7A  
                    l1002 0B4A                      l1020 0B98                      l1012 0B80  
                    l1004 0B58                      l1014 0B86                      l1006 0B6C  
                    l1110 0CCC                      l1016 0B8C                      l1008 0B74  
                    l1120 08FA                      l1200 09E0                      l1018 0B92  
                    l1130 0920                      l1122 08FE                      l1114 08E0  
                    l1202 0A1C                      l1210 0828                      l1140 0956  
                    l1132 0932                      l1124 090C                      l1116 08E4  
                    l1108 0CB0                      l1204 0A38                      l1220 084A  
                    l1212 082C                      l1142 096C                      l1134 093A  
                    l1150 0982                      l1126 0914                      l1118 08F2  
                    l1230 087C                      l1222 085A                      l1214 083C  
                    l1206 0814                      l1152 0992                      l1144 0974  
                    l1136 0942                      l1128 0918                      l1160 0A62  
                    l1240 08AE                      l1232 0880                      l1224 0864  
                    l1216 0842                      l1208 0824                      l1154 099A  
                    l1146 0976                      l1138 0950                      l1170 0A98  
                    l1162 0A74                      l1242 08B6                      l1234 0890  
                    l1226 0874                      l1218 0846                      l1180 0BE0  
                    l1148 097C                      l1172 0AAE                      l1164 0A7C  
                    l1244 08BE                      l1236 0896                      l1228 0878  
                    l1190 0BAC                      l1182 0BF0                      l1174 0AB6  
                    l1166 0A84                      l1158 0A5A                      l1246 08C6  
                    l1238 08A2                      l1192 0BC8                      l1184 0BFC  
                    l1176 0AB8                      l1168 0A92                      l1248 08CE  
                    l1194 0BCA                      l1186 0C0E                      l1178 0ABE  
                    l1188 0BA0                      l1196 09A4                      l1198 09C0  
                    STR_1 0801                      STR_2 080C                      _LATD 000F8C  
            __CFG_PWRT$ON 000000                      _main 0814                      prodh 000FF4  
                    prodl 000FF3                      start 0000             ?_CURSOR_ONOFF 000F  
           __CFG_MCLRE$ON 000000              ___param_bank 000000           ??_ENVIA_LCD_CMD 0010  
        __end_of_LEER_LCD 0B40       __size_of_BORRAR_LCD 0008             __CFG_PLLDIV$1 000000  
          __CFG_CCP2MX$ON 000000                     ?_main 000F           __end_of___awdiv 09A4  
         ___awdiv@divisor 0011           __end_of___lwdiv 0ACE           ___awdiv@counter 0013  
                   _PORTD 000F83       __size_of_LCD_CONFIG 0060                     _TRISD 000F95  
     __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0012                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0012           __initialization 0CF2  
            __end_of_main 08E0           _ESCRIBE_MENSAJE 0BA0                    ??_main 0019  
           __activetblptr 000001            _conviertemenso 09A4                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  _ADRESL 000FC3          ___awdiv@dividend 000F                    ___wmul 0CB0  
               ??___awdiv 0013      __end_of_ENVIA_NIBBLE 0CF2                    _digdec 0005  
                  _digcen 0007                    _digmil 0009                    _diguni 0003  
               ??___lwdiv 0013       __size_of_POS_CURSOR 003A                    clear_0 0CF8  
        ___awdiv@quotient 0015    __end_of_conviertemenso 0A5A              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
            ??_BORRAR_LCD 0012      __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 000F  
              __accesstop 0060   __end_of__initialization 0CFE           __CFG_PBADEN$OFF 000000  
            ??_LCD_CONFIG 0012             ___rparam_used 000001              ??_ENVIA_CHAR 0010  
 __end_of_ESCRIBE_MENSAJE 0BDE            __pcstackCOMRAM 000F        __end_of_BORRAR_LCD 0D1C  
         ?_conviertemenso 0017          ENVIA_LCD_CMD@aux 0011      __end_of_CURSOR_ONOFF 0CB0  
      __end_of_LCD_CONFIG 0BA0        __end_of_ENVIA_CHAR 0C4C                ??_LEER_LCD 000F  
        ENVIA_NIBBLE@dato 000F                   ?___wmul 000F              ??_POS_CURSOR 0013  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0012                   _an0_raw 0001                   ___awdiv 08E0  
         __size_of___wmul 0026                   ___lwdiv 0A5A              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0C80                   __pcinit 0CF2        __end_of_POS_CURSOR 0C18  
                 __ramtop 0800                   __ptext0 0814                   __ptext1 09A4  
                 __ptext2 0CB0                   __ptext3 0A5A                   __ptext4 08E0  
                 __ptext5 0BDE                   __ptext6 0B40                   __ptext7 0BA0  
                 __ptext8 0C18                   __ptext9 0C80              _ENVIA_NIBBLE 0CD6  
    end_of_initialization 0CFE                   postinc0 000FEE     __size_of_CURSOR_ONOFF 0030  
       __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0C80        CURSOR_ONOFF@estado 0012  
        ??_conviertemenso 0019            __end_of___wmul 0CD6      conviertemenso@numero 0017  
           ??_CURSOR_HOME 0012       start_initialization 0CF2         ENVIA_LCD_CMD@dato 0010  
                ??___wmul 0013          __CFG_LPT1OSC$OFF 000000               __pbssCOMRAM 0001  
     __end_of_CURSOR_HOME 0D14          ___lwdiv@dividend 000F                  ?___awdiv 000F  
                ?___lwdiv 000F               __smallconst 0800          ___lwdiv@quotient 0013  
                _LEER_LCD 0ACE            ___wmul@product 0013                  _LATDbits 000F8C  
        __CFG_WDTPS$32768 000000                 _temporal2 000B          ESCRIBE_MENSAJE@i 0017  
          POS_CURSOR@fila 0013  __size_of_ESCRIBE_MENSAJE 003E                _ADCON0bits 000FC2  
       ___wmul@multiplier 000F               _CURSOR_HOME 0D0C    __size_of_ENVIA_LCD_CMD 0034  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
        __size_of___awdiv 00C4          __size_of___lwdiv 0074           ___lwdiv@divisor 0011  
         ___lwdiv@counter 0015                  __ptext10 0D0C                  __ptext11 0D14  
                __ptext12 0C4C                  __ptext13 0ACE                  __ptext14 0CD6  
              _BORRAR_LCD 0D14             __size_of_main 00CC                _LCD_CONFIG 0B40  
              _ENVIA_CHAR 0C18                  _temporal 000D             _ENVIA_LCD_CMD 0C4C  
   __CFG_CPUDIV$OSC1_PLL2 000000         ??_ESCRIBE_MENSAJE 0015     ESCRIBE_MENSAJE@cadena 0012  
          ?_ENVIA_LCD_CMD 000F   __size_of_conviertemenso 00B6               ?_BORRAR_LCD 000F  
           ?_ENVIA_NIBBLE 000F                _POS_CURSOR 0BDE               ?_LCD_CONFIG 000F  
      ESCRIBE_MENSAJE@tam 0014               ?_ENVIA_CHAR 000F         POS_CURSOR@columna 0012  
