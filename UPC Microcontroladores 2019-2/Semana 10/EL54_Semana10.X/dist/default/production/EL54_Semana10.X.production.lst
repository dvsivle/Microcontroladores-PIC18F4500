

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Oct 15 21:11:38 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 2.05
    29                           ; Generated 20/12/2018 GMT
    30                           ; 
    31                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4550 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     _ADRESL	set	4035
    63  0000                     _ADRESH	set	4036
    64  0000                     _ADCON0bits	set	4034
    65  0000                     _ADCON0	set	4034
    66  0000                     _ADCON1	set	4033
    67  0000                     _ADCON2	set	4032
    68  0000                     _PORTD	set	3971
    69  0000                     _LATD	set	3980
    70  0000                     _TRISD	set	3989
    71  0000                     _LATDbits	set	3980
    72                           
    73                           	psect	smallconst
    74  000800                     __psmallconst:
    75                           	opt callstack 0
    76  000800  00                 	db	0
    77  000801                     STR_1:
    78  000801  48                 	db	72	;'H'
    79  000802  6F                 	db	111	;'o'
    80  000803  6C                 	db	108	;'l'
    81  000804  61                 	db	97	;'a'
    82  000805  20                 	db	32
    83  000806  6D                 	db	109	;'m'
    84  000807  75                 	db	117	;'u'
    85  000808  6E                 	db	110	;'n'
    86  000809  64                 	db	100	;'d'
    87  00080A  6F                 	db	111	;'o'
    88  00080B  21                 	db	33
    89  00080C  00                 	db	0
    90  00080D                     STR_2:
    91  00080D  43                 	db	67	;'C'
    92  00080E  61                 	db	97	;'a'
    93  00080F  6E                 	db	110	;'n'
    94  000810  61                 	db	97	;'a'
    95  000811  6C                 	db	108	;'l'
    96  000812  20                 	db	32
    97  000813  41                 	db	65	;'A'
    98  000814  4E                 	db	78	;'N'
    99  000815  30                 	db	48	;'0'
   100  000816  3A                 	db	58	;':'
   101  000817  00                 	db	0
   102                           
   103                           ; #config settings
   104  000818  00                 	db	0	; dummy byte at the end
   105  0000                     
   106                           	psect	cinit
   107  000C9A                     __pcinit:
   108                           	opt callstack 0
   109  000C9A                     start_initialization:
   110                           	opt callstack 0
   111  000C9A                     __initialization:
   112                           	opt callstack 0
   113                           
   114                           ; Clear objects allocated to COMRAM (12 bytes)
   115  000C9A  EE00  F012         	lfsr	0,__pbssCOMRAM
   116  000C9E  0E0C               	movlw	12
   117  000CA0                     clear_0:
   118  000CA0  6AEE               	clrf	postinc0,c
   119  000CA2  06E8               	decf	wreg,f,c
   120  000CA4  E1FD               	bnz	clear_0
   121  000CA6                     end_of_initialization:
   122                           	opt callstack 0
   123  000CA6                     __end_of__initialization:
   124                           	opt callstack 0
   125  000CA6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   126  000CA8  6EF8               	movwf	tblptru,c
   127  000CAA  0E08               	movlw	high __Lsmallconst
   128  000CAC  6EF7               	movwf	tblptrh,c
   129  000CAE  0100               	movlb	0
   130  000CB0  EF92  F004         	goto	_main	;jump to C main() function
   131                           
   132                           	psect	bssCOMRAM
   133  000012                     __pbssCOMRAM:
   134                           	opt callstack 0
   135  000012                     _conversion:
   136                           	opt callstack 0
   137  000012                     	ds	2
   138  000014                     _unidad:
   139                           	opt callstack 0
   140  000014                     	ds	2
   141  000016                     _decena:
   142                           	opt callstack 0
   143  000016                     	ds	2
   144  000018                     _centena:
   145                           	opt callstack 0
   146  000018                     	ds	2
   147  00001A                     _millar:
   148                           	opt callstack 0
   149  00001A                     	ds	2
   150  00001C                     _cuenta:
   151                           	opt callstack 0
   152  00001C                     	ds	2
   153                           
   154                           	psect	cstackCOMRAM
   155  000001                     __pcstackCOMRAM:
   156                           	opt callstack 0
   157  000001                     ?___wmul:
   158                           	opt callstack 0
   159  000001                     ?___awdiv:
   160                           	opt callstack 0
   161  000001                     ENVIA_NIBBLE@dato:
   162                           	opt callstack 0
   163  000001                     LEER_LCD@aux:
   164                           	opt callstack 0
   165  000001                     ___wmul@multiplier:
   166                           	opt callstack 0
   167  000001                     ___awdiv@dividend:
   168                           	opt callstack 0
   169                           
   170                           ; 2 bytes @ 0x0
   171  000001                     	ds	1
   172  000002                     ENVIA_CHAR@dato:
   173                           	opt callstack 0
   174  000002                     ENVIA_LCD_CMD@dato:
   175                           	opt callstack 0
   176                           
   177                           ; 1 bytes @ 0x1
   178  000002                     	ds	1
   179  000003                     ENVIA_CHAR@aux:
   180                           	opt callstack 0
   181  000003                     ENVIA_LCD_CMD@aux:
   182                           	opt callstack 0
   183  000003                     ___wmul@multiplicand:
   184                           	opt callstack 0
   185  000003                     ___awdiv@divisor:
   186                           	opt callstack 0
   187                           
   188                           ; 2 bytes @ 0x2
   189  000003                     	ds	1
   190  000004                     ??_LCD_CONFIG:
   191  000004                     POS_CURSOR@columna:
   192                           	opt callstack 0
   193  000004                     CURSOR_ONOFF@estado:
   194                           	opt callstack 0
   195  000004                     ESCRIBE_MENSAJE@cadena:
   196                           	opt callstack 0
   197                           
   198                           ; 2 bytes @ 0x3
   199  000004                     	ds	1
   200  000005                     ??_configura_lcd:
   201  000005                     POS_CURSOR@fila:
   202                           	opt callstack 0
   203  000005                     ___awdiv@counter:
   204                           	opt callstack 0
   205  000005                     ___wmul@product:
   206                           	opt callstack 0
   207                           
   208                           ; 2 bytes @ 0x4
   209  000005                     	ds	1
   210  000006                     ESCRIBE_MENSAJE@tam:
   211                           	opt callstack 0
   212  000006                     ___awdiv@sign:
   213                           	opt callstack 0
   214                           
   215                           ; 1 bytes @ 0x5
   216  000006                     	ds	1
   217  000007                     ??_ESCRIBE_MENSAJE:
   218  000007                     ?___lwdiv:
   219                           	opt callstack 0
   220  000007                     ___awdiv@quotient:
   221                           	opt callstack 0
   222  000007                     ___lwdiv@dividend:
   223                           	opt callstack 0
   224                           
   225                           ; 2 bytes @ 0x6
   226  000007                     	ds	2
   227  000009                     ESCRIBE_MENSAJE@i:
   228                           	opt callstack 0
   229  000009                     ___lwdiv@divisor:
   230                           	opt callstack 0
   231                           
   232                           ; 2 bytes @ 0x8
   233  000009                     	ds	2
   234  00000B                     ___lwdiv@quotient:
   235                           	opt callstack 0
   236                           
   237                           ; 2 bytes @ 0xA
   238  00000B                     	ds	2
   239  00000D                     ___lwdiv@counter:
   240                           	opt callstack 0
   241                           
   242                           ; 1 bytes @ 0xC
   243  00000D                     	ds	1
   244  00000E                     digitos@numero:
   245                           	opt callstack 0
   246                           
   247                           ; 2 bytes @ 0xD
   248  00000E                     	ds	2
   249  000010                     ??_digitos:
   250                           
   251                           ; 1 bytes @ 0xF
   252  000010                     	ds	2
   253  000012                     
   254                           ; 1 bytes @ 0x11
   255 ;;
   256 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   257 ;;
   258 ;; *************** function _main *****************
   259 ;; Defined at:
   260 ;;		line 45 in file "test_lcd3.c"
   261 ;; Parameters:    Size  Location     Type
   262 ;;		None
   263 ;; Auto vars:     Size  Location     Type
   264 ;;		None
   265 ;; Return value:  Size  Location     Type
   266 ;;                  1    wreg      void 
   267 ;; Registers used:
   268 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   269 ;; Tracked objects:
   270 ;;		On entry : 0/0
   271 ;;		On exit  : 0/0
   272 ;;		Unchanged: 0/0
   273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   274 ;;      Params:         0       0       0       0       0       0       0       0       0
   275 ;;      Locals:         0       0       0       0       0       0       0       0       0
   276 ;;      Temps:          0       0       0       0       0       0       0       0       0
   277 ;;      Totals:         0       0       0       0       0       0       0       0       0
   278 ;;Total ram usage:        0 bytes
   279 ;; Hardware stack levels required when called:    4
   280 ;; This function calls:
   281 ;;		_ENVIA_CHAR
   282 ;;		_ESCRIBE_MENSAJE
   283 ;;		_POS_CURSOR
   284 ;;		_configura_lcd
   285 ;;		_digitos
   286 ;; This function is called by:
   287 ;;		Startup code after reset
   288 ;; This function uses a non-reentrant model
   289 ;;
   290                           
   291                           	psect	text0
   292  000924                     __ptext0:
   293                           	opt callstack 0
   294  000924                     _main:
   295                           	opt callstack 27
   296                           
   297                           ;test_lcd3.c: 46:     configura_lcd();
   298                           
   299                           ;incstack = 0
   300  000924  ECA3  F005         	call	_configura_lcd	;wreg free
   301                           
   302                           ;test_lcd3.c: 47:     ESCRIBE_MENSAJE("Hola mundo!", 11);
   303  000928  0E01               	movlw	low STR_1
   304  00092A  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   305  00092C  0E08               	movlw	high STR_1
   306  00092E  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   307  000930  0E0B               	movlw	11
   308  000932  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   309  000934  ECF3  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   310                           
   311                           ;test_lcd3.c: 48:     POS_CURSOR(2,0);
   312  000938  0E00               	movlw	0
   313  00093A  6E04               	movwf	POS_CURSOR@columna,c
   314  00093C  0E02               	movlw	2
   315  00093E  EC1F  F006         	call	_POS_CURSOR
   316                           
   317                           ;test_lcd3.c: 49:     ESCRIBE_MENSAJE("Canal AN0:", 10);
   318  000942  0E0D               	movlw	low STR_2
   319  000944  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   320  000946  0E08               	movlw	high STR_2
   321  000948  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   322  00094A  0E0A               	movlw	10
   323  00094C  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   324  00094E  ECF3  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   325                           
   326                           ;test_lcd3.c: 50:     ADCON2 = 0x91;
   327  000952  0E91               	movlw	145
   328  000954  6EC0               	movwf	4032,c	;volatile
   329                           
   330                           ;test_lcd3.c: 51:     ADCON1 = 0x0E;
   331  000956  0E0E               	movlw	14
   332  000958  6EC1               	movwf	4033,c	;volatile
   333                           
   334                           ;test_lcd3.c: 52:     ADCON0 = 0x01;
   335  00095A  0E01               	movlw	1
   336  00095C  6EC2               	movwf	4034,c	;volatile
   337  00095E                     l1215:
   338                           
   339                           ;test_lcd3.c: 54:         ADCON0bits.GO = 1;
   340  00095E  82C2               	bsf	4034,1,c	;volatile
   341  000960                     l128:
   342  000960  B2C2               	btfsc	4034,1,c	;volatile
   343  000962  D7FE               	goto	l128
   344                           
   345                           ;test_lcd3.c: 56:         conversion = ADRESH << 8;
   346  000964  50C4               	movf	4036,w,c	;volatile
   347  000966  6E13               	movwf	_conversion+1,c
   348  000968  6A12               	clrf	_conversion,c
   349                           
   350                           ;test_lcd3.c: 57:         conversion = conversion + ADRESL;
   351  00096A  50C3               	movf	4035,w,c	;volatile
   352  00096C  2412               	addwf	_conversion,w,c
   353  00096E  6E12               	movwf	_conversion,c
   354  000970  0E00               	movlw	0
   355  000972  2013               	addwfc	_conversion+1,w,c
   356  000974  6E13               	movwf	_conversion+1,c
   357                           
   358                           ;test_lcd3.c: 58:         digitos(conversion);
   359  000976  C012  F00E         	movff	_conversion,digitos@numero
   360  00097A  C013  F00F         	movff	_conversion+1,digitos@numero+1
   361  00097E  EC0D  F004         	call	_digitos	;wreg free
   362                           
   363                           ;test_lcd3.c: 59:         POS_CURSOR(2,10);
   364  000982  0E0A               	movlw	10
   365  000984  6E04               	movwf	POS_CURSOR@columna,c
   366  000986  0E02               	movlw	2
   367  000988  EC1F  F006         	call	_POS_CURSOR
   368                           
   369                           ;test_lcd3.c: 60:         ENVIA_CHAR(millar+0x30);
   370  00098C  501A               	movf	_millar,w,c
   371  00098E  0F30               	addlw	48
   372  000990  ECD9  F005         	call	_ENVIA_CHAR
   373                           
   374                           ;test_lcd3.c: 61:         ENVIA_CHAR(centena+0x30);
   375  000994  5018               	movf	_centena,w,c
   376  000996  0F30               	addlw	48
   377  000998  ECD9  F005         	call	_ENVIA_CHAR
   378                           
   379                           ;test_lcd3.c: 62:         ENVIA_CHAR(decena+0x30);
   380  00099C  5016               	movf	_decena,w,c
   381  00099E  0F30               	addlw	48
   382  0009A0  ECD9  F005         	call	_ENVIA_CHAR
   383                           
   384                           ;test_lcd3.c: 63:         ENVIA_CHAR(unidad+0x30);
   385  0009A4  5014               	movf	_unidad,w,c
   386  0009A6  0F30               	addlw	48
   387  0009A8  ECD9  F005         	call	_ENVIA_CHAR
   388  0009AC  D7D8               	goto	l1215
   389  0009AE                     __end_of_main:
   390                           	opt callstack 0
   391                           
   392 ;; *************** function _digitos *****************
   393 ;; Defined at:
   394 ;;		line 28 in file "test_lcd3.c"
   395 ;; Parameters:    Size  Location     Type
   396 ;;  numero          2   13[COMRAM] int 
   397 ;; Auto vars:     Size  Location     Type
   398 ;;		None
   399 ;; Return value:  Size  Location     Type
   400 ;;                  2   13[COMRAM] unsigned int 
   401 ;; Registers used:
   402 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   403 ;; Tracked objects:
   404 ;;		On entry : 0/0
   405 ;;		On exit  : 0/0
   406 ;;		Unchanged: 0/0
   407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   408 ;;      Params:         2       0       0       0       0       0       0       0       0
   409 ;;      Locals:         0       0       0       0       0       0       0       0       0
   410 ;;      Temps:          2       0       0       0       0       0       0       0       0
   411 ;;      Totals:         4       0       0       0       0       0       0       0       0
   412 ;;Total ram usage:        4 bytes
   413 ;; Hardware stack levels used:    1
   414 ;; Hardware stack levels required when called:    1
   415 ;; This function calls:
   416 ;;		___awdiv
   417 ;;		___lwdiv
   418 ;;		___wmul
   419 ;; This function is called by:
   420 ;;		_main
   421 ;; This function uses a non-reentrant model
   422 ;;
   423                           
   424                           	psect	text1
   425  00081A                     __ptext1:
   426                           	opt callstack 0
   427  00081A                     _digitos:
   428                           	opt callstack 29
   429                           
   430                           ;test_lcd3.c: 29:     millar = numero / 1000;
   431                           
   432                           ;incstack = 0
   433  00081A  C00E  F001         	movff	digitos@numero,___awdiv@dividend
   434  00081E  C00F  F002         	movff	digitos@numero+1,___awdiv@dividend+1
   435  000822  0E03               	movlw	3
   436  000824  6E04               	movwf	___awdiv@divisor+1,c
   437  000826  0EE8               	movlw	232
   438  000828  6E03               	movwf	___awdiv@divisor,c
   439  00082A  ECD7  F004         	call	___awdiv	;wreg free
   440  00082E  C001  F01A         	movff	?___awdiv,_millar
   441  000832  C002  F01B         	movff	?___awdiv+1,_millar+1
   442                           
   443                           ;test_lcd3.c: 30:     centena = (numero - (millar * 1000)) / 100;
   444  000836  C01A  F001         	movff	_millar,___wmul@multiplier
   445  00083A  C01B  F002         	movff	_millar+1,___wmul@multiplier+1
   446  00083E  0EFC               	movlw	252
   447  000840  6E04               	movwf	___wmul@multiplicand+1,c
   448  000842  0E18               	movlw	24
   449  000844  6E03               	movwf	___wmul@multiplicand,c
   450  000846  EC0C  F006         	call	___wmul	;wreg free
   451  00084A  500E               	movf	digitos@numero,w,c
   452  00084C  2401               	addwf	?___wmul,w,c
   453  00084E  6E07               	movwf	___lwdiv@dividend,c
   454  000850  500F               	movf	digitos@numero+1,w,c
   455  000852  2002               	addwfc	?___wmul+1,w,c
   456  000854  6E08               	movwf	___lwdiv@dividend+1,c
   457  000856  0E00               	movlw	0
   458  000858  6E0A               	movwf	___lwdiv@divisor+1,c
   459  00085A  0E64               	movlw	100
   460  00085C  6E09               	movwf	___lwdiv@divisor,c
   461  00085E  EC7A  F005         	call	___lwdiv	;wreg free
   462  000862  C007  F018         	movff	?___lwdiv,_centena
   463  000866  C008  F019         	movff	?___lwdiv+1,_centena+1
   464                           
   465                           ;test_lcd3.c: 31:     decena = ((numero - (millar * 1000)) - (centena * 100)) / 10;
   466  00086A  C01A  F001         	movff	_millar,___wmul@multiplier
   467  00086E  C01B  F002         	movff	_millar+1,___wmul@multiplier+1
   468  000872  0EFC               	movlw	252
   469  000874  6E04               	movwf	___wmul@multiplicand+1,c
   470  000876  0E18               	movlw	24
   471  000878  6E03               	movwf	___wmul@multiplicand,c
   472  00087A  EC0C  F006         	call	___wmul	;wreg free
   473  00087E  C001  F010         	movff	?___wmul,??_digitos
   474  000882  C002  F011         	movff	?___wmul+1,??_digitos+1
   475  000886  C018  F001         	movff	_centena,___wmul@multiplier
   476  00088A  C019  F002         	movff	_centena+1,___wmul@multiplier+1
   477  00088E  0EFF               	movlw	255
   478  000890  6E04               	movwf	___wmul@multiplicand+1,c
   479  000892  0E9C               	movlw	156
   480  000894  6E03               	movwf	___wmul@multiplicand,c
   481  000896  EC0C  F006         	call	___wmul	;wreg free
   482  00089A  5001               	movf	?___wmul,w,c
   483  00089C  2610               	addwf	??_digitos,f,c
   484  00089E  5002               	movf	?___wmul+1,w,c
   485  0008A0  2211               	addwfc	??_digitos+1,f,c
   486  0008A2  500E               	movf	digitos@numero,w,c
   487  0008A4  2410               	addwf	??_digitos,w,c
   488  0008A6  6E07               	movwf	___lwdiv@dividend,c
   489  0008A8  500F               	movf	digitos@numero+1,w,c
   490  0008AA  2011               	addwfc	??_digitos+1,w,c
   491  0008AC  6E08               	movwf	___lwdiv@dividend+1,c
   492  0008AE  0E00               	movlw	0
   493  0008B0  6E0A               	movwf	___lwdiv@divisor+1,c
   494  0008B2  0E0A               	movlw	10
   495  0008B4  6E09               	movwf	___lwdiv@divisor,c
   496  0008B6  EC7A  F005         	call	___lwdiv	;wreg free
   497  0008BA  C007  F016         	movff	?___lwdiv,_decena
   498  0008BE  C008  F017         	movff	?___lwdiv+1,_decena+1
   499                           
   500                           ;test_lcd3.c: 32:     unidad = ((numero - (millar * 1000)) - (centena * 100)) - (decena 
      +                          * 10);
   501  0008C2  C01A  F001         	movff	_millar,___wmul@multiplier
   502  0008C6  C01B  F002         	movff	_millar+1,___wmul@multiplier+1
   503  0008CA  0EFC               	movlw	252
   504  0008CC  6E04               	movwf	___wmul@multiplicand+1,c
   505  0008CE  0E18               	movlw	24
   506  0008D0  6E03               	movwf	___wmul@multiplicand,c
   507  0008D2  EC0C  F006         	call	___wmul	;wreg free
   508  0008D6  C001  F010         	movff	?___wmul,??_digitos
   509  0008DA  C002  F011         	movff	?___wmul+1,??_digitos+1
   510  0008DE  C018  F001         	movff	_centena,___wmul@multiplier
   511  0008E2  C019  F002         	movff	_centena+1,___wmul@multiplier+1
   512  0008E6  0EFF               	movlw	255
   513  0008E8  6E04               	movwf	___wmul@multiplicand+1,c
   514  0008EA  0E9C               	movlw	156
   515  0008EC  6E03               	movwf	___wmul@multiplicand,c
   516  0008EE  EC0C  F006         	call	___wmul	;wreg free
   517  0008F2  5001               	movf	?___wmul,w,c
   518  0008F4  2610               	addwf	??_digitos,f,c
   519  0008F6  5002               	movf	?___wmul+1,w,c
   520  0008F8  2211               	addwfc	??_digitos+1,f,c
   521  0008FA  C016  F001         	movff	_decena,___wmul@multiplier
   522  0008FE  C017  F002         	movff	_decena+1,___wmul@multiplier+1
   523  000902  0EFF               	movlw	255
   524  000904  6E04               	movwf	___wmul@multiplicand+1,c
   525  000906  0EF6               	movlw	246
   526  000908  6E03               	movwf	___wmul@multiplicand,c
   527  00090A  EC0C  F006         	call	___wmul	;wreg free
   528  00090E  5001               	movf	?___wmul,w,c
   529  000910  2610               	addwf	??_digitos,f,c
   530  000912  5002               	movf	?___wmul+1,w,c
   531  000914  2211               	addwfc	??_digitos+1,f,c
   532  000916  500E               	movf	digitos@numero,w,c
   533  000918  2410               	addwf	??_digitos,w,c
   534  00091A  6E14               	movwf	_unidad,c
   535  00091C  500F               	movf	digitos@numero+1,w,c
   536  00091E  2011               	addwfc	??_digitos+1,w,c
   537  000920  6E15               	movwf	_unidad+1,c
   538  000922  0012               	return		;funcret
   539  000924                     __end_of_digitos:
   540                           	opt callstack 0
   541                           
   542 ;; *************** function ___wmul *****************
   543 ;; Defined at:
   544 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
   545 ;; Parameters:    Size  Location     Type
   546 ;;  multiplier      2    0[COMRAM] unsigned int 
   547 ;;  multiplicand    2    2[COMRAM] unsigned int 
   548 ;; Auto vars:     Size  Location     Type
   549 ;;  product         2    4[COMRAM] unsigned int 
   550 ;; Return value:  Size  Location     Type
   551 ;;                  2    0[COMRAM] unsigned int 
   552 ;; Registers used:
   553 ;;		wreg, status,2, status,0, prodl, prodh
   554 ;; Tracked objects:
   555 ;;		On entry : 0/0
   556 ;;		On exit  : 0/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   559 ;;      Params:         4       0       0       0       0       0       0       0       0
   560 ;;      Locals:         2       0       0       0       0       0       0       0       0
   561 ;;      Temps:          0       0       0       0       0       0       0       0       0
   562 ;;      Totals:         6       0       0       0       0       0       0       0       0
   563 ;;Total ram usage:        6 bytes
   564 ;; Hardware stack levels used:    1
   565 ;; This function calls:
   566 ;;		Nothing
   567 ;; This function is called by:
   568 ;;		_digitos
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572                           	psect	text2
   573  000C18                     __ptext2:
   574                           	opt callstack 0
   575  000C18                     ___wmul:
   576                           	opt callstack 29
   577                           
   578                           ;incstack = 0
   579  000C18  5001               	movf	___wmul@multiplier,w,c
   580  000C1A  0203               	mulwf	___wmul@multiplicand,c
   581  000C1C  CFF3 F005          	movff	prodl,___wmul@product
   582  000C20  CFF4 F006          	movff	prodh,___wmul@product+1
   583  000C24  5001               	movf	___wmul@multiplier,w,c
   584  000C26  0204               	mulwf	___wmul@multiplicand+1,c
   585  000C28  50F3               	movf	prodl,w,c
   586  000C2A  2606               	addwf	___wmul@product+1,f,c
   587  000C2C  5002               	movf	___wmul@multiplier+1,w,c
   588  000C2E  0203               	mulwf	___wmul@multiplicand,c
   589  000C30  50F3               	movf	prodl,w,c
   590  000C32  2606               	addwf	___wmul@product+1,f,c
   591  000C34  C005  F001         	movff	___wmul@product,?___wmul
   592  000C38  C006  F002         	movff	___wmul@product+1,?___wmul+1
   593  000C3C  0012               	return		;funcret
   594  000C3E                     __end_of___wmul:
   595                           	opt callstack 0
   596                           
   597 ;; *************** function ___lwdiv *****************
   598 ;; Defined at:
   599 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwdiv.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;  dividend        2    6[COMRAM] unsigned int 
   602 ;;  divisor         2    8[COMRAM] unsigned int 
   603 ;; Auto vars:     Size  Location     Type
   604 ;;  quotient        2   10[COMRAM] unsigned int 
   605 ;;  counter         1   12[COMRAM] unsigned char 
   606 ;; Return value:  Size  Location     Type
   607 ;;                  2    6[COMRAM] unsigned int 
   608 ;; Registers used:
   609 ;;		wreg, status,2, status,0
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   615 ;;      Params:         4       0       0       0       0       0       0       0       0
   616 ;;      Locals:         3       0       0       0       0       0       0       0       0
   617 ;;      Temps:          0       0       0       0       0       0       0       0       0
   618 ;;      Totals:         7       0       0       0       0       0       0       0       0
   619 ;;Total ram usage:        7 bytes
   620 ;; Hardware stack levels used:    1
   621 ;; This function calls:
   622 ;;		Nothing
   623 ;; This function is called by:
   624 ;;		_digitos
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text3
   629  000AF4                     __ptext3:
   630                           	opt callstack 0
   631  000AF4                     ___lwdiv:
   632                           	opt callstack 29
   633                           
   634                           ;incstack = 0
   635  000AF4  0E00               	movlw	0
   636  000AF6  6E0C               	movwf	___lwdiv@quotient+1,c
   637  000AF8  0E00               	movlw	0
   638  000AFA  6E0B               	movwf	___lwdiv@quotient,c
   639  000AFC  5009               	movf	___lwdiv@divisor,w,c
   640  000AFE  100A               	iorwf	___lwdiv@divisor+1,w,c
   641  000B00  B4D8               	btfsc	status,2,c
   642  000B02  D01C               	goto	l627
   643  000B04  0E01               	movlw	1
   644  000B06  6E0D               	movwf	___lwdiv@counter,c
   645  000B08  D004               	goto	l1165
   646  000B0A                     l1163:
   647  000B0A  90D8               	bcf	status,0,c
   648  000B0C  3609               	rlcf	___lwdiv@divisor,f,c
   649  000B0E  360A               	rlcf	___lwdiv@divisor+1,f,c
   650  000B10  2A0D               	incf	___lwdiv@counter,f,c
   651  000B12                     l1165:
   652  000B12  AE0A               	btfss	___lwdiv@divisor+1,7,c
   653  000B14  D7FA               	goto	l1163
   654  000B16                     u290:
   655  000B16  90D8               	bcf	status,0,c
   656  000B18  360B               	rlcf	___lwdiv@quotient,f,c
   657  000B1A  360C               	rlcf	___lwdiv@quotient+1,f,c
   658  000B1C  5009               	movf	___lwdiv@divisor,w,c
   659  000B1E  5C07               	subwf	___lwdiv@dividend,w,c
   660  000B20  500A               	movf	___lwdiv@divisor+1,w,c
   661  000B22  5808               	subwfb	___lwdiv@dividend+1,w,c
   662  000B24  A0D8               	btfss	status,0,c
   663  000B26  D005               	goto	l1175
   664  000B28  5009               	movf	___lwdiv@divisor,w,c
   665  000B2A  5E07               	subwf	___lwdiv@dividend,f,c
   666  000B2C  500A               	movf	___lwdiv@divisor+1,w,c
   667  000B2E  5A08               	subwfb	___lwdiv@dividend+1,f,c
   668  000B30  800B               	bsf	___lwdiv@quotient,0,c
   669  000B32                     l1175:
   670  000B32  90D8               	bcf	status,0,c
   671  000B34  320A               	rrcf	___lwdiv@divisor+1,f,c
   672  000B36  3209               	rrcf	___lwdiv@divisor,f,c
   673  000B38  2E0D               	decfsz	___lwdiv@counter,f,c
   674  000B3A  D7ED               	goto	u290
   675  000B3C                     l627:
   676  000B3C  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
   677  000B40  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
   678  000B44  0012               	return		;funcret
   679  000B46                     __end_of___lwdiv:
   680                           	opt callstack 0
   681                           
   682 ;; *************** function ___awdiv *****************
   683 ;; Defined at:
   684 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;  dividend        2    0[COMRAM] int 
   687 ;;  divisor         2    2[COMRAM] int 
   688 ;; Auto vars:     Size  Location     Type
   689 ;;  quotient        2    6[COMRAM] int 
   690 ;;  sign            1    5[COMRAM] unsigned char 
   691 ;;  counter         1    4[COMRAM] unsigned char 
   692 ;; Return value:  Size  Location     Type
   693 ;;                  2    0[COMRAM] int 
   694 ;; Registers used:
   695 ;;		wreg, status,2, status,0
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   701 ;;      Params:         4       0       0       0       0       0       0       0       0
   702 ;;      Locals:         4       0       0       0       0       0       0       0       0
   703 ;;      Temps:          0       0       0       0       0       0       0       0       0
   704 ;;      Totals:         8       0       0       0       0       0       0       0       0
   705 ;;Total ram usage:        8 bytes
   706 ;; Hardware stack levels used:    1
   707 ;; This function calls:
   708 ;;		Nothing
   709 ;; This function is called by:
   710 ;;		_digitos
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text4
   715  0009AE                     __ptext4:
   716                           	opt callstack 0
   717  0009AE                     ___awdiv:
   718                           	opt callstack 29
   719                           
   720                           ;incstack = 0
   721  0009AE  0E00               	movlw	0
   722  0009B0  6E06               	movwf	___awdiv@sign,c
   723  0009B2  AE04               	btfss	___awdiv@divisor+1,7,c
   724  0009B4  D006               	goto	l1121
   725  0009B6  6C03               	negf	___awdiv@divisor,c
   726  0009B8  1E04               	comf	___awdiv@divisor+1,f,c
   727  0009BA  B0D8               	btfsc	status,0,c
   728  0009BC  2A04               	incf	___awdiv@divisor+1,f,c
   729  0009BE  0E01               	movlw	1
   730  0009C0  6E06               	movwf	___awdiv@sign,c
   731  0009C2                     l1121:
   732  0009C2  AE02               	btfss	___awdiv@dividend+1,7,c
   733  0009C4  D006               	goto	l1127
   734  0009C6  6C01               	negf	___awdiv@dividend,c
   735  0009C8  1E02               	comf	___awdiv@dividend+1,f,c
   736  0009CA  B0D8               	btfsc	status,0,c
   737  0009CC  2A02               	incf	___awdiv@dividend+1,f,c
   738  0009CE  0E01               	movlw	1
   739  0009D0  1A06               	xorwf	___awdiv@sign,f,c
   740  0009D2                     l1127:
   741  0009D2  0E00               	movlw	0
   742  0009D4  6E08               	movwf	___awdiv@quotient+1,c
   743  0009D6  0E00               	movlw	0
   744  0009D8  6E07               	movwf	___awdiv@quotient,c
   745  0009DA  5003               	movf	___awdiv@divisor,w,c
   746  0009DC  1004               	iorwf	___awdiv@divisor+1,w,c
   747  0009DE  B4D8               	btfsc	status,2,c
   748  0009E0  D01C               	goto	l1149
   749  0009E2  0E01               	movlw	1
   750  0009E4  6E05               	movwf	___awdiv@counter,c
   751  0009E6  D004               	goto	l1135
   752  0009E8                     l1133:
   753  0009E8  90D8               	bcf	status,0,c
   754  0009EA  3603               	rlcf	___awdiv@divisor,f,c
   755  0009EC  3604               	rlcf	___awdiv@divisor+1,f,c
   756  0009EE  2A05               	incf	___awdiv@counter,f,c
   757  0009F0                     l1135:
   758  0009F0  AE04               	btfss	___awdiv@divisor+1,7,c
   759  0009F2  D7FA               	goto	l1133
   760  0009F4                     u250:
   761  0009F4  90D8               	bcf	status,0,c
   762  0009F6  3607               	rlcf	___awdiv@quotient,f,c
   763  0009F8  3608               	rlcf	___awdiv@quotient+1,f,c
   764  0009FA  5003               	movf	___awdiv@divisor,w,c
   765  0009FC  5C01               	subwf	___awdiv@dividend,w,c
   766  0009FE  5004               	movf	___awdiv@divisor+1,w,c
   767  000A00  5802               	subwfb	___awdiv@dividend+1,w,c
   768  000A02  A0D8               	btfss	status,0,c
   769  000A04  D005               	goto	l1145
   770  000A06  5003               	movf	___awdiv@divisor,w,c
   771  000A08  5E01               	subwf	___awdiv@dividend,f,c
   772  000A0A  5004               	movf	___awdiv@divisor+1,w,c
   773  000A0C  5A02               	subwfb	___awdiv@dividend+1,f,c
   774  000A0E  8007               	bsf	___awdiv@quotient,0,c
   775  000A10                     l1145:
   776  000A10  90D8               	bcf	status,0,c
   777  000A12  3204               	rrcf	___awdiv@divisor+1,f,c
   778  000A14  3203               	rrcf	___awdiv@divisor,f,c
   779  000A16  2E05               	decfsz	___awdiv@counter,f,c
   780  000A18  D7ED               	goto	u250
   781  000A1A                     l1149:
   782  000A1A  5006               	movf	___awdiv@sign,w,c
   783  000A1C  B4D8               	btfsc	status,2,c
   784  000A1E  D004               	goto	l1153
   785  000A20  6C07               	negf	___awdiv@quotient,c
   786  000A22  1E08               	comf	___awdiv@quotient+1,f,c
   787  000A24  B0D8               	btfsc	status,0,c
   788  000A26  2A08               	incf	___awdiv@quotient+1,f,c
   789  000A28                     l1153:
   790  000A28  C007  F001         	movff	___awdiv@quotient,?___awdiv
   791  000A2C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   792  000A30  0012               	return		;funcret
   793  000A32                     __end_of___awdiv:
   794                           	opt callstack 0
   795                           
   796 ;; *************** function _configura_lcd *****************
   797 ;; Defined at:
   798 ;;		line 35 in file "test_lcd3.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;		None
   801 ;; Auto vars:     Size  Location     Type
   802 ;;		None
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, status,2, status,0, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   812 ;;      Params:         0       0       0       0       0       0       0       0       0
   813 ;;      Locals:         0       0       0       0       0       0       0       0       0
   814 ;;      Temps:          1       0       0       0       0       0       0       0       0
   815 ;;      Totals:         1       0       0       0       0       0       0       0       0
   816 ;;Total ram usage:        1 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; Hardware stack levels required when called:    3
   819 ;; This function calls:
   820 ;;		_BORRAR_LCD
   821 ;;		_CURSOR_HOME
   822 ;;		_CURSOR_ONOFF
   823 ;;		_LCD_CONFIG
   824 ;; This function is called by:
   825 ;;		_main
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text5
   830  000B46                     __ptext5:
   831                           	opt callstack 0
   832  000B46                     _configura_lcd:
   833                           	opt callstack 27
   834                           
   835                           ;test_lcd3.c: 36:     TRISD = 0x00;
   836                           
   837                           ;incstack = 0
   838  000B46  0E00               	movlw	0
   839  000B48  6E95               	movwf	3989,c	;volatile
   840                           
   841                           ;test_lcd3.c: 37:     _delay((unsigned long)((10)*(48000000UL/4000.0)));
   842  000B4A  0E9C               	movlw	156
   843  000B4C  6E05               	movwf	??_configura_lcd& (0+255),c
   844  000B4E  0ED7               	movlw	215
   845  000B50                     u357:
   846  000B50  2EE8               	decfsz	wreg,f,c
   847  000B52  D7FE               	bra	u357
   848  000B54  2E05               	decfsz	??_configura_lcd& (0+255),f,c
   849  000B56  D7FC               	bra	u357
   850  000B58  F000               	nop	
   851                           
   852                           ;test_lcd3.c: 38:     LCD_CONFIG();
   853  000B5A  EC4A  F005         	call	_LCD_CONFIG	;wreg free
   854                           
   855                           ;test_lcd3.c: 39:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   856  000B5E  0EEA               	movlw	234
   857  000B60  6E05               	movwf	??_configura_lcd& (0+255),c
   858  000B62  0EC3               	movlw	195
   859  000B64                     u367:
   860  000B64  2EE8               	decfsz	wreg,f,c
   861  000B66  D7FE               	bra	u367
   862  000B68  2E05               	decfsz	??_configura_lcd& (0+255),f,c
   863  000B6A  D7FC               	bra	u367
   864  000B6C  F000               	nop	
   865                           
   866                           ;test_lcd3.c: 40:     BORRAR_LCD();
   867  000B6E  EC5E  F006         	call	_BORRAR_LCD	;wreg free
   868                           
   869                           ;test_lcd3.c: 41:     CURSOR_ONOFF(1);
   870  000B72  0E01               	movlw	1
   871  000B74  EC31  F006         	call	_CURSOR_ONOFF
   872                           
   873                           ;test_lcd3.c: 42:     CURSOR_HOME();
   874  000B78  EC5A  F006         	call	_CURSOR_HOME	;wreg free
   875  000B7C  0012               	return		;funcret
   876  000B7E                     __end_of_configura_lcd:
   877                           	opt callstack 0
   878                           
   879 ;; *************** function _LCD_CONFIG *****************
   880 ;; Defined at:
   881 ;;		line 72 in file "LCD.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, status,2, status,0, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   895 ;;      Params:         0       0       0       0       0       0       0       0       0
   896 ;;      Locals:         0       0       0       0       0       0       0       0       0
   897 ;;      Temps:          1       0       0       0       0       0       0       0       0
   898 ;;      Totals:         1       0       0       0       0       0       0       0       0
   899 ;;Total ram usage:        1 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    2
   902 ;; This function calls:
   903 ;;		_ENVIA_LCD_CMD
   904 ;;		_ENVIA_NIBBLE
   905 ;; This function is called by:
   906 ;;		_configura_lcd
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           	psect	text6
   911  000A94                     __ptext6:
   912                           	opt callstack 0
   913  000A94                     _LCD_CONFIG:
   914                           	opt callstack 27
   915                           
   916                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   917                           
   918                           ;incstack = 0
   919  000A94  908C               	bcf	3980,0,c	;volatile
   920                           
   921                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   922  000A96  928C               	bcf	3980,1,c	;volatile
   923                           
   924                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   925  000A98  0E30               	movlw	48
   926  000A9A  EC3F  F006         	call	_ENVIA_NIBBLE
   927                           
   928                           ;LCD.c: 77:         _delay(24000);
   929  000A9E  0E20               	movlw	32
   930  000AA0  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   931  000AA2  0E2A               	movlw	42
   932  000AA4                     u377:
   933  000AA4  2EE8               	decfsz	wreg,f,c
   934  000AA6  D7FE               	bra	u377
   935  000AA8  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   936  000AAA  D7FC               	bra	u377
   937                           
   938                           ;LCD.c: 78:         _delay(24000);
   939  000AAC  0E20               	movlw	32
   940  000AAE  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   941  000AB0  0E2A               	movlw	42
   942  000AB2                     u387:
   943  000AB2  2EE8               	decfsz	wreg,f,c
   944  000AB4  D7FE               	bra	u387
   945  000AB6  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   946  000AB8  D7FC               	bra	u387
   947                           
   948                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   949  000ABA  0E30               	movlw	48
   950  000ABC  EC3F  F006         	call	_ENVIA_NIBBLE
   951                           
   952                           ;LCD.c: 83:  _delay(1200);
   953  000AC0  0EF0               	movlw	240
   954  000AC2                     u397:
   955  000AC2  D000               	nop2	
   956  000AC4  2EE8               	decfsz	wreg,f,c
   957  000AC6  D7FD               	bra	u397
   958                           
   959                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   960  000AC8  0E30               	movlw	48
   961  000ACA  EC3F  F006         	call	_ENVIA_NIBBLE
   962                           
   963                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   964  000ACE  0E20               	movlw	32
   965  000AD0  EC3F  F006         	call	_ENVIA_NIBBLE
   966                           
   967                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   968  000AD4  0E01               	movlw	1
   969  000AD6  ECBF  F005         	call	_ENVIA_LCD_CMD
   970                           
   971                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   972  000ADA  0E28               	movlw	40
   973  000ADC  ECBF  F005         	call	_ENVIA_LCD_CMD
   974                           
   975                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   976  000AE0  0E0F               	movlw	15
   977  000AE2  ECBF  F005         	call	_ENVIA_LCD_CMD
   978                           
   979                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   980  000AE6  0E06               	movlw	6
   981  000AE8  ECBF  F005         	call	_ENVIA_LCD_CMD
   982                           
   983                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   984  000AEC  0E01               	movlw	1
   985  000AEE  ECBF  F005         	call	_ENVIA_LCD_CMD
   986  000AF2  0012               	return		;funcret
   987  000AF4                     __end_of_LCD_CONFIG:
   988                           	opt callstack 0
   989                           
   990 ;; *************** function _CURSOR_ONOFF *****************
   991 ;; Defined at:
   992 ;;		line 35 in file "LCD.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;  estado          1    wreg     unsigned char 
   995 ;; Auto vars:     Size  Location     Type
   996 ;;  estado          1    3[COMRAM] unsigned char 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      void 
   999 ;; Registers used:
  1000 ;;		wreg, status,2, status,0, cstack
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1006 ;;      Params:         0       0       0       0       0       0       0       0       0
  1007 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1008 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1009 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1010 ;;Total ram usage:        1 bytes
  1011 ;; Hardware stack levels used:    1
  1012 ;; Hardware stack levels required when called:    2
  1013 ;; This function calls:
  1014 ;;		_ENVIA_LCD_CMD
  1015 ;; This function is called by:
  1016 ;;		_configura_lcd
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text7
  1021  000C62                     __ptext7:
  1022                           	opt callstack 0
  1023  000C62                     _CURSOR_ONOFF:
  1024                           	opt callstack 27
  1025                           
  1026                           ;incstack = 0
  1027                           ;CURSOR_ONOFF@estado stored from wreg
  1028  000C62  6E04               	movwf	CURSOR_ONOFF@estado,c
  1029                           
  1030                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1031  000C64  5004               	movf	CURSOR_ONOFF@estado,w,c
  1032  000C66  A4D8               	btfss	status,2,c
  1033  000C68  D003               	goto	l883
  1034  000C6A  0E0E               	movlw	14
  1035  000C6C  ECBF  F005         	call	_ENVIA_LCD_CMD
  1036  000C70                     l883:
  1037                           
  1038                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1039  000C70  0404               	decf	CURSOR_ONOFF@estado,w,c
  1040  000C72  A4D8               	btfss	status,2,c
  1041  000C74  0012               	return	
  1042  000C76  0E0C               	movlw	12
  1043  000C78  ECBF  F005         	call	_ENVIA_LCD_CMD
  1044  000C7C  0012               	return		;funcret
  1045  000C7E                     __end_of_CURSOR_ONOFF:
  1046                           	opt callstack 0
  1047                           
  1048 ;; *************** function _CURSOR_HOME *****************
  1049 ;; Defined at:
  1050 ;;		line 30 in file "LCD.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, status,2, status,0, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1064 ;;      Params:         0       0       0       0       0       0       0       0       0
  1065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1067 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1068 ;;Total ram usage:        0 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    2
  1071 ;; This function calls:
  1072 ;;		_ENVIA_LCD_CMD
  1073 ;; This function is called by:
  1074 ;;		_configura_lcd
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text8
  1079  000CB4                     __ptext8:
  1080                           	opt callstack 0
  1081  000CB4                     _CURSOR_HOME:
  1082                           	opt callstack 27
  1083                           
  1084                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1085                           
  1086                           ;incstack = 0
  1087  000CB4  0E02               	movlw	2
  1088  000CB6  ECBF  F005         	call	_ENVIA_LCD_CMD
  1089  000CBA  0012               	return		;funcret
  1090  000CBC                     __end_of_CURSOR_HOME:
  1091                           	opt callstack 0
  1092                           
  1093 ;; *************** function _BORRAR_LCD *****************
  1094 ;; Defined at:
  1095 ;;		line 67 in file "LCD.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;		None
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;		None
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      void 
  1102 ;; Registers used:
  1103 ;;		wreg, status,2, status,0, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1109 ;;      Params:         0       0       0       0       0       0       0       0       0
  1110 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1111 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1112 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1113 ;;Total ram usage:        0 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; Hardware stack levels required when called:    2
  1116 ;; This function calls:
  1117 ;;		_ENVIA_LCD_CMD
  1118 ;; This function is called by:
  1119 ;;		_configura_lcd
  1120 ;; This function uses a non-reentrant model
  1121 ;;
  1122                           
  1123                           	psect	text9
  1124  000CBC                     __ptext9:
  1125                           	opt callstack 0
  1126  000CBC                     _BORRAR_LCD:
  1127                           	opt callstack 27
  1128                           
  1129                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1130                           
  1131                           ;incstack = 0
  1132  000CBC  0E01               	movlw	1
  1133  000CBE  ECBF  F005         	call	_ENVIA_LCD_CMD
  1134  000CC2  0012               	return		;funcret
  1135  000CC4                     __end_of_BORRAR_LCD:
  1136                           	opt callstack 0
  1137                           
  1138 ;; *************** function _POS_CURSOR *****************
  1139 ;; Defined at:
  1140 ;;		line 6 in file "LCD.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;  fila            1    wreg     unsigned char 
  1143 ;;  columna         1    3[COMRAM] unsigned char 
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;  fila            1    4[COMRAM] unsigned char 
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      void 
  1148 ;; Registers used:
  1149 ;;		wreg, status,2, status,0, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1155 ;;      Params:         1       0       0       0       0       0       0       0       0
  1156 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1157 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1158 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1159 ;;Total ram usage:        2 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    2
  1162 ;; This function calls:
  1163 ;;		_ENVIA_LCD_CMD
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text10
  1170  000C3E                     __ptext10:
  1171                           	opt callstack 0
  1172  000C3E                     _POS_CURSOR:
  1173                           	opt callstack 28
  1174                           
  1175                           ;incstack = 0
  1176                           ;POS_CURSOR@fila stored from wreg
  1177  000C3E  6E05               	movwf	POS_CURSOR@fila,c
  1178                           
  1179                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1180  000C40  0405               	decf	POS_CURSOR@fila,w,c
  1181  000C42  A4D8               	btfss	status,2,c
  1182  000C44  D005               	goto	l1183
  1183                           
  1184                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1185  000C46  5004               	movf	POS_CURSOR@columna,w,c
  1186  000C48  0F80               	addlw	128
  1187  000C4A  ECBF  F005         	call	_ENVIA_LCD_CMD
  1188                           
  1189                           ;LCD.c: 11:  }
  1190  000C4E  0012               	return	
  1191  000C50                     l1183:
  1192  000C50  0E02               	movlw	2
  1193  000C52  1805               	xorwf	POS_CURSOR@fila,w,c
  1194  000C54  A4D8               	btfss	status,2,c
  1195  000C56  0012               	return	
  1196                           
  1197                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1198  000C58  5004               	movf	POS_CURSOR@columna,w,c
  1199  000C5A  0FC0               	addlw	192
  1200  000C5C  ECBF  F005         	call	_ENVIA_LCD_CMD
  1201  000C60  0012               	return		;funcret
  1202  000C62                     __end_of_POS_CURSOR:
  1203                           	opt callstack 0
  1204                           
  1205 ;; *************** function _ENVIA_LCD_CMD *****************
  1206 ;; Defined at:
  1207 ;;		line 104 in file "LCD.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;  dato            1    wreg     unsigned char 
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;  dato            1    1[COMRAM] unsigned char 
  1212 ;;  aux             1    2[COMRAM] unsigned char 
  1213 ;; Return value:  Size  Location     Type
  1214 ;;                  1    wreg      void 
  1215 ;; Registers used:
  1216 ;;		wreg, status,2, status,0, cstack
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1222 ;;      Params:         0       0       0       0       0       0       0       0       0
  1223 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1224 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1225 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1226 ;;Total ram usage:        2 bytes
  1227 ;; Hardware stack levels used:    1
  1228 ;; Hardware stack levels required when called:    1
  1229 ;; This function calls:
  1230 ;;		_ENVIA_NIBBLE
  1231 ;;		_LEER_LCD
  1232 ;; This function is called by:
  1233 ;;		_POS_CURSOR
  1234 ;;		_CURSOR_HOME
  1235 ;;		_CURSOR_ONOFF
  1236 ;;		_BORRAR_LCD
  1237 ;;		_LCD_CONFIG
  1238 ;;		_BLINK_CURSOR
  1239 ;;		_DISPLAY_ONOFF
  1240 ;;		_GENERACARACTER
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           	psect	text11
  1245  000B7E                     __ptext11:
  1246                           	opt callstack 0
  1247  000B7E                     _ENVIA_LCD_CMD:
  1248                           	opt callstack 27
  1249                           
  1250                           ;incstack = 0
  1251                           ;ENVIA_LCD_CMD@dato stored from wreg
  1252  000B7E  6E02               	movwf	ENVIA_LCD_CMD@dato,c
  1253                           
  1254                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1255  000B80  908C               	bcf	3980,0,c	;volatile
  1256                           
  1257                           ;LCD.c: 108:  LEER_LCD();
  1258  000B82  EC19  F005         	call	_LEER_LCD	;wreg free
  1259                           
  1260                           ;LCD.c: 109:  TRISD = 0b00000000;
  1261  000B86  0E00               	movlw	0
  1262  000B88  6E95               	movwf	3989,c	;volatile
  1263                           
  1264                           ;LCD.c: 111:         _delay(1200);
  1265  000B8A  0EF0               	movlw	240
  1266  000B8C                     u407:
  1267  000B8C  D000               	nop2	
  1268  000B8E  2EE8               	decfsz	wreg,f,c
  1269  000B90  D7FD               	bra	u407
  1270                           
  1271                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1272  000B92  928C               	bcf	3980,1,c	;volatile
  1273                           
  1274                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1275  000B94  948C               	bcf	3980,2,c	;volatile
  1276                           
  1277                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1278  000B96  908C               	bcf	3980,0,c	;volatile
  1279                           
  1280                           ;LCD.c: 115:  aux = dato & 0xF0;
  1281  000B98  5002               	movf	ENVIA_LCD_CMD@dato,w,c
  1282  000B9A  0BF0               	andlw	240
  1283  000B9C  6E03               	movwf	ENVIA_LCD_CMD@aux,c
  1284                           
  1285                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1286  000B9E  5003               	movf	ENVIA_LCD_CMD@aux,w,c
  1287  000BA0  EC3F  F006         	call	_ENVIA_NIBBLE
  1288                           
  1289                           ;LCD.c: 117:  aux = dato<<4;
  1290  000BA4  3802               	swapf	ENVIA_LCD_CMD@dato,w,c
  1291  000BA6  0BF0               	andlw	240
  1292  000BA8  6E03               	movwf	ENVIA_LCD_CMD@aux,c
  1293                           
  1294                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1295  000BAA  5003               	movf	ENVIA_LCD_CMD@aux,w,c
  1296  000BAC  EC3F  F006         	call	_ENVIA_NIBBLE
  1297  000BB0  0012               	return		;funcret
  1298  000BB2                     __end_of_ENVIA_LCD_CMD:
  1299                           	opt callstack 0
  1300                           
  1301 ;; *************** function _ESCRIBE_MENSAJE *****************
  1302 ;; Defined at:
  1303 ;;		line 41 in file "LCD.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1306 ;;		 -> STR_2(11), STR_1(12), 
  1307 ;;  tam             1    5[COMRAM] unsigned char 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;  i               1    8[COMRAM] unsigned char 
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1319 ;;      Params:         3       0       0       0       0       0       0       0       0
  1320 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1321 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1322 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1323 ;;Total ram usage:        6 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; Hardware stack levels required when called:    2
  1326 ;; This function calls:
  1327 ;;		_ENVIA_CHAR
  1328 ;; This function is called by:
  1329 ;;		_main
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text12
  1334  000BE6                     __ptext12:
  1335                           	opt callstack 0
  1336  000BE6                     _ESCRIBE_MENSAJE:
  1337                           	opt callstack 28
  1338                           
  1339                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1340                           
  1341                           ;incstack = 0
  1342  000BE6  0E00               	movlw	0
  1343  000BE8  6E09               	movwf	ESCRIBE_MENSAJE@i,c
  1344                           
  1345                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1346  000BEA  0E00               	movlw	0
  1347  000BEC  6E09               	movwf	ESCRIBE_MENSAJE@i,c
  1348  000BEE  D00F               	goto	l1193
  1349  000BF0                     l1189:
  1350                           
  1351                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1352  000BF0  5009               	movf	ESCRIBE_MENSAJE@i,w,c
  1353  000BF2  2404               	addwf	ESCRIBE_MENSAJE@cadena,w,c
  1354  000BF4  6E07               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
  1355  000BF6  0E00               	movlw	0
  1356  000BF8  2005               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
  1357  000BFA  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
  1358  000BFC  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1359  000C00  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1360  000C04                     	if	0	;tblptru may be non-zero
  1361  000C04                     	endif
  1362  000C04                     	if	0	;tblptru may be non-zero
  1363  000C04                     	endif
  1364  000C04  0008               	tblrd		*
  1365  000C06  50F5               	movf	tablat,w,c
  1366  000C08  ECD9  F005         	call	_ENVIA_CHAR
  1367                           
  1368                           ;LCD.c: 47:  }
  1369  000C0C  2A09               	incf	ESCRIBE_MENSAJE@i,f,c
  1370  000C0E                     l1193:
  1371  000C0E  5006               	movf	ESCRIBE_MENSAJE@tam,w,c
  1372  000C10  5C09               	subwf	ESCRIBE_MENSAJE@i,w,c
  1373  000C12  B0D8               	btfsc	status,0,c
  1374  000C14  0012               	return	
  1375  000C16  D7EC               	goto	l1189
  1376  000C18                     __end_of_ESCRIBE_MENSAJE:
  1377                           	opt callstack 0
  1378                           
  1379 ;; *************** function _ENVIA_CHAR *****************
  1380 ;; Defined at:
  1381 ;;		line 50 in file "LCD.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  dato            1    wreg     unsigned char 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  dato            1    1[COMRAM] unsigned char 
  1386 ;;  aux             1    2[COMRAM] unsigned char 
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1    wreg      void 
  1389 ;; Registers used:
  1390 ;;		wreg, status,2, status,0, cstack
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1396 ;;      Params:         0       0       0       0       0       0       0       0       0
  1397 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1398 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1399 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1400 ;;Total ram usage:        2 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; Hardware stack levels required when called:    1
  1403 ;; This function calls:
  1404 ;;		_ENVIA_NIBBLE
  1405 ;;		_LEER_LCD
  1406 ;; This function is called by:
  1407 ;;		_ESCRIBE_MENSAJE
  1408 ;;		_main
  1409 ;;		_GENERACARACTER
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text13
  1414  000BB2                     __ptext13:
  1415                           	opt callstack 0
  1416  000BB2                     _ENVIA_CHAR:
  1417                           	opt callstack 28
  1418                           
  1419                           ;incstack = 0
  1420                           ;ENVIA_CHAR@dato stored from wreg
  1421  000BB2  6E02               	movwf	ENVIA_CHAR@dato,c
  1422                           
  1423                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1424  000BB4  808C               	bsf	3980,0,c	;volatile
  1425                           
  1426                           ;LCD.c: 54:  LEER_LCD();
  1427  000BB6  EC19  F005         	call	_LEER_LCD	;wreg free
  1428                           
  1429                           ;LCD.c: 55:  TRISD = 0x00;
  1430  000BBA  0E00               	movlw	0
  1431  000BBC  6E95               	movwf	3989,c	;volatile
  1432                           
  1433                           ;LCD.c: 56:         _delay(1200);
  1434  000BBE  0EF0               	movlw	240
  1435  000BC0                     u417:
  1436  000BC0  D000               	nop2	
  1437  000BC2  2EE8               	decfsz	wreg,f,c
  1438  000BC4  D7FD               	bra	u417
  1439                           
  1440                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1441  000BC6  928C               	bcf	3980,1,c	;volatile
  1442                           
  1443                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1444  000BC8  948C               	bcf	3980,2,c	;volatile
  1445                           
  1446                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1447  000BCA  808C               	bsf	3980,0,c	;volatile
  1448                           
  1449                           ;LCD.c: 61:  aux = dato & 0xF0;
  1450  000BCC  5002               	movf	ENVIA_CHAR@dato,w,c
  1451  000BCE  0BF0               	andlw	240
  1452  000BD0  6E03               	movwf	ENVIA_CHAR@aux,c
  1453                           
  1454                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1455  000BD2  5003               	movf	ENVIA_CHAR@aux,w,c
  1456  000BD4  EC3F  F006         	call	_ENVIA_NIBBLE
  1457                           
  1458                           ;LCD.c: 63:  aux = dato << 4;
  1459  000BD8  3802               	swapf	ENVIA_CHAR@dato,w,c
  1460  000BDA  0BF0               	andlw	240
  1461  000BDC  6E03               	movwf	ENVIA_CHAR@aux,c
  1462                           
  1463                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1464  000BDE  5003               	movf	ENVIA_CHAR@aux,w,c
  1465  000BE0  EC3F  F006         	call	_ENVIA_NIBBLE
  1466  000BE4  0012               	return		;funcret
  1467  000BE6                     __end_of_ENVIA_CHAR:
  1468                           	opt callstack 0
  1469                           
  1470 ;; *************** function _LEER_LCD *****************
  1471 ;; Defined at:
  1472 ;;		line 121 in file "LCD.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;		None
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;  aux             1    0[COMRAM] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      void 
  1479 ;; Registers used:
  1480 ;;		wreg, status,2, status,0
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1486 ;;      Params:         0       0       0       0       0       0       0       0       0
  1487 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1488 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1489 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1490 ;;Total ram usage:        1 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		_ENVIA_CHAR
  1496 ;;		_ENVIA_LCD_CMD
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text14
  1501  000A32                     __ptext14:
  1502                           	opt callstack 0
  1503  000A32                     _LEER_LCD:
  1504                           	opt callstack 27
  1505                           
  1506                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1507                           
  1508                           ;incstack = 0
  1509  000A32  0EF8               	movlw	248
  1510  000A34  6E95               	movwf	3989,c	;volatile
  1511                           
  1512                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1513  000A36  908C               	bcf	3980,0,c	;volatile
  1514                           
  1515                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1516  000A38  828C               	bsf	3980,1,c	;volatile
  1517                           
  1518                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1519  000A3A  848C               	bsf	3980,2,c	;volatile
  1520                           
  1521                           ;LCD.c: 128:         _delay(1200);
  1522  000A3C  0EF0               	movlw	240
  1523  000A3E                     u427:
  1524  000A3E  D000               	nop2	
  1525  000A40  2EE8               	decfsz	wreg,f,c
  1526  000A42  D7FD               	bra	u427
  1527                           
  1528                           ;LCD.c: 130:  aux = PORTD;
  1529  000A44  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1530                           
  1531                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1532  000A48  948C               	bcf	3980,2,c	;volatile
  1533                           
  1534                           ;LCD.c: 132:         _delay(1200);
  1535  000A4A  0EF0               	movlw	240
  1536  000A4C                     u437:
  1537  000A4C  D000               	nop2	
  1538  000A4E  2EE8               	decfsz	wreg,f,c
  1539  000A50  D7FD               	bra	u437
  1540                           
  1541                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1542  000A52  848C               	bsf	3980,2,c	;volatile
  1543                           
  1544                           ;LCD.c: 135:         _delay(1200);
  1545  000A54  0EF0               	movlw	240
  1546  000A56                     u447:
  1547  000A56  D000               	nop2	
  1548  000A58  2EE8               	decfsz	wreg,f,c
  1549  000A5A  D7FD               	bra	u447
  1550  000A5C                     l829:
  1551                           
  1552                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1553  000A5C  948C               	bcf	3980,2,c	;volatile
  1554                           
  1555                           ;LCD.c: 138:  aux = aux & 0x80;
  1556  000A5E  5001               	movf	LEER_LCD@aux,w,c
  1557  000A60  0B80               	andlw	128
  1558  000A62  6E01               	movwf	LEER_LCD@aux,c
  1559                           
  1560                           ;LCD.c: 139:  while(aux == 0x80)
  1561  000A64  D012               	goto	l845
  1562  000A66                     l67:
  1563                           
  1564                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1565  000A66  848C               	bsf	3980,2,c	;volatile
  1566                           
  1567                           ;LCD.c: 142:             _delay(1200);
  1568  000A68  0EF0               	movlw	240
  1569  000A6A                     u457:
  1570  000A6A  D000               	nop2	
  1571  000A6C  2EE8               	decfsz	wreg,f,c
  1572  000A6E  D7FD               	bra	u457
  1573                           
  1574                           ;LCD.c: 143:             aux = PORTD;
  1575  000A70  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1576                           
  1577                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1578  000A74  948C               	bcf	3980,2,c	;volatile
  1579                           
  1580                           ;LCD.c: 145:             _delay(1200);
  1581  000A76  0EF0               	movlw	240
  1582  000A78                     u467:
  1583  000A78  D000               	nop2	
  1584  000A7A  2EE8               	decfsz	wreg,f,c
  1585  000A7C  D7FD               	bra	u467
  1586                           
  1587                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1588  000A7E  848C               	bsf	3980,2,c	;volatile
  1589                           
  1590                           ;LCD.c: 147:             _delay(1200);
  1591  000A80  0EF0               	movlw	240
  1592  000A82                     u477:
  1593  000A82  D000               	nop2	
  1594  000A84  2EE8               	decfsz	wreg,f,c
  1595  000A86  D7FD               	bra	u477
  1596  000A88  D7E9               	goto	l829
  1597  000A8A                     l845:
  1598                           
  1599                           ;LCD.c: 139:  while(aux == 0x80)
  1600  000A8A  0E80               	movlw	128
  1601  000A8C  1801               	xorwf	LEER_LCD@aux,w,c
  1602  000A8E  A4D8               	btfss	status,2,c
  1603  000A90  0012               	return	
  1604  000A92  D7E9               	goto	l67
  1605  000A94                     __end_of_LEER_LCD:
  1606                           	opt callstack 0
  1607                           
  1608 ;; *************** function _ENVIA_NIBBLE *****************
  1609 ;; Defined at:
  1610 ;;		line 93 in file "LCD.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  dato            1    wreg     unsigned char 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  dato            1    0[COMRAM] unsigned char 
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		wreg, status,2, status,0
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1624 ;;      Params:         0       0       0       0       0       0       0       0       0
  1625 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1627 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1628 ;;Total ram usage:        1 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; This function calls:
  1631 ;;		Nothing
  1632 ;; This function is called by:
  1633 ;;		_ENVIA_CHAR
  1634 ;;		_LCD_CONFIG
  1635 ;;		_ENVIA_LCD_CMD
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text15
  1640  000C7E                     __ptext15:
  1641                           	opt callstack 0
  1642  000C7E                     _ENVIA_NIBBLE:
  1643                           	opt callstack 28
  1644                           
  1645                           ;incstack = 0
  1646                           ;ENVIA_NIBBLE@dato stored from wreg
  1647  000C7E  6E01               	movwf	ENVIA_NIBBLE@dato,c
  1648                           
  1649                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1650  000C80  0E0F               	movlw	15
  1651  000C82  168C               	andwf	3980,f,c	;volatile
  1652                           
  1653                           ;LCD.c: 96:  dato &= 0xF0;
  1654  000C84  0EF0               	movlw	240
  1655  000C86  1601               	andwf	ENVIA_NIBBLE@dato,f,c
  1656                           
  1657                           ;LCD.c: 97:  LATD|= dato;
  1658  000C88  5001               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1659  000C8A  128C               	iorwf	3980,f,c	;volatile
  1660                           
  1661                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1662  000C8C  848C               	bsf	3980,2,c	;volatile
  1663                           
  1664                           ;LCD.c: 100:         _delay(1200);
  1665  000C8E  0EF0               	movlw	240
  1666  000C90                     u487:
  1667  000C90  D000               	nop2	
  1668  000C92  2EE8               	decfsz	wreg,f,c
  1669  000C94  D7FD               	bra	u487
  1670                           
  1671                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1672  000C96  948C               	bcf	3980,2,c	;volatile
  1673  000C98  0012               	return		;funcret
  1674  000C9A                     __end_of_ENVIA_NIBBLE:
  1675                           	opt callstack 0
  1676                           
  1677                           	psect	rparam
  1678  0000                     tosu	equ	0xFFF
  1679                           tosh	equ	0xFFE
  1680                           tosl	equ	0xFFD
  1681                           stkptr	equ	0xFFC
  1682                           pclatu	equ	0xFFB
  1683                           pclath	equ	0xFFA
  1684                           pcl	equ	0xFF9
  1685                           tblptru	equ	0xFF8
  1686                           tblptrh	equ	0xFF7
  1687                           tblptrl	equ	0xFF6
  1688                           tablat	equ	0xFF5
  1689                           prodh	equ	0xFF4
  1690                           prodl	equ	0xFF3
  1691                           indf0	equ	0xFEF
  1692                           postinc0	equ	0xFEE
  1693                           postdec0	equ	0xFED
  1694                           preinc0	equ	0xFEC
  1695                           plusw0	equ	0xFEB
  1696                           fsr0h	equ	0xFEA
  1697                           fsr0l	equ	0xFE9
  1698                           wreg	equ	0xFE8
  1699                           indf1	equ	0xFE7
  1700                           postinc1	equ	0xFE6
  1701                           postdec1	equ	0xFE5
  1702                           preinc1	equ	0xFE4
  1703                           plusw1	equ	0xFE3
  1704                           fsr1h	equ	0xFE2
  1705                           fsr1l	equ	0xFE1
  1706                           bsr	equ	0xFE0
  1707                           indf2	equ	0xFDF
  1708                           postinc2	equ	0xFDE
  1709                           postdec2	equ	0xFDD
  1710                           preinc2	equ	0xFDC
  1711                           plusw2	equ	0xFDB
  1712                           fsr2h	equ	0xFDA
  1713                           fsr2l	equ	0xFD9
  1714                           status	equ	0xFD8


Data Sizes:
    Strings     23
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      29
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[11]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_digitos
    _digitos->___lwdiv
    ___lwdiv->___wmul
    _configura_lcd->_CURSOR_ONOFF
    _configura_lcd->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3673
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                      _configura_lcd
                            _digitos
 ---------------------------------------------------------------------------------
 (1) _digitos                                              4     2      2    2153
                                             13 COMRAM     4     2      2
                            ___awdiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1071
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _configura_lcd                                        1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configura_lcd
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE
   _digitos
     ___awdiv
     ___lwdiv
       ___wmul (ARG)
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     11      1D       1       30.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1D      20        0.0%
DATA                 0      0      1D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Oct 15 21:11:38 2019

                      l67 0A66              ___awdiv@sign 0006            ?_configura_lcd 0001  
     ___wmul@multiplicand 0003               __CFG_BORV$3 000000        __CFG_FOSC$XTPLL_XT 000000  
           ENVIA_CHAR@aux 0003                       l128 0960                       l627 0B3C  
                     l845 0A8A                       l829 0A5C                       l883 0C70  
                     u250 09F4                       u407 0B8C                       u417 0BC0  
                     u290 0B16                       u427 0A3E                       u437 0A4C  
                     u357 0B50                       u447 0A56                       u367 0B64  
                     u457 0A6A                       u377 0AA4                       u467 0A78  
                     u387 0AB2                       u477 0A82                       u397 0AC2  
                     u487 0C90              __CFG_BOR$OFF 000000               LEER_LCD@aux 0001  
                     wreg 000FE8              ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001  
            __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0002              __CFG_WDT$OFF 000000  
                    l1121 09C2                      l1133 09E8                      l1135 09F0  
                    l1127 09D2                      l1215 095E                      l1153 0A28  
                    l1145 0A10                      l1163 0B0A                      l1149 0A1A  
                    l1165 0B12                      l1183 0C50                      l1175 0B32  
                    l1193 0C0E                      l1189 0BF0                      STR_1 0801  
                    STR_2 080D                      _LATD 000F8C              __CFG_PWRT$ON 000000  
                    _main 0924                      prodh 000FF4                      prodl 000FF3  
                    start 0000             ?_CURSOR_ONOFF 0001             __CFG_MCLRE$ON 000000  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0002          __end_of_LEER_LCD 0A94  
     __size_of_BORRAR_LCD 0008             __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000  
                   ?_main 0001           __end_of___awdiv 0A32           ___awdiv@divisor 0003  
         __end_of___lwdiv 0B46           ___awdiv@counter 0005                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISD 000F95       __size_of_ENVIA_CHAR 0034  
         __end_of_digitos 0924               ?_POS_CURSOR 0004                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0004           __initialization 0C9A  
            __end_of_main 09AE           ??_configura_lcd 0005           _ESCRIBE_MENSAJE 0BE6  
                  ??_main 0012             __activetblptr 000001                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  _ADRESL 000FC3          ___awdiv@dividend 0001                    ___wmul 0C18  
               ??___awdiv 0005                    _decena 0016      __end_of_ENVIA_NIBBLE 0C9A  
               ??___lwdiv 000B                    _cuenta 001C       __size_of_POS_CURSOR 0024  
                  _millar 001A                    clear_0 0CA0          ___awdiv@quotient 0007  
               ??_digitos 0010                    _unidad 0014              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
            ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0001  
              __accesstop 0060   __end_of__initialization 0CA6           __CFG_PBADEN$OFF 000000  
            ??_LCD_CONFIG 0004             ___rparam_used 000001              ??_ENVIA_CHAR 0002  
 __end_of_ESCRIBE_MENSAJE 0C18            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0CC4  
        ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0C7E        __end_of_LCD_CONFIG 0AF4  
      __end_of_ENVIA_CHAR 0BE6                ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001  
                 ?___wmul 0001              ??_POS_CURSOR 0005                _conversion 0012  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0004                   ___awdiv 09AE           __size_of___wmul 0026  
                 ___lwdiv 0AF4              __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0BB2  
                 __pcinit 0C9A        __end_of_POS_CURSOR 0C62                   __ramtop 0800  
                 _centena 0018                   _digitos 081A                   __ptext0 0924  
                 __ptext1 081A                   __ptext2 0C18                   __ptext3 0AF4  
                 __ptext4 09AE                   __ptext5 0B46                   __ptext6 0A94  
                 __ptext7 0C62                   __ptext8 0CB4                   __ptext9 0CBC  
            _ENVIA_NIBBLE 0C7E      end_of_initialization 0CA6                   postinc0 000FEE  
   __end_of_configura_lcd 0B7E     __size_of_CURSOR_ONOFF 001C         __size_of_LEER_LCD 0062  
            _CURSOR_ONOFF 0C62        CURSOR_ONOFF@estado 0004            __end_of___wmul 0C3E  
           ??_CURSOR_HOME 0004       start_initialization 0C9A         ENVIA_LCD_CMD@dato 0002  
                ??___wmul 0005          __CFG_LPT1OSC$OFF 000000               __pbssCOMRAM 0012  
     __end_of_CURSOR_HOME 0CBC          ___lwdiv@dividend 0007                  ?___awdiv 0001  
                ?___lwdiv 0007                  ?_digitos 000E               __smallconst 0800  
        ___lwdiv@quotient 000B                  _LEER_LCD 0A32            ___wmul@product 0005  
                _LATDbits 000F8C          __CFG_WDTPS$32768 000000          ESCRIBE_MENSAJE@i 0009  
          POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 0032                _ADCON0bits 000FC2  
       ___wmul@multiplier 0001               _CURSOR_HOME 0CB4    __size_of_ENVIA_LCD_CMD 0034  
                __Hrparam 0000             digitos@numero 000E                  __Lrparam 0000  
            __Lsmallconst 0800          __size_of___awdiv 0084          __size_of___lwdiv 0052  
        __size_of_digitos 010A           ___lwdiv@divisor 0009           ___lwdiv@counter 000D  
                __ptext10 0C3E                  __ptext11 0B7E                  __ptext12 0BE6  
                __ptext13 0BB2                  __ptext14 0A32                  __ptext15 0C7E  
              _BORRAR_LCD 0CBC    __size_of_configura_lcd 0038             __size_of_main 008A  
              _LCD_CONFIG 0A94                _ENVIA_CHAR 0BB2             _ENVIA_LCD_CMD 0B7E  
   __CFG_CPUDIV$OSC1_PLL2 000000         ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004  
          ?_ENVIA_LCD_CMD 0001             _configura_lcd 0B46               ?_BORRAR_LCD 0001  
           ?_ENVIA_NIBBLE 0001                _POS_CURSOR 0C3E               ?_LCD_CONFIG 0001  
      ESCRIBE_MENSAJE@tam 0006               ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
