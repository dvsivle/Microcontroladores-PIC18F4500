

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Oct 16 08:16:52 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           ; Version 2.05
    27                           ; Generated 20/12/2018 GMT
    28                           ; 
    29                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     _LATEbits	set	3981
    61  0000                     _TRISEbits	set	3990
    62  0000                     _ADCON1	set	4033
    63  0000                     _INTCON3bits	set	4080
    64  0000                     _INTCONbits	set	4082
    65  0000                     _PORTD	set	3971
    66  0000                     _LATD	set	3980
    67  0000                     _TRISD	set	3989
    68  0000                     _LATDbits	set	3980
    69                           
    70                           	psect	smallconst
    71  000800                     __psmallconst:
    72                           	opt callstack 0
    73  000800  00                 	db	0
    74  000801                     STR_6:
    75  000801  53                 	db	83	;'S'
    76  000802  65                 	db	101	;'e'
    77  000803  72                 	db	114	;'r'
    78  000804  76                 	db	118	;'v'
    79  000805  6F                 	db	111	;'o'
    80  000806  20                 	db	32
    81  000807  61                 	db	97	;'a'
    82  000808  20                 	db	32
    83  000809  31                 	db	49	;'1'
    84  00080A  38                 	db	56	;'8'
    85  00080B  30                 	db	48	;'0'
    86  00080C  00                 	db	0
    87  00080D                     STR_2:
    88  00080D  53                 	db	83	;'S'
    89  00080E  65                 	db	101	;'e'
    90  00080F  72                 	db	114	;'r'
    91  000810  76                 	db	118	;'v'
    92  000811  6F                 	db	111	;'o'
    93  000812  20                 	db	32
    94  000813  61                 	db	97	;'a'
    95  000814  20                 	db	32
    96  000815  39                 	db	57	;'9'
    97  000816  30                 	db	48	;'0'
    98  000817  00                 	db	0
    99  000818                     STR_1:
   100  000818  48                 	db	72	;'H'
   101  000819  6F                 	db	111	;'o'
   102  00081A  6C                 	db	108	;'l'
   103  00081B  61                 	db	97	;'a'
   104  00081C  20                 	db	32
   105  00081D  6D                 	db	109	;'m'
   106  00081E  75                 	db	117	;'u'
   107  00081F  6E                 	db	110	;'n'
   108  000820  64                 	db	100	;'d'
   109  000821  6F                 	db	111	;'o'
   110  000822  00                 	db	0
   111  000823                     STR_4:
   112  000823  53                 	db	83	;'S'
   113  000824  65                 	db	101	;'e'
   114  000825  72                 	db	114	;'r'
   115  000826  76                 	db	118	;'v'
   116  000827  6F                 	db	111	;'o'
   117  000828  20                 	db	32
   118  000829  61                 	db	97	;'a'
   119  00082A  20                 	db	32
   120  00082B  30                 	db	48	;'0'
   121  00082C  00                 	db	0
   122  00082D                     STR_3:
   123  00082D  20                 	db	32
   124  00082E  20                 	db	32
   125  00082F  20                 	db	32
   126  000830  20                 	db	32
   127  000831  20                 	db	32
   128  000832  00                 	db	0
   129  0000                     
   130                           ; #config settings
   131  000833  00                 	db	0	; dummy byte at the end
   132  0000                     
   133                           	psect	cinit
   134  000B9E                     __pcinit:
   135                           	opt callstack 0
   136  000B9E                     start_initialization:
   137                           	opt callstack 0
   138  000B9E                     __initialization:
   139                           	opt callstack 0
   140                           
   141                           ; Clear objects allocated to COMRAM (1 bytes)
   142  000B9E  6A0C               	clrf	__pbssCOMRAM& (0+255),c
   143  000BA0                     end_of_initialization:
   144                           	opt callstack 0
   145  000BA0                     __end_of__initialization:
   146                           	opt callstack 0
   147  000BA0  900D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   148  000BA2  920D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   149  000BA4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   150  000BA6  6EF8               	movwf	tblptru,c
   151  000BA8  0100               	movlb	0
   152  000BAA  EF1A  F004         	goto	_main	;jump to C main() function
   153                           
   154                           	psect	bssCOMRAM
   155  00000C                     __pbssCOMRAM:
   156                           	opt callstack 0
   157  00000C                     _estado:
   158                           	opt callstack 0
   159  00000C                     	ds	1
   160                           
   161                           	psect	cstackCOMRAM
   162  000001                     __pcstackCOMRAM:
   163                           	opt callstack 0
   164  000001                     ENVIA_NIBBLE@dato:
   165                           	opt callstack 0
   166  000001                     LEER_LCD@aux:
   167                           	opt callstack 0
   168                           
   169                           ; 1 bytes @ 0x0
   170  000001                     	ds	1
   171  000002                     ENVIA_CHAR@dato:
   172                           	opt callstack 0
   173  000002                     ENVIA_LCD_CMD@dato:
   174                           	opt callstack 0
   175                           
   176                           ; 1 bytes @ 0x1
   177  000002                     	ds	1
   178  000003                     ENVIA_CHAR@aux:
   179                           	opt callstack 0
   180  000003                     ENVIA_LCD_CMD@aux:
   181                           	opt callstack 0
   182                           
   183                           ; 1 bytes @ 0x2
   184  000003                     	ds	1
   185  000004                     ??_LCD_CONFIG:
   186  000004                     POS_CURSOR@columna:
   187                           	opt callstack 0
   188  000004                     CURSOR_ONOFF@estado:
   189                           	opt callstack 0
   190  000004                     ESCRIBE_MENSAJE@cadena:
   191                           	opt callstack 0
   192                           
   193                           ; 2 bytes @ 0x3
   194  000004                     	ds	1
   195  000005                     POS_CURSOR@fila:
   196                           	opt callstack 0
   197                           
   198                           ; 1 bytes @ 0x4
   199  000005                     	ds	1
   200  000006                     ESCRIBE_MENSAJE@tam:
   201                           	opt callstack 0
   202                           
   203                           ; 1 bytes @ 0x5
   204  000006                     	ds	1
   205  000007                     ??_ESCRIBE_MENSAJE:
   206                           
   207                           ; 1 bytes @ 0x6
   208  000007                     	ds	2
   209  000009                     ESCRIBE_MENSAJE@i:
   210                           	opt callstack 0
   211                           
   212                           ; 1 bytes @ 0x8
   213  000009                     	ds	1
   214  00000A                     ??_main:
   215                           
   216                           ; 1 bytes @ 0x9
   217  00000A                     	ds	2
   218                           
   219 ;;
   220 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   221 ;;
   222 ;; *************** function _main *****************
   223 ;; Defined at:
   224 ;;		line 23 in file "newmain_2.c"
   225 ;; Parameters:    Size  Location     Type
   226 ;;		None
   227 ;; Auto vars:     Size  Location     Type
   228 ;;		None
   229 ;; Return value:  Size  Location     Type
   230 ;;                  1    wreg      void 
   231 ;; Registers used:
   232 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   233 ;; Tracked objects:
   234 ;;		On entry : 0/0
   235 ;;		On exit  : 0/0
   236 ;;		Unchanged: 0/0
   237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   238 ;;      Params:         0       0       0       0       0       0       0       0       0
   239 ;;      Locals:         0       0       0       0       0       0       0       0       0
   240 ;;      Temps:          2       0       0       0       0       0       0       0       0
   241 ;;      Totals:         2       0       0       0       0       0       0       0       0
   242 ;;Total ram usage:        2 bytes
   243 ;; Hardware stack levels required when called:    4
   244 ;; This function calls:
   245 ;;		_BORRAR_LCD
   246 ;;		_CURSOR_HOME
   247 ;;		_CURSOR_ONOFF
   248 ;;		_ENVIA_CHAR
   249 ;;		_ESCRIBE_MENSAJE
   250 ;;		_LCD_CONFIG
   251 ;;		_POS_CURSOR
   252 ;; This function is called by:
   253 ;;		Startup code after reset
   254 ;; This function uses a non-reentrant model
   255 ;;
   256                           
   257                           	psect	text0
   258  000834                     __ptext0:
   259                           	opt callstack 0
   260  000834                     _main:
   261                           	opt callstack 27
   262                           
   263                           ;newmain_2.c: 24:     INTCONbits.GIE = 1;
   264                           
   265                           ;incstack = 0
   266  000834  8EF2               	bsf	4082,7,c	;volatile
   267                           
   268                           ;newmain_2.c: 26:     INTCONbits.INT0E = 1;
   269  000836  88F2               	bsf	4082,4,c	;volatile
   270                           
   271                           ;newmain_2.c: 27:     INTCON3bits.INT1E = 1;
   272  000838  86F0               	bsf	4080,3,c	;volatile
   273                           
   274                           ;newmain_2.c: 28:     ADCON1 = 0x0F;
   275  00083A  0E0F               	movlw	15
   276  00083C  6EC1               	movwf	4033,c	;volatile
   277                           
   278                           ;newmain_2.c: 29:     TRISEbits.RE0 = 0;
   279  00083E  9096               	bcf	3990,0,c	;volatile
   280                           
   281                           ;newmain_2.c: 30:     TRISD = 0x00;
   282  000840  0E00               	movlw	0
   283  000842  6E95               	movwf	3989,c	;volatile
   284                           
   285                           ;newmain_2.c: 31:     LCD_CONFIG();
   286  000844  EC16  F005         	call	_LCD_CONFIG	;wreg free
   287                           
   288                           ;newmain_2.c: 32:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   289  000848  0EEA               	movlw	234
   290  00084A  6E0A               	movwf	??_main& (0+255),c
   291  00084C  0EC3               	movlw	195
   292  00084E                     u237:
   293  00084E  2EE8               	decfsz	wreg,f,c
   294  000850  D7FE               	bra	u237
   295  000852  2E0A               	decfsz	??_main& (0+255),f,c
   296  000854  D7FC               	bra	u237
   297  000856  F000               	nop	
   298                           
   299                           ;newmain_2.c: 33:     CURSOR_ONOFF(1);
   300  000858  0E01               	movlw	1
   301  00085A  ECA5  F005         	call	_CURSOR_ONOFF
   302                           
   303                           ;newmain_2.c: 34:     BORRAR_LCD();
   304  00085E  ECDB  F005         	call	_BORRAR_LCD	;wreg free
   305                           
   306                           ;newmain_2.c: 35:     CURSOR_HOME();
   307  000862  ECD7  F005         	call	_CURSOR_HOME	;wreg free
   308                           
   309                           ;newmain_2.c: 36:     ESCRIBE_MENSAJE("Hola mundo", 10);
   310  000866  0E18               	movlw	low STR_1
   311  000868  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   312  00086A  0E08               	movlw	high STR_1
   313  00086C  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   314  00086E  0E0A               	movlw	10
   315  000870  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   316  000872  EC7A  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   317  000876  D097               	goto	u220
   318  000878                     l1092:
   319                           
   320                           ;newmain_2.c: 40:                 POS_CURSOR(2,0);
   321  000878  0E00               	movlw	0
   322  00087A  6E04               	movwf	POS_CURSOR@columna,c
   323  00087C  0E02               	movlw	2
   324  00087E  EC93  F005         	call	_POS_CURSOR
   325                           
   326                           ;newmain_2.c: 41:                 ESCRIBE_MENSAJE("Servo a 90", 10);
   327  000882  0E0D               	movlw	low STR_2
   328  000884  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   329  000886  0E08               	movlw	high STR_2
   330  000888  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   331  00088A  0E0A               	movlw	10
   332  00088C  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   333  00088E  EC7A  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   334                           
   335                           ;newmain_2.c: 42:                 ENVIA_CHAR(0xDF);
   336  000892  0EDF               	movlw	223
   337  000894  EC46  F005         	call	_ENVIA_CHAR
   338                           
   339                           ;newmain_2.c: 43:                 ESCRIBE_MENSAJE("     ", 15);
   340  000898  0E2D               	movlw	low STR_3
   341  00089A  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   342  00089C  0E08               	movlw	high STR_3
   343  00089E  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   344  0008A0  0E0F               	movlw	15
   345  0008A2  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   346  0008A4  EC7A  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   347                           
   348                           ;newmain_2.c: 44:                     while(estado == 0){
   349  0008A8  D016               	goto	l1102
   350  0008AA                     l113:
   351                           
   352                           ;newmain_2.c: 45:                         LATEbits.LE0 = 1;
   353  0008AA  808D               	bsf	3981,0,c	;volatile
   354                           
   355                           ;newmain_2.c: 46:                         _delay((unsigned long)((1500)*(48000000UL/4000
      +                          000.0)));
   356  0008AC  0E18               	movlw	24
   357  0008AE  6E0A               	movwf	??_main& (0+255),c
   358  0008B0  0E5F               	movlw	95
   359  0008B2                     u247:
   360  0008B2  2EE8               	decfsz	wreg,f,c
   361  0008B4  D7FE               	bra	u247
   362  0008B6  2E0A               	decfsz	??_main& (0+255),f,c
   363  0008B8  D7FC               	bra	u247
   364  0008BA  F000               	nop	
   365                           
   366                           ;newmain_2.c: 47:                         LATEbits.LE0 = 0;
   367  0008BC  908D               	bcf	3981,0,c	;volatile
   368                           
   369                           ;newmain_2.c: 48:                         _delay((unsigned long)((18500)*(48000000UL/400
      +                          0000.0)));
   370  0008BE  0E02               	movlw	2
   371  0008C0  6E0B               	movwf	(??_main+1)& (0+255),c
   372  0008C2  0E21               	movlw	33
   373  0008C4  6E0A               	movwf	??_main& (0+255),c
   374  0008C6  0E4C               	movlw	76
   375  0008C8                     u257:
   376  0008C8  2EE8               	decfsz	wreg,f,c
   377  0008CA  D7FE               	bra	u257
   378  0008CC  2E0A               	decfsz	??_main& (0+255),f,c
   379  0008CE  D7FC               	bra	u257
   380  0008D0  2E0B               	decfsz	(??_main+1)& (0+255),f,c
   381  0008D2  D7FA               	bra	u257
   382  0008D4  D000               	nop2	
   383  0008D6                     l1102:
   384                           
   385                           ;newmain_2.c: 44:                     while(estado == 0){
   386  0008D6  500C               	movf	_estado,w,c
   387  0008D8  A4D8               	btfss	status,2,c
   388  0008DA  D065               	goto	u220
   389  0008DC  D7E6               	goto	l113
   390  0008DE                     l1104:
   391                           
   392                           ;newmain_2.c: 52:                 POS_CURSOR(2,0);
   393  0008DE  0E00               	movlw	0
   394  0008E0  6E04               	movwf	POS_CURSOR@columna,c
   395  0008E2  0E02               	movlw	2
   396  0008E4  EC93  F005         	call	_POS_CURSOR
   397                           
   398                           ;newmain_2.c: 53:                 ESCRIBE_MENSAJE("Servo a 0", 9);
   399  0008E8  0E23               	movlw	low STR_4
   400  0008EA  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   401  0008EC  0E08               	movlw	high STR_4
   402  0008EE  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   403  0008F0  0E09               	movlw	9
   404  0008F2  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   405  0008F4  EC7A  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   406                           
   407                           ;newmain_2.c: 54:                 ENVIA_CHAR(0xDF);
   408  0008F8  0EDF               	movlw	223
   409  0008FA  EC46  F005         	call	_ENVIA_CHAR
   410                           
   411                           ;newmain_2.c: 55:                 ESCRIBE_MENSAJE("     ", 16);
   412  0008FE  0E2D               	movlw	low STR_3
   413  000900  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   414  000902  0E08               	movlw	high STR_3
   415  000904  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   416  000906  0E10               	movlw	16
   417  000908  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   418  00090A  EC7A  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   419                           
   420                           ;newmain_2.c: 56:                     while(estado == 1){
   421  00090E  D016               	goto	l1114
   422  000910                     l118:
   423                           
   424                           ;newmain_2.c: 57:                         LATEbits.LE0 = 1;
   425  000910  808D               	bsf	3981,0,c	;volatile
   426                           
   427                           ;newmain_2.c: 58:                         _delay((unsigned long)((1000)*(48000000UL/4000
      +                          000.0)));
   428  000912  0E10               	movlw	16
   429  000914  6E0A               	movwf	??_main& (0+255),c
   430  000916  0E94               	movlw	148
   431  000918                     u267:
   432  000918  2EE8               	decfsz	wreg,f,c
   433  00091A  D7FE               	bra	u267
   434  00091C  2E0A               	decfsz	??_main& (0+255),f,c
   435  00091E  D7FC               	bra	u267
   436  000920  D000               	nop2	
   437                           
   438                           ;newmain_2.c: 59:                         LATEbits.LE0 = 0;
   439  000922  908D               	bcf	3981,0,c	;volatile
   440                           
   441                           ;newmain_2.c: 60:                         _delay((unsigned long)((19000)*(48000000UL/400
      +                          0000.0)));
   442  000924  0E02               	movlw	2
   443  000926  6E0B               	movwf	(??_main+1)& (0+255),c
   444  000928  0E29               	movlw	41
   445  00092A  6E0A               	movwf	??_main& (0+255),c
   446  00092C  0E17               	movlw	23
   447  00092E                     u277:
   448  00092E  2EE8               	decfsz	wreg,f,c
   449  000930  D7FE               	bra	u277
   450  000932  2E0A               	decfsz	??_main& (0+255),f,c
   451  000934  D7FC               	bra	u277
   452  000936  2E0B               	decfsz	(??_main+1)& (0+255),f,c
   453  000938  D7FA               	bra	u277
   454  00093A  F000               	nop	
   455  00093C                     l1114:
   456                           
   457                           ;newmain_2.c: 56:                     while(estado == 1){
   458  00093C  040C               	decf	_estado,w,c
   459  00093E  A4D8               	btfss	status,2,c
   460  000940  D032               	goto	u220
   461  000942  D7E6               	goto	l118
   462  000944                     l1116:
   463                           
   464                           ;newmain_2.c: 64:                 POS_CURSOR(2,0);
   465  000944  0E00               	movlw	0
   466  000946  6E04               	movwf	POS_CURSOR@columna,c
   467  000948  0E02               	movlw	2
   468  00094A  EC93  F005         	call	_POS_CURSOR
   469                           
   470                           ;newmain_2.c: 65:                 ESCRIBE_MENSAJE("Servo a 180", 11);
   471  00094E  0E01               	movlw	low STR_6
   472  000950  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   473  000952  0E08               	movlw	high STR_6
   474  000954  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   475  000956  0E0B               	movlw	11
   476  000958  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   477  00095A  EC7A  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   478                           
   479                           ;newmain_2.c: 66:                 ENVIA_CHAR(0xDF);
   480  00095E  0EDF               	movlw	223
   481  000960  EC46  F005         	call	_ENVIA_CHAR
   482                           
   483                           ;newmain_2.c: 67:                 ESCRIBE_MENSAJE("     ", 14);
   484  000964  0E2D               	movlw	low STR_3
   485  000966  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   486  000968  0E08               	movlw	high STR_3
   487  00096A  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   488  00096C  0E0E               	movlw	14
   489  00096E  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   490  000970  EC7A  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   491                           
   492                           ;newmain_2.c: 68:                     while(estado == 2){
   493  000974  D014               	goto	l1126
   494  000976                     l122:
   495                           
   496                           ;newmain_2.c: 69:                         LATEbits.LE0 = 1;
   497  000976  808D               	bsf	3981,0,c	;volatile
   498                           
   499                           ;newmain_2.c: 70:                         _delay((unsigned long)((2000)*(48000000UL/4000
      +                          000.0)));
   500  000978  0E20               	movlw	32
   501  00097A  6E0A               	movwf	??_main& (0+255),c
   502  00097C  0E2A               	movlw	42
   503  00097E                     u287:
   504  00097E  2EE8               	decfsz	wreg,f,c
   505  000980  D7FE               	bra	u287
   506  000982  2E0A               	decfsz	??_main& (0+255),f,c
   507  000984  D7FC               	bra	u287
   508                           
   509                           ;newmain_2.c: 71:                         LATEbits.LE0 = 0;
   510  000986  908D               	bcf	3981,0,c	;volatile
   511                           
   512                           ;newmain_2.c: 72:                         _delay((unsigned long)((18000)*(48000000UL/400
      +                          0000.0)));
   513  000988  0E02               	movlw	2
   514  00098A  6E0B               	movwf	(??_main+1)& (0+255),c
   515  00098C  0E19               	movlw	25
   516  00098E  6E0A               	movwf	??_main& (0+255),c
   517  000990  0E82               	movlw	130
   518  000992                     u297:
   519  000992  2EE8               	decfsz	wreg,f,c
   520  000994  D7FE               	bra	u297
   521  000996  2E0A               	decfsz	??_main& (0+255),f,c
   522  000998  D7FC               	bra	u297
   523  00099A  2E0B               	decfsz	(??_main+1)& (0+255),f,c
   524  00099C  D7FA               	bra	u297
   525  00099E                     l1126:
   526                           
   527                           ;newmain_2.c: 68:                     while(estado == 2){
   528  00099E  0E02               	movlw	2
   529  0009A0  180C               	xorwf	_estado,w,c
   530  0009A2  B4D8               	btfsc	status,2,c
   531  0009A4  D7E8               	goto	l122
   532  0009A6                     u220:
   533  0009A6  500C               	movf	_estado,w,c
   534  0009A8  6E0A               	movwf	??_main& (0+255),c
   535  0009AA  6A0B               	clrf	(??_main+1)& (0+255),c
   536                           
   537                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   538                           ; Switch size 1, requested type "simple"
   539                           ; Number of cases is 1, Range of values is 0 to 0
   540                           ; switch strategies available:
   541                           ; Name         Instructions Cycles
   542                           ; simple_byte            4     3 (average)
   543                           ;	Chosen strategy is simple_byte
   544  0009AC  500B               	movf	??_main+1,w,c
   545  0009AE  0A00               	xorlw	0	; case 0
   546  0009B0  A4D8               	btfss	status,2,c
   547  0009B2  D7F9               	goto	u220
   548                           
   549                           ; Switch size 1, requested type "simple"
   550                           ; Number of cases is 3, Range of values is 0 to 2
   551                           ; switch strategies available:
   552                           ; Name         Instructions Cycles
   553                           ; simple_byte           10     6 (average)
   554                           ;	Chosen strategy is simple_byte
   555  0009B4  500A               	movf	??_main,w,c
   556  0009B6  0A00               	xorlw	0	; case 0
   557  0009B8  B4D8               	btfsc	status,2,c
   558  0009BA  D75E               	goto	l1092
   559  0009BC  0A01               	xorlw	1	; case 1
   560  0009BE  B4D8               	btfsc	status,2,c
   561  0009C0  D78E               	goto	l1104
   562  0009C2  0A03               	xorlw	3	; case 2
   563  0009C4  B4D8               	btfsc	status,2,c
   564  0009C6  D7BE               	goto	l1116
   565  0009C8  D7EE               	goto	u220
   566  0009CA                     __end_of_main:
   567                           	opt callstack 0
   568                           
   569 ;; *************** function _POS_CURSOR *****************
   570 ;; Defined at:
   571 ;;		line 6 in file "LCD.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;  fila            1    wreg     unsigned char 
   574 ;;  columna         1    3[COMRAM] unsigned char 
   575 ;; Auto vars:     Size  Location     Type
   576 ;;  fila            1    4[COMRAM] unsigned char 
   577 ;; Return value:  Size  Location     Type
   578 ;;                  1    wreg      void 
   579 ;; Registers used:
   580 ;;		wreg, status,2, status,0, cstack
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   586 ;;      Params:         1       0       0       0       0       0       0       0       0
   587 ;;      Locals:         1       0       0       0       0       0       0       0       0
   588 ;;      Temps:          0       0       0       0       0       0       0       0       0
   589 ;;      Totals:         2       0       0       0       0       0       0       0       0
   590 ;;Total ram usage:        2 bytes
   591 ;; Hardware stack levels used:    1
   592 ;; Hardware stack levels required when called:    3
   593 ;; This function calls:
   594 ;;		_ENVIA_LCD_CMD
   595 ;; This function is called by:
   596 ;;		_main
   597 ;; This function uses a non-reentrant model
   598 ;;
   599                           
   600                           	psect	text1
   601  000B26                     __ptext1:
   602                           	opt callstack 0
   603  000B26                     _POS_CURSOR:
   604                           	opt callstack 27
   605                           
   606                           ;incstack = 0
   607                           ;POS_CURSOR@fila stored from wreg
   608  000B26  6E05               	movwf	POS_CURSOR@fila,c
   609                           
   610                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   611  000B28  0405               	decf	POS_CURSOR@fila,w,c
   612  000B2A  A4D8               	btfss	status,2,c
   613  000B2C  D005               	goto	l1062
   614                           
   615                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   616  000B2E  5004               	movf	POS_CURSOR@columna,w,c
   617  000B30  0F80               	addlw	128
   618  000B32  EC60  F005         	call	_ENVIA_LCD_CMD
   619                           
   620                           ;LCD.c: 11:  }
   621  000B36  0012               	return	
   622  000B38                     l1062:
   623  000B38  0E02               	movlw	2
   624  000B3A  1805               	xorwf	POS_CURSOR@fila,w,c
   625  000B3C  A4D8               	btfss	status,2,c
   626  000B3E  0012               	return	
   627                           
   628                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   629  000B40  5004               	movf	POS_CURSOR@columna,w,c
   630  000B42  0FC0               	addlw	192
   631  000B44  EC60  F005         	call	_ENVIA_LCD_CMD
   632  000B48  0012               	return		;funcret
   633  000B4A                     __end_of_POS_CURSOR:
   634                           	opt callstack 0
   635                           
   636 ;; *************** function _LCD_CONFIG *****************
   637 ;; Defined at:
   638 ;;		line 72 in file "LCD.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;		None
   641 ;; Auto vars:     Size  Location     Type
   642 ;;		None
   643 ;; Return value:  Size  Location     Type
   644 ;;                  1    wreg      void 
   645 ;; Registers used:
   646 ;;		wreg, status,2, status,0, cstack
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   652 ;;      Params:         0       0       0       0       0       0       0       0       0
   653 ;;      Locals:         0       0       0       0       0       0       0       0       0
   654 ;;      Temps:          1       0       0       0       0       0       0       0       0
   655 ;;      Totals:         1       0       0       0       0       0       0       0       0
   656 ;;Total ram usage:        1 bytes
   657 ;; Hardware stack levels used:    1
   658 ;; Hardware stack levels required when called:    3
   659 ;; This function calls:
   660 ;;		_ENVIA_LCD_CMD
   661 ;;		_ENVIA_NIBBLE
   662 ;; This function is called by:
   663 ;;		_main
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           	psect	text2
   668  000A2C                     __ptext2:
   669                           	opt callstack 0
   670  000A2C                     _LCD_CONFIG:
   671                           	opt callstack 27
   672                           
   673                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   674                           
   675                           ;incstack = 0
   676  000A2C  908C               	bcf	3980,0,c	;volatile
   677                           
   678                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   679  000A2E  928C               	bcf	3980,1,c	;volatile
   680                           
   681                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   682  000A30  0E30               	movlw	48
   683  000A32  ECB3  F005         	call	_ENVIA_NIBBLE
   684                           
   685                           ;LCD.c: 77:         _delay(24000);
   686  000A36  0E20               	movlw	32
   687  000A38  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   688  000A3A  0E2A               	movlw	42
   689  000A3C                     u307:
   690  000A3C  2EE8               	decfsz	wreg,f,c
   691  000A3E  D7FE               	bra	u307
   692  000A40  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   693  000A42  D7FC               	bra	u307
   694                           
   695                           ;LCD.c: 78:         _delay(24000);
   696  000A44  0E20               	movlw	32
   697  000A46  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   698  000A48  0E2A               	movlw	42
   699  000A4A                     u317:
   700  000A4A  2EE8               	decfsz	wreg,f,c
   701  000A4C  D7FE               	bra	u317
   702  000A4E  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   703  000A50  D7FC               	bra	u317
   704                           
   705                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   706  000A52  0E30               	movlw	48
   707  000A54  ECB3  F005         	call	_ENVIA_NIBBLE
   708                           
   709                           ;LCD.c: 83:  _delay(1200);
   710  000A58  0EF0               	movlw	240
   711  000A5A                     u327:
   712  000A5A  D000               	nop2	
   713  000A5C  2EE8               	decfsz	wreg,f,c
   714  000A5E  D7FD               	bra	u327
   715                           
   716                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   717  000A60  0E30               	movlw	48
   718  000A62  ECB3  F005         	call	_ENVIA_NIBBLE
   719                           
   720                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   721  000A66  0E20               	movlw	32
   722  000A68  ECB3  F005         	call	_ENVIA_NIBBLE
   723                           
   724                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   725  000A6C  0E01               	movlw	1
   726  000A6E  EC60  F005         	call	_ENVIA_LCD_CMD
   727                           
   728                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   729  000A72  0E28               	movlw	40
   730  000A74  EC60  F005         	call	_ENVIA_LCD_CMD
   731                           
   732                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   733  000A78  0E0F               	movlw	15
   734  000A7A  EC60  F005         	call	_ENVIA_LCD_CMD
   735                           
   736                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   737  000A7E  0E06               	movlw	6
   738  000A80  EC60  F005         	call	_ENVIA_LCD_CMD
   739                           
   740                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   741  000A84  0E01               	movlw	1
   742  000A86  EC60  F005         	call	_ENVIA_LCD_CMD
   743  000A8A  0012               	return		;funcret
   744  000A8C                     __end_of_LCD_CONFIG:
   745                           	opt callstack 0
   746                           
   747 ;; *************** function _ESCRIBE_MENSAJE *****************
   748 ;; Defined at:
   749 ;;		line 41 in file "LCD.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   752 ;;		 -> STR_7(6), STR_6(12), STR_5(6), STR_4(10), 
   753 ;;		 -> STR_3(6), STR_2(11), STR_1(11), 
   754 ;;  tam             1    5[COMRAM] unsigned char 
   755 ;; Auto vars:     Size  Location     Type
   756 ;;  i               1    8[COMRAM] unsigned char 
   757 ;; Return value:  Size  Location     Type
   758 ;;                  1    wreg      void 
   759 ;; Registers used:
   760 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   766 ;;      Params:         3       0       0       0       0       0       0       0       0
   767 ;;      Locals:         1       0       0       0       0       0       0       0       0
   768 ;;      Temps:          2       0       0       0       0       0       0       0       0
   769 ;;      Totals:         6       0       0       0       0       0       0       0       0
   770 ;;Total ram usage:        6 bytes
   771 ;; Hardware stack levels used:    1
   772 ;; Hardware stack levels required when called:    3
   773 ;; This function calls:
   774 ;;		_ENVIA_CHAR
   775 ;; This function is called by:
   776 ;;		_main
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           	psect	text3
   781  000AF4                     __ptext3:
   782                           	opt callstack 0
   783  000AF4                     _ESCRIBE_MENSAJE:
   784                           	opt callstack 27
   785                           
   786                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   787                           
   788                           ;incstack = 0
   789  000AF4  0E00               	movlw	0
   790  000AF6  6E09               	movwf	ESCRIBE_MENSAJE@i,c
   791                           
   792                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   793  000AF8  0E00               	movlw	0
   794  000AFA  6E09               	movwf	ESCRIBE_MENSAJE@i,c
   795  000AFC  D00F               	goto	l1072
   796  000AFE                     l1068:
   797                           
   798                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   799  000AFE  5009               	movf	ESCRIBE_MENSAJE@i,w,c
   800  000B00  2404               	addwf	ESCRIBE_MENSAJE@cadena,w,c
   801  000B02  6E07               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
   802  000B04  0E00               	movlw	0
   803  000B06  2005               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
   804  000B08  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
   805  000B0A  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   806  000B0E  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   807  000B12                     	if	0	;tblptru may be non-zero
   808  000B12                     	endif
   809  000B12                     	if	0	;tblptru may be non-zero
   810  000B12                     	endif
   811  000B12  0008               	tblrd		*
   812  000B14  50F5               	movf	tablat,w,c
   813  000B16  EC46  F005         	call	_ENVIA_CHAR
   814                           
   815                           ;LCD.c: 47:  }
   816  000B1A  2A09               	incf	ESCRIBE_MENSAJE@i,f,c
   817  000B1C                     l1072:
   818  000B1C  5006               	movf	ESCRIBE_MENSAJE@tam,w,c
   819  000B1E  5C09               	subwf	ESCRIBE_MENSAJE@i,w,c
   820  000B20  B0D8               	btfsc	status,0,c
   821  000B22  0012               	return	
   822  000B24  D7EC               	goto	l1068
   823  000B26                     __end_of_ESCRIBE_MENSAJE:
   824                           	opt callstack 0
   825                           
   826 ;; *************** function _ENVIA_CHAR *****************
   827 ;; Defined at:
   828 ;;		line 50 in file "LCD.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;  dato            1    wreg     unsigned char 
   831 ;; Auto vars:     Size  Location     Type
   832 ;;  dato            1    1[COMRAM] unsigned char 
   833 ;;  aux             1    2[COMRAM] unsigned char 
   834 ;; Return value:  Size  Location     Type
   835 ;;                  1    wreg      void 
   836 ;; Registers used:
   837 ;;		wreg, status,2, status,0, cstack
   838 ;; Tracked objects:
   839 ;;		On entry : 0/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   843 ;;      Params:         0       0       0       0       0       0       0       0       0
   844 ;;      Locals:         2       0       0       0       0       0       0       0       0
   845 ;;      Temps:          0       0       0       0       0       0       0       0       0
   846 ;;      Totals:         2       0       0       0       0       0       0       0       0
   847 ;;Total ram usage:        2 bytes
   848 ;; Hardware stack levels used:    1
   849 ;; Hardware stack levels required when called:    2
   850 ;; This function calls:
   851 ;;		_ENVIA_NIBBLE
   852 ;;		_LEER_LCD
   853 ;; This function is called by:
   854 ;;		_ESCRIBE_MENSAJE
   855 ;;		_main
   856 ;;		_GENERACARACTER
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text4
   861  000A8C                     __ptext4:
   862                           	opt callstack 0
   863  000A8C                     _ENVIA_CHAR:
   864                           	opt callstack 27
   865                           
   866                           ;incstack = 0
   867                           ;ENVIA_CHAR@dato stored from wreg
   868  000A8C  6E02               	movwf	ENVIA_CHAR@dato,c
   869                           
   870                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   871  000A8E  808C               	bsf	3980,0,c	;volatile
   872                           
   873                           ;LCD.c: 54:  LEER_LCD();
   874  000A90  ECE5  F004         	call	_LEER_LCD	;wreg free
   875                           
   876                           ;LCD.c: 55:  TRISD = 0x00;
   877  000A94  0E00               	movlw	0
   878  000A96  6E95               	movwf	3989,c	;volatile
   879                           
   880                           ;LCD.c: 56:         _delay(1200);
   881  000A98  0EF0               	movlw	240
   882  000A9A                     u337:
   883  000A9A  D000               	nop2	
   884  000A9C  2EE8               	decfsz	wreg,f,c
   885  000A9E  D7FD               	bra	u337
   886                           
   887                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
   888  000AA0  928C               	bcf	3980,1,c	;volatile
   889                           
   890                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
   891  000AA2  948C               	bcf	3980,2,c	;volatile
   892                           
   893                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
   894  000AA4  808C               	bsf	3980,0,c	;volatile
   895                           
   896                           ;LCD.c: 61:  aux = dato & 0xF0;
   897  000AA6  5002               	movf	ENVIA_CHAR@dato,w,c
   898  000AA8  0BF0               	andlw	240
   899  000AAA  6E03               	movwf	ENVIA_CHAR@aux,c
   900                           
   901                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
   902  000AAC  5003               	movf	ENVIA_CHAR@aux,w,c
   903  000AAE  ECB3  F005         	call	_ENVIA_NIBBLE
   904                           
   905                           ;LCD.c: 63:  aux = dato << 4;
   906  000AB2  3802               	swapf	ENVIA_CHAR@dato,w,c
   907  000AB4  0BF0               	andlw	240
   908  000AB6  6E03               	movwf	ENVIA_CHAR@aux,c
   909                           
   910                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
   911  000AB8  5003               	movf	ENVIA_CHAR@aux,w,c
   912  000ABA  ECB3  F005         	call	_ENVIA_NIBBLE
   913  000ABE  0012               	return		;funcret
   914  000AC0                     __end_of_ENVIA_CHAR:
   915                           	opt callstack 0
   916                           
   917 ;; *************** function _CURSOR_ONOFF *****************
   918 ;; Defined at:
   919 ;;		line 35 in file "LCD.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;  estado          1    wreg     unsigned char 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  estado          1    3[COMRAM] unsigned char 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      void 
   926 ;; Registers used:
   927 ;;		wreg, status,2, status,0, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   933 ;;      Params:         0       0       0       0       0       0       0       0       0
   934 ;;      Locals:         1       0       0       0       0       0       0       0       0
   935 ;;      Temps:          0       0       0       0       0       0       0       0       0
   936 ;;      Totals:         1       0       0       0       0       0       0       0       0
   937 ;;Total ram usage:        1 bytes
   938 ;; Hardware stack levels used:    1
   939 ;; Hardware stack levels required when called:    3
   940 ;; This function calls:
   941 ;;		_ENVIA_LCD_CMD
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text5
   948  000B4A                     __ptext5:
   949                           	opt callstack 0
   950  000B4A                     _CURSOR_ONOFF:
   951                           	opt callstack 27
   952                           
   953                           ;incstack = 0
   954                           ;CURSOR_ONOFF@estado stored from wreg
   955  000B4A  6E04               	movwf	CURSOR_ONOFF@estado,c
   956                           
   957                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   958  000B4C  5004               	movf	CURSOR_ONOFF@estado,w,c
   959  000B4E  A4D8               	btfss	status,2,c
   960  000B50  D003               	goto	l914
   961  000B52  0E0E               	movlw	14
   962  000B54  EC60  F005         	call	_ENVIA_LCD_CMD
   963  000B58                     l914:
   964                           
   965                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   966  000B58  0404               	decf	CURSOR_ONOFF@estado,w,c
   967  000B5A  A4D8               	btfss	status,2,c
   968  000B5C  0012               	return	
   969  000B5E  0E0C               	movlw	12
   970  000B60  EC60  F005         	call	_ENVIA_LCD_CMD
   971  000B64  0012               	return		;funcret
   972  000B66                     __end_of_CURSOR_ONOFF:
   973                           	opt callstack 0
   974                           
   975 ;; *************** function _CURSOR_HOME *****************
   976 ;; Defined at:
   977 ;;		line 30 in file "LCD.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;		None
   980 ;; Auto vars:     Size  Location     Type
   981 ;;		None
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, status,2, status,0, cstack
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   991 ;;      Params:         0       0       0       0       0       0       0       0       0
   992 ;;      Locals:         0       0       0       0       0       0       0       0       0
   993 ;;      Temps:          0       0       0       0       0       0       0       0       0
   994 ;;      Totals:         0       0       0       0       0       0       0       0       0
   995 ;;Total ram usage:        0 bytes
   996 ;; Hardware stack levels used:    1
   997 ;; Hardware stack levels required when called:    3
   998 ;; This function calls:
   999 ;;		_ENVIA_LCD_CMD
  1000 ;; This function is called by:
  1001 ;;		_main
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           	psect	text6
  1006  000BAE                     __ptext6:
  1007                           	opt callstack 0
  1008  000BAE                     _CURSOR_HOME:
  1009                           	opt callstack 27
  1010                           
  1011                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1012                           
  1013                           ;incstack = 0
  1014  000BAE  0E02               	movlw	2
  1015  000BB0  EC60  F005         	call	_ENVIA_LCD_CMD
  1016  000BB4  0012               	return		;funcret
  1017  000BB6                     __end_of_CURSOR_HOME:
  1018                           	opt callstack 0
  1019                           
  1020 ;; *************** function _BORRAR_LCD *****************
  1021 ;; Defined at:
  1022 ;;		line 67 in file "LCD.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;		None
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;		None
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg, status,2, status,0, cstack
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1036 ;;      Params:         0       0       0       0       0       0       0       0       0
  1037 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1038 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1039 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1040 ;;Total ram usage:        0 bytes
  1041 ;; Hardware stack levels used:    1
  1042 ;; Hardware stack levels required when called:    3
  1043 ;; This function calls:
  1044 ;;		_ENVIA_LCD_CMD
  1045 ;; This function is called by:
  1046 ;;		_main
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           	psect	text7
  1051  000BB6                     __ptext7:
  1052                           	opt callstack 0
  1053  000BB6                     _BORRAR_LCD:
  1054                           	opt callstack 27
  1055                           
  1056                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1057                           
  1058                           ;incstack = 0
  1059  000BB6  0E01               	movlw	1
  1060  000BB8  EC60  F005         	call	_ENVIA_LCD_CMD
  1061  000BBC  0012               	return		;funcret
  1062  000BBE                     __end_of_BORRAR_LCD:
  1063                           	opt callstack 0
  1064                           
  1065 ;; *************** function _ENVIA_LCD_CMD *****************
  1066 ;; Defined at:
  1067 ;;		line 104 in file "LCD.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;  dato            1    wreg     unsigned char 
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;  dato            1    1[COMRAM] unsigned char 
  1072 ;;  aux             1    2[COMRAM] unsigned char 
  1073 ;; Return value:  Size  Location     Type
  1074 ;;                  1    wreg      void 
  1075 ;; Registers used:
  1076 ;;		wreg, status,2, status,0, cstack
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1082 ;;      Params:         0       0       0       0       0       0       0       0       0
  1083 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1084 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1085 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1086 ;;Total ram usage:        2 bytes
  1087 ;; Hardware stack levels used:    1
  1088 ;; Hardware stack levels required when called:    2
  1089 ;; This function calls:
  1090 ;;		_ENVIA_NIBBLE
  1091 ;;		_LEER_LCD
  1092 ;; This function is called by:
  1093 ;;		_POS_CURSOR
  1094 ;;		_CURSOR_HOME
  1095 ;;		_CURSOR_ONOFF
  1096 ;;		_BORRAR_LCD
  1097 ;;		_LCD_CONFIG
  1098 ;;		_BLINK_CURSOR
  1099 ;;		_DISPLAY_ONOFF
  1100 ;;		_GENERACARACTER
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text8
  1105  000AC0                     __ptext8:
  1106                           	opt callstack 0
  1107  000AC0                     _ENVIA_LCD_CMD:
  1108                           	opt callstack 27
  1109                           
  1110                           ;incstack = 0
  1111                           ;ENVIA_LCD_CMD@dato stored from wreg
  1112  000AC0  6E02               	movwf	ENVIA_LCD_CMD@dato,c
  1113                           
  1114                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1115  000AC2  908C               	bcf	3980,0,c	;volatile
  1116                           
  1117                           ;LCD.c: 108:  LEER_LCD();
  1118  000AC4  ECE5  F004         	call	_LEER_LCD	;wreg free
  1119                           
  1120                           ;LCD.c: 109:  TRISD = 0b00000000;
  1121  000AC8  0E00               	movlw	0
  1122  000ACA  6E95               	movwf	3989,c	;volatile
  1123                           
  1124                           ;LCD.c: 111:         _delay(1200);
  1125  000ACC  0EF0               	movlw	240
  1126  000ACE                     u347:
  1127  000ACE  D000               	nop2	
  1128  000AD0  2EE8               	decfsz	wreg,f,c
  1129  000AD2  D7FD               	bra	u347
  1130                           
  1131                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1132  000AD4  928C               	bcf	3980,1,c	;volatile
  1133                           
  1134                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1135  000AD6  948C               	bcf	3980,2,c	;volatile
  1136                           
  1137                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1138  000AD8  908C               	bcf	3980,0,c	;volatile
  1139                           
  1140                           ;LCD.c: 115:  aux = dato & 0xF0;
  1141  000ADA  5002               	movf	ENVIA_LCD_CMD@dato,w,c
  1142  000ADC  0BF0               	andlw	240
  1143  000ADE  6E03               	movwf	ENVIA_LCD_CMD@aux,c
  1144                           
  1145                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1146  000AE0  5003               	movf	ENVIA_LCD_CMD@aux,w,c
  1147  000AE2  ECB3  F005         	call	_ENVIA_NIBBLE
  1148                           
  1149                           ;LCD.c: 117:  aux = dato<<4;
  1150  000AE6  3802               	swapf	ENVIA_LCD_CMD@dato,w,c
  1151  000AE8  0BF0               	andlw	240
  1152  000AEA  6E03               	movwf	ENVIA_LCD_CMD@aux,c
  1153                           
  1154                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1155  000AEC  5003               	movf	ENVIA_LCD_CMD@aux,w,c
  1156  000AEE  ECB3  F005         	call	_ENVIA_NIBBLE
  1157  000AF2  0012               	return		;funcret
  1158  000AF4                     __end_of_ENVIA_LCD_CMD:
  1159                           	opt callstack 0
  1160                           
  1161 ;; *************** function _LEER_LCD *****************
  1162 ;; Defined at:
  1163 ;;		line 121 in file "LCD.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;		None
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  aux             1    0[COMRAM] unsigned char 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;                  1    wreg      void 
  1170 ;; Registers used:
  1171 ;;		wreg, status,2, status,0
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1177 ;;      Params:         0       0       0       0       0       0       0       0       0
  1178 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1179 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1180 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1181 ;;Total ram usage:        1 bytes
  1182 ;; Hardware stack levels used:    1
  1183 ;; Hardware stack levels required when called:    1
  1184 ;; This function calls:
  1185 ;;		Nothing
  1186 ;; This function is called by:
  1187 ;;		_ENVIA_CHAR
  1188 ;;		_ENVIA_LCD_CMD
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           	psect	text9
  1193  0009CA                     __ptext9:
  1194                           	opt callstack 0
  1195  0009CA                     _LEER_LCD:
  1196                           	opt callstack 27
  1197                           
  1198                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1199                           
  1200                           ;incstack = 0
  1201  0009CA  0EF8               	movlw	248
  1202  0009CC  6E95               	movwf	3989,c	;volatile
  1203                           
  1204                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1205  0009CE  908C               	bcf	3980,0,c	;volatile
  1206                           
  1207                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1208  0009D0  828C               	bsf	3980,1,c	;volatile
  1209                           
  1210                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1211  0009D2  848C               	bsf	3980,2,c	;volatile
  1212                           
  1213                           ;LCD.c: 128:         _delay(1200);
  1214  0009D4  0EF0               	movlw	240
  1215  0009D6                     u357:
  1216  0009D6  D000               	nop2	
  1217  0009D8  2EE8               	decfsz	wreg,f,c
  1218  0009DA  D7FD               	bra	u357
  1219                           
  1220                           ;LCD.c: 130:  aux = PORTD;
  1221  0009DC  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1222                           
  1223                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1224  0009E0  948C               	bcf	3980,2,c	;volatile
  1225                           
  1226                           ;LCD.c: 132:         _delay(1200);
  1227  0009E2  0EF0               	movlw	240
  1228  0009E4                     u367:
  1229  0009E4  D000               	nop2	
  1230  0009E6  2EE8               	decfsz	wreg,f,c
  1231  0009E8  D7FD               	bra	u367
  1232                           
  1233                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1234  0009EA  848C               	bsf	3980,2,c	;volatile
  1235                           
  1236                           ;LCD.c: 135:         _delay(1200);
  1237  0009EC  0EF0               	movlw	240
  1238  0009EE                     u377:
  1239  0009EE  D000               	nop2	
  1240  0009F0  2EE8               	decfsz	wreg,f,c
  1241  0009F2  D7FD               	bra	u377
  1242  0009F4                     l830:
  1243                           
  1244                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1245  0009F4  948C               	bcf	3980,2,c	;volatile
  1246                           
  1247                           ;LCD.c: 138:  aux = aux & 0x80;
  1248  0009F6  5001               	movf	LEER_LCD@aux,w,c
  1249  0009F8  0B80               	andlw	128
  1250  0009FA  6E01               	movwf	LEER_LCD@aux,c
  1251                           
  1252                           ;LCD.c: 139:  while(aux == 0x80)
  1253  0009FC  D012               	goto	l846
  1254  0009FE                     l67:
  1255                           
  1256                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1257  0009FE  848C               	bsf	3980,2,c	;volatile
  1258                           
  1259                           ;LCD.c: 142:             _delay(1200);
  1260  000A00  0EF0               	movlw	240
  1261  000A02                     u387:
  1262  000A02  D000               	nop2	
  1263  000A04  2EE8               	decfsz	wreg,f,c
  1264  000A06  D7FD               	bra	u387
  1265                           
  1266                           ;LCD.c: 143:             aux = PORTD;
  1267  000A08  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1268                           
  1269                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1270  000A0C  948C               	bcf	3980,2,c	;volatile
  1271                           
  1272                           ;LCD.c: 145:             _delay(1200);
  1273  000A0E  0EF0               	movlw	240
  1274  000A10                     u397:
  1275  000A10  D000               	nop2	
  1276  000A12  2EE8               	decfsz	wreg,f,c
  1277  000A14  D7FD               	bra	u397
  1278                           
  1279                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1280  000A16  848C               	bsf	3980,2,c	;volatile
  1281                           
  1282                           ;LCD.c: 147:             _delay(1200);
  1283  000A18  0EF0               	movlw	240
  1284  000A1A                     u407:
  1285  000A1A  D000               	nop2	
  1286  000A1C  2EE8               	decfsz	wreg,f,c
  1287  000A1E  D7FD               	bra	u407
  1288  000A20  D7E9               	goto	l830
  1289  000A22                     l846:
  1290                           
  1291                           ;LCD.c: 139:  while(aux == 0x80)
  1292  000A22  0E80               	movlw	128
  1293  000A24  1801               	xorwf	LEER_LCD@aux,w,c
  1294  000A26  A4D8               	btfss	status,2,c
  1295  000A28  0012               	return	
  1296  000A2A  D7E9               	goto	l67
  1297  000A2C                     __end_of_LEER_LCD:
  1298                           	opt callstack 0
  1299                           
  1300 ;; *************** function _ENVIA_NIBBLE *****************
  1301 ;; Defined at:
  1302 ;;		line 93 in file "LCD.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;  dato            1    wreg     unsigned char 
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;  dato            1    0[COMRAM] unsigned char 
  1307 ;; Return value:  Size  Location     Type
  1308 ;;                  1    wreg      void 
  1309 ;; Registers used:
  1310 ;;		wreg, status,2, status,0
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1316 ;;      Params:         0       0       0       0       0       0       0       0       0
  1317 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1318 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1319 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1320 ;;Total ram usage:        1 bytes
  1321 ;; Hardware stack levels used:    1
  1322 ;; Hardware stack levels required when called:    1
  1323 ;; This function calls:
  1324 ;;		Nothing
  1325 ;; This function is called by:
  1326 ;;		_ENVIA_CHAR
  1327 ;;		_LCD_CONFIG
  1328 ;;		_ENVIA_LCD_CMD
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text10
  1333  000B66                     __ptext10:
  1334                           	opt callstack 0
  1335  000B66                     _ENVIA_NIBBLE:
  1336                           	opt callstack 27
  1337                           
  1338                           ;incstack = 0
  1339                           ;ENVIA_NIBBLE@dato stored from wreg
  1340  000B66  6E01               	movwf	ENVIA_NIBBLE@dato,c
  1341                           
  1342                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1343  000B68  0E0F               	movlw	15
  1344  000B6A  168C               	andwf	3980,f,c	;volatile
  1345                           
  1346                           ;LCD.c: 96:  dato &= 0xF0;
  1347  000B6C  0EF0               	movlw	240
  1348  000B6E  1601               	andwf	ENVIA_NIBBLE@dato,f,c
  1349                           
  1350                           ;LCD.c: 97:  LATD|= dato;
  1351  000B70  5001               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1352  000B72  128C               	iorwf	3980,f,c	;volatile
  1353                           
  1354                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1355  000B74  848C               	bsf	3980,2,c	;volatile
  1356                           
  1357                           ;LCD.c: 100:         _delay(1200);
  1358  000B76  0EF0               	movlw	240
  1359  000B78                     u417:
  1360  000B78  D000               	nop2	
  1361  000B7A  2EE8               	decfsz	wreg,f,c
  1362  000B7C  D7FD               	bra	u417
  1363                           
  1364                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1365  000B7E  948C               	bcf	3980,2,c	;volatile
  1366  000B80  0012               	return		;funcret
  1367  000B82                     __end_of_ENVIA_NIBBLE:
  1368                           	opt callstack 0
  1369                           
  1370 ;; *************** function _Int0_Int1_ISR *****************
  1371 ;; Defined at:
  1372 ;;		line 78 in file "newmain_2.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;		None
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;		None
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, status,2
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1386 ;;      Params:         0       0       0       0       0       0       0       0       0
  1387 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1388 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1389 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1390 ;;Total ram usage:        0 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; This function calls:
  1393 ;;		Nothing
  1394 ;; This function is called by:
  1395 ;;		Interrupt level 2
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           	psect	intcode
  1400  000008                     __pintcode:
  1401                           	opt callstack 0
  1402  000008                     _Int0_Int1_ISR:
  1403                           	opt callstack 27
  1404                           
  1405                           ;incstack = 0
  1406  000008  820D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1407  00000A  EDC1  F005         	call	int_func,f	;refresh shadow registers
  1408                           
  1409                           	psect	intcode_body
  1410  000B82                     __pintcode_body:
  1411                           	opt callstack 27
  1412  000B82                     int_func:
  1413                           	opt callstack 27
  1414  000B82  0006               	pop		; remove dummy address from shadow register refresh
  1415                           
  1416                           ;newmain_2.c: 79:     if(INTCONbits.INT0F==1){
  1417  000B84  A2F2               	btfss	4082,1,c	;volatile
  1418  000B86  D004               	goto	i2l131
  1419                           
  1420                           ;newmain_2.c: 80:         estado = 1;
  1421  000B88  0E01               	movlw	1
  1422  000B8A  6E0C               	movwf	_estado,c
  1423                           
  1424                           ;newmain_2.c: 81:         INTCONbits.INT0F = 0;
  1425  000B8C  92F2               	bcf	4082,1,c	;volatile
  1426                           
  1427                           ;newmain_2.c: 82:     }
  1428  000B8E  D005               	goto	i2l134
  1429  000B90                     i2l131:
  1430  000B90  A0F0               	btfss	4080,0,c	;volatile
  1431  000B92  D003               	goto	i2l134
  1432                           
  1433                           ;newmain_2.c: 84:         estado = 2;
  1434  000B94  0E02               	movlw	2
  1435  000B96  6E0C               	movwf	_estado,c
  1436                           
  1437                           ;newmain_2.c: 85:         INTCON3bits.INT1IF = 0;
  1438  000B98  90F0               	bcf	4080,0,c	;volatile
  1439  000B9A                     i2l134:
  1440  000B9A  920D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1441  000B9C  0011               	retfie		f
  1442  000B9E                     __end_of_Int0_Int1_ISR:
  1443                           	opt callstack 0
  1444                           
  1445                           	psect	rparam
  1446  0000                     
  1447                           	psect	temp
  1448  00000D                     btemp:
  1449                           	opt callstack 0
  1450  00000D                     	ds	1
  1451  0000                     int$flags	set	btemp
  1452  0000                     wtemp8	set	btemp+1
  1453  0000                     ttemp5	set	btemp+1
  1454  0000                     ttemp6	set	btemp+4
  1455  0000                     ttemp7	set	btemp+8
  1456                           tosu	equ	0xFFF
  1457                           tosh	equ	0xFFE
  1458                           tosl	equ	0xFFD
  1459                           stkptr	equ	0xFFC
  1460                           pclatu	equ	0xFFB
  1461                           pclath	equ	0xFFA
  1462                           pcl	equ	0xFF9
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           prodh	equ	0xFF4
  1468                           prodl	equ	0xFF3
  1469                           indf0	equ	0xFEF
  1470                           postinc0	equ	0xFEE
  1471                           postdec0	equ	0xFED
  1472                           preinc0	equ	0xFEC
  1473                           plusw0	equ	0xFEB
  1474                           fsr0h	equ	0xFEA
  1475                           fsr0l	equ	0xFE9
  1476                           wreg	equ	0xFE8
  1477                           indf1	equ	0xFE7
  1478                           postinc1	equ	0xFE6
  1479                           postdec1	equ	0xFE5
  1480                           preinc1	equ	0xFE4
  1481                           plusw1	equ	0xFE3
  1482                           fsr1h	equ	0xFE2
  1483                           fsr1l	equ	0xFE1
  1484                           bsr	equ	0xFE0
  1485                           indf2	equ	0xFDF
  1486                           postinc2	equ	0xFDE
  1487                           postdec2	equ	0xFDD
  1488                           preinc2	equ	0xFDC
  1489                           plusw2	equ	0xFDB
  1490                           fsr2h	equ	0xFDA
  1491                           fsr2l	equ	0xFD9
  1492                           status	equ	0xFD8


Data Sizes:
    Strings     50
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     11      12
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_7(CODE[6]), STR_6(CODE[12]), STR_5(CODE[6]), STR_4(CODE[10]), 
		 -> STR_3(CODE[6]), STR_2(CODE[11]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _Int0_Int1_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Int0_Int1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Int0_Int1_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Int0_Int1_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Int0_Int1_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Int0_Int1_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Int0_Int1_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Int0_Int1_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Int0_Int1_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2356
                                              9 COMRAM     2     2      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     436
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3    1275
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Int0_Int1_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD

 _Int0_Int1_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      B       C       1       12.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       C      20        0.0%
DATA                 0      0       C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Oct 16 08:16:52 2019

                      l67 09FE               __CFG_BORV$3 000000        __CFG_FOSC$XTPLL_XT 000000  
           ENVIA_CHAR@aux 0003                       l113 08AA                       l122 0976  
                     l118 0910                       l830 09F4                       l914 0B58  
                     l846 0A22                       u220 09A6                       u307 0A3C  
                     u317 0A4A                       u237 084E                       u407 0A1A  
                     u327 0A5A                       u247 08B2                       u417 0B78  
                     u337 0A9A                       u257 08C8                       u347 0ACE  
                     u267 0918                       u357 09D6                       u277 092E  
                     u367 09E4                       u287 097E                       u377 09EE  
                     u297 0992                       u387 0A02                       u397 0A10  
            __CFG_BOR$OFF 000000               LEER_LCD@aux 0001                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001              __CFG_LVP$OFF 000000  
          ENVIA_CHAR@dato 0002              __CFG_WDT$OFF 000000                      l1102 08D6  
                    l1104 08DE                      l1114 093C                      l1116 0944  
                    l1062 0B38                      l1126 099E                      l1072 0B1C  
                    l1068 0AFE                      l1092 0878                      STR_1 0818  
                    STR_2 080D                      STR_3 082D                      STR_4 0823  
                    STR_5 082D                      STR_6 0801                      STR_7 082D  
                    _LATD 000F8C              __CFG_PWRT$ON 000000                      _main 0834  
                    btemp 000D                      start 000E             ?_CURSOR_ONOFF 0001  
           __CFG_MCLRE$ON 000000              ___param_bank 000000           ??_ENVIA_LCD_CMD 0002  
        __end_of_LEER_LCD 0A2C       __size_of_BORRAR_LCD 0008             __CFG_PLLDIV$1 000000  
          __CFG_CCP2MX$ON 000000                     ?_main 0001                     i2l131 0B90  
                   i2l134 0B9A                     _PORTD 000F83       __size_of_LCD_CONFIG 0060  
                   _TRISD 000F95       __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0004  
                   tablat 000FF5                     ttemp5 000E                     ttemp6 0011  
                   ttemp7 0015                     status 000FD8                     wtemp8 000E  
          ??_CURSOR_ONOFF 0004           __initialization 0B9E              __end_of_main 09CA  
         _ESCRIBE_MENSAJE 0AF4                    ??_main 000A             __activetblptr 000002  
                  _ADCON1 000FC1     __end_of_Int0_Int1_ISR 0B9E      __end_of_ENVIA_NIBBLE 0B82  
                  _estado 000C       __size_of_POS_CURSOR 0024              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
            ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0001  
              __accesstop 0060   __end_of__initialization 0BA0           __CFG_PBADEN$OFF 000000  
            ??_LCD_CONFIG 0004             ___rparam_used 000001              ??_ENVIA_CHAR 0002  
 __end_of_ESCRIBE_MENSAJE 0B26            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0BBE  
        ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0B66        __end_of_LCD_CONFIG 0A8C  
      __end_of_ENVIA_CHAR 0AC0                ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001  
            ??_POS_CURSOR 0005     __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000  
                 __Lparam 0000          ?_ESCRIBE_MENSAJE 0004              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0AF4                   __pcinit 0B9E        __end_of_POS_CURSOR 0B4A  
                 __ramtop 0800                   __ptext0 0834                   __ptext1 0B26  
                 __ptext2 0A2C                   __ptext3 0AF4                   __ptext4 0A8C  
                 __ptext5 0B4A                   __ptext6 0BAE                   __ptext7 0BB6  
                 __ptext8 0AC0                   __ptext9 09CA            __pintcode_body 0B82  
            _ENVIA_NIBBLE 0B66      end_of_initialization 0BA0             __Lmediumconst 0000  
                 int_func 0B82     __size_of_CURSOR_ONOFF 001C                 _TRISEbits 000F96  
       __size_of_LEER_LCD 0062              _CURSOR_ONOFF 0B4A        CURSOR_ONOFF@estado 0004  
           ??_CURSOR_HOME 0004       start_initialization 0B9E    __size_of_Int0_Int1_ISR 0B96  
       ENVIA_LCD_CMD@dato 0002          __CFG_LPT1OSC$OFF 000000               __pbssCOMRAM 000C  
     __end_of_CURSOR_HOME 0BB6                 __pintcode 0008             _Int0_Int1_ISR 0008  
             __smallconst 0800                  _LEER_LCD 09CA                  _LATDbits 000F8C  
                _LATEbits 000F8D            ?_Int0_Int1_ISR 0001          __CFG_WDTPS$32768 000000  
        ESCRIBE_MENSAJE@i 0009            POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 0032  
             _CURSOR_HOME 0BAE               _INTCON3bits 000FF0    __size_of_ENVIA_LCD_CMD 0034  
                __Hrparam 0000                  __Lrparam 0000                  __ptext10 0B66  
              _BORRAR_LCD 0BB6             __size_of_main 0196                _LCD_CONFIG 0A2C  
              _ENVIA_CHAR 0A8C           ??_Int0_Int1_ISR 0001                  int$flags 000D  
           _ENVIA_LCD_CMD 0AC0     __CFG_CPUDIV$OSC1_PLL2 000000                _INTCONbits 000FF2  
       ??_ESCRIBE_MENSAJE 0007                  intlevel2 0000     ESCRIBE_MENSAJE@cadena 0004  
          ?_ENVIA_LCD_CMD 0001               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0B26               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
