

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Oct 18 17:15:26 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 2.10
    28                           ; Generated 31/07/2019 GMT
    29                           ; 
    30                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     _PORTD	set	3971
    62  0000                     _LATD	set	3980
    63  0000                     _LATDbits	set	3980
    64  0000                     _ADRESL	set	4035
    65  0000                     _ADRESH	set	4036
    66  0000                     _ADCON0bits	set	4034
    67  0000                     _ADCON0	set	4034
    68  0000                     _ADCON1	set	4033
    69  0000                     _ADCON2	set	4032
    70  0000                     _TRISD	set	3989
    71                           
    72                           	psect	smallconst
    73  000800                     __psmallconst:
    74                           	opt callstack 0
    75  000800  00                 	db	0
    76  000801                     STR_1:
    77  000801  4C                 	db	76	;'L'
    78  000802  65                 	db	101	;'e'
    79  000803  63                 	db	99	;'c'
    80  000804  74                 	db	116	;'t'
    81  000805  75                 	db	117	;'u'
    82  000806  72                 	db	114	;'r'
    83  000807  61                 	db	97	;'a'
    84  000808  20                 	db	32
    85  000809  41                 	db	65	;'A'
    86  00080A  2F                 	db	47
    87  00080B  44                 	db	68	;'D'
    88  00080C  00                 	db	0
    89  00080D                     STR_2:
    90  00080D  41                 	db	65	;'A'
    91  00080E  4E                 	db	78	;'N'
    92  00080F  30                 	db	48	;'0'
    93  000810  3A                 	db	58	;':'
    94  000811  20                 	db	32
    95  000812  00                 	db	0
    96                           
    97                           ; #config settings
    98  000813  00                 	db	0	; dummy byte at the end
    99  0000                     
   100                           	psect	cinit
   101  000C3C                     __pcinit:
   102                           	opt callstack 0
   103  000C3C                     start_initialization:
   104                           	opt callstack 0
   105  000C3C                     __initialization:
   106                           	opt callstack 0
   107                           
   108                           ; Clear objects allocated to COMRAM (10 bytes)
   109  000C3C  EE00  F00F         	lfsr	0,__pbssCOMRAM
   110  000C40  0E0A               	movlw	10
   111  000C42                     clear_0:
   112  000C42  6AEE               	clrf	postinc0,c
   113  000C44  06E8               	decf	wreg,f,c
   114  000C46  E1FD               	bnz	clear_0
   115  000C48                     end_of_initialization:
   116                           	opt callstack 0
   117  000C48                     __end_of__initialization:
   118                           	opt callstack 0
   119  000C48  0E00               	movlw	low (__Lsmallconst shr (0+16))
   120  000C4A  6EF8               	movwf	tblptru,c
   121  000C4C  0E08               	movlw	high __Lsmallconst
   122  000C4E  6EF7               	movwf	tblptrh,c
   123  000C50  0100               	movlb	0
   124  000C52  EF57  F004         	goto	_main	;jump to C main() function
   125                           
   126                           	psect	bssCOMRAM
   127  00000F                     __pbssCOMRAM:
   128                           	opt callstack 0
   129  00000F                     _unidad:
   130                           	opt callstack 0
   131  00000F                     	ds	2
   132  000011                     _decena:
   133                           	opt callstack 0
   134  000011                     	ds	2
   135  000013                     _centena:
   136                           	opt callstack 0
   137  000013                     	ds	2
   138  000015                     _millar:
   139                           	opt callstack 0
   140  000015                     	ds	2
   141  000017                     _canal_cero:
   142                           	opt callstack 0
   143  000017                     	ds	2
   144                           
   145                           	psect	cstackCOMRAM
   146  000001                     __pcstackCOMRAM:
   147                           	opt callstack 0
   148  000001                     ?___lwmod:
   149                           	opt callstack 0
   150  000001                     ENVIA_NIBBLE@dato:
   151                           	opt callstack 0
   152  000001                     LEER_LCD@aux:
   153                           	opt callstack 0
   154  000001                     ___lwmod@dividend:
   155                           	opt callstack 0
   156                           
   157                           ; 2 bytes @ 0x0
   158  000001                     	ds	1
   159  000002                     ENVIA_CHAR@dato:
   160                           	opt callstack 0
   161  000002                     ENVIA_LCD_CMD@dato:
   162                           	opt callstack 0
   163                           
   164                           ; 1 bytes @ 0x1
   165  000002                     	ds	1
   166  000003                     ENVIA_CHAR@aux:
   167                           	opt callstack 0
   168  000003                     ENVIA_LCD_CMD@aux:
   169                           	opt callstack 0
   170  000003                     ___lwmod@divisor:
   171                           	opt callstack 0
   172                           
   173                           ; 2 bytes @ 0x2
   174  000003                     	ds	1
   175  000004                     ??_LCD_CONFIG:
   176  000004                     POS_CURSOR@columna:
   177                           	opt callstack 0
   178  000004                     CURSOR_ONOFF@estado:
   179                           	opt callstack 0
   180  000004                     ESCRIBE_MENSAJE@cadena:
   181                           	opt callstack 0
   182                           
   183                           ; 2 bytes @ 0x3
   184  000004                     	ds	1
   185  000005                     ??_arrancaLCD:
   186  000005                     POS_CURSOR@fila:
   187                           	opt callstack 0
   188  000005                     ___lwmod@counter:
   189                           	opt callstack 0
   190                           
   191                           ; 1 bytes @ 0x4
   192  000005                     	ds	1
   193  000006                     ?___lwdiv:
   194                           	opt callstack 0
   195  000006                     ESCRIBE_MENSAJE@tam:
   196                           	opt callstack 0
   197  000006                     ___lwdiv@dividend:
   198                           	opt callstack 0
   199                           
   200                           ; 2 bytes @ 0x5
   201  000006                     	ds	1
   202  000007                     ??_ESCRIBE_MENSAJE:
   203                           
   204                           ; 1 bytes @ 0x6
   205  000007                     	ds	1
   206  000008                     ___lwdiv@divisor:
   207                           	opt callstack 0
   208                           
   209                           ; 2 bytes @ 0x7
   210  000008                     	ds	1
   211  000009                     ESCRIBE_MENSAJE@i:
   212                           	opt callstack 0
   213                           
   214                           ; 1 bytes @ 0x8
   215  000009                     	ds	1
   216  00000A                     ___lwdiv@quotient:
   217                           	opt callstack 0
   218                           
   219                           ; 2 bytes @ 0x9
   220  00000A                     	ds	2
   221  00000C                     ___lwdiv@counter:
   222                           	opt callstack 0
   223                           
   224                           ; 1 bytes @ 0xB
   225  00000C                     	ds	1
   226  00000D                     convierte@numero:
   227                           	opt callstack 0
   228                           
   229                           ; 2 bytes @ 0xC
   230  00000D                     	ds	2
   231  00000F                     
   232                           ; 1 bytes @ 0xE
   233 ;;
   234 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   235 ;;
   236 ;; *************** function _main *****************
   237 ;; Defined at:
   238 ;;		line 43 in file "test_lcd.c"
   239 ;; Parameters:    Size  Location     Type
   240 ;;		None
   241 ;; Auto vars:     Size  Location     Type
   242 ;;		None
   243 ;; Return value:  Size  Location     Type
   244 ;;                  1    wreg      void 
   245 ;; Registers used:
   246 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   247 ;; Tracked objects:
   248 ;;		On entry : 0/0
   249 ;;		On exit  : 0/0
   250 ;;		Unchanged: 0/0
   251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   252 ;;      Params:         0       0       0       0       0       0       0       0       0
   253 ;;      Locals:         0       0       0       0       0       0       0       0       0
   254 ;;      Temps:          0       0       0       0       0       0       0       0       0
   255 ;;      Totals:         0       0       0       0       0       0       0       0       0
   256 ;;Total ram usage:        0 bytes
   257 ;; Hardware stack levels required when called:    4
   258 ;; This function calls:
   259 ;;		_ENVIA_CHAR
   260 ;;		_ESCRIBE_MENSAJE
   261 ;;		_POS_CURSOR
   262 ;;		_arrancaLCD
   263 ;;		_convierte
   264 ;; This function is called by:
   265 ;;		Startup code after reset
   266 ;; This function uses a non-reentrant model
   267 ;;
   268                           
   269                           	psect	text0
   270  0008AE                     __ptext0:
   271                           	opt callstack 0
   272  0008AE                     _main:
   273                           	opt callstack 27
   274  0008AE                     
   275                           ;test_lcd.c: 44:     arrancaLCD();
   276  0008AE  ECFC  F005         	call	_arrancaLCD	;wreg free
   277  0008B2                     
   278                           ;test_lcd.c: 45:     ADCON2 = 0x91;
   279  0008B2  0E91               	movlw	145
   280  0008B4  6EC0               	movwf	192,c	;volatile
   281  0008B6                     
   282                           ;test_lcd.c: 46:     ADCON1 = 0x0E;
   283  0008B6  0E0E               	movlw	14
   284  0008B8  6EC1               	movwf	193,c	;volatile
   285  0008BA                     
   286                           ;test_lcd.c: 47:     ADCON0 = 0x01;
   287  0008BA  0E01               	movlw	1
   288  0008BC  6EC2               	movwf	194,c	;volatile
   289  0008BE                     
   290                           ;test_lcd.c: 48:     ESCRIBE_MENSAJE("Lectura A/D", 11);
   291  0008BE  0E01               	movlw	low STR_1
   292  0008C0  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   293  0008C2  0E08               	movlw	high STR_1
   294  0008C4  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   295  0008C6  0E0B               	movlw	11
   296  0008C8  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   297  0008CA  EC74  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   298  0008CE                     l1129:
   299                           
   300                           ;test_lcd.c: 50:         ADCON0bits.GO = 1;
   301  0008CE  82C2               	bsf	194,1,c	;volatile
   302  0008D0                     l52:
   303  0008D0  B2C2               	btfsc	194,1,c	;volatile
   304  0008D2  EF6D  F004         	goto	u281
   305  0008D6  EF6F  F004         	goto	u280
   306  0008DA                     u281:
   307  0008DA  EF68  F004         	goto	l52
   308  0008DE                     u280:
   309  0008DE                     
   310                           ;test_lcd.c: 52:         canal_cero = ADRESH << 8;
   311  0008DE  50C4               	movf	196,w,c	;volatile
   312  0008E0  6E18               	movwf	(_canal_cero+1)^0,c
   313  0008E2  6A17               	clrf	_canal_cero^0,c
   314  0008E4                     
   315                           ;test_lcd.c: 53:         canal_cero = canal_cero + ADRESL;
   316  0008E4  50C3               	movf	195,w,c	;volatile
   317  0008E6  2417               	addwf	_canal_cero^0,w,c
   318  0008E8  6E17               	movwf	_canal_cero^0,c
   319  0008EA  0E00               	movlw	0
   320  0008EC  2018               	addwfc	(_canal_cero+1)^0,w,c
   321  0008EE  6E18               	movwf	(_canal_cero+1)^0,c
   322  0008F0                     
   323                           ;test_lcd.c: 54:         convierte(canal_cero);
   324  0008F0  C017  F00D         	movff	_canal_cero,convierte@numero
   325  0008F4  C018  F00E         	movff	_canal_cero+1,convierte@numero+1
   326  0008F8  EC0A  F004         	call	_convierte	;wreg free
   327  0008FC                     
   328                           ;test_lcd.c: 55:         POS_CURSOR(2,0);
   329  0008FC  0E00               	movlw	0
   330  0008FE  6E04               	movwf	POS_CURSOR@columna^0,c
   331  000900  0E02               	movlw	2
   332  000902  EC93  F005         	call	_POS_CURSOR
   333  000906                     
   334                           ;test_lcd.c: 56:         ESCRIBE_MENSAJE("AN0: ", 5);
   335  000906  0E0D               	movlw	low STR_2
   336  000908  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   337  00090A  0E08               	movlw	high STR_2
   338  00090C  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   339  00090E  0E05               	movlw	5
   340  000910  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   341  000912  EC74  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   342  000916                     
   343                           ;test_lcd.c: 57:         ENVIA_CHAR(millar+0x30);
   344  000916  5015               	movf	_millar^0,w,c
   345  000918  0F30               	addlw	48
   346  00091A  ECCA  F005         	call	_ENVIA_CHAR
   347  00091E                     
   348                           ;test_lcd.c: 58:         ENVIA_CHAR(centena+0x30);
   349  00091E  5013               	movf	_centena^0,w,c
   350  000920  0F30               	addlw	48
   351  000922  ECCA  F005         	call	_ENVIA_CHAR
   352  000926                     
   353                           ;test_lcd.c: 59:         ENVIA_CHAR(decena+0x30);
   354  000926  5011               	movf	_decena^0,w,c
   355  000928  0F30               	addlw	48
   356  00092A  ECCA  F005         	call	_ENVIA_CHAR
   357  00092E                     
   358                           ;test_lcd.c: 60:         ENVIA_CHAR(unidad+0x30);
   359  00092E  500F               	movf	_unidad^0,w,c
   360  000930  0F30               	addlw	48
   361  000932  ECCA  F005         	call	_ENVIA_CHAR
   362  000936  EF67  F004         	goto	l1129
   363  00093A  EF00  F000         	goto	start
   364  00093E                     __end_of_main:
   365                           	opt callstack 0
   366                           
   367 ;; *************** function _convierte *****************
   368 ;; Defined at:
   369 ;;		line 27 in file "test_lcd.c"
   370 ;; Parameters:    Size  Location     Type
   371 ;;  numero          2   12[COMRAM] unsigned int 
   372 ;; Auto vars:     Size  Location     Type
   373 ;;		None
   374 ;; Return value:  Size  Location     Type
   375 ;;                  1    wreg      void 
   376 ;; Registers used:
   377 ;;		wreg, status,2, status,0, cstack
   378 ;; Tracked objects:
   379 ;;		On entry : 0/0
   380 ;;		On exit  : 0/0
   381 ;;		Unchanged: 0/0
   382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   383 ;;      Params:         2       0       0       0       0       0       0       0       0
   384 ;;      Locals:         0       0       0       0       0       0       0       0       0
   385 ;;      Temps:          0       0       0       0       0       0       0       0       0
   386 ;;      Totals:         2       0       0       0       0       0       0       0       0
   387 ;;Total ram usage:        2 bytes
   388 ;; Hardware stack levels used:    1
   389 ;; Hardware stack levels required when called:    1
   390 ;; This function calls:
   391 ;;		___lwdiv
   392 ;;		___lwmod
   393 ;; This function is called by:
   394 ;;		_main
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           	psect	text1
   399  000814                     __ptext1:
   400                           	opt callstack 0
   401  000814                     _convierte:
   402                           	opt callstack 29
   403  000814                     
   404                           ;test_lcd.c: 28:     millar = numero / 1000;
   405  000814  C00D  F006         	movff	convierte@numero,___lwdiv@dividend
   406  000818  C00E  F007         	movff	convierte@numero+1,___lwdiv@dividend+1
   407  00081C  0E03               	movlw	3
   408  00081E  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   409  000820  0EE8               	movlw	232
   410  000822  6E08               	movwf	___lwdiv@divisor^0,c
   411  000824  EC9F  F004         	call	___lwdiv	;wreg free
   412  000828  C006  F015         	movff	?___lwdiv,_millar
   413  00082C  C007  F016         	movff	?___lwdiv+1,_millar+1
   414                           
   415                           ;test_lcd.c: 29:     centena = (numero % 1000) / 100;
   416  000830  0E03               	movlw	3
   417  000832  6E04               	movwf	(___lwmod@divisor+1)^0,c
   418  000834  0EE8               	movlw	232
   419  000836  6E03               	movwf	___lwmod@divisor^0,c
   420  000838  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   421  00083C  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   422  000840  EC12  F005         	call	___lwmod	;wreg free
   423  000844  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   424  000848  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   425  00084C  0E00               	movlw	0
   426  00084E  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   427  000850  0E64               	movlw	100
   428  000852  6E08               	movwf	___lwdiv@divisor^0,c
   429  000854  EC9F  F004         	call	___lwdiv	;wreg free
   430  000858  C006  F013         	movff	?___lwdiv,_centena
   431  00085C  C007  F014         	movff	?___lwdiv+1,_centena+1
   432                           
   433                           ;test_lcd.c: 30:     decena = (numero % 100) / 10;
   434  000860  0E00               	movlw	0
   435  000862  6E04               	movwf	(___lwmod@divisor+1)^0,c
   436  000864  0E64               	movlw	100
   437  000866  6E03               	movwf	___lwmod@divisor^0,c
   438  000868  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   439  00086C  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   440  000870  EC12  F005         	call	___lwmod	;wreg free
   441  000874  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   442  000878  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   443  00087C  0E00               	movlw	0
   444  00087E  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   445  000880  0E0A               	movlw	10
   446  000882  6E08               	movwf	___lwdiv@divisor^0,c
   447  000884  EC9F  F004         	call	___lwdiv	;wreg free
   448  000888  C006  F011         	movff	?___lwdiv,_decena
   449  00088C  C007  F012         	movff	?___lwdiv+1,_decena+1
   450                           
   451                           ;test_lcd.c: 31:     unidad = numero % 10;
   452  000890  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   453  000894  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   454  000898  0E00               	movlw	0
   455  00089A  6E04               	movwf	(___lwmod@divisor+1)^0,c
   456  00089C  0E0A               	movlw	10
   457  00089E  6E03               	movwf	___lwmod@divisor^0,c
   458  0008A0  EC12  F005         	call	___lwmod	;wreg free
   459  0008A4  C001  F00F         	movff	?___lwmod,_unidad
   460  0008A8  C002  F010         	movff	?___lwmod+1,_unidad+1
   461  0008AC  0012               	return		;funcret
   462  0008AE                     __end_of_convierte:
   463                           	opt callstack 0
   464                           
   465 ;; *************** function ___lwmod *****************
   466 ;; Defined at:
   467 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwmod.c"
   468 ;; Parameters:    Size  Location     Type
   469 ;;  dividend        2    0[COMRAM] unsigned int 
   470 ;;  divisor         2    2[COMRAM] unsigned int 
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  counter         1    4[COMRAM] unsigned char 
   473 ;; Return value:  Size  Location     Type
   474 ;;                  2    0[COMRAM] unsigned int 
   475 ;; Registers used:
   476 ;;		wreg, status,2, status,0
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   482 ;;      Params:         4       0       0       0       0       0       0       0       0
   483 ;;      Locals:         1       0       0       0       0       0       0       0       0
   484 ;;      Temps:          0       0       0       0       0       0       0       0       0
   485 ;;      Totals:         5       0       0       0       0       0       0       0       0
   486 ;;Total ram usage:        5 bytes
   487 ;; Hardware stack levels used:    1
   488 ;; This function calls:
   489 ;;		Nothing
   490 ;; This function is called by:
   491 ;;		_convierte
   492 ;; This function uses a non-reentrant model
   493 ;;
   494                           
   495                           	psect	text2
   496  000A24                     __ptext2:
   497                           	opt callstack 0
   498  000A24                     ___lwmod:
   499                           	opt callstack 29
   500  000A24  5003               	movf	___lwmod@divisor^0,w,c
   501  000A26  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   502  000A28  B4D8               	btfsc	status,2,c
   503  000A2A  EF19  F005         	goto	u221
   504  000A2E  EF1B  F005         	goto	u220
   505  000A32                     u221:
   506  000A32  EF3F  F005         	goto	l635
   507  000A36                     u220:
   508  000A36  0E01               	movlw	1
   509  000A38  6E05               	movwf	___lwmod@counter^0,c
   510  000A3A  EF23  F005         	goto	l1091
   511  000A3E                     l1089:
   512  000A3E  90D8               	bcf	status,0,c
   513  000A40  3603               	rlcf	___lwmod@divisor^0,f,c
   514  000A42  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   515  000A44  2A05               	incf	___lwmod@counter^0,f,c
   516  000A46                     l1091:
   517  000A46  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   518  000A48  EF28  F005         	goto	u231
   519  000A4C  EF2A  F005         	goto	u230
   520  000A50                     u231:
   521  000A50  EF1F  F005         	goto	l1089
   522  000A54                     u230:
   523  000A54                     l1093:
   524  000A54  5003               	movf	___lwmod@divisor^0,w,c
   525  000A56  5C01               	subwf	___lwmod@dividend^0,w,c
   526  000A58  5004               	movf	(___lwmod@divisor+1)^0,w,c
   527  000A5A  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   528  000A5C  A0D8               	btfss	status,0,c
   529  000A5E  EF33  F005         	goto	u241
   530  000A62  EF35  F005         	goto	u240
   531  000A66                     u241:
   532  000A66  EF39  F005         	goto	l1097
   533  000A6A                     u240:
   534  000A6A  5003               	movf	___lwmod@divisor^0,w,c
   535  000A6C  5E01               	subwf	___lwmod@dividend^0,f,c
   536  000A6E  5004               	movf	(___lwmod@divisor+1)^0,w,c
   537  000A70  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   538  000A72                     l1097:
   539  000A72  90D8               	bcf	status,0,c
   540  000A74  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   541  000A76  3203               	rrcf	___lwmod@divisor^0,f,c
   542  000A78  2E05               	decfsz	___lwmod@counter^0,f,c
   543  000A7A  EF2A  F005         	goto	l1093
   544  000A7E                     l635:
   545  000A7E  C001  F001         	movff	___lwmod@dividend,?___lwmod
   546  000A82  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   547  000A86  0012               	return		;funcret
   548  000A88                     __end_of___lwmod:
   549                           	opt callstack 0
   550                           
   551 ;; *************** function ___lwdiv *****************
   552 ;; Defined at:
   553 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwdiv.c"
   554 ;; Parameters:    Size  Location     Type
   555 ;;  dividend        2    5[COMRAM] unsigned int 
   556 ;;  divisor         2    7[COMRAM] unsigned int 
   557 ;; Auto vars:     Size  Location     Type
   558 ;;  quotient        2    9[COMRAM] unsigned int 
   559 ;;  counter         1   11[COMRAM] unsigned char 
   560 ;; Return value:  Size  Location     Type
   561 ;;                  2    5[COMRAM] unsigned int 
   562 ;; Registers used:
   563 ;;		wreg, status,2, status,0
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   569 ;;      Params:         4       0       0       0       0       0       0       0       0
   570 ;;      Locals:         3       0       0       0       0       0       0       0       0
   571 ;;      Temps:          0       0       0       0       0       0       0       0       0
   572 ;;      Totals:         7       0       0       0       0       0       0       0       0
   573 ;;Total ram usage:        7 bytes
   574 ;; Hardware stack levels used:    1
   575 ;; This function calls:
   576 ;;		Nothing
   577 ;; This function is called by:
   578 ;;		_convierte
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582                           	psect	text3
   583  00093E                     __ptext3:
   584                           	opt callstack 0
   585  00093E                     ___lwdiv:
   586                           	opt callstack 29
   587  00093E  0E00               	movlw	0
   588  000940  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
   589  000942  0E00               	movlw	0
   590  000944  6E0A               	movwf	___lwdiv@quotient^0,c
   591  000946  5008               	movf	___lwdiv@divisor^0,w,c
   592  000948  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
   593  00094A  B4D8               	btfsc	status,2,c
   594  00094C  EFAA  F004         	goto	u191
   595  000950  EFAC  F004         	goto	u190
   596  000954                     u191:
   597  000954  EFD4  F004         	goto	l625
   598  000958                     u190:
   599  000958  0E01               	movlw	1
   600  00095A  6E0C               	movwf	___lwdiv@counter^0,c
   601  00095C  EFB4  F004         	goto	l1071
   602  000960                     l1069:
   603  000960  90D8               	bcf	status,0,c
   604  000962  3608               	rlcf	___lwdiv@divisor^0,f,c
   605  000964  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
   606  000966  2A0C               	incf	___lwdiv@counter^0,f,c
   607  000968                     l1071:
   608  000968  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
   609  00096A  EFB9  F004         	goto	u201
   610  00096E  EFBB  F004         	goto	u200
   611  000972                     u201:
   612  000972  EFB0  F004         	goto	l1069
   613  000976                     u200:
   614  000976                     l1073:
   615  000976  90D8               	bcf	status,0,c
   616  000978  360A               	rlcf	___lwdiv@quotient^0,f,c
   617  00097A  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
   618  00097C  5008               	movf	___lwdiv@divisor^0,w,c
   619  00097E  5C06               	subwf	___lwdiv@dividend^0,w,c
   620  000980  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   621  000982  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
   622  000984  A0D8               	btfss	status,0,c
   623  000986  EFC7  F004         	goto	u211
   624  00098A  EFC9  F004         	goto	u210
   625  00098E                     u211:
   626  00098E  EFCE  F004         	goto	l1081
   627  000992                     u210:
   628  000992  5008               	movf	___lwdiv@divisor^0,w,c
   629  000994  5E06               	subwf	___lwdiv@dividend^0,f,c
   630  000996  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   631  000998  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
   632  00099A  800A               	bsf	___lwdiv@quotient^0,0,c
   633  00099C                     l1081:
   634  00099C  90D8               	bcf	status,0,c
   635  00099E  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
   636  0009A0  3208               	rrcf	___lwdiv@divisor^0,f,c
   637  0009A2  2E0C               	decfsz	___lwdiv@counter^0,f,c
   638  0009A4  EFBB  F004         	goto	l1073
   639  0009A8                     l625:
   640  0009A8  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
   641  0009AC  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
   642  0009B0  0012               	return		;funcret
   643  0009B2                     __end_of___lwdiv:
   644                           	opt callstack 0
   645                           
   646 ;; *************** function _arrancaLCD *****************
   647 ;; Defined at:
   648 ;;		line 34 in file "test_lcd.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;		None
   651 ;; Auto vars:     Size  Location     Type
   652 ;;		None
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, status,2, status,0, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   662 ;;      Params:         0       0       0       0       0       0       0       0       0
   663 ;;      Locals:         0       0       0       0       0       0       0       0       0
   664 ;;      Temps:          1       0       0       0       0       0       0       0       0
   665 ;;      Totals:         1       0       0       0       0       0       0       0       0
   666 ;;Total ram usage:        1 bytes
   667 ;; Hardware stack levels used:    1
   668 ;; Hardware stack levels required when called:    3
   669 ;; This function calls:
   670 ;;		_BORRAR_LCD
   671 ;;		_CURSOR_HOME
   672 ;;		_CURSOR_ONOFF
   673 ;;		_LCD_CONFIG
   674 ;; This function is called by:
   675 ;;		_main
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           	psect	text4
   680  000BF8                     __ptext4:
   681                           	opt callstack 0
   682  000BF8                     _arrancaLCD:
   683                           	opt callstack 27
   684  000BF8                     
   685                           ;test_lcd.c: 35:     TRISD = 0x00;
   686  000BF8  0E00               	movlw	0
   687  000BFA  6E95               	movwf	149,c	;volatile
   688  000BFC                     
   689                           ;test_lcd.c: 36:     LCD_CONFIG();
   690  000BFC  EC44  F005         	call	_LCD_CONFIG	;wreg free
   691  000C00                     
   692                           ;test_lcd.c: 37:     _delay((unsigned long)((15)*(32000000UL/4000.0)));
   693  000C00  0E9C               	movlw	156
   694  000C02  6E05               	movwf	??_arrancaLCD^0,c
   695  000C04  0ED7               	movlw	215
   696  000C06                     u297:
   697  000C06  2EE8               	decfsz	wreg,f,c
   698  000C08  D7FE               	bra	u297
   699  000C0A  2E05               	decfsz	??_arrancaLCD^0,f,c
   700  000C0C  D7FC               	bra	u297
   701  000C0E  F000               	nop	
   702  000C10                     
   703                           ;test_lcd.c: 38:     CURSOR_ONOFF(1);
   704  000C10  0E01               	movlw	1
   705  000C12  ECE4  F005         	call	_CURSOR_ONOFF
   706  000C16                     
   707                           ;test_lcd.c: 39:     BORRAR_LCD();
   708  000C16  EC2F  F006         	call	_BORRAR_LCD	;wreg free
   709  000C1A                     
   710                           ;test_lcd.c: 40:     CURSOR_HOME();
   711  000C1A  EC2B  F006         	call	_CURSOR_HOME	;wreg free
   712  000C1E  0012               	return		;funcret
   713  000C20                     __end_of_arrancaLCD:
   714                           	opt callstack 0
   715                           
   716 ;; *************** function _LCD_CONFIG *****************
   717 ;; Defined at:
   718 ;;		line 72 in file "LCD.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;		None
   721 ;; Auto vars:     Size  Location     Type
   722 ;;		None
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, status,2, status,0, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   732 ;;      Params:         0       0       0       0       0       0       0       0       0
   733 ;;      Locals:         0       0       0       0       0       0       0       0       0
   734 ;;      Temps:          1       0       0       0       0       0       0       0       0
   735 ;;      Totals:         1       0       0       0       0       0       0       0       0
   736 ;;Total ram usage:        1 bytes
   737 ;; Hardware stack levels used:    1
   738 ;; Hardware stack levels required when called:    2
   739 ;; This function calls:
   740 ;;		_ENVIA_LCD_CMD
   741 ;;		_ENVIA_NIBBLE
   742 ;; This function is called by:
   743 ;;		_arrancaLCD
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           	psect	text5
   748  000A88                     __ptext5:
   749                           	opt callstack 0
   750  000A88                     _LCD_CONFIG:
   751                           	opt callstack 27
   752  000A88                     
   753                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   754  000A88  908C               	bcf	140,0,c	;volatile
   755                           
   756                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   757  000A8A  928C               	bcf	140,1,c	;volatile
   758  000A8C                     
   759                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   760  000A8C  0E30               	movlw	48
   761  000A8E  EC10  F006         	call	_ENVIA_NIBBLE
   762  000A92                     
   763                           ;LCD.c: 77:         _delay(24000);
   764  000A92  0E20               	movlw	32
   765  000A94  6E04               	movwf	??_LCD_CONFIG^0,c
   766  000A96  0E2A               	movlw	42
   767  000A98                     u307:
   768  000A98  2EE8               	decfsz	wreg,f,c
   769  000A9A  D7FE               	bra	u307
   770  000A9C  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   771  000A9E  D7FC               	bra	u307
   772  000AA0                     
   773                           ;LCD.c: 78:         _delay(24000);
   774  000AA0  0E20               	movlw	32
   775  000AA2  6E04               	movwf	??_LCD_CONFIG^0,c
   776  000AA4  0E2A               	movlw	42
   777  000AA6                     u317:
   778  000AA6  2EE8               	decfsz	wreg,f,c
   779  000AA8  D7FE               	bra	u317
   780  000AAA  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   781  000AAC  D7FC               	bra	u317
   782                           
   783                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   784  000AAE  0E30               	movlw	48
   785  000AB0  EC10  F006         	call	_ENVIA_NIBBLE
   786  000AB4                     
   787                           ;LCD.c: 83:  _delay(1200);
   788  000AB4  0EF0               	movlw	240
   789  000AB6                     u327:
   790  000AB6  D000               	nop2	
   791  000AB8  2EE8               	decfsz	wreg,f,c
   792  000ABA  D7FD               	bra	u327
   793  000ABC                     
   794                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   795  000ABC  0E30               	movlw	48
   796  000ABE  EC10  F006         	call	_ENVIA_NIBBLE
   797  000AC2                     
   798                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   799  000AC2  0E20               	movlw	32
   800  000AC4  EC10  F006         	call	_ENVIA_NIBBLE
   801  000AC8                     
   802                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   803  000AC8  0E01               	movlw	1
   804  000ACA  ECB0  F005         	call	_ENVIA_LCD_CMD
   805  000ACE                     
   806                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   807  000ACE  0E28               	movlw	40
   808  000AD0  ECB0  F005         	call	_ENVIA_LCD_CMD
   809  000AD4                     
   810                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   811  000AD4  0E0F               	movlw	15
   812  000AD6  ECB0  F005         	call	_ENVIA_LCD_CMD
   813  000ADA                     
   814                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   815  000ADA  0E06               	movlw	6
   816  000ADC  ECB0  F005         	call	_ENVIA_LCD_CMD
   817  000AE0                     
   818                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   819  000AE0  0E01               	movlw	1
   820  000AE2  ECB0  F005         	call	_ENVIA_LCD_CMD
   821  000AE6  0012               	return		;funcret
   822  000AE8                     __end_of_LCD_CONFIG:
   823                           	opt callstack 0
   824                           
   825 ;; *************** function _CURSOR_ONOFF *****************
   826 ;; Defined at:
   827 ;;		line 35 in file "LCD.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;  estado          1    wreg     unsigned char 
   830 ;; Auto vars:     Size  Location     Type
   831 ;;  estado          1    3[COMRAM] unsigned char 
   832 ;; Return value:  Size  Location     Type
   833 ;;                  1    wreg      void 
   834 ;; Registers used:
   835 ;;		wreg, status,2, status,0, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   841 ;;      Params:         0       0       0       0       0       0       0       0       0
   842 ;;      Locals:         1       0       0       0       0       0       0       0       0
   843 ;;      Temps:          0       0       0       0       0       0       0       0       0
   844 ;;      Totals:         1       0       0       0       0       0       0       0       0
   845 ;;Total ram usage:        1 bytes
   846 ;; Hardware stack levels used:    1
   847 ;; Hardware stack levels required when called:    2
   848 ;; This function calls:
   849 ;;		_ENVIA_LCD_CMD
   850 ;; This function is called by:
   851 ;;		_arrancaLCD
   852 ;; This function uses a non-reentrant model
   853 ;;
   854                           
   855                           	psect	text6
   856  000BC8                     __ptext6:
   857                           	opt callstack 0
   858  000BC8                     _CURSOR_ONOFF:
   859                           	opt callstack 27
   860                           
   861                           ;incstack = 0
   862                           ;CURSOR_ONOFF@estado stored from wreg
   863  000BC8  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   864  000BCA                     
   865                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   866  000BCA  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   867  000BCC  A4D8               	btfss	status,2,c
   868  000BCE  EFEB  F005         	goto	u21
   869  000BD2  EFED  F005         	goto	u20
   870  000BD6                     u21:
   871  000BD6  EFF0  F005         	goto	l903
   872  000BDA                     u20:
   873  000BDA  0E0E               	movlw	14
   874  000BDC  ECB0  F005         	call	_ENVIA_LCD_CMD
   875  000BE0                     l903:
   876                           
   877                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   878  000BE0  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   879  000BE2  A4D8               	btfss	status,2,c
   880  000BE4  EFF6  F005         	goto	u31
   881  000BE8  EFF8  F005         	goto	u30
   882  000BEC                     u31:
   883  000BEC  EFFB  F005         	goto	l99
   884  000BF0                     u30:
   885  000BF0  0E0C               	movlw	12
   886  000BF2  ECB0  F005         	call	_ENVIA_LCD_CMD
   887  000BF6                     l99:
   888  000BF6  0012               	return		;funcret
   889  000BF8                     __end_of_CURSOR_ONOFF:
   890                           	opt callstack 0
   891                           
   892 ;; *************** function _CURSOR_HOME *****************
   893 ;; Defined at:
   894 ;;		line 30 in file "LCD.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;		None
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      void 
   901 ;; Registers used:
   902 ;;		wreg, status,2, status,0, cstack
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   908 ;;      Params:         0       0       0       0       0       0       0       0       0
   909 ;;      Locals:         0       0       0       0       0       0       0       0       0
   910 ;;      Temps:          0       0       0       0       0       0       0       0       0
   911 ;;      Totals:         0       0       0       0       0       0       0       0       0
   912 ;;Total ram usage:        0 bytes
   913 ;; Hardware stack levels used:    1
   914 ;; Hardware stack levels required when called:    2
   915 ;; This function calls:
   916 ;;		_ENVIA_LCD_CMD
   917 ;; This function is called by:
   918 ;;		_arrancaLCD
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text7
   923  000C56                     __ptext7:
   924                           	opt callstack 0
   925  000C56                     _CURSOR_HOME:
   926                           	opt callstack 27
   927  000C56                     
   928                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   929  000C56  0E02               	movlw	2
   930  000C58  ECB0  F005         	call	_ENVIA_LCD_CMD
   931  000C5C  0012               	return		;funcret
   932  000C5E                     __end_of_CURSOR_HOME:
   933                           	opt callstack 0
   934                           
   935 ;; *************** function _BORRAR_LCD *****************
   936 ;; Defined at:
   937 ;;		line 67 in file "LCD.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;		None
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, status,2, status,0, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   951 ;;      Params:         0       0       0       0       0       0       0       0       0
   952 ;;      Locals:         0       0       0       0       0       0       0       0       0
   953 ;;      Temps:          0       0       0       0       0       0       0       0       0
   954 ;;      Totals:         0       0       0       0       0       0       0       0       0
   955 ;;Total ram usage:        0 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    2
   958 ;; This function calls:
   959 ;;		_ENVIA_LCD_CMD
   960 ;; This function is called by:
   961 ;;		_arrancaLCD
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           	psect	text8
   966  000C5E                     __ptext8:
   967                           	opt callstack 0
   968  000C5E                     _BORRAR_LCD:
   969                           	opt callstack 27
   970  000C5E                     
   971                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   972  000C5E  0E01               	movlw	1
   973  000C60  ECB0  F005         	call	_ENVIA_LCD_CMD
   974  000C64  0012               	return		;funcret
   975  000C66                     __end_of_BORRAR_LCD:
   976                           	opt callstack 0
   977                           
   978 ;; *************** function _POS_CURSOR *****************
   979 ;; Defined at:
   980 ;;		line 6 in file "LCD.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;  fila            1    wreg     unsigned char 
   983 ;;  columna         1    3[COMRAM] unsigned char 
   984 ;; Auto vars:     Size  Location     Type
   985 ;;  fila            1    4[COMRAM] unsigned char 
   986 ;; Return value:  Size  Location     Type
   987 ;;                  1    wreg      void 
   988 ;; Registers used:
   989 ;;		wreg, status,2, status,0, cstack
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   995 ;;      Params:         1       0       0       0       0       0       0       0       0
   996 ;;      Locals:         1       0       0       0       0       0       0       0       0
   997 ;;      Temps:          0       0       0       0       0       0       0       0       0
   998 ;;      Totals:         2       0       0       0       0       0       0       0       0
   999 ;;Total ram usage:        2 bytes
  1000 ;; Hardware stack levels used:    1
  1001 ;; Hardware stack levels required when called:    2
  1002 ;; This function calls:
  1003 ;;		_ENVIA_LCD_CMD
  1004 ;; This function is called by:
  1005 ;;		_main
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           	psect	text9
  1010  000B26                     __ptext9:
  1011                           	opt callstack 0
  1012  000B26                     _POS_CURSOR:
  1013                           	opt callstack 28
  1014                           
  1015                           ;incstack = 0
  1016                           ;POS_CURSOR@fila stored from wreg
  1017  000B26  6E05               	movwf	POS_CURSOR@fila^0,c
  1018  000B28                     
  1019                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1020  000B28  0405               	decf	POS_CURSOR@fila^0,w,c
  1021  000B2A  A4D8               	btfss	status,2,c
  1022  000B2C  EF9A  F005         	goto	u261
  1023  000B30  EF9C  F005         	goto	u260
  1024  000B34                     u261:
  1025  000B34  EFA2  F005         	goto	l1115
  1026  000B38                     u260:
  1027  000B38                     
  1028                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1029  000B38  5004               	movf	POS_CURSOR@columna^0,w,c
  1030  000B3A  0F80               	addlw	128
  1031  000B3C  ECB0  F005         	call	_ENVIA_LCD_CMD
  1032                           
  1033                           ;LCD.c: 11:  }
  1034  000B40  EFAF  F005         	goto	l81
  1035  000B44                     l1115:
  1036  000B44  0E02               	movlw	2
  1037  000B46  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1038  000B48  A4D8               	btfss	status,2,c
  1039  000B4A  EFA9  F005         	goto	u271
  1040  000B4E  EFAB  F005         	goto	u270
  1041  000B52                     u271:
  1042  000B52  EFAF  F005         	goto	l81
  1043  000B56                     u270:
  1044  000B56                     
  1045                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1046  000B56  5004               	movf	POS_CURSOR@columna^0,w,c
  1047  000B58  0FC0               	addlw	192
  1048  000B5A  ECB0  F005         	call	_ENVIA_LCD_CMD
  1049  000B5E                     l81:
  1050  000B5E  0012               	return		;funcret
  1051  000B60                     __end_of_POS_CURSOR:
  1052                           	opt callstack 0
  1053                           
  1054 ;; *************** function _ENVIA_LCD_CMD *****************
  1055 ;; Defined at:
  1056 ;;		line 104 in file "LCD.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  dato            1    wreg     unsigned char 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  dato            1    1[COMRAM] unsigned char 
  1061 ;;  aux             1    2[COMRAM] unsigned char 
  1062 ;; Return value:  Size  Location     Type
  1063 ;;                  1    wreg      void 
  1064 ;; Registers used:
  1065 ;;		wreg, status,2, status,0, cstack
  1066 ;; Tracked objects:
  1067 ;;		On entry : 0/0
  1068 ;;		On exit  : 0/0
  1069 ;;		Unchanged: 0/0
  1070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1071 ;;      Params:         0       0       0       0       0       0       0       0       0
  1072 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1073 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1074 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1075 ;;Total ram usage:        2 bytes
  1076 ;; Hardware stack levels used:    1
  1077 ;; Hardware stack levels required when called:    1
  1078 ;; This function calls:
  1079 ;;		_ENVIA_NIBBLE
  1080 ;;		_LEER_LCD
  1081 ;; This function is called by:
  1082 ;;		_POS_CURSOR
  1083 ;;		_CURSOR_HOME
  1084 ;;		_CURSOR_ONOFF
  1085 ;;		_BORRAR_LCD
  1086 ;;		_LCD_CONFIG
  1087 ;;		_BLINK_CURSOR
  1088 ;;		_DISPLAY_ONOFF
  1089 ;;		_GENERACARACTER
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text10
  1094  000B60                     __ptext10:
  1095                           	opt callstack 0
  1096  000B60                     _ENVIA_LCD_CMD:
  1097                           	opt callstack 27
  1098                           
  1099                           ;incstack = 0
  1100                           ;ENVIA_LCD_CMD@dato stored from wreg
  1101  000B60  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1102  000B62                     
  1103                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1104  000B62  908C               	bcf	140,0,c	;volatile
  1105  000B64                     
  1106                           ;LCD.c: 108:  LEER_LCD();
  1107  000B64  ECD9  F004         	call	_LEER_LCD	;wreg free
  1108  000B68                     
  1109                           ;LCD.c: 109:  TRISD = 0b00000000;
  1110  000B68  0E00               	movlw	0
  1111  000B6A  6E95               	movwf	149,c	;volatile
  1112  000B6C                     
  1113                           ;LCD.c: 111:         _delay(1200);
  1114  000B6C  0EF0               	movlw	240
  1115  000B6E                     u337:
  1116  000B6E  D000               	nop2	
  1117  000B70  2EE8               	decfsz	wreg,f,c
  1118  000B72  D7FD               	bra	u337
  1119  000B74                     
  1120                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1121  000B74  928C               	bcf	140,1,c	;volatile
  1122  000B76                     
  1123                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1124  000B76  948C               	bcf	140,2,c	;volatile
  1125  000B78                     
  1126                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1127  000B78  908C               	bcf	140,0,c	;volatile
  1128  000B7A                     
  1129                           ;LCD.c: 115:  aux = dato & 0xF0;
  1130  000B7A  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1131  000B7C  0BF0               	andlw	240
  1132  000B7E  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1133  000B80                     
  1134                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1135  000B80  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1136  000B82  EC10  F006         	call	_ENVIA_NIBBLE
  1137  000B86                     
  1138                           ;LCD.c: 117:  aux = dato<<4;
  1139  000B86  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1140  000B88  0BF0               	andlw	240
  1141  000B8A  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1142  000B8C                     
  1143                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1144  000B8C  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1145  000B8E  EC10  F006         	call	_ENVIA_NIBBLE
  1146  000B92  0012               	return		;funcret
  1147  000B94                     __end_of_ENVIA_LCD_CMD:
  1148                           	opt callstack 0
  1149                           
  1150 ;; *************** function _ESCRIBE_MENSAJE *****************
  1151 ;; Defined at:
  1152 ;;		line 41 in file "LCD.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1155 ;;		 -> STR_2(6), STR_1(12), 
  1156 ;;  tam             1    5[COMRAM] unsigned char 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  i               1    8[COMRAM] unsigned char 
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1168 ;;      Params:         3       0       0       0       0       0       0       0       0
  1169 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1170 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1171 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1172 ;;Total ram usage:        6 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    2
  1175 ;; This function calls:
  1176 ;;		_ENVIA_CHAR
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           	psect	text11
  1183  000AE8                     __ptext11:
  1184                           	opt callstack 0
  1185  000AE8                     _ESCRIBE_MENSAJE:
  1186                           	opt callstack 28
  1187  000AE8                     
  1188                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1189  000AE8  0E00               	movlw	0
  1190  000AEA  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1191                           
  1192                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1193  000AEC  0E00               	movlw	0
  1194  000AEE  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1195  000AF0  EF89  F005         	goto	l1109
  1196  000AF4                     l1105:
  1197                           
  1198                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1199  000AF4  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1200  000AF6  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1201  000AF8  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1202  000AFA  0E00               	movlw	0
  1203  000AFC  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1204  000AFE  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1205  000B00  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1206  000B04  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1207  000B08                     	if	0	;tblptru may be non-zero
  1208  000B08                     	endif
  1209  000B08                     	if	0	;tblptru may be non-zero
  1210  000B08                     	endif
  1211  000B08  0008               	tblrd		*
  1212  000B0A  50F5               	movf	tablat,w,c
  1213  000B0C  ECCA  F005         	call	_ENVIA_CHAR
  1214  000B10                     
  1215                           ;LCD.c: 47:  }
  1216  000B10  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1217  000B12                     l1109:
  1218  000B12  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1219  000B14  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1220  000B16  A0D8               	btfss	status,0,c
  1221  000B18  EF90  F005         	goto	u251
  1222  000B1C  EF92  F005         	goto	u250
  1223  000B20                     u251:
  1224  000B20  EF7A  F005         	goto	l1105
  1225  000B24                     u250:
  1226  000B24  0012               	return		;funcret
  1227  000B26                     __end_of_ESCRIBE_MENSAJE:
  1228                           	opt callstack 0
  1229                           
  1230 ;; *************** function _ENVIA_CHAR *****************
  1231 ;; Defined at:
  1232 ;;		line 50 in file "LCD.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  dato            1    wreg     unsigned char 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  dato            1    1[COMRAM] unsigned char 
  1237 ;;  aux             1    2[COMRAM] unsigned char 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1247 ;;      Params:         0       0       0       0       0       0       0       0       0
  1248 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1250 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1251 ;;Total ram usage:        2 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    1
  1254 ;; This function calls:
  1255 ;;		_ENVIA_NIBBLE
  1256 ;;		_LEER_LCD
  1257 ;; This function is called by:
  1258 ;;		_main
  1259 ;;		_ESCRIBE_MENSAJE
  1260 ;;		_GENERACARACTER
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           	psect	text12
  1265  000B94                     __ptext12:
  1266                           	opt callstack 0
  1267  000B94                     _ENVIA_CHAR:
  1268                           	opt callstack 28
  1269                           
  1270                           ;incstack = 0
  1271                           ;ENVIA_CHAR@dato stored from wreg
  1272  000B94  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1273  000B96                     
  1274                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1275  000B96  808C               	bsf	140,0,c	;volatile
  1276  000B98                     
  1277                           ;LCD.c: 54:  LEER_LCD();
  1278  000B98  ECD9  F004         	call	_LEER_LCD	;wreg free
  1279  000B9C                     
  1280                           ;LCD.c: 55:  TRISD = 0x00;
  1281  000B9C  0E00               	movlw	0
  1282  000B9E  6E95               	movwf	149,c	;volatile
  1283  000BA0                     
  1284                           ;LCD.c: 56:         _delay(1200);
  1285  000BA0  0EF0               	movlw	240
  1286  000BA2                     u347:
  1287  000BA2  D000               	nop2	
  1288  000BA4  2EE8               	decfsz	wreg,f,c
  1289  000BA6  D7FD               	bra	u347
  1290  000BA8                     
  1291                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1292  000BA8  928C               	bcf	140,1,c	;volatile
  1293  000BAA                     
  1294                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1295  000BAA  948C               	bcf	140,2,c	;volatile
  1296  000BAC                     
  1297                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1298  000BAC  808C               	bsf	140,0,c	;volatile
  1299  000BAE                     
  1300                           ;LCD.c: 61:  aux = dato & 0xF0;
  1301  000BAE  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1302  000BB0  0BF0               	andlw	240
  1303  000BB2  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1304  000BB4                     
  1305                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1306  000BB4  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1307  000BB6  EC10  F006         	call	_ENVIA_NIBBLE
  1308  000BBA                     
  1309                           ;LCD.c: 63:  aux = dato << 4;
  1310  000BBA  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1311  000BBC  0BF0               	andlw	240
  1312  000BBE  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1313  000BC0                     
  1314                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1315  000BC0  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1316  000BC2  EC10  F006         	call	_ENVIA_NIBBLE
  1317  000BC6  0012               	return		;funcret
  1318  000BC8                     __end_of_ENVIA_CHAR:
  1319                           	opt callstack 0
  1320                           
  1321 ;; *************** function _LEER_LCD *****************
  1322 ;; Defined at:
  1323 ;;		line 121 in file "LCD.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  aux             1    0[COMRAM] unsigned char 
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  1    wreg      void 
  1330 ;; Registers used:
  1331 ;;		wreg, status,2, status,0
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1337 ;;      Params:         0       0       0       0       0       0       0       0       0
  1338 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1339 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1340 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1341 ;;Total ram usage:        1 bytes
  1342 ;; Hardware stack levels used:    1
  1343 ;; This function calls:
  1344 ;;		Nothing
  1345 ;; This function is called by:
  1346 ;;		_ENVIA_CHAR
  1347 ;;		_ENVIA_LCD_CMD
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           	psect	text13
  1352  0009B2                     __ptext13:
  1353                           	opt callstack 0
  1354  0009B2                     _LEER_LCD:
  1355                           	opt callstack 27
  1356  0009B2                     
  1357                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1358  0009B2  0EF8               	movlw	248
  1359  0009B4  6E95               	movwf	149,c	;volatile
  1360  0009B6                     
  1361                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1362  0009B6  908C               	bcf	140,0,c	;volatile
  1363  0009B8                     
  1364                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1365  0009B8  828C               	bsf	140,1,c	;volatile
  1366  0009BA                     
  1367                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1368  0009BA  848C               	bsf	140,2,c	;volatile
  1369  0009BC                     
  1370                           ;LCD.c: 128:         _delay(1200);
  1371  0009BC  0EF0               	movlw	240
  1372  0009BE                     u357:
  1373  0009BE  D000               	nop2	
  1374  0009C0  2EE8               	decfsz	wreg,f,c
  1375  0009C2  D7FD               	bra	u357
  1376  0009C4                     
  1377                           ;LCD.c: 130:  aux = PORTD;
  1378  0009C4  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1379  0009C8                     
  1380                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1381  0009C8  948C               	bcf	140,2,c	;volatile
  1382  0009CA                     
  1383                           ;LCD.c: 132:         _delay(1200);
  1384  0009CA  0EF0               	movlw	240
  1385  0009CC                     u367:
  1386  0009CC  D000               	nop2	
  1387  0009CE  2EE8               	decfsz	wreg,f,c
  1388  0009D0  D7FD               	bra	u367
  1389  0009D2                     
  1390                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1391  0009D2  848C               	bsf	140,2,c	;volatile
  1392  0009D4                     
  1393                           ;LCD.c: 135:         _delay(1200);
  1394  0009D4  0EF0               	movlw	240
  1395  0009D6                     u377:
  1396  0009D6  D000               	nop2	
  1397  0009D8  2EE8               	decfsz	wreg,f,c
  1398  0009DA  D7FD               	bra	u377
  1399  0009DC                     
  1400                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1401  0009DC  948C               	bcf	140,2,c	;volatile
  1402  0009DE                     l829:
  1403                           
  1404                           ;LCD.c: 138:  aux = aux & 0x80;
  1405  0009DE  5001               	movf	LEER_LCD@aux^0,w,c
  1406  0009E0  0B80               	andlw	128
  1407  0009E2  6E01               	movwf	LEER_LCD@aux^0,c
  1408                           
  1409                           ;LCD.c: 139:  while(aux == 0x80)
  1410  0009E4  EF08  F005         	goto	l843
  1411  0009E8                     l124:
  1412                           
  1413                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1414  0009E8  848C               	bsf	140,2,c	;volatile
  1415  0009EA                     
  1416                           ;LCD.c: 142:             _delay(1200);
  1417  0009EA  0EF0               	movlw	240
  1418  0009EC                     u387:
  1419  0009EC  D000               	nop2	
  1420  0009EE  2EE8               	decfsz	wreg,f,c
  1421  0009F0  D7FD               	bra	u387
  1422  0009F2                     
  1423                           ;LCD.c: 143:             aux = PORTD;
  1424  0009F2  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1425  0009F6                     
  1426                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1427  0009F6  948C               	bcf	140,2,c	;volatile
  1428                           
  1429                           ;LCD.c: 145:             _delay(1200);
  1430  0009F8  0EF0               	movlw	240
  1431  0009FA                     u397:
  1432  0009FA  D000               	nop2	
  1433  0009FC  2EE8               	decfsz	wreg,f,c
  1434  0009FE  D7FD               	bra	u397
  1435  000A00                     
  1436                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1437  000A00  848C               	bsf	140,2,c	;volatile
  1438                           
  1439                           ;LCD.c: 147:             _delay(1200);
  1440  000A02  0EF0               	movlw	240
  1441  000A04                     u407:
  1442  000A04  D000               	nop2	
  1443  000A06  2EE8               	decfsz	wreg,f,c
  1444  000A08  D7FD               	bra	u407
  1445  000A0A                     
  1446                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1447  000A0A  948C               	bcf	140,2,c	;volatile
  1448  000A0C  EFEF  F004         	goto	l829
  1449  000A10                     l843:
  1450                           
  1451                           ;LCD.c: 139:  while(aux == 0x80)
  1452  000A10  0E80               	movlw	128
  1453  000A12  1801               	xorwf	LEER_LCD@aux^0,w,c
  1454  000A14  B4D8               	btfsc	status,2,c
  1455  000A16  EF0F  F005         	goto	u11
  1456  000A1A  EF11  F005         	goto	u10
  1457  000A1E                     u11:
  1458  000A1E  EFF4  F004         	goto	l124
  1459  000A22                     u10:
  1460  000A22  0012               	return		;funcret
  1461  000A24                     __end_of_LEER_LCD:
  1462                           	opt callstack 0
  1463                           
  1464 ;; *************** function _ENVIA_NIBBLE *****************
  1465 ;; Defined at:
  1466 ;;		line 93 in file "LCD.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  dato            1    wreg     unsigned char 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  dato            1    0[COMRAM] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg, status,2, status,0
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1480 ;;      Params:         0       0       0       0       0       0       0       0       0
  1481 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1482 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1483 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1484 ;;Total ram usage:        1 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; This function calls:
  1487 ;;		Nothing
  1488 ;; This function is called by:
  1489 ;;		_ENVIA_CHAR
  1490 ;;		_LCD_CONFIG
  1491 ;;		_ENVIA_LCD_CMD
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text14
  1496  000C20                     __ptext14:
  1497                           	opt callstack 0
  1498  000C20                     _ENVIA_NIBBLE:
  1499                           	opt callstack 28
  1500                           
  1501                           ;incstack = 0
  1502                           ;ENVIA_NIBBLE@dato stored from wreg
  1503  000C20  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1504  000C22                     
  1505                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1506  000C22  0E0F               	movlw	15
  1507  000C24  168C               	andwf	140,f,c	;volatile
  1508                           
  1509                           ;LCD.c: 96:  dato &= 0xF0;
  1510  000C26  0EF0               	movlw	240
  1511  000C28  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1512                           
  1513                           ;LCD.c: 97:  LATD|= dato;
  1514  000C2A  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1515  000C2C  128C               	iorwf	140,f,c	;volatile
  1516  000C2E                     
  1517                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1518  000C2E  848C               	bsf	140,2,c	;volatile
  1519  000C30                     
  1520                           ;LCD.c: 100:         _delay(1200);
  1521  000C30  0EF0               	movlw	240
  1522  000C32                     u417:
  1523  000C32  D000               	nop2	
  1524  000C34  2EE8               	decfsz	wreg,f,c
  1525  000C36  D7FD               	bra	u417
  1526  000C38                     
  1527                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1528  000C38  948C               	bcf	140,2,c	;volatile
  1529  000C3A  0012               	return		;funcret
  1530  000C3C                     __end_of_ENVIA_NIBBLE:
  1531                           	opt callstack 0
  1532                           
  1533                           	psect	rparam
  1534  0000                     tosu	equ	0xFFF
  1535                           tosh	equ	0xFFE
  1536                           tosl	equ	0xFFD
  1537                           stkptr	equ	0xFFC
  1538                           pclatu	equ	0xFFB
  1539                           pclath	equ	0xFFA
  1540                           pcl	equ	0xFF9
  1541                           tblptru	equ	0xFF8
  1542                           tblptrh	equ	0xFF7
  1543                           tblptrl	equ	0xFF6
  1544                           tablat	equ	0xFF5
  1545                           prodh	equ	0xFF4
  1546                           prodl	equ	0xFF3
  1547                           indf0	equ	0xFEF
  1548                           postinc0	equ	0xFEE
  1549                           postdec0	equ	0xFED
  1550                           preinc0	equ	0xFEC
  1551                           plusw0	equ	0xFEB
  1552                           fsr0h	equ	0xFEA
  1553                           fsr0l	equ	0xFE9
  1554                           wreg	equ	0xFE8
  1555                           indf1	equ	0xFE7
  1556                           postinc1	equ	0xFE6
  1557                           postdec1	equ	0xFE5
  1558                           preinc1	equ	0xFE4
  1559                           plusw1	equ	0xFE3
  1560                           fsr1h	equ	0xFE2
  1561                           fsr1l	equ	0xFE1
  1562                           bsr	equ	0xFE0
  1563                           indf2	equ	0xFDF
  1564                           postinc2	equ	0xFDE
  1565                           postdec2	equ	0xFDD
  1566                           preinc2	equ	0xFDC
  1567                           plusw2	equ	0xFDB
  1568                           fsr2h	equ	0xFDA
  1569                           fsr2l	equ	0xFD9
  1570                           status	equ	0xFD8


Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[6]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _arrancaLCD->_CURSOR_ONOFF
    _arrancaLCD->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2841
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                         _arrancaLCD
                          _convierte
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1397
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _arrancaLCD                                           1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _arrancaLCD
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      18       1       25.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      20        0.0%
DATA                 0      0      18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Oct 18 17:15:26 2019

                      l43 08AC                        l52 08D0                        l46 0C1E  
                      l81 0B5E                        l94 0C5C                        l99 0BF6  
                      u10 0A22                        u11 0A1E                        u20 0BDA  
                      u21 0BD6                        u30 0BF0                        u31 0BEC  
             __CFG_BORV$3 000000        __CFG_FOSC$XTPLL_XT 000000             ENVIA_CHAR@aux 0003  
                     l111 0C64                       l120 0B92                       l105 0B24  
                     l114 0AE6                       l124 09E8                       l108 0BC6  
                     l117 0C3A                       l126 0A22                       l632 09B0  
                     l625 09A8                       l642 0A86                       l811 09B8  
                     l635 0A7E                       l821 09CA                       l813 09BA  
                     l901 0BDA                       l831 09EA                       l823 09D2  
                     l815 09BC                       l807 09B2                       l911 0B96  
                     l903 0BE0                       l833 09F2                       l825 09D4  
                     l817 09C4                       l809 09B6                       l921 0BAA  
                     l913 0B98                       l905 0BF0                       l851 0C38  
                     l835 09F6                       l843 0A10                       l827 09DC  
                     l819 09C8                       l931 0BC0                       l923 0BAC  
                     l915 0B9C                       l907 0C5E                       l845 0C22  
                     l837 0A00                       l829 09DE                       l925 0BAE  
                     l917 0BA0                       l861 0B74                       l853 0B62  
                     l909 0C56                       l847 0C2E                       l839 0A0A  
                     l927 0BB4                       l919 0BA8                       l871 0B86  
                     l863 0B76                       l855 0B64                       l849 0C30  
                     l929 0BBA                       l873 0B8C                       l865 0B78  
                     l857 0B68                       l881 0AA0                       l867 0B7A  
                     l859 0B6C                       l891 0ACE                       l883 0AB4  
                     l875 0A88                       l869 0B80                       l893 0AD4  
                     l885 0ABC                       l877 0A8C                       l981 0C16  
                     l973 0BF8                       l895 0ADA                       l887 0AC2  
                     l879 0A92                       l983 0C1A                       l975 0BFC  
                     l897 0AE0                       l889 0AC8                       l977 0C00  
                     l899 0BCA                       l979 0C10                       u200 0976  
                     u201 0972                       u210 0992                       u211 098E  
                     u220 0A36                       u221 0A32                       u230 0A54  
                     u231 0A50                       u240 0A6A                       u241 0A66  
                     u250 0B24                       u251 0B20                       u307 0A98  
                     u260 0B38                       u261 0B34                       u317 0AA6  
                     u270 0B56                       u190 0958                       u407 0A04  
                     u271 0B52                       u327 0AB6                       u191 0954  
                     u280 08DE                       u417 0C32                       u337 0B6E  
                     u281 08DA                       u347 0BA2                       u357 09BE  
                     u367 09CC                       u377 09D6                       u297 0C06  
                     u387 09EC                       u397 09FA              __CFG_BOR$OFF 000000  
             LEER_LCD@aux 0001                       wreg 000FE8              ?_CURSOR_HOME 0001  
          ??_ENVIA_NIBBLE 0001              __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0002  
            __CFG_WDT$OFF 000000                      l1101 0814                      l1103 0AE8  
                    l1111 0B28                      l1105 0AF4                      l1113 0B38  
                    l1121 08B2                      l1107 0B10                      l1115 0B44  
                    l1131 08DE                      l1123 08B6                      l1109 0B12  
                    l1117 0B56                      l1141 0916                      l1133 08E4  
                    l1125 08BA                      l1071 0968                      l1063 093E  
                    l1143 091E                      l1135 08F0                      l1127 08BE  
                    l1119 08AE                      l1081 099C                      l1073 0976  
                    l1065 0946                      l1145 0926                      l1137 08FC  
                    l1129 08CE                      l1083 09A2                      l1075 097C  
                    l1067 0958                      l1091 0A46                      l1147 092E  
                    l1139 0906                      l1077 0992                      l1069 0960  
                    l1093 0A54                      l1085 0A24                      l1079 099A  
                    l1095 0A6A                      l1087 0A36                      l1097 0A72  
                    l1089 0A3E                      l1099 0A78                      STR_1 0801  
                    STR_2 080D                      _LATD 000F8C              __CFG_PWRT$ON 000000  
                    _main 08AE                      start 0000             ?_CURSOR_ONOFF 0001  
           __CFG_MCLRE$ON 000000              ___param_bank 000000           ??_ENVIA_LCD_CMD 0002  
        __end_of_LEER_LCD 0A24       __size_of_BORRAR_LCD 0008             __CFG_PLLDIV$1 000000  
          __CFG_CCP2MX$ON 000000                     ?_main 0001           __end_of___lwdiv 09B2  
         __end_of___lwmod 0A88                     _PORTD 000F83       __size_of_LCD_CONFIG 0060  
                   _TRISD 000F95       __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0004  
                   tablat 000FF5                     status 000FD8            ??_CURSOR_ONOFF 0004  
         __initialization 0C3C              __end_of_main 093E           _ESCRIBE_MENSAJE 0AE8  
                  ??_main 000F             __activetblptr 000001                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  _ADRESL 000FC3                    _decena 0011      __end_of_ENVIA_NIBBLE 0C3C  
               ??___lwdiv 000A                 ??___lwmod 0005       __size_of_POS_CURSOR 003A  
                  _millar 0015                    clear_0 0C42                    _unidad 000F  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0C48  
         __CFG_PBADEN$OFF 000000              ??_LCD_CONFIG 0004             ___rparam_used 000001  
            ??_ENVIA_CHAR 0002   __end_of_ESCRIBE_MENSAJE 0B26            __pcstackCOMRAM 0001  
      __end_of_BORRAR_LCD 0C66          ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0BF8  
      __end_of_LCD_CONFIG 0AE8        __end_of_ENVIA_CHAR 0BC8                _canal_cero 0017  
      __size_of_convierte 009A                ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001  
              _arrancaLCD 0BF8              ??_POS_CURSOR 0005     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0004  
                 ___lwdiv 093E                   ___lwmod 0A24              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0B94         __end_of_convierte 08AE                   __pcinit 0C3C  
      __end_of_POS_CURSOR 0B60                   __ramtop 0800                   _centena 0013  
                 __ptext0 08AE                   __ptext1 0814                   __ptext2 0A24  
                 __ptext3 093E                   __ptext4 0BF8                   __ptext5 0A88  
                 __ptext6 0BC8                   __ptext7 0C56                   __ptext8 0C5E  
                 __ptext9 0B26              _ENVIA_NIBBLE 0C20      end_of_initialization 0C48  
                 postinc0 000FEE     __size_of_CURSOR_ONOFF 0030               ?_arrancaLCD 0001  
       __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0BC8        CURSOR_ONOFF@estado 0004  
           ??_CURSOR_HOME 0004       start_initialization 0C3C         ENVIA_LCD_CMD@dato 0002  
     __size_of_arrancaLCD 0028          __CFG_LPT1OSC$OFF 000000               __pbssCOMRAM 000F  
     __end_of_CURSOR_HOME 0C5E          ___lwdiv@dividend 0006                  ?___lwdiv 0006  
                ?___lwmod 0001               __smallconst 0800                 _convierte 0814  
         convierte@numero 000D          ___lwdiv@quotient 000A                  _LEER_LCD 09B2  
                _LATDbits 000F8C          __CFG_WDTPS$32768 000000          ESCRIBE_MENSAJE@i 0009  
          POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 003E                _ADCON0bits 000FC2  
              ?_convierte 000D              ??_arrancaLCD 0005               _CURSOR_HOME 0C56  
  __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000                  __Lrparam 0000  
            __Lsmallconst 0800        __end_of_arrancaLCD 0C20          __size_of___lwdiv 0074  
        __size_of___lwmod 0064           ___lwdiv@divisor 0008           ___lwdiv@counter 000C  
                __ptext10 0B60                  __ptext11 0AE8                  __ptext12 0B94  
                __ptext13 09B2                  __ptext14 0C20                _BORRAR_LCD 0C5E  
           __size_of_main 0090                _LCD_CONFIG 0A88                _ENVIA_CHAR 0B94  
           _ENVIA_LCD_CMD 0B60     __CFG_CPUDIV$OSC2_PLL3 000000               ??_convierte 000F  
       ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004          ___lwmod@dividend 0001  
          ?_ENVIA_LCD_CMD 0001           ___lwmod@divisor 0003           ___lwmod@counter 0005  
             ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001                _POS_CURSOR 0B26  
             ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006               ?_ENVIA_CHAR 0001  
       POS_CURSOR@columna 0004  
