

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Jan 29 17:57:15 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           ; Version 2.05
    34                           ; Generated 20/12/2018 GMT
    35                           ; 
    36                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4550 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	idataCOMRAM
    69  000C52                     __pidataCOMRAM:
    70                           	opt callstack 0
    71                           
    72                           ;initializer for _horas
    73  000C52  11                 	db	17
    74                           
    75                           ;initializer for _minutos
    76  000C53  0A                 	db	10
    77  0000                     _PORTD	set	3971
    78  0000                     _LATD	set	3980
    79  0000                     _LATDbits	set	3980
    80  0000                     _PIR1bits	set	3998
    81  0000                     _PIE1bits	set	3997
    82  0000                     _INTCON3bits	set	4080
    83  0000                     _INTCONbits	set	4082
    84  0000                     _RCONbits	set	4048
    85  0000                     _CCP1CON	set	4029
    86  0000                     _CCPR1L	set	4030
    87  0000                     _CCPR1H	set	4031
    88  0000                     _T1CON	set	4045
    89  0000                     _TRISD	set	3989
    90                           
    91                           	psect	smallconst
    92  000800                     __psmallconst:
    93                           	opt callstack 0
    94  000800  00                 	db	0
    95  000801                     STR_1:
    96  000801  52                 	db	82	;'R'
    97  000802  65                 	db	101	;'e'
    98  000803  6C                 	db	108	;'l'
    99  000804  6F                 	db	111	;'o'
   100  000805  6A                 	db	106	;'j'
   101  000806  20                 	db	32
   102  000807  55                 	db	85	;'U'
   103  000808  50                 	db	80	;'P'
   104  000809  43                 	db	67	;'C'
   105  00080A  20                 	db	32
   106  00080B  32                 	db	50	;'2'
   107  00080C  30                 	db	48	;'0'
   108  00080D  32                 	db	50	;'2'
   109  00080E  30                 	db	48	;'0'
   110  00080F  2D                 	db	45
   111  000810  30                 	db	48	;'0'
   112  000811  00                 	db	0
   113                           
   114                           ; #config settings
   115  000812  00                 	db	0	; dummy byte at the end
   116  0000                     
   117                           	psect	cinit
   118  000B5A                     __pcinit:
   119                           	opt callstack 0
   120  000B5A                     start_initialization:
   121                           	opt callstack 0
   122  000B5A                     __initialization:
   123                           	opt callstack 0
   124                           
   125                           ; Initialize objects allocated to COMRAM (2 bytes)
   126                           ; load TBLPTR registers with __pidataCOMRAM
   127  000B5A  0E52               	movlw	low __pidataCOMRAM
   128  000B5C  6EF6               	movwf	tblptrl,c
   129  000B5E  0E0C               	movlw	high __pidataCOMRAM
   130  000B60  6EF7               	movwf	tblptrh,c
   131  000B62  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   132  000B64  6EF8               	movwf	tblptru,c
   133  000B66  0009               	tblrd		*+	;fetch initializer
   134  000B68  CFF5 F017          	movff	tablat,__pdataCOMRAM
   135  000B6C  0009               	tblrd		*+	;fetch initializer
   136  000B6E  CFF5 F018          	movff	tablat,__pdataCOMRAM+1
   137                           
   138                           ; Clear objects allocated to COMRAM (4 bytes)
   139  000B72  6A16               	clrf	(__pbssCOMRAM+3)& (0+255),c
   140  000B74  6A15               	clrf	(__pbssCOMRAM+2)& (0+255),c
   141  000B76  6A14               	clrf	(__pbssCOMRAM+1)& (0+255),c
   142  000B78  6A13               	clrf	__pbssCOMRAM& (0+255),c
   143  000B7A                     end_of_initialization:
   144                           	opt callstack 0
   145  000B7A                     __end_of__initialization:
   146                           	opt callstack 0
   147  000B7A  9019               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   148  000B7C  9219               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   149  000B7E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   150  000B80  6EF8               	movwf	tblptru,c
   151  000B82  0E08               	movlw	high __Lsmallconst
   152  000B84  6EF7               	movwf	tblptrh,c
   153  000B86  0100               	movlb	0
   154  000B88  EF0A  F004         	goto	_main	;jump to C main() function
   155                           
   156                           	psect	bssCOMRAM
   157  000013                     __pbssCOMRAM:
   158                           	opt callstack 0
   159  000013                     _unidad:
   160                           	opt callstack 0
   161  000013                     	ds	1
   162  000014                     _decena:
   163                           	opt callstack 0
   164  000014                     	ds	1
   165  000015                     _centena:
   166                           	opt callstack 0
   167  000015                     	ds	1
   168  000016                     _segundos:
   169                           	opt callstack 0
   170  000016                     	ds	1
   171                           
   172                           	psect	dataCOMRAM
   173  000017                     __pdataCOMRAM:
   174                           	opt callstack 0
   175  000017                     _horas:
   176                           	opt callstack 0
   177  000017                     	ds	1
   178  000018                     _minutos:
   179                           	opt callstack 0
   180  000018                     	ds	1
   181                           
   182                           	psect	cstackCOMRAM
   183  000001                     __pcstackCOMRAM:
   184                           	opt callstack 0
   185  000001                     ??_INTsISR:
   186                           
   187                           ; 1 bytes @ 0x0
   188  000001                     	ds	3
   189  000004                     ?___awmod:
   190                           	opt callstack 0
   191  000004                     ENVIA_NIBBLE@dato:
   192                           	opt callstack 0
   193  000004                     LEER_LCD@aux:
   194                           	opt callstack 0
   195  000004                     ___awmod@dividend:
   196                           	opt callstack 0
   197                           
   198                           ; 2 bytes @ 0x3
   199  000004                     	ds	1
   200  000005                     ENVIA_CHAR@dato:
   201                           	opt callstack 0
   202  000005                     ENVIA_LCD_CMD@dato:
   203                           	opt callstack 0
   204                           
   205                           ; 1 bytes @ 0x4
   206  000005                     	ds	1
   207  000006                     ENVIA_CHAR@aux:
   208                           	opt callstack 0
   209  000006                     ENVIA_LCD_CMD@aux:
   210                           	opt callstack 0
   211  000006                     ___awmod@divisor:
   212                           	opt callstack 0
   213                           
   214                           ; 2 bytes @ 0x5
   215  000006                     	ds	1
   216  000007                     ??_LCD_CONFIG:
   217  000007                     POS_CURSOR@columna:
   218                           	opt callstack 0
   219  000007                     CURSOR_ONOFF@estado:
   220                           	opt callstack 0
   221  000007                     ESCRIBE_MENSAJE@cadena:
   222                           	opt callstack 0
   223                           
   224                           ; 2 bytes @ 0x6
   225  000007                     	ds	1
   226  000008                     ??_arrancaLCD:
   227  000008                     POS_CURSOR@fila:
   228                           	opt callstack 0
   229  000008                     ___awmod@counter:
   230                           	opt callstack 0
   231                           
   232                           ; 1 bytes @ 0x7
   233  000008                     	ds	1
   234  000009                     ESCRIBE_MENSAJE@tam:
   235                           	opt callstack 0
   236  000009                     ___awmod@sign:
   237                           	opt callstack 0
   238                           
   239                           ; 1 bytes @ 0x8
   240  000009                     	ds	1
   241  00000A                     ??_ESCRIBE_MENSAJE:
   242  00000A                     ?___awdiv:
   243                           	opt callstack 0
   244  00000A                     ___awdiv@dividend:
   245                           	opt callstack 0
   246                           
   247                           ; 2 bytes @ 0x9
   248  00000A                     	ds	2
   249  00000C                     ESCRIBE_MENSAJE@i:
   250                           	opt callstack 0
   251  00000C                     ___awdiv@divisor:
   252                           	opt callstack 0
   253                           
   254                           ; 2 bytes @ 0xB
   255  00000C                     	ds	2
   256  00000E                     ___awdiv@counter:
   257                           	opt callstack 0
   258                           
   259                           ; 1 bytes @ 0xD
   260  00000E                     	ds	1
   261  00000F                     ___awdiv@sign:
   262                           	opt callstack 0
   263                           
   264                           ; 1 bytes @ 0xE
   265  00000F                     	ds	1
   266  000010                     ___awdiv@quotient:
   267                           	opt callstack 0
   268                           
   269                           ; 2 bytes @ 0xF
   270  000010                     	ds	2
   271  000012                     convierte@numero:
   272                           	opt callstack 0
   273                           
   274                           ; 1 bytes @ 0x11
   275  000012                     	ds	1
   276  000013                     
   277                           ; 1 bytes @ 0x12
   278 ;;
   279 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   280 ;;
   281 ;; *************** function _main *****************
   282 ;; Defined at:
   283 ;;		line 43 in file "maincode.c"
   284 ;; Parameters:    Size  Location     Type
   285 ;;		None
   286 ;; Auto vars:     Size  Location     Type
   287 ;;		None
   288 ;; Return value:  Size  Location     Type
   289 ;;                  1    wreg      void 
   290 ;; Registers used:
   291 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   292 ;; Tracked objects:
   293 ;;		On entry : 0/0
   294 ;;		On exit  : 0/0
   295 ;;		Unchanged: 0/0
   296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   297 ;;      Params:         0       0       0       0       0       0       0       0       0
   298 ;;      Locals:         0       0       0       0       0       0       0       0       0
   299 ;;      Temps:          0       0       0       0       0       0       0       0       0
   300 ;;      Totals:         0       0       0       0       0       0       0       0       0
   301 ;;Total ram usage:        0 bytes
   302 ;; Hardware stack levels required when called:    6
   303 ;; This function calls:
   304 ;;		_ENVIA_CHAR
   305 ;;		_ESCRIBE_MENSAJE
   306 ;;		_POS_CURSOR
   307 ;;		_arrancaLCD
   308 ;;		_convierte
   309 ;; This function is called by:
   310 ;;		Startup code after reset
   311 ;; This function uses a non-reentrant model
   312 ;;
   313                           
   314                           	psect	text0
   315  000814                     __ptext0:
   316                           	opt callstack 0
   317  000814                     _main:
   318                           	opt callstack 25
   319                           
   320                           ;maincode.c: 45:     T1CON = 0x83;
   321                           
   322                           ;incstack = 0
   323  000814  0E83               	movlw	131
   324  000816  6ECD               	movwf	4045,c	;volatile
   325                           
   326                           ;maincode.c: 46:     CCPR1H = 0x80;
   327  000818  0E80               	movlw	128
   328  00081A  6EBF               	movwf	4031,c	;volatile
   329                           
   330                           ;maincode.c: 47:     CCPR1L = 0x00;
   331  00081C  0E00               	movlw	0
   332  00081E  6EBE               	movwf	4030,c	;volatile
   333                           
   334                           ;maincode.c: 48:     CCP1CON = 0x0B;
   335  000820  0E0B               	movlw	11
   336  000822  6EBD               	movwf	4029,c	;volatile
   337                           
   338                           ;maincode.c: 53:     RCONbits.IPEN = 1;
   339  000824  8ED0               	bsf	4048,7,c	;volatile
   340                           
   341                           ;maincode.c: 54:     INTCONbits.GIEH = 1;
   342  000826  8EF2               	bsf	4082,7,c	;volatile
   343                           
   344                           ;maincode.c: 55:     INTCONbits.GIEL = 1;
   345  000828  8CF2               	bsf	4082,6,c	;volatile
   346                           
   347                           ;maincode.c: 56:     INTCON3bits.INT1IP = 0;
   348  00082A  9CF0               	bcf	4080,6,c	;volatile
   349                           
   350                           ;maincode.c: 57:     INTCON3bits.INT2IP = 0;
   351  00082C  9EF0               	bcf	4080,7,c	;volatile
   352                           
   353                           ;maincode.c: 58:     INTCON3bits.INT1IE = 1;
   354  00082E  86F0               	bsf	4080,3,c	;volatile
   355                           
   356                           ;maincode.c: 59:     INTCON3bits.INT2IE = 1;
   357  000830  88F0               	bsf	4080,4,c	;volatile
   358                           
   359                           ;maincode.c: 60:     PIE1bits.CCP1IE = 1;
   360  000832  849D               	bsf	3997,2,c	;volatile
   361                           
   362                           ;maincode.c: 61:     arrancaLCD();
   363  000834  ECDF  F005         	call	_arrancaLCD	;wreg free
   364                           
   365                           ;maincode.c: 62:     ESCRIBE_MENSAJE("Reloj UPC 2020-0",16);
   366  000838  0E01               	movlw	low STR_1
   367  00083A  6E07               	movwf	ESCRIBE_MENSAJE@cadena,c
   368  00083C  0E08               	movlw	high STR_1
   369  00083E  6E08               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   370  000840  0E10               	movlw	16
   371  000842  6E09               	movwf	ESCRIBE_MENSAJE@tam,c
   372  000844  ECC6  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   373  000848                     l1311:
   374                           
   375                           ;maincode.c: 64:         POS_CURSOR(2, 0);
   376  000848  0E00               	movlw	0
   377  00084A  6E07               	movwf	POS_CURSOR@columna,c
   378  00084C  0E02               	movlw	2
   379  00084E  ECF3  F005         	call	_POS_CURSOR
   380                           
   381                           ;maincode.c: 65:         convierte(horas);
   382  000852  5017               	movf	_horas,w,c
   383  000854  EC2C  F005         	call	_convierte
   384                           
   385                           ;maincode.c: 66:         ENVIA_CHAR(decena+0x30);
   386  000858  5014               	movf	_decena,w,c
   387  00085A  0F30               	addlw	48
   388  00085C  EC93  F005         	call	_ENVIA_CHAR
   389                           
   390                           ;maincode.c: 67:         ENVIA_CHAR(unidad+0x30);
   391  000860  5013               	movf	_unidad,w,c
   392  000862  0F30               	addlw	48
   393  000864  EC93  F005         	call	_ENVIA_CHAR
   394                           
   395                           ;maincode.c: 68:         ENVIA_CHAR(':');
   396  000868  0E3A               	movlw	58
   397  00086A  EC93  F005         	call	_ENVIA_CHAR
   398                           
   399                           ;maincode.c: 69:         convierte(minutos);
   400  00086E  5018               	movf	_minutos,w,c
   401  000870  EC2C  F005         	call	_convierte
   402                           
   403                           ;maincode.c: 70:         ENVIA_CHAR(decena+0x30);
   404  000874  5014               	movf	_decena,w,c
   405  000876  0F30               	addlw	48
   406  000878  EC93  F005         	call	_ENVIA_CHAR
   407                           
   408                           ;maincode.c: 71:         ENVIA_CHAR(unidad+0x30);
   409  00087C  5013               	movf	_unidad,w,c
   410  00087E  0F30               	addlw	48
   411  000880  EC93  F005         	call	_ENVIA_CHAR
   412                           
   413                           ;maincode.c: 72:         ENVIA_CHAR(':');
   414  000884  0E3A               	movlw	58
   415  000886  EC93  F005         	call	_ENVIA_CHAR
   416                           
   417                           ;maincode.c: 73:         convierte(segundos);
   418  00088A  5016               	movf	_segundos,w,c
   419  00088C  EC2C  F005         	call	_convierte
   420                           
   421                           ;maincode.c: 74:         ENVIA_CHAR(decena+0x30);
   422  000890  5014               	movf	_decena,w,c
   423  000892  0F30               	addlw	48
   424  000894  EC93  F005         	call	_ENVIA_CHAR
   425                           
   426                           ;maincode.c: 75:         ENVIA_CHAR(unidad+0x30);
   427  000898  5013               	movf	_unidad,w,c
   428  00089A  0F30               	addlw	48
   429  00089C  EC93  F005         	call	_ENVIA_CHAR
   430  0008A0  D7D3               	goto	l1311
   431  0008A2                     __end_of_main:
   432                           	opt callstack 0
   433                           
   434 ;; *************** function _convierte *****************
   435 ;; Defined at:
   436 ;;		line 37 in file "maincode.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;  numero          1    wreg     unsigned char 
   439 ;; Auto vars:     Size  Location     Type
   440 ;;  numero          1   17[COMRAM] unsigned char 
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, status,2, status,0, cstack
   445 ;; Tracked objects:
   446 ;;		On entry : 0/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   450 ;;      Params:         0       0       0       0       0       0       0       0       0
   451 ;;      Locals:         1       0       0       0       0       0       0       0       0
   452 ;;      Temps:          0       0       0       0       0       0       0       0       0
   453 ;;      Totals:         1       0       0       0       0       0       0       0       0
   454 ;;Total ram usage:        1 bytes
   455 ;; Hardware stack levels used:    1
   456 ;; Hardware stack levels required when called:    3
   457 ;; This function calls:
   458 ;;		___awdiv
   459 ;;		___awmod
   460 ;; This function is called by:
   461 ;;		_main
   462 ;; This function uses a non-reentrant model
   463 ;;
   464                           
   465                           	psect	text1
   466  000A58                     __ptext1:
   467                           	opt callstack 0
   468  000A58                     _convierte:
   469                           	opt callstack 27
   470                           
   471                           ;incstack = 0
   472                           ;convierte@numero stored from wreg
   473  000A58  6E12               	movwf	convierte@numero,c
   474                           
   475                           ;maincode.c: 38:     centena = numero / 100;
   476  000A5A  C012  F00A         	movff	convierte@numero,___awdiv@dividend
   477  000A5E  6A0B               	clrf	___awdiv@dividend+1,c
   478  000A60  0E00               	movlw	0
   479  000A62  6E0D               	movwf	___awdiv@divisor+1,c
   480  000A64  0E64               	movlw	100
   481  000A66  6E0C               	movwf	___awdiv@divisor,c
   482  000A68  EC51  F004         	call	___awdiv	;wreg free
   483  000A6C  500A               	movf	?___awdiv,w,c
   484  000A6E  6E15               	movwf	_centena,c
   485                           
   486                           ;maincode.c: 39:     decena = (numero % 100) / 10;
   487  000A70  0E00               	movlw	0
   488  000A72  6E07               	movwf	___awmod@divisor+1,c
   489  000A74  0E64               	movlw	100
   490  000A76  6E06               	movwf	___awmod@divisor,c
   491  000A78  C012  F004         	movff	convierte@numero,___awmod@dividend
   492  000A7C  6A05               	clrf	___awmod@dividend+1,c
   493  000A7E  EC93  F004         	call	___awmod	;wreg free
   494  000A82  C004  F00A         	movff	?___awmod,___awdiv@dividend
   495  000A86  C005  F00B         	movff	?___awmod+1,___awdiv@dividend+1
   496  000A8A  0E00               	movlw	0
   497  000A8C  6E0D               	movwf	___awdiv@divisor+1,c
   498  000A8E  0E0A               	movlw	10
   499  000A90  6E0C               	movwf	___awdiv@divisor,c
   500  000A92  EC51  F004         	call	___awdiv	;wreg free
   501  000A96  500A               	movf	?___awdiv,w,c
   502  000A98  6E14               	movwf	_decena,c
   503                           
   504                           ;maincode.c: 40:     unidad = numero % 10;
   505  000A9A  C012  F004         	movff	convierte@numero,___awmod@dividend
   506  000A9E  6A05               	clrf	___awmod@dividend+1,c
   507  000AA0  0E00               	movlw	0
   508  000AA2  6E07               	movwf	___awmod@divisor+1,c
   509  000AA4  0E0A               	movlw	10
   510  000AA6  6E06               	movwf	___awmod@divisor,c
   511  000AA8  EC93  F004         	call	___awmod	;wreg free
   512  000AAC  5004               	movf	?___awmod,w,c
   513  000AAE  6E13               	movwf	_unidad,c
   514  000AB0  0012               	return		;funcret
   515  000AB2                     __end_of_convierte:
   516                           	opt callstack 0
   517                           
   518 ;; *************** function ___awmod *****************
   519 ;; Defined at:
   520 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
   521 ;; Parameters:    Size  Location     Type
   522 ;;  dividend        2    3[COMRAM] int 
   523 ;;  divisor         2    5[COMRAM] int 
   524 ;; Auto vars:     Size  Location     Type
   525 ;;  sign            1    8[COMRAM] unsigned char 
   526 ;;  counter         1    7[COMRAM] unsigned char 
   527 ;; Return value:  Size  Location     Type
   528 ;;                  2    3[COMRAM] int 
   529 ;; Registers used:
   530 ;;		wreg, status,2, status,0
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   536 ;;      Params:         4       0       0       0       0       0       0       0       0
   537 ;;      Locals:         2       0       0       0       0       0       0       0       0
   538 ;;      Temps:          0       0       0       0       0       0       0       0       0
   539 ;;      Totals:         6       0       0       0       0       0       0       0       0
   540 ;;Total ram usage:        6 bytes
   541 ;; Hardware stack levels used:    1
   542 ;; Hardware stack levels required when called:    2
   543 ;; This function calls:
   544 ;;		Nothing
   545 ;; This function is called by:
   546 ;;		_convierte
   547 ;; This function uses a non-reentrant model
   548 ;;
   549                           
   550                           	psect	text2
   551  000926                     __ptext2:
   552                           	opt callstack 0
   553  000926                     ___awmod:
   554                           	opt callstack 27
   555                           
   556                           ;incstack = 0
   557  000926  0E00               	movlw	0
   558  000928  6E09               	movwf	___awmod@sign,c
   559  00092A  AE05               	btfss	___awmod@dividend+1,7,c
   560  00092C  D006               	goto	l1243
   561  00092E  6C04               	negf	___awmod@dividend,c
   562  000930  1E05               	comf	___awmod@dividend+1,f,c
   563  000932  B0D8               	btfsc	status,0,c
   564  000934  2A05               	incf	___awmod@dividend+1,f,c
   565  000936  0E01               	movlw	1
   566  000938  6E09               	movwf	___awmod@sign,c
   567  00093A                     l1243:
   568  00093A  AE07               	btfss	___awmod@divisor+1,7,c
   569  00093C  D004               	goto	l1247
   570  00093E  6C06               	negf	___awmod@divisor,c
   571  000940  1E07               	comf	___awmod@divisor+1,f,c
   572  000942  B0D8               	btfsc	status,0,c
   573  000944  2A07               	incf	___awmod@divisor+1,f,c
   574  000946                     l1247:
   575  000946  5006               	movf	___awmod@divisor,w,c
   576  000948  1007               	iorwf	___awmod@divisor+1,w,c
   577  00094A  B4D8               	btfsc	status,2,c
   578  00094C  D018               	goto	l1263
   579  00094E  0E01               	movlw	1
   580  000950  6E08               	movwf	___awmod@counter,c
   581  000952  D004               	goto	l1253
   582  000954                     l1251:
   583  000954  90D8               	bcf	status,0,c
   584  000956  3606               	rlcf	___awmod@divisor,f,c
   585  000958  3607               	rlcf	___awmod@divisor+1,f,c
   586  00095A  2A08               	incf	___awmod@counter,f,c
   587  00095C                     l1253:
   588  00095C  AE07               	btfss	___awmod@divisor+1,7,c
   589  00095E  D7FA               	goto	l1251
   590  000960                     u400:
   591  000960  5006               	movf	___awmod@divisor,w,c
   592  000962  5C04               	subwf	___awmod@dividend,w,c
   593  000964  5007               	movf	___awmod@divisor+1,w,c
   594  000966  5805               	subwfb	___awmod@dividend+1,w,c
   595  000968  A0D8               	btfss	status,0,c
   596  00096A  D004               	goto	l1259
   597  00096C  5006               	movf	___awmod@divisor,w,c
   598  00096E  5E04               	subwf	___awmod@dividend,f,c
   599  000970  5007               	movf	___awmod@divisor+1,w,c
   600  000972  5A05               	subwfb	___awmod@dividend+1,f,c
   601  000974                     l1259:
   602  000974  90D8               	bcf	status,0,c
   603  000976  3207               	rrcf	___awmod@divisor+1,f,c
   604  000978  3206               	rrcf	___awmod@divisor,f,c
   605  00097A  2E08               	decfsz	___awmod@counter,f,c
   606  00097C  D7F1               	goto	u400
   607  00097E                     l1263:
   608  00097E  5009               	movf	___awmod@sign,w,c
   609  000980  B4D8               	btfsc	status,2,c
   610  000982  D004               	goto	l1267
   611  000984  6C04               	negf	___awmod@dividend,c
   612  000986  1E05               	comf	___awmod@dividend+1,f,c
   613  000988  B0D8               	btfsc	status,0,c
   614  00098A  2A05               	incf	___awmod@dividend+1,f,c
   615  00098C                     l1267:
   616  00098C  C004  F004         	movff	___awmod@dividend,?___awmod
   617  000990  C005  F005         	movff	___awmod@dividend+1,?___awmod+1
   618  000994  0012               	return		;funcret
   619  000996                     __end_of___awmod:
   620                           	opt callstack 0
   621                           
   622 ;; *************** function ___awdiv *****************
   623 ;; Defined at:
   624 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
   625 ;; Parameters:    Size  Location     Type
   626 ;;  dividend        2    9[COMRAM] int 
   627 ;;  divisor         2   11[COMRAM] int 
   628 ;; Auto vars:     Size  Location     Type
   629 ;;  quotient        2   15[COMRAM] int 
   630 ;;  sign            1   14[COMRAM] unsigned char 
   631 ;;  counter         1   13[COMRAM] unsigned char 
   632 ;; Return value:  Size  Location     Type
   633 ;;                  2    9[COMRAM] int 
   634 ;; Registers used:
   635 ;;		wreg, status,2, status,0
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   641 ;;      Params:         4       0       0       0       0       0       0       0       0
   642 ;;      Locals:         4       0       0       0       0       0       0       0       0
   643 ;;      Temps:          0       0       0       0       0       0       0       0       0
   644 ;;      Totals:         8       0       0       0       0       0       0       0       0
   645 ;;Total ram usage:        8 bytes
   646 ;; Hardware stack levels used:    1
   647 ;; Hardware stack levels required when called:    2
   648 ;; This function calls:
   649 ;;		Nothing
   650 ;; This function is called by:
   651 ;;		_convierte
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           	psect	text3
   656  0008A2                     __ptext3:
   657                           	opt callstack 0
   658  0008A2                     ___awdiv:
   659                           	opt callstack 27
   660                           
   661                           ;incstack = 0
   662  0008A2  0E00               	movlw	0
   663  0008A4  6E0F               	movwf	___awdiv@sign,c
   664  0008A6  AE0D               	btfss	___awdiv@divisor+1,7,c
   665  0008A8  D006               	goto	l1199
   666  0008AA  6C0C               	negf	___awdiv@divisor,c
   667  0008AC  1E0D               	comf	___awdiv@divisor+1,f,c
   668  0008AE  B0D8               	btfsc	status,0,c
   669  0008B0  2A0D               	incf	___awdiv@divisor+1,f,c
   670  0008B2  0E01               	movlw	1
   671  0008B4  6E0F               	movwf	___awdiv@sign,c
   672  0008B6                     l1199:
   673  0008B6  AE0B               	btfss	___awdiv@dividend+1,7,c
   674  0008B8  D006               	goto	l1205
   675  0008BA  6C0A               	negf	___awdiv@dividend,c
   676  0008BC  1E0B               	comf	___awdiv@dividend+1,f,c
   677  0008BE  B0D8               	btfsc	status,0,c
   678  0008C0  2A0B               	incf	___awdiv@dividend+1,f,c
   679  0008C2  0E01               	movlw	1
   680  0008C4  1A0F               	xorwf	___awdiv@sign,f,c
   681  0008C6                     l1205:
   682  0008C6  0E00               	movlw	0
   683  0008C8  6E11               	movwf	___awdiv@quotient+1,c
   684  0008CA  0E00               	movlw	0
   685  0008CC  6E10               	movwf	___awdiv@quotient,c
   686  0008CE  500C               	movf	___awdiv@divisor,w,c
   687  0008D0  100D               	iorwf	___awdiv@divisor+1,w,c
   688  0008D2  B4D8               	btfsc	status,2,c
   689  0008D4  D01C               	goto	l1227
   690  0008D6  0E01               	movlw	1
   691  0008D8  6E0E               	movwf	___awdiv@counter,c
   692  0008DA  D004               	goto	l1213
   693  0008DC                     l1211:
   694  0008DC  90D8               	bcf	status,0,c
   695  0008DE  360C               	rlcf	___awdiv@divisor,f,c
   696  0008E0  360D               	rlcf	___awdiv@divisor+1,f,c
   697  0008E2  2A0E               	incf	___awdiv@counter,f,c
   698  0008E4                     l1213:
   699  0008E4  AE0D               	btfss	___awdiv@divisor+1,7,c
   700  0008E6  D7FA               	goto	l1211
   701  0008E8                     u340:
   702  0008E8  90D8               	bcf	status,0,c
   703  0008EA  3610               	rlcf	___awdiv@quotient,f,c
   704  0008EC  3611               	rlcf	___awdiv@quotient+1,f,c
   705  0008EE  500C               	movf	___awdiv@divisor,w,c
   706  0008F0  5C0A               	subwf	___awdiv@dividend,w,c
   707  0008F2  500D               	movf	___awdiv@divisor+1,w,c
   708  0008F4  580B               	subwfb	___awdiv@dividend+1,w,c
   709  0008F6  A0D8               	btfss	status,0,c
   710  0008F8  D005               	goto	l1223
   711  0008FA  500C               	movf	___awdiv@divisor,w,c
   712  0008FC  5E0A               	subwf	___awdiv@dividend,f,c
   713  0008FE  500D               	movf	___awdiv@divisor+1,w,c
   714  000900  5A0B               	subwfb	___awdiv@dividend+1,f,c
   715  000902  8010               	bsf	___awdiv@quotient,0,c
   716  000904                     l1223:
   717  000904  90D8               	bcf	status,0,c
   718  000906  320D               	rrcf	___awdiv@divisor+1,f,c
   719  000908  320C               	rrcf	___awdiv@divisor,f,c
   720  00090A  2E0E               	decfsz	___awdiv@counter,f,c
   721  00090C  D7ED               	goto	u340
   722  00090E                     l1227:
   723  00090E  500F               	movf	___awdiv@sign,w,c
   724  000910  B4D8               	btfsc	status,2,c
   725  000912  D004               	goto	l1231
   726  000914  6C10               	negf	___awdiv@quotient,c
   727  000916  1E11               	comf	___awdiv@quotient+1,f,c
   728  000918  B0D8               	btfsc	status,0,c
   729  00091A  2A11               	incf	___awdiv@quotient+1,f,c
   730  00091C                     l1231:
   731  00091C  C010  F00A         	movff	___awdiv@quotient,?___awdiv
   732  000920  C011  F00B         	movff	___awdiv@quotient+1,?___awdiv+1
   733  000924  0012               	return		;funcret
   734  000926                     __end_of___awdiv:
   735                           	opt callstack 0
   736                           
   737 ;; *************** function _arrancaLCD *****************
   738 ;; Defined at:
   739 ;;		line 28 in file "maincode.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;		None
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		wreg, status,2, status,0, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   753 ;;      Params:         0       0       0       0       0       0       0       0       0
   754 ;;      Locals:         0       0       0       0       0       0       0       0       0
   755 ;;      Temps:          1       0       0       0       0       0       0       0       0
   756 ;;      Totals:         1       0       0       0       0       0       0       0       0
   757 ;;Total ram usage:        1 bytes
   758 ;; Hardware stack levels used:    1
   759 ;; Hardware stack levels required when called:    5
   760 ;; This function calls:
   761 ;;		_BORRAR_LCD
   762 ;;		_CURSOR_HOME
   763 ;;		_CURSOR_ONOFF
   764 ;;		_LCD_CONFIG
   765 ;; This function is called by:
   766 ;;		_main
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text4
   771  000BBE                     __ptext4:
   772                           	opt callstack 0
   773  000BBE                     _arrancaLCD:
   774                           	opt callstack 25
   775                           
   776                           ;maincode.c: 29:     TRISD = 0x00;
   777                           
   778                           ;incstack = 0
   779  000BBE  0E00               	movlw	0
   780  000BC0  6E95               	movwf	3989,c	;volatile
   781                           
   782                           ;maincode.c: 30:     LCD_CONFIG();
   783  000BC2  ECFC  F004         	call	_LCD_CONFIG	;wreg free
   784                           
   785                           ;maincode.c: 31:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   786  000BC6  0EEA               	movlw	234
   787  000BC8  6E08               	movwf	??_arrancaLCD& (0+255),c
   788  000BCA  0EC3               	movlw	195
   789  000BCC                     u467:
   790  000BCC  2EE8               	decfsz	wreg,f,c
   791  000BCE  D7FE               	bra	u467
   792  000BD0  2E08               	decfsz	??_arrancaLCD& (0+255),f,c
   793  000BD2  D7FC               	bra	u467
   794  000BD4  F000               	nop	
   795                           
   796                           ;maincode.c: 32:     CURSOR_ONOFF(1);
   797  000BD6  0E01               	movlw	1
   798  000BD8  EC05  F006         	call	_CURSOR_ONOFF
   799                           
   800                           ;maincode.c: 33:     BORRAR_LCD();
   801  000BDC  EC25  F006         	call	_BORRAR_LCD	;wreg free
   802                           
   803                           ;maincode.c: 34:     CURSOR_HOME();
   804  000BE0  EC21  F006         	call	_CURSOR_HOME	;wreg free
   805  000BE4  0012               	return		;funcret
   806  000BE6                     __end_of_arrancaLCD:
   807                           	opt callstack 0
   808                           
   809 ;; *************** function _LCD_CONFIG *****************
   810 ;; Defined at:
   811 ;;		line 72 in file "LCD.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, status,2, status,0, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   825 ;;      Params:         0       0       0       0       0       0       0       0       0
   826 ;;      Locals:         0       0       0       0       0       0       0       0       0
   827 ;;      Temps:          1       0       0       0       0       0       0       0       0
   828 ;;      Totals:         1       0       0       0       0       0       0       0       0
   829 ;;Total ram usage:        1 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    4
   832 ;; This function calls:
   833 ;;		_ENVIA_LCD_CMD
   834 ;;		_ENVIA_NIBBLE
   835 ;; This function is called by:
   836 ;;		_arrancaLCD
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text5
   841  0009F8                     __ptext5:
   842                           	opt callstack 0
   843  0009F8                     _LCD_CONFIG:
   844                           	opt callstack 25
   845                           
   846                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   847                           
   848                           ;incstack = 0
   849  0009F8  908C               	bcf	3980,0,c	;volatile
   850                           
   851                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   852  0009FA  928C               	bcf	3980,1,c	;volatile
   853                           
   854                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   855  0009FC  0E30               	movlw	48
   856  0009FE  EC13  F006         	call	_ENVIA_NIBBLE
   857                           
   858                           ;LCD.c: 77:         _delay(24000);
   859  000A02  0E20               	movlw	32
   860  000A04  6E07               	movwf	??_LCD_CONFIG& (0+255),c
   861  000A06  0E2A               	movlw	42
   862  000A08                     u477:
   863  000A08  2EE8               	decfsz	wreg,f,c
   864  000A0A  D7FE               	bra	u477
   865  000A0C  2E07               	decfsz	??_LCD_CONFIG& (0+255),f,c
   866  000A0E  D7FC               	bra	u477
   867                           
   868                           ;LCD.c: 78:         _delay(24000);
   869  000A10  0E20               	movlw	32
   870  000A12  6E07               	movwf	??_LCD_CONFIG& (0+255),c
   871  000A14  0E2A               	movlw	42
   872  000A16                     u487:
   873  000A16  2EE8               	decfsz	wreg,f,c
   874  000A18  D7FE               	bra	u487
   875  000A1A  2E07               	decfsz	??_LCD_CONFIG& (0+255),f,c
   876  000A1C  D7FC               	bra	u487
   877                           
   878                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   879  000A1E  0E30               	movlw	48
   880  000A20  EC13  F006         	call	_ENVIA_NIBBLE
   881                           
   882                           ;LCD.c: 83:  _delay(1200);
   883  000A24  0EF0               	movlw	240
   884  000A26                     u497:
   885  000A26  D000               	nop2	
   886  000A28  2EE8               	decfsz	wreg,f,c
   887  000A2A  D7FD               	bra	u497
   888                           
   889                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   890  000A2C  0E30               	movlw	48
   891  000A2E  EC13  F006         	call	_ENVIA_NIBBLE
   892                           
   893                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   894  000A32  0E20               	movlw	32
   895  000A34  EC13  F006         	call	_ENVIA_NIBBLE
   896                           
   897                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   898  000A38  0E01               	movlw	1
   899  000A3A  EC79  F005         	call	_ENVIA_LCD_CMD
   900                           
   901                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   902  000A3E  0E28               	movlw	40
   903  000A40  EC79  F005         	call	_ENVIA_LCD_CMD
   904                           
   905                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   906  000A44  0E0F               	movlw	15
   907  000A46  EC79  F005         	call	_ENVIA_LCD_CMD
   908                           
   909                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   910  000A4A  0E06               	movlw	6
   911  000A4C  EC79  F005         	call	_ENVIA_LCD_CMD
   912                           
   913                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   914  000A50  0E01               	movlw	1
   915  000A52  EC79  F005         	call	_ENVIA_LCD_CMD
   916  000A56  0012               	return		;funcret
   917  000A58                     __end_of_LCD_CONFIG:
   918                           	opt callstack 0
   919                           
   920 ;; *************** function _CURSOR_ONOFF *****************
   921 ;; Defined at:
   922 ;;		line 35 in file "LCD.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;  estado          1    wreg     unsigned char 
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  estado          1    6[COMRAM] unsigned char 
   927 ;; Return value:  Size  Location     Type
   928 ;;                  1    wreg      void 
   929 ;; Registers used:
   930 ;;		wreg, status,2, status,0, cstack
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   936 ;;      Params:         0       0       0       0       0       0       0       0       0
   937 ;;      Locals:         1       0       0       0       0       0       0       0       0
   938 ;;      Temps:          0       0       0       0       0       0       0       0       0
   939 ;;      Totals:         1       0       0       0       0       0       0       0       0
   940 ;;Total ram usage:        1 bytes
   941 ;; Hardware stack levels used:    1
   942 ;; Hardware stack levels required when called:    4
   943 ;; This function calls:
   944 ;;		_ENVIA_LCD_CMD
   945 ;; This function is called by:
   946 ;;		_arrancaLCD
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text6
   951  000C0A                     __ptext6:
   952                           	opt callstack 0
   953  000C0A                     _CURSOR_ONOFF:
   954                           	opt callstack 25
   955                           
   956                           ;incstack = 0
   957                           ;CURSOR_ONOFF@estado stored from wreg
   958  000C0A  6E07               	movwf	CURSOR_ONOFF@estado,c
   959                           
   960                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   961  000C0C  5007               	movf	CURSOR_ONOFF@estado,w,c
   962  000C0E  A4D8               	btfss	status,2,c
   963  000C10  D003               	goto	l931
   964  000C12  0E0E               	movlw	14
   965  000C14  EC79  F005         	call	_ENVIA_LCD_CMD
   966  000C18                     l931:
   967                           
   968                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   969  000C18  0407               	decf	CURSOR_ONOFF@estado,w,c
   970  000C1A  A4D8               	btfss	status,2,c
   971  000C1C  0012               	return	
   972  000C1E  0E0C               	movlw	12
   973  000C20  EC79  F005         	call	_ENVIA_LCD_CMD
   974  000C24  0012               	return		;funcret
   975  000C26                     __end_of_CURSOR_ONOFF:
   976                           	opt callstack 0
   977                           
   978 ;; *************** function _CURSOR_HOME *****************
   979 ;; Defined at:
   980 ;;		line 30 in file "LCD.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg, status,2, status,0, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   994 ;;      Params:         0       0       0       0       0       0       0       0       0
   995 ;;      Locals:         0       0       0       0       0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0       0       0       0       0
   997 ;;      Totals:         0       0       0       0       0       0       0       0       0
   998 ;;Total ram usage:        0 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    4
  1001 ;; This function calls:
  1002 ;;		_ENVIA_LCD_CMD
  1003 ;; This function is called by:
  1004 ;;		_arrancaLCD
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           	psect	text7
  1009  000C42                     __ptext7:
  1010                           	opt callstack 0
  1011  000C42                     _CURSOR_HOME:
  1012                           	opt callstack 25
  1013                           
  1014                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1015                           
  1016                           ;incstack = 0
  1017  000C42  0E02               	movlw	2
  1018  000C44  EC79  F005         	call	_ENVIA_LCD_CMD
  1019  000C48  0012               	return		;funcret
  1020  000C4A                     __end_of_CURSOR_HOME:
  1021                           	opt callstack 0
  1022                           
  1023 ;; *************** function _BORRAR_LCD *****************
  1024 ;; Defined at:
  1025 ;;		line 67 in file "LCD.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;		None
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;		None
  1030 ;; Return value:  Size  Location     Type
  1031 ;;                  1    wreg      void 
  1032 ;; Registers used:
  1033 ;;		wreg, status,2, status,0, cstack
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/0
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1039 ;;      Params:         0       0       0       0       0       0       0       0       0
  1040 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1042 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1043 ;;Total ram usage:        0 bytes
  1044 ;; Hardware stack levels used:    1
  1045 ;; Hardware stack levels required when called:    4
  1046 ;; This function calls:
  1047 ;;		_ENVIA_LCD_CMD
  1048 ;; This function is called by:
  1049 ;;		_arrancaLCD
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052                           
  1053                           	psect	text8
  1054  000C4A                     __ptext8:
  1055                           	opt callstack 0
  1056  000C4A                     _BORRAR_LCD:
  1057                           	opt callstack 25
  1058                           
  1059                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1060                           
  1061                           ;incstack = 0
  1062  000C4A  0E01               	movlw	1
  1063  000C4C  EC79  F005         	call	_ENVIA_LCD_CMD
  1064  000C50  0012               	return		;funcret
  1065  000C52                     __end_of_BORRAR_LCD:
  1066                           	opt callstack 0
  1067                           
  1068 ;; *************** function _POS_CURSOR *****************
  1069 ;; Defined at:
  1070 ;;		line 6 in file "LCD.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;  fila            1    wreg     unsigned char 
  1073 ;;  columna         1    6[COMRAM] unsigned char 
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;  fila            1    7[COMRAM] unsigned char 
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      void 
  1078 ;; Registers used:
  1079 ;;		wreg, status,2, status,0, cstack
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1085 ;;      Params:         1       0       0       0       0       0       0       0       0
  1086 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1088 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1089 ;;Total ram usage:        2 bytes
  1090 ;; Hardware stack levels used:    1
  1091 ;; Hardware stack levels required when called:    4
  1092 ;; This function calls:
  1093 ;;		_ENVIA_LCD_CMD
  1094 ;; This function is called by:
  1095 ;;		_main
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text9
  1100  000BE6                     __ptext9:
  1101                           	opt callstack 0
  1102  000BE6                     _POS_CURSOR:
  1103                           	opt callstack 26
  1104                           
  1105                           ;incstack = 0
  1106                           ;POS_CURSOR@fila stored from wreg
  1107  000BE6  6E08               	movwf	POS_CURSOR@fila,c
  1108                           
  1109                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1110  000BE8  0408               	decf	POS_CURSOR@fila,w,c
  1111  000BEA  A4D8               	btfss	status,2,c
  1112  000BEC  D005               	goto	l1285
  1113                           
  1114                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1115  000BEE  5007               	movf	POS_CURSOR@columna,w,c
  1116  000BF0  0F80               	addlw	128
  1117  000BF2  EC79  F005         	call	_ENVIA_LCD_CMD
  1118                           
  1119                           ;LCD.c: 11:  }
  1120  000BF6  0012               	return	
  1121  000BF8                     l1285:
  1122  000BF8  0E02               	movlw	2
  1123  000BFA  1808               	xorwf	POS_CURSOR@fila,w,c
  1124  000BFC  A4D8               	btfss	status,2,c
  1125  000BFE  0012               	return	
  1126                           
  1127                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1128  000C00  5007               	movf	POS_CURSOR@columna,w,c
  1129  000C02  0FC0               	addlw	192
  1130  000C04  EC79  F005         	call	_ENVIA_LCD_CMD
  1131  000C08  0012               	return		;funcret
  1132  000C0A                     __end_of_POS_CURSOR:
  1133                           	opt callstack 0
  1134                           
  1135 ;; *************** function _ENVIA_LCD_CMD *****************
  1136 ;; Defined at:
  1137 ;;		line 104 in file "LCD.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;  dato            1    wreg     unsigned char 
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  dato            1    4[COMRAM] unsigned char 
  1142 ;;  aux             1    5[COMRAM] unsigned char 
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      void 
  1145 ;; Registers used:
  1146 ;;		wreg, status,2, status,0, cstack
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1152 ;;      Params:         0       0       0       0       0       0       0       0       0
  1153 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1154 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1155 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1156 ;;Total ram usage:        2 bytes
  1157 ;; Hardware stack levels used:    1
  1158 ;; Hardware stack levels required when called:    3
  1159 ;; This function calls:
  1160 ;;		_ENVIA_NIBBLE
  1161 ;;		_LEER_LCD
  1162 ;; This function is called by:
  1163 ;;		_POS_CURSOR
  1164 ;;		_CURSOR_HOME
  1165 ;;		_CURSOR_ONOFF
  1166 ;;		_BORRAR_LCD
  1167 ;;		_LCD_CONFIG
  1168 ;;		_BLINK_CURSOR
  1169 ;;		_DISPLAY_ONOFF
  1170 ;;		_GENERACARACTER
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text10
  1175  000AF2                     __ptext10:
  1176                           	opt callstack 0
  1177  000AF2                     _ENVIA_LCD_CMD:
  1178                           	opt callstack 25
  1179                           
  1180                           ;incstack = 0
  1181                           ;ENVIA_LCD_CMD@dato stored from wreg
  1182  000AF2  6E05               	movwf	ENVIA_LCD_CMD@dato,c
  1183                           
  1184                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1185  000AF4  908C               	bcf	3980,0,c	;volatile
  1186                           
  1187                           ;LCD.c: 108:  LEER_LCD();
  1188  000AF6  ECCB  F004         	call	_LEER_LCD	;wreg free
  1189                           
  1190                           ;LCD.c: 109:  TRISD = 0b00000000;
  1191  000AFA  0E00               	movlw	0
  1192  000AFC  6E95               	movwf	3989,c	;volatile
  1193                           
  1194                           ;LCD.c: 111:         _delay(1200);
  1195  000AFE  0EF0               	movlw	240
  1196  000B00                     u507:
  1197  000B00  D000               	nop2	
  1198  000B02  2EE8               	decfsz	wreg,f,c
  1199  000B04  D7FD               	bra	u507
  1200                           
  1201                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1202  000B06  928C               	bcf	3980,1,c	;volatile
  1203                           
  1204                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1205  000B08  948C               	bcf	3980,2,c	;volatile
  1206                           
  1207                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1208  000B0A  908C               	bcf	3980,0,c	;volatile
  1209                           
  1210                           ;LCD.c: 115:  aux = dato & 0xF0;
  1211  000B0C  5005               	movf	ENVIA_LCD_CMD@dato,w,c
  1212  000B0E  0BF0               	andlw	240
  1213  000B10  6E06               	movwf	ENVIA_LCD_CMD@aux,c
  1214                           
  1215                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1216  000B12  5006               	movf	ENVIA_LCD_CMD@aux,w,c
  1217  000B14  EC13  F006         	call	_ENVIA_NIBBLE
  1218                           
  1219                           ;LCD.c: 117:  aux = dato<<4;
  1220  000B18  3805               	swapf	ENVIA_LCD_CMD@dato,w,c
  1221  000B1A  0BF0               	andlw	240
  1222  000B1C  6E06               	movwf	ENVIA_LCD_CMD@aux,c
  1223                           
  1224                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1225  000B1E  5006               	movf	ENVIA_LCD_CMD@aux,w,c
  1226  000B20  EC13  F006         	call	_ENVIA_NIBBLE
  1227  000B24  0012               	return		;funcret
  1228  000B26                     __end_of_ENVIA_LCD_CMD:
  1229                           	opt callstack 0
  1230                           
  1231 ;; *************** function _ESCRIBE_MENSAJE *****************
  1232 ;; Defined at:
  1233 ;;		line 41 in file "LCD.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;  cadena          2    6[COMRAM] PTR const unsigned char 
  1236 ;;		 -> STR_1(17), 
  1237 ;;  tam             1    8[COMRAM] unsigned char 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  i               1   11[COMRAM] unsigned char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1249 ;;      Params:         3       0       0       0       0       0       0       0       0
  1250 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1251 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1252 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1253 ;;Total ram usage:        6 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    4
  1256 ;; This function calls:
  1257 ;;		_ENVIA_CHAR
  1258 ;; This function is called by:
  1259 ;;		_main
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text11
  1264  000B8C                     __ptext11:
  1265                           	opt callstack 0
  1266  000B8C                     _ESCRIBE_MENSAJE:
  1267                           	opt callstack 26
  1268                           
  1269                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1270                           
  1271                           ;incstack = 0
  1272  000B8C  0E00               	movlw	0
  1273  000B8E  6E0C               	movwf	ESCRIBE_MENSAJE@i,c
  1274                           
  1275                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1276  000B90  0E00               	movlw	0
  1277  000B92  6E0C               	movwf	ESCRIBE_MENSAJE@i,c
  1278  000B94  D00F               	goto	l1279
  1279  000B96                     l1275:
  1280                           
  1281                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1282  000B96  500C               	movf	ESCRIBE_MENSAJE@i,w,c
  1283  000B98  2407               	addwf	ESCRIBE_MENSAJE@cadena,w,c
  1284  000B9A  6E0A               	movwf	??_ESCRIBE_MENSAJE& (0+255),c
  1285  000B9C  0E00               	movlw	0
  1286  000B9E  2008               	addwfc	ESCRIBE_MENSAJE@cadena+1,w,c
  1287  000BA0  6E0B               	movwf	(??_ESCRIBE_MENSAJE+1)& (0+255),c
  1288  000BA2  C00A  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1289  000BA6  C00B  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1290  000BAA                     	if	0	;tblptru may be non-zero
  1291  000BAA                     	endif
  1292  000BAA                     	if	0	;tblptru may be non-zero
  1293  000BAA                     	endif
  1294  000BAA  0008               	tblrd		*
  1295  000BAC  50F5               	movf	tablat,w,c
  1296  000BAE  EC93  F005         	call	_ENVIA_CHAR
  1297                           
  1298                           ;LCD.c: 47:  }
  1299  000BB2  2A0C               	incf	ESCRIBE_MENSAJE@i,f,c
  1300  000BB4                     l1279:
  1301  000BB4  5009               	movf	ESCRIBE_MENSAJE@tam,w,c
  1302  000BB6  5C0C               	subwf	ESCRIBE_MENSAJE@i,w,c
  1303  000BB8  B0D8               	btfsc	status,0,c
  1304  000BBA  0012               	return	
  1305  000BBC  D7EC               	goto	l1275
  1306  000BBE                     __end_of_ESCRIBE_MENSAJE:
  1307                           	opt callstack 0
  1308                           
  1309 ;; *************** function _ENVIA_CHAR *****************
  1310 ;; Defined at:
  1311 ;;		line 50 in file "LCD.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;  dato            1    wreg     unsigned char 
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;  dato            1    4[COMRAM] unsigned char 
  1316 ;;  aux             1    5[COMRAM] unsigned char 
  1317 ;; Return value:  Size  Location     Type
  1318 ;;                  1    wreg      void 
  1319 ;; Registers used:
  1320 ;;		wreg, status,2, status,0, cstack
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 0/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1326 ;;      Params:         0       0       0       0       0       0       0       0       0
  1327 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1328 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1329 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1330 ;;Total ram usage:        2 bytes
  1331 ;; Hardware stack levels used:    1
  1332 ;; Hardware stack levels required when called:    3
  1333 ;; This function calls:
  1334 ;;		_ENVIA_NIBBLE
  1335 ;;		_LEER_LCD
  1336 ;; This function is called by:
  1337 ;;		_main
  1338 ;;		_ESCRIBE_MENSAJE
  1339 ;;		_GENERACARACTER
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text12
  1344  000B26                     __ptext12:
  1345                           	opt callstack 0
  1346  000B26                     _ENVIA_CHAR:
  1347                           	opt callstack 26
  1348                           
  1349                           ;incstack = 0
  1350                           ;ENVIA_CHAR@dato stored from wreg
  1351  000B26  6E05               	movwf	ENVIA_CHAR@dato,c
  1352                           
  1353                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1354  000B28  808C               	bsf	3980,0,c	;volatile
  1355                           
  1356                           ;LCD.c: 54:  LEER_LCD();
  1357  000B2A  ECCB  F004         	call	_LEER_LCD	;wreg free
  1358                           
  1359                           ;LCD.c: 55:  TRISD = 0x00;
  1360  000B2E  0E00               	movlw	0
  1361  000B30  6E95               	movwf	3989,c	;volatile
  1362                           
  1363                           ;LCD.c: 56:         _delay(1200);
  1364  000B32  0EF0               	movlw	240
  1365  000B34                     u517:
  1366  000B34  D000               	nop2	
  1367  000B36  2EE8               	decfsz	wreg,f,c
  1368  000B38  D7FD               	bra	u517
  1369                           
  1370                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1371  000B3A  928C               	bcf	3980,1,c	;volatile
  1372                           
  1373                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1374  000B3C  948C               	bcf	3980,2,c	;volatile
  1375                           
  1376                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1377  000B3E  808C               	bsf	3980,0,c	;volatile
  1378                           
  1379                           ;LCD.c: 61:  aux = dato & 0xF0;
  1380  000B40  5005               	movf	ENVIA_CHAR@dato,w,c
  1381  000B42  0BF0               	andlw	240
  1382  000B44  6E06               	movwf	ENVIA_CHAR@aux,c
  1383                           
  1384                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1385  000B46  5006               	movf	ENVIA_CHAR@aux,w,c
  1386  000B48  EC13  F006         	call	_ENVIA_NIBBLE
  1387                           
  1388                           ;LCD.c: 63:  aux = dato << 4;
  1389  000B4C  3805               	swapf	ENVIA_CHAR@dato,w,c
  1390  000B4E  0BF0               	andlw	240
  1391  000B50  6E06               	movwf	ENVIA_CHAR@aux,c
  1392                           
  1393                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1394  000B52  5006               	movf	ENVIA_CHAR@aux,w,c
  1395  000B54  EC13  F006         	call	_ENVIA_NIBBLE
  1396  000B58  0012               	return		;funcret
  1397  000B5A                     __end_of_ENVIA_CHAR:
  1398                           	opt callstack 0
  1399                           
  1400 ;; *************** function _LEER_LCD *****************
  1401 ;; Defined at:
  1402 ;;		line 121 in file "LCD.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;		None
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  aux             1    3[COMRAM] unsigned char 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		wreg, status,2, status,0
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1416 ;;      Params:         0       0       0       0       0       0       0       0       0
  1417 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1419 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1420 ;;Total ram usage:        1 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    2
  1423 ;; This function calls:
  1424 ;;		Nothing
  1425 ;; This function is called by:
  1426 ;;		_ENVIA_CHAR
  1427 ;;		_ENVIA_LCD_CMD
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           	psect	text13
  1432  000996                     __ptext13:
  1433                           	opt callstack 0
  1434  000996                     _LEER_LCD:
  1435                           	opt callstack 25
  1436                           
  1437                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1438                           
  1439                           ;incstack = 0
  1440  000996  0EF8               	movlw	248
  1441  000998  6E95               	movwf	3989,c	;volatile
  1442                           
  1443                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1444  00099A  908C               	bcf	3980,0,c	;volatile
  1445                           
  1446                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1447  00099C  828C               	bsf	3980,1,c	;volatile
  1448                           
  1449                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1450  00099E  848C               	bsf	3980,2,c	;volatile
  1451                           
  1452                           ;LCD.c: 128:         _delay(1200);
  1453  0009A0  0EF0               	movlw	240
  1454  0009A2                     u527:
  1455  0009A2  D000               	nop2	
  1456  0009A4  2EE8               	decfsz	wreg,f,c
  1457  0009A6  D7FD               	bra	u527
  1458                           
  1459                           ;LCD.c: 130:  aux = PORTD;
  1460  0009A8  CF83 F004          	movff	3971,LEER_LCD@aux	;volatile
  1461                           
  1462                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1463  0009AC  948C               	bcf	3980,2,c	;volatile
  1464                           
  1465                           ;LCD.c: 132:         _delay(1200);
  1466  0009AE  0EF0               	movlw	240
  1467  0009B0                     u537:
  1468  0009B0  D000               	nop2	
  1469  0009B2  2EE8               	decfsz	wreg,f,c
  1470  0009B4  D7FD               	bra	u537
  1471                           
  1472                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1473  0009B6  848C               	bsf	3980,2,c	;volatile
  1474                           
  1475                           ;LCD.c: 135:         _delay(1200);
  1476  0009B8  0EF0               	movlw	240
  1477  0009BA                     u547:
  1478  0009BA  D000               	nop2	
  1479  0009BC  2EE8               	decfsz	wreg,f,c
  1480  0009BE  D7FD               	bra	u547
  1481  0009C0                     l855:
  1482                           
  1483                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1484  0009C0  948C               	bcf	3980,2,c	;volatile
  1485                           
  1486                           ;LCD.c: 138:  aux = aux & 0x80;
  1487  0009C2  5004               	movf	LEER_LCD@aux,w,c
  1488  0009C4  0B80               	andlw	128
  1489  0009C6  6E04               	movwf	LEER_LCD@aux,c
  1490                           
  1491                           ;LCD.c: 139:  while(aux == 0x80)
  1492  0009C8  D012               	goto	l871
  1493  0009CA                     l152:
  1494                           
  1495                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1496  0009CA  848C               	bsf	3980,2,c	;volatile
  1497                           
  1498                           ;LCD.c: 142:             _delay(1200);
  1499  0009CC  0EF0               	movlw	240
  1500  0009CE                     u557:
  1501  0009CE  D000               	nop2	
  1502  0009D0  2EE8               	decfsz	wreg,f,c
  1503  0009D2  D7FD               	bra	u557
  1504                           
  1505                           ;LCD.c: 143:             aux = PORTD;
  1506  0009D4  CF83 F004          	movff	3971,LEER_LCD@aux	;volatile
  1507                           
  1508                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1509  0009D8  948C               	bcf	3980,2,c	;volatile
  1510                           
  1511                           ;LCD.c: 145:             _delay(1200);
  1512  0009DA  0EF0               	movlw	240
  1513  0009DC                     u567:
  1514  0009DC  D000               	nop2	
  1515  0009DE  2EE8               	decfsz	wreg,f,c
  1516  0009E0  D7FD               	bra	u567
  1517                           
  1518                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1519  0009E2  848C               	bsf	3980,2,c	;volatile
  1520                           
  1521                           ;LCD.c: 147:             _delay(1200);
  1522  0009E4  0EF0               	movlw	240
  1523  0009E6                     u577:
  1524  0009E6  D000               	nop2	
  1525  0009E8  2EE8               	decfsz	wreg,f,c
  1526  0009EA  D7FD               	bra	u577
  1527  0009EC  D7E9               	goto	l855
  1528  0009EE                     l871:
  1529                           
  1530                           ;LCD.c: 139:  while(aux == 0x80)
  1531  0009EE  0E80               	movlw	128
  1532  0009F0  1804               	xorwf	LEER_LCD@aux,w,c
  1533  0009F2  A4D8               	btfss	status,2,c
  1534  0009F4  0012               	return	
  1535  0009F6  D7E9               	goto	l152
  1536  0009F8                     __end_of_LEER_LCD:
  1537                           	opt callstack 0
  1538                           
  1539 ;; *************** function _ENVIA_NIBBLE *****************
  1540 ;; Defined at:
  1541 ;;		line 93 in file "LCD.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;  dato            1    wreg     unsigned char 
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  dato            1    3[COMRAM] unsigned char 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2, status,0
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1555 ;;      Params:         0       0       0       0       0       0       0       0       0
  1556 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1558 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1559 ;;Total ram usage:        1 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    2
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_ENVIA_CHAR
  1566 ;;		_LCD_CONFIG
  1567 ;;		_ENVIA_LCD_CMD
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text14
  1572  000C26                     __ptext14:
  1573                           	opt callstack 0
  1574  000C26                     _ENVIA_NIBBLE:
  1575                           	opt callstack 26
  1576                           
  1577                           ;incstack = 0
  1578                           ;ENVIA_NIBBLE@dato stored from wreg
  1579  000C26  6E04               	movwf	ENVIA_NIBBLE@dato,c
  1580                           
  1581                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1582  000C28  0E0F               	movlw	15
  1583  000C2A  168C               	andwf	3980,f,c	;volatile
  1584                           
  1585                           ;LCD.c: 96:  dato &= 0xF0;
  1586  000C2C  0EF0               	movlw	240
  1587  000C2E  1604               	andwf	ENVIA_NIBBLE@dato,f,c
  1588                           
  1589                           ;LCD.c: 97:  LATD|= dato;
  1590  000C30  5004               	movf	ENVIA_NIBBLE@dato,w,c	;volatile
  1591  000C32  128C               	iorwf	3980,f,c	;volatile
  1592                           
  1593                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1594  000C34  848C               	bsf	3980,2,c	;volatile
  1595                           
  1596                           ;LCD.c: 100:         _delay(1200);
  1597  000C36  0EF0               	movlw	240
  1598  000C38                     u587:
  1599  000C38  D000               	nop2	
  1600  000C3A  2EE8               	decfsz	wreg,f,c
  1601  000C3C  D7FD               	bra	u587
  1602                           
  1603                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1604  000C3E  948C               	bcf	3980,2,c	;volatile
  1605  000C40  0012               	return		;funcret
  1606  000C42                     __end_of_ENVIA_NIBBLE:
  1607                           	opt callstack 0
  1608                           
  1609 ;; *************** function _INTsISR *****************
  1610 ;; Defined at:
  1611 ;;		line 103 in file "maincode.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2, status,0
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1625 ;;      Params:         0       0       0       0       0       0       0       0       0
  1626 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1627 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1628 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1629 ;;Total ram usage:        3 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; Hardware stack levels required when called:    1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		Interrupt level 1
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	intcodelo
  1640  000018                     __pintcodelo:
  1641                           	opt callstack 0
  1642  000018                     _INTsISR:
  1643                           	opt callstack 25
  1644                           
  1645                           ;incstack = 0
  1646  000018  8019               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1647  00001A  CFD8 F001          	movff	status,??_INTsISR
  1648  00001E  CFE8 F002          	movff	wreg,??_INTsISR+1
  1649  000022  CFE0 F003          	movff	bsr,??_INTsISR+2
  1650                           
  1651                           ;maincode.c: 104:     if(INTCON3bits.INT2IF == 1){
  1652  000026  A2F0               	btfss	4080,1,c	;volatile
  1653  000028  D009               	goto	i1l78
  1654                           
  1655                           ;maincode.c: 105:         if(horas == 23){
  1656  00002A  0E17               	movlw	23
  1657  00002C  1817               	xorwf	_horas,w,c
  1658  00002E  A4D8               	btfss	status,2,c
  1659  000030  D002               	goto	i1l1147
  1660                           
  1661                           ;maincode.c: 106:             horas = 0;
  1662  000032  0E00               	movlw	0
  1663  000034  D001               	goto	L1
  1664  000036                     i1l1147:
  1665                           
  1666                           ;maincode.c: 109:             horas = horas + 1;
  1667  000036  2817               	incf	_horas,w,c
  1668  000038                     L1:
  1669  000038  6E17               	movwf	_horas,c
  1670  00003A  D00A               	goto	i1l1155
  1671  00003C                     i1l78:
  1672  00003C  A0F0               	btfss	4080,0,c	;volatile
  1673  00003E  D008               	goto	i1l1155
  1674                           
  1675                           ;maincode.c: 113:         if(minutos == 59){
  1676  000040  0E3B               	movlw	59
  1677  000042  1818               	xorwf	_minutos,w,c
  1678  000044  A4D8               	btfss	status,2,c
  1679  000046  D002               	goto	i1l1153
  1680                           
  1681                           ;maincode.c: 114:             minutos = 0;
  1682  000048  0E00               	movlw	0
  1683  00004A  D001               	goto	L2
  1684  00004C                     i1l1153:
  1685                           
  1686                           ;maincode.c: 117:             minutos = minutos + 1;
  1687  00004C  2818               	incf	_minutos,w,c
  1688  00004E                     L2:
  1689  00004E  6E18               	movwf	_minutos,c
  1690  000050                     i1l1155:
  1691                           
  1692                           ;maincode.c: 120:     INTCON3bits.INT1IF = 0;
  1693  000050  90F0               	bcf	4080,0,c	;volatile
  1694                           
  1695                           ;maincode.c: 121:     INTCON3bits.INT2IF = 0;
  1696  000052  92F0               	bcf	4080,1,c	;volatile
  1697  000054  C003  FFE0         	movff	??_INTsISR+2,bsr
  1698  000058  C002  FFE8         	movff	??_INTsISR+1,wreg
  1699  00005C  C001  FFD8         	movff	??_INTsISR,status
  1700  000060  9019               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1701  000062  0010               	retfie	
  1702  000064                     __end_of_INTsISR:
  1703                           	opt callstack 0
  1704                           
  1705 ;; *************** function _CCP1ISR *****************
  1706 ;; Defined at:
  1707 ;;		line 79 in file "maincode.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;		None
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  1    wreg      void 
  1714 ;; Registers used:
  1715 ;;		wreg, status,2, status,0
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1721 ;;      Params:         0       0       0       0       0       0       0       0       0
  1722 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1723 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1724 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1725 ;;Total ram usage:        0 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; This function calls:
  1728 ;;		Nothing
  1729 ;; This function is called by:
  1730 ;;		Interrupt level 2
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           	psect	intcode
  1735  000008                     __pintcode:
  1736                           	opt callstack 0
  1737  000008                     _CCP1ISR:
  1738                           	opt callstack 25
  1739                           
  1740                           ;incstack = 0
  1741  000008  8219               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1742  00000A  ED59  F005         	call	int_func,f	;refresh shadow registers
  1743                           
  1744                           	psect	intcode_body
  1745  000AB2                     __pintcode_body:
  1746                           	opt callstack 25
  1747  000AB2                     int_func:
  1748                           	opt callstack 25
  1749  000AB2  0006               	pop		; remove dummy address from shadow register refresh
  1750                           
  1751                           ;maincode.c: 80:     INTCONbits.GIEL = 0;
  1752  000AB4  9CF2               	bcf	4082,6,c	;volatile
  1753                           
  1754                           ;maincode.c: 81:     if(segundos == 59){
  1755  000AB6  0E3B               	movlw	59
  1756  000AB8  1816               	xorwf	_segundos,w,c
  1757  000ABA  A4D8               	btfss	status,2,c
  1758  000ABC  D014               	goto	i2l1135
  1759                           
  1760                           ;maincode.c: 82:         segundos = 0;
  1761  000ABE  0E00               	movlw	0
  1762  000AC0  6E16               	movwf	_segundos,c
  1763                           
  1764                           ;maincode.c: 83:         if(minutos == 59){
  1765  000AC2  0E3B               	movlw	59
  1766  000AC4  1818               	xorwf	_minutos,w,c
  1767  000AC6  A4D8               	btfss	status,2,c
  1768  000AC8  D00B               	goto	i2l1133
  1769                           
  1770                           ;maincode.c: 84:             minutos = 0;
  1771  000ACA  0E00               	movlw	0
  1772  000ACC  6E18               	movwf	_minutos,c
  1773                           
  1774                           ;maincode.c: 85:             if(horas == 23){
  1775  000ACE  0E17               	movlw	23
  1776  000AD0  1817               	xorwf	_horas,w,c
  1777  000AD2  A4D8               	btfss	status,2,c
  1778  000AD4  D002               	goto	i2l1131
  1779                           
  1780                           ;maincode.c: 86:                 horas = 0;
  1781  000AD6  0E00               	movlw	0
  1782  000AD8  D001               	goto	L3
  1783  000ADA                     i2l1131:
  1784                           
  1785                           ;maincode.c: 89:                 horas = horas + 1;
  1786  000ADA  2817               	incf	_horas,w,c
  1787  000ADC                     L3:
  1788  000ADC  6E17               	movwf	_horas,c
  1789  000ADE  D005               	goto	i2l1137
  1790  000AE0                     i2l1133:
  1791                           
  1792                           ;maincode.c: 93:             minutos = minutos + 1;
  1793  000AE0  2818               	incf	_minutos,w,c
  1794  000AE2  6E18               	movwf	_minutos,c
  1795  000AE4  D002               	goto	i2l1137
  1796  000AE6                     i2l1135:
  1797                           
  1798                           ;maincode.c: 97:         segundos = segundos + 1;
  1799  000AE6  2816               	incf	_segundos,w,c
  1800  000AE8  6E16               	movwf	_segundos,c
  1801  000AEA                     i2l1137:
  1802                           
  1803                           ;maincode.c: 99:     PIR1bits.CCP1IF = 0;
  1804  000AEA  949E               	bcf	3998,2,c	;volatile
  1805                           
  1806                           ;maincode.c: 100:     INTCONbits.GIEL = 1;
  1807  000AEC  8CF2               	bsf	4082,6,c	;volatile
  1808  000AEE  9219               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1809  000AF0  0011               	retfie		f
  1810  000AF2                     __end_of_CCP1ISR:
  1811                           	opt callstack 0
  1812                           
  1813                           	psect	rparam
  1814  0000                     
  1815                           	psect	temp
  1816  000019                     btemp:
  1817                           	opt callstack 0
  1818  000019                     	ds	1
  1819  0000                     int$flags	set	btemp
  1820  0000                     wtemp8	set	btemp+1
  1821  0000                     ttemp5	set	btemp+1
  1822  0000                     ttemp6	set	btemp+4
  1823  0000                     ttemp7	set	btemp+8
  1824                           tosu	equ	0xFFF
  1825                           tosh	equ	0xFFE
  1826                           tosl	equ	0xFFD
  1827                           stkptr	equ	0xFFC
  1828                           pclatu	equ	0xFFB
  1829                           pclath	equ	0xFFA
  1830                           pcl	equ	0xFF9
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           prodh	equ	0xFF4
  1836                           prodl	equ	0xFF3
  1837                           indf0	equ	0xFEF
  1838                           postinc0	equ	0xFEE
  1839                           postdec0	equ	0xFED
  1840                           preinc0	equ	0xFEC
  1841                           plusw0	equ	0xFEB
  1842                           fsr0h	equ	0xFEA
  1843                           fsr0l	equ	0xFE9
  1844                           wreg	equ	0xFE8
  1845                           indf1	equ	0xFE7
  1846                           postinc1	equ	0xFE6
  1847                           postdec1	equ	0xFE5
  1848                           preinc1	equ	0xFE4
  1849                           plusw1	equ	0xFE3
  1850                           fsr1h	equ	0xFE2
  1851                           fsr1l	equ	0xFE1
  1852                           bsr	equ	0xFE0
  1853                           indf2	equ	0xFDF
  1854                           postinc2	equ	0xFDE
  1855                           postdec2	equ	0xFDD
  1856                           preinc2	equ	0xFDC
  1857                           plusw2	equ	0xFDB
  1858                           fsr2h	equ	0xFDA
  1859                           fsr2l	equ	0xFD9
  1860                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        2
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     18      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _convierte->___awdiv
    ___awdiv->___awmod
    _arrancaLCD->_CURSOR_ONOFF
    _arrancaLCD->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _INTsISR in COMRAM

    None.

Critical Paths under _CCP1ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTsISR in BANK0

    None.

Critical Paths under _CCP1ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTsISR in BANK1

    None.

Critical Paths under _CCP1ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTsISR in BANK2

    None.

Critical Paths under _CCP1ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTsISR in BANK3

    None.

Critical Paths under _CCP1ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTsISR in BANK4

    None.

Critical Paths under _CCP1ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTsISR in BANK5

    None.

Critical Paths under _CCP1ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTsISR in BANK6

    None.

Critical Paths under _CCP1ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTsISR in BANK7

    None.

Critical Paths under _CCP1ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2562
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                         _arrancaLCD
                          _convierte
 ---------------------------------------------------------------------------------
 (1) _convierte                                            1     1      0    1270
                                             17 COMRAM     1     1      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              9 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _arrancaLCD                                           1     1      0     525
                                              7 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              6 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              6 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              6 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              4 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     363
                                              6 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              4 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTsISR                                              3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _CCP1ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _arrancaLCD
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE
   _convierte
     ___awdiv
       ___awmod (ARG)
     ___awmod

 _INTsISR (ROOT)

 _CCP1ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     12      18       1       25.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      20        0.0%
DATA                 0      0      18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Jan 29 17:57:15 2020

            ___awdiv@sign 000F                        bsr 000FE0               __CFG_BORV$3 000000  
      __CFG_FOSC$XTPLL_XT 000000             ENVIA_CHAR@aux 0006                       l152 09CA  
                     l931 0C18                       l871 09EE                       l855 09C0  
                     u400 0960                       u340 08E8                       u507 0B00  
                     u517 0B34                       u527 09A2                       u537 09B0  
                     u547 09BA                       u467 0BCC                       u557 09CE  
                     u477 0A08                       u567 09DC                       u487 0A16  
                     u577 09E6                       u497 0A26                       u587 0C38  
            __CFG_BOR$OFF 000000           __end_of_CCP1ISR 0AF2              ___awmod@sign 0009  
             LEER_LCD@aux 0004                       wreg 000FE8              ?_CURSOR_HOME 0001  
          ??_ENVIA_NIBBLE 0004              __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0005  
            __CFG_WDT$OFF 000000                      l1211 08DC                      l1213 08E4  
                    l1205 08C6                      l1231 091C                      l1223 0904  
                    l1311 0848                      l1227 090E                      l1251 0954  
                    l1243 093A                      l1253 095C                      l1263 097E  
                    l1247 0946                      l1275 0B96                      l1267 098C  
                    l1259 0974                      l1285 0BF8                      l1279 0BB4  
                    l1199 08B6                      STR_1 0801                      _LATD 000F8C  
                    i1l78 003C           __end_of_INTsISR 0064              __CFG_PWRT$ON 000000  
                    _main 0814                      btemp 0019                      start 0064  
           ?_CURSOR_ONOFF 0001             __CFG_MCLRE$ON 000000              ___param_bank 000000  
         ??_ENVIA_LCD_CMD 0005          __end_of_LEER_LCD 09F8       __size_of_BORRAR_LCD 0008  
           __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000                     ?_main 0001  
         __end_of___awdiv 0926           __end_of___awmod 0996           ___awdiv@divisor 000C  
                   _T1CON 000FCD           ___awdiv@counter 000E                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISD 000F95       __size_of_ENVIA_CHAR 0034  
                   _horas 0017               ?_POS_CURSOR 0007                     tablat 000FF5  
                   ttemp5 001A                     ttemp6 001D                     ttemp7 0021  
                   status 000FD8                     wtemp8 001A            ??_CURSOR_ONOFF 0007  
         __initialization 0B5A              __end_of_main 08A2                 ??_CCP1ISR 0001  
         _ESCRIBE_MENSAJE 0B8C                    ??_main 0013             __activetblptr 000001  
               ??_INTsISR 0001                    _CCPR1H 000FBF                    _CCPR1L 000FBE  
        ___awdiv@dividend 000A                    i1l1153 004C                    i1l1155 0050  
                  i1l1147 0036                    i2l1131 0ADA                    i2l1133 0AE0  
                  i2l1135 0AE6                    i2l1137 0AEA                 ??___awdiv 000E  
                  _decena 0014                 ??___awmod 0008      __end_of_ENVIA_NIBBLE 0C42  
     __size_of_POS_CURSOR 0024          ___awdiv@quotient 0010           ___awmod@divisor 0006  
         ___awmod@counter 0008                    _unidad 0013              __pdataCOMRAM 0017  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0007      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0B7A  
         __CFG_PBADEN$OFF 000000              ??_LCD_CONFIG 0007             ___rparam_used 000001  
            ??_ENVIA_CHAR 0005   __end_of_ESCRIBE_MENSAJE 0BBE            __pcstackCOMRAM 0001  
      __end_of_BORRAR_LCD 0C52          ENVIA_LCD_CMD@aux 0006      __end_of_CURSOR_ONOFF 0C26  
      __end_of_LCD_CONFIG 0A58        __end_of_ENVIA_CHAR 0B5A        __size_of_convierte 005A  
              ??_LEER_LCD 0004          ENVIA_NIBBLE@dato 0004                   _CCP1CON 000FBD  
                 _CCP1ISR 0008                _arrancaLCD 0BBE                   _INTsISR 0018  
            ??_POS_CURSOR 0008     __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000  
                 __Lparam 0000          ?_ESCRIBE_MENSAJE 0007                   ___awdiv 08A2  
                 ___awmod 0926              __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0B26  
       __end_of_convierte 0AB2                   __pcinit 0B5A        __end_of_POS_CURSOR 0C0A  
                 __ramtop 0800                   _centena 0015                   __ptext0 0814  
                 __ptext1 0A58                   __ptext2 0926                   __ptext3 08A2  
                 __ptext4 0BBE                   __ptext5 09F8                   __ptext6 0C0A  
                 __ptext7 0C42                   __ptext8 0C4A                   __ptext9 0BE6  
        ___awmod@dividend 0004                   _minutos 0018            __pintcode_body 0AB2  
            _ENVIA_NIBBLE 0C26      end_of_initialization 0B7A                   int_func 0AB2  
   __size_of_CURSOR_ONOFF 001C               ?_arrancaLCD 0001         __size_of_LEER_LCD 0062  
            _CURSOR_ONOFF 0C0A        CURSOR_ONOFF@estado 0007             __pidataCOMRAM 0C52  
           ??_CURSOR_HOME 0007       start_initialization 0B5A         ENVIA_LCD_CMD@dato 0005  
     __size_of_arrancaLCD 0028          __CFG_LPT1OSC$OFF 000000                  ?_CCP1ISR 0001  
             __pbssCOMRAM 0013                  ?_INTsISR 0001       __end_of_CURSOR_HOME 0C4A  
               __pintcode 0008                  ?___awdiv 000A                  ?___awmod 0004  
             __pintcodelo 0018               __smallconst 0800                 _convierte 0A58  
         convierte@numero 0012                  _LEER_LCD 0996                  _LATDbits 000F8C  
                _PIE1bits 000F9D                  _PIR1bits 000F9E                  _RCONbits 000FD0  
        __CFG_WDTPS$32768 000000          ESCRIBE_MENSAJE@i 000C            POS_CURSOR@fila 0008  
        __size_of_CCP1ISR 0AEA  __size_of_ESCRIBE_MENSAJE 0032                ?_convierte 0001  
            ??_arrancaLCD 0008               _CURSOR_HOME 0C42          __size_of_INTsISR 004C  
             _INTCON3bits 000FF0    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800        __end_of_arrancaLCD 0BE6  
        __size_of___awdiv 0084          __size_of___awmod 0070                  __ptext10 0AF2  
                __ptext11 0B8C                  __ptext12 0B26                  __ptext13 0996  
                __ptext14 0C26                _BORRAR_LCD 0C4A             __size_of_main 008E  
              _LCD_CONFIG 09F8                _ENVIA_CHAR 0B26                  _segundos 0016  
                int$flags 0019             _ENVIA_LCD_CMD 0AF2     __CFG_CPUDIV$OSC1_PLL2 000000  
             ??_convierte 0012                _INTCONbits 000FF2         ??_ESCRIBE_MENSAJE 000A  
                intlevel1 0000                  intlevel2 0000     ESCRIBE_MENSAJE@cadena 0007  
          ?_ENVIA_LCD_CMD 0001               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0BE6               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0009  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0007  
