

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Jan 28 21:18:02 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 2.10
    28                           ; Generated 31/07/2019 GMT
    29                           ; 
    30                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     _PORTD	set	3971
    62  0000                     _LATD	set	3980
    63  0000                     _LATDbits	set	3980
    64  0000                     _ADRESH	set	4036
    65  0000                     _ADCON0bits	set	4034
    66  0000                     _ADCON0	set	4034
    67  0000                     _ADCON1	set	4033
    68  0000                     _ADCON2	set	4032
    69  0000                     _TRISD	set	3989
    70                           
    71                           	psect	smallconst
    72  000800                     __psmallconst:
    73                           	opt callstack 0
    74  000800  00                 	db	0
    75  000801                     STR_1:
    76  000801  43                 	db	67	;'C'
    77  000802  6F                 	db	111	;'o'
    78  000803  6E                 	db	110	;'n'
    79  000804  76                 	db	118	;'v'
    80  000805  65                 	db	101	;'e'
    81  000806  72                 	db	114	;'r'
    82  000807  73                 	db	115	;'s'
    83  000808  69                 	db	105	;'i'
    84  000809  6F                 	db	111	;'o'
    85  00080A  6E                 	db	110	;'n'
    86  00080B  20                 	db	32
    87  00080C  41                 	db	65	;'A'
    88  00080D  2F                 	db	47
    89  00080E  44                 	db	68	;'D'
    90  00080F  00                 	db	0
    91                           
    92                           ; #config settings
    93  000810  00                 	db	0	; dummy byte at the end
    94  0000                     
    95                           	psect	cinit
    96  000D16                     __pcinit:
    97                           	opt callstack 0
    98  000D16                     start_initialization:
    99                           	opt callstack 0
   100  000D16                     __initialization:
   101                           	opt callstack 0
   102                           
   103                           ; Clear objects allocated to COMRAM (12 bytes)
   104  000D16  EE00  F013         	lfsr	0,__pbssCOMRAM
   105  000D1A  0E0C               	movlw	12
   106  000D1C                     clear_0:
   107  000D1C  6AEE               	clrf	postinc0,c
   108  000D1E  06E8               	decf	wreg,f,c
   109  000D20  E1FD               	bnz	clear_0
   110  000D22                     end_of_initialization:
   111                           	opt callstack 0
   112  000D22                     __end_of__initialization:
   113                           	opt callstack 0
   114  000D22  0E00               	movlw	low (__Lsmallconst shr (0+16))
   115  000D24  6EF8               	movwf	tblptru,c
   116  000D26  0E08               	movlw	high __Lsmallconst
   117  000D28  6EF7               	movwf	tblptrh,c
   118  000D2A  0100               	movlb	0
   119  000D2C  EFF0  F004         	goto	_main	;jump to C main() function
   120                           
   121                           	psect	bssCOMRAM
   122  000013                     __pbssCOMRAM:
   123                           	opt callstack 0
   124  000013                     _conversion:
   125                           	opt callstack 0
   126  000013                     	ds	2
   127  000015                     _unidad:
   128                           	opt callstack 0
   129  000015                     	ds	2
   130  000017                     _decena:
   131                           	opt callstack 0
   132  000017                     	ds	2
   133  000019                     _centena:
   134                           	opt callstack 0
   135  000019                     	ds	2
   136  00001B                     _millar:
   137                           	opt callstack 0
   138  00001B                     	ds	2
   139  00001D                     _cuenta:
   140                           	opt callstack 0
   141  00001D                     	ds	2
   142                           
   143                           	psect	cstackCOMRAM
   144  000001                     __pcstackCOMRAM:
   145                           	opt callstack 0
   146  000001                     ?___wmul:
   147                           	opt callstack 0
   148  000001                     ?___awdiv:
   149                           	opt callstack 0
   150  000001                     ENVIA_NIBBLE@dato:
   151                           	opt callstack 0
   152  000001                     LEER_LCD@aux:
   153                           	opt callstack 0
   154  000001                     ___wmul@multiplier:
   155                           	opt callstack 0
   156  000001                     ___awdiv@dividend:
   157                           	opt callstack 0
   158                           
   159                           ; 2 bytes @ 0x0
   160  000001                     	ds	1
   161  000002                     ENVIA_CHAR@dato:
   162                           	opt callstack 0
   163  000002                     ENVIA_LCD_CMD@dato:
   164                           	opt callstack 0
   165                           
   166                           ; 1 bytes @ 0x1
   167  000002                     	ds	1
   168  000003                     ENVIA_CHAR@aux:
   169                           	opt callstack 0
   170  000003                     ENVIA_LCD_CMD@aux:
   171                           	opt callstack 0
   172  000003                     ___wmul@multiplicand:
   173                           	opt callstack 0
   174  000003                     ___awdiv@divisor:
   175                           	opt callstack 0
   176                           
   177                           ; 2 bytes @ 0x2
   178  000003                     	ds	1
   179  000004                     ??_LCD_CONFIG:
   180  000004                     POS_CURSOR@columna:
   181                           	opt callstack 0
   182  000004                     CURSOR_ONOFF@estado:
   183                           	opt callstack 0
   184  000004                     ESCRIBE_MENSAJE@cadena:
   185                           	opt callstack 0
   186                           
   187                           ; 2 bytes @ 0x3
   188  000004                     	ds	1
   189  000005                     POS_CURSOR@fila:
   190                           	opt callstack 0
   191  000005                     ___awdiv@counter:
   192                           	opt callstack 0
   193  000005                     ___wmul@product:
   194                           	opt callstack 0
   195                           
   196                           ; 2 bytes @ 0x4
   197  000005                     	ds	1
   198  000006                     ESCRIBE_MENSAJE@tam:
   199                           	opt callstack 0
   200  000006                     ___awdiv@sign:
   201                           	opt callstack 0
   202                           
   203                           ; 1 bytes @ 0x5
   204  000006                     	ds	1
   205  000007                     ??_ESCRIBE_MENSAJE:
   206  000007                     ?___lwdiv:
   207                           	opt callstack 0
   208  000007                     ___awdiv@quotient:
   209                           	opt callstack 0
   210  000007                     ___lwdiv@dividend:
   211                           	opt callstack 0
   212                           
   213                           ; 2 bytes @ 0x6
   214  000007                     	ds	2
   215  000009                     ESCRIBE_MENSAJE@i:
   216                           	opt callstack 0
   217  000009                     ___lwdiv@divisor:
   218                           	opt callstack 0
   219                           
   220                           ; 2 bytes @ 0x8
   221  000009                     	ds	2
   222  00000B                     ___lwdiv@quotient:
   223                           	opt callstack 0
   224                           
   225                           ; 2 bytes @ 0xA
   226  00000B                     	ds	2
   227  00000D                     ___lwdiv@counter:
   228                           	opt callstack 0
   229                           
   230                           ; 1 bytes @ 0xC
   231  00000D                     	ds	1
   232  00000E                     digitos@numero:
   233                           	opt callstack 0
   234                           
   235                           ; 2 bytes @ 0xD
   236  00000E                     	ds	2
   237  000010                     ??_digitos:
   238                           
   239                           ; 1 bytes @ 0xF
   240  000010                     	ds	2
   241  000012                     ??_main:
   242                           
   243                           ; 1 bytes @ 0x11
   244  000012                     	ds	1
   245                           
   246 ;;
   247 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   248 ;;
   249 ;; *************** function _main *****************
   250 ;; Defined at:
   251 ;;		line 27 in file "maincode.c"
   252 ;; Parameters:    Size  Location     Type
   253 ;;		None
   254 ;; Auto vars:     Size  Location     Type
   255 ;;		None
   256 ;; Return value:  Size  Location     Type
   257 ;;                  1    wreg      void 
   258 ;; Registers used:
   259 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   260 ;; Tracked objects:
   261 ;;		On entry : 0/0
   262 ;;		On exit  : 0/0
   263 ;;		Unchanged: 0/0
   264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   265 ;;      Params:         0       0       0       0       0       0       0       0       0
   266 ;;      Locals:         0       0       0       0       0       0       0       0       0
   267 ;;      Temps:          1       0       0       0       0       0       0       0       0
   268 ;;      Totals:         1       0       0       0       0       0       0       0       0
   269 ;;Total ram usage:        1 bytes
   270 ;; Hardware stack levels required when called:    3
   271 ;; This function calls:
   272 ;;		_BORRAR_LCD
   273 ;;		_CURSOR_HOME
   274 ;;		_CURSOR_ONOFF
   275 ;;		_ENVIA_CHAR
   276 ;;		_ESCRIBE_MENSAJE
   277 ;;		_LCD_CONFIG
   278 ;;		_POS_CURSOR
   279 ;;		_digitos
   280 ;; This function is called by:
   281 ;;		Startup code after reset
   282 ;; This function uses a non-reentrant model
   283 ;;
   284                           
   285                           	psect	text0
   286  0009E0                     __ptext0:
   287                           	opt callstack 0
   288  0009E0                     _main:
   289                           	opt callstack 28
   290  0009E0                     
   291                           ;maincode.c: 29:     TRISD = 0x00;
   292  0009E0  0E00               	movlw	0
   293  0009E2  6E95               	movwf	149,c	;volatile
   294  0009E4                     
   295                           ;maincode.c: 30:     LCD_CONFIG();
   296  0009E4  ECB2  F005         	call	_LCD_CONFIG	;wreg free
   297  0009E8                     
   298                           ;maincode.c: 31:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
   299  0009E8  0E14               	movlw	20
   300  0009EA  6E12               	movwf	??_main^0,c
   301  0009EC  0E7A               	movlw	122
   302  0009EE                     u357:
   303  0009EE  2EE8               	decfsz	wreg,f,c
   304  0009F0  D7FE               	bra	u357
   305  0009F2  2E12               	decfsz	??_main^0,f,c
   306  0009F4  D7FC               	bra	u357
   307  0009F6                     
   308                           ;maincode.c: 32:     BORRAR_LCD();
   309  0009F6  EC9C  F006         	call	_BORRAR_LCD	;wreg free
   310  0009FA                     
   311                           ;maincode.c: 33:     CURSOR_HOME();
   312  0009FA  EC98  F006         	call	_CURSOR_HOME	;wreg free
   313  0009FE                     
   314                           ;maincode.c: 34:     CURSOR_ONOFF(1);
   315  0009FE  0E01               	movlw	1
   316  000A00  EC52  F006         	call	_CURSOR_ONOFF
   317  000A04                     
   318                           ;maincode.c: 35:     ADCON2 = 0x14;
   319  000A04  0E14               	movlw	20
   320  000A06  6EC0               	movwf	192,c	;volatile
   321  000A08                     
   322                           ;maincode.c: 36:     ADCON1 = 0x0E;
   323  000A08  0E0E               	movlw	14
   324  000A0A  6EC1               	movwf	193,c	;volatile
   325  000A0C                     
   326                           ;maincode.c: 37:     ADCON0 = 0x01;
   327  000A0C  0E01               	movlw	1
   328  000A0E  6EC2               	movwf	194,c	;volatile
   329  000A10                     
   330                           ;maincode.c: 38:     CURSOR_HOME();
   331  000A10  EC98  F006         	call	_CURSOR_HOME	;wreg free
   332  000A14                     
   333                           ;maincode.c: 39:     ESCRIBE_MENSAJE("Conversion A/D",14);
   334  000A14  0E01               	movlw	low STR_1
   335  000A16  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   336  000A18  0E08               	movlw	high STR_1
   337  000A1A  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   338  000A1C  0E0E               	movlw	14
   339  000A1E  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   340  000A20  ECE2  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   341  000A24                     l1214:
   342                           
   343                           ;maincode.c: 41:         ADCON0bits.GODONE = 1;
   344  000A24  82C2               	bsf	194,1,c	;volatile
   345  000A26                     l49:
   346  000A26  B2C2               	btfsc	194,1,c	;volatile
   347  000A28  EF18  F005         	goto	u341
   348  000A2C  EF1A  F005         	goto	u340
   349  000A30                     u341:
   350  000A30  EF13  F005         	goto	l49
   351  000A34                     u340:
   352  000A34                     
   353                           ;maincode.c: 43:         digitos(ADRESH);
   354  000A34  CFC4 F00E          	movff	4036,digitos@numero	;volatile
   355  000A38  6A0F               	clrf	(digitos@numero+1)^0,c
   356  000A3A  EC09  F004         	call	_digitos	;wreg free
   357  000A3E                     
   358                           ;maincode.c: 44:         POS_CURSOR(2,0);
   359  000A3E  0E00               	movlw	0
   360  000A40  6E04               	movwf	POS_CURSOR@columna^0,c
   361  000A42  0E02               	movlw	2
   362  000A44  EC01  F006         	call	_POS_CURSOR
   363  000A48                     
   364                           ;maincode.c: 45:         ENVIA_CHAR(millar+0x30);
   365  000A48  501B               	movf	_millar^0,w,c
   366  000A4A  0F30               	addlw	48
   367  000A4C  EC1E  F006         	call	_ENVIA_CHAR
   368  000A50                     
   369                           ;maincode.c: 46:         ENVIA_CHAR(centena+0x30);
   370  000A50  5019               	movf	_centena^0,w,c
   371  000A52  0F30               	addlw	48
   372  000A54  EC1E  F006         	call	_ENVIA_CHAR
   373  000A58                     
   374                           ;maincode.c: 47:         ENVIA_CHAR(decena+0x30);
   375  000A58  5017               	movf	_decena^0,w,c
   376  000A5A  0F30               	addlw	48
   377  000A5C  EC1E  F006         	call	_ENVIA_CHAR
   378  000A60                     
   379                           ;maincode.c: 48:         ENVIA_CHAR(unidad+0x30);
   380  000A60  5015               	movf	_unidad^0,w,c
   381  000A62  0F30               	addlw	48
   382  000A64  EC1E  F006         	call	_ENVIA_CHAR
   383  000A68                     
   384                           ;maincode.c: 49:         _delay((unsigned long)((100)*(4000000UL/4000.0)));
   385  000A68  0E82               	movlw	130
   386  000A6A  6E12               	movwf	??_main^0,c
   387  000A6C  0EDE               	movlw	222
   388  000A6E                     u367:
   389  000A6E  2EE8               	decfsz	wreg,f,c
   390  000A70  D7FE               	bra	u367
   391  000A72  2E12               	decfsz	??_main^0,f,c
   392  000A74  D7FC               	bra	u367
   393  000A76  EF12  F005         	goto	l1214
   394  000A7A  EF00  F000         	goto	start
   395  000A7E                     __end_of_main:
   396                           	opt callstack 0
   397                           
   398 ;; *************** function _digitos *****************
   399 ;; Defined at:
   400 ;;		line 20 in file "maincode.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;  numero          2   13[COMRAM] int 
   403 ;; Auto vars:     Size  Location     Type
   404 ;;		None
   405 ;; Return value:  Size  Location     Type
   406 ;;                  2   13[COMRAM] unsigned int 
   407 ;; Registers used:
   408 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   409 ;; Tracked objects:
   410 ;;		On entry : 0/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   414 ;;      Params:         2       0       0       0       0       0       0       0       0
   415 ;;      Locals:         0       0       0       0       0       0       0       0       0
   416 ;;      Temps:          2       0       0       0       0       0       0       0       0
   417 ;;      Totals:         4       0       0       0       0       0       0       0       0
   418 ;;Total ram usage:        4 bytes
   419 ;; Hardware stack levels used:    1
   420 ;; Hardware stack levels required when called:    1
   421 ;; This function calls:
   422 ;;		___awdiv
   423 ;;		___lwdiv
   424 ;;		___wmul
   425 ;; This function is called by:
   426 ;;		_main
   427 ;; This function uses a non-reentrant model
   428 ;;
   429                           
   430                           	psect	text1
   431  000812                     __ptext1:
   432                           	opt callstack 0
   433  000812                     _digitos:
   434                           	opt callstack 29
   435  000812                     
   436                           ;maincode.c: 21:     millar = numero / 1000;
   437  000812  C00E  F001         	movff	digitos@numero,___awdiv@dividend
   438  000816  C00F  F002         	movff	digitos@numero+1,___awdiv@dividend+1
   439  00081A  0E03               	movlw	3
   440  00081C  6E04               	movwf	(___awdiv@divisor+1)^0,c
   441  00081E  0EE8               	movlw	232
   442  000820  6E03               	movwf	___awdiv@divisor^0,c
   443  000822  EC8E  F004         	call	___awdiv	;wreg free
   444  000826  C001  F01B         	movff	?___awdiv,_millar
   445  00082A  C002  F01C         	movff	?___awdiv+1,_millar+1
   446  00082E                     
   447                           ;maincode.c: 22:     centena = (numero - (millar * 1000)) / 100;
   448  00082E  C01B  F001         	movff	_millar,___wmul@multiplier
   449  000832  C01C  F002         	movff	_millar+1,___wmul@multiplier+1
   450  000836  0EFC               	movlw	252
   451  000838  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   452  00083A  0E18               	movlw	24
   453  00083C  6E03               	movwf	___wmul@multiplicand^0,c
   454  00083E  EC6A  F006         	call	___wmul	;wreg free
   455  000842  500E               	movf	digitos@numero^0,w,c
   456  000844  2401               	addwf	?___wmul^0,w,c
   457  000846  6E07               	movwf	___lwdiv@dividend^0,c
   458  000848  500F               	movf	(digitos@numero+1)^0,w,c
   459  00084A  2002               	addwfc	(?___wmul+1)^0,w,c
   460  00084C  6E08               	movwf	(___lwdiv@dividend+1)^0,c
   461  00084E  0E00               	movlw	0
   462  000850  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   463  000852  0E64               	movlw	100
   464  000854  6E09               	movwf	___lwdiv@divisor^0,c
   465  000856  EC3F  F005         	call	___lwdiv	;wreg free
   466  00085A  C007  F019         	movff	?___lwdiv,_centena
   467  00085E  C008  F01A         	movff	?___lwdiv+1,_centena+1
   468  000862                     
   469                           ;maincode.c: 23:     decena = ((numero - (millar * 1000)) - (centena * 100)) / 10;
   470  000862  C01B  F001         	movff	_millar,___wmul@multiplier
   471  000866  C01C  F002         	movff	_millar+1,___wmul@multiplier+1
   472  00086A  0EFC               	movlw	252
   473  00086C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   474  00086E  0E18               	movlw	24
   475  000870  6E03               	movwf	___wmul@multiplicand^0,c
   476  000872  EC6A  F006         	call	___wmul	;wreg free
   477  000876  C001  F010         	movff	?___wmul,??_digitos
   478  00087A  C002  F011         	movff	?___wmul+1,??_digitos+1
   479  00087E  C019  F001         	movff	_centena,___wmul@multiplier
   480  000882  C01A  F002         	movff	_centena+1,___wmul@multiplier+1
   481  000886  0EFF               	movlw	255
   482  000888  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   483  00088A  0E9C               	movlw	156
   484  00088C  6E03               	movwf	___wmul@multiplicand^0,c
   485  00088E  EC6A  F006         	call	___wmul	;wreg free
   486  000892  5001               	movf	?___wmul^0,w,c
   487  000894  2610               	addwf	??_digitos^0,f,c
   488  000896  5002               	movf	(?___wmul+1)^0,w,c
   489  000898  2211               	addwfc	(??_digitos+1)^0,f,c
   490  00089A  500E               	movf	digitos@numero^0,w,c
   491  00089C  2410               	addwf	??_digitos^0,w,c
   492  00089E  6E07               	movwf	___lwdiv@dividend^0,c
   493  0008A0  500F               	movf	(digitos@numero+1)^0,w,c
   494  0008A2  2011               	addwfc	(??_digitos+1)^0,w,c
   495  0008A4  6E08               	movwf	(___lwdiv@dividend+1)^0,c
   496  0008A6  0E00               	movlw	0
   497  0008A8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   498  0008AA  0E0A               	movlw	10
   499  0008AC  6E09               	movwf	___lwdiv@divisor^0,c
   500  0008AE  EC3F  F005         	call	___lwdiv	;wreg free
   501  0008B2  C007  F017         	movff	?___lwdiv,_decena
   502  0008B6  C008  F018         	movff	?___lwdiv+1,_decena+1
   503  0008BA                     
   504                           ;maincode.c: 24:     unidad = ((numero - (millar * 1000)) - (centena * 100)) - (decena *
      +                           10);
   505  0008BA  C01B  F001         	movff	_millar,___wmul@multiplier
   506  0008BE  C01C  F002         	movff	_millar+1,___wmul@multiplier+1
   507  0008C2  0EFC               	movlw	252
   508  0008C4  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   509  0008C6  0E18               	movlw	24
   510  0008C8  6E03               	movwf	___wmul@multiplicand^0,c
   511  0008CA  EC6A  F006         	call	___wmul	;wreg free
   512  0008CE  C001  F010         	movff	?___wmul,??_digitos
   513  0008D2  C002  F011         	movff	?___wmul+1,??_digitos+1
   514  0008D6  C019  F001         	movff	_centena,___wmul@multiplier
   515  0008DA  C01A  F002         	movff	_centena+1,___wmul@multiplier+1
   516  0008DE  0EFF               	movlw	255
   517  0008E0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   518  0008E2  0E9C               	movlw	156
   519  0008E4  6E03               	movwf	___wmul@multiplicand^0,c
   520  0008E6  EC6A  F006         	call	___wmul	;wreg free
   521  0008EA  5001               	movf	?___wmul^0,w,c
   522  0008EC  2610               	addwf	??_digitos^0,f,c
   523  0008EE  5002               	movf	(?___wmul+1)^0,w,c
   524  0008F0  2211               	addwfc	(??_digitos+1)^0,f,c
   525  0008F2  C017  F001         	movff	_decena,___wmul@multiplier
   526  0008F6  C018  F002         	movff	_decena+1,___wmul@multiplier+1
   527  0008FA  0EFF               	movlw	255
   528  0008FC  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   529  0008FE  0EF6               	movlw	246
   530  000900  6E03               	movwf	___wmul@multiplicand^0,c
   531  000902  EC6A  F006         	call	___wmul	;wreg free
   532  000906  5001               	movf	?___wmul^0,w,c
   533  000908  2610               	addwf	??_digitos^0,f,c
   534  00090A  5002               	movf	(?___wmul+1)^0,w,c
   535  00090C  2211               	addwfc	(??_digitos+1)^0,f,c
   536  00090E  500E               	movf	digitos@numero^0,w,c
   537  000910  2410               	addwf	??_digitos^0,w,c
   538  000912  6E15               	movwf	_unidad^0,c
   539  000914  500F               	movf	(digitos@numero+1)^0,w,c
   540  000916  2011               	addwfc	(??_digitos+1)^0,w,c
   541  000918  6E16               	movwf	(_unidad+1)^0,c
   542  00091A  0012               	return		;funcret
   543  00091C                     __end_of_digitos:
   544                           	opt callstack 0
   545                           
   546 ;; *************** function ___wmul *****************
   547 ;; Defined at:
   548 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;  multiplier      2    0[COMRAM] unsigned int 
   551 ;;  multiplicand    2    2[COMRAM] unsigned int 
   552 ;; Auto vars:     Size  Location     Type
   553 ;;  product         2    4[COMRAM] unsigned int 
   554 ;; Return value:  Size  Location     Type
   555 ;;                  2    0[COMRAM] unsigned int 
   556 ;; Registers used:
   557 ;;		wreg, status,2, status,0, prodl, prodh
   558 ;; Tracked objects:
   559 ;;		On entry : 0/0
   560 ;;		On exit  : 0/0
   561 ;;		Unchanged: 0/0
   562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   563 ;;      Params:         4       0       0       0       0       0       0       0       0
   564 ;;      Locals:         2       0       0       0       0       0       0       0       0
   565 ;;      Temps:          0       0       0       0       0       0       0       0       0
   566 ;;      Totals:         6       0       0       0       0       0       0       0       0
   567 ;;Total ram usage:        6 bytes
   568 ;; Hardware stack levels used:    1
   569 ;; This function calls:
   570 ;;		Nothing
   571 ;; This function is called by:
   572 ;;		_digitos
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           	psect	text2
   577  000CD4                     __ptext2:
   578                           	opt callstack 0
   579  000CD4                     ___wmul:
   580                           	opt callstack 29
   581  000CD4  5001               	movf	___wmul@multiplier^0,w,c
   582  000CD6  0203               	mulwf	___wmul@multiplicand^0,c
   583  000CD8  CFF3 F005          	movff	prodl,___wmul@product
   584  000CDC  CFF4 F006          	movff	prodh,___wmul@product+1
   585  000CE0  5001               	movf	___wmul@multiplier^0,w,c
   586  000CE2  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   587  000CE4  50F3               	movf	243,w,c
   588  000CE6  2606               	addwf	(___wmul@product+1)^0,f,c
   589  000CE8  5002               	movf	(___wmul@multiplier+1)^0,w,c
   590  000CEA  0203               	mulwf	___wmul@multiplicand^0,c
   591  000CEC  50F3               	movf	243,w,c
   592  000CEE  2606               	addwf	(___wmul@product+1)^0,f,c
   593  000CF0  C005  F001         	movff	___wmul@product,?___wmul
   594  000CF4  C006  F002         	movff	___wmul@product+1,?___wmul+1
   595  000CF8  0012               	return		;funcret
   596  000CFA                     __end_of___wmul:
   597                           	opt callstack 0
   598                           
   599 ;; *************** function ___lwdiv *****************
   600 ;; Defined at:
   601 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwdiv.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  dividend        2    6[COMRAM] unsigned int 
   604 ;;  divisor         2    8[COMRAM] unsigned int 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  quotient        2   10[COMRAM] unsigned int 
   607 ;;  counter         1   12[COMRAM] unsigned char 
   608 ;; Return value:  Size  Location     Type
   609 ;;                  2    6[COMRAM] unsigned int 
   610 ;; Registers used:
   611 ;;		wreg, status,2, status,0
   612 ;; Tracked objects:
   613 ;;		On entry : 0/0
   614 ;;		On exit  : 0/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   617 ;;      Params:         4       0       0       0       0       0       0       0       0
   618 ;;      Locals:         3       0       0       0       0       0       0       0       0
   619 ;;      Temps:          0       0       0       0       0       0       0       0       0
   620 ;;      Totals:         7       0       0       0       0       0       0       0       0
   621 ;;Total ram usage:        7 bytes
   622 ;; Hardware stack levels used:    1
   623 ;; This function calls:
   624 ;;		Nothing
   625 ;; This function is called by:
   626 ;;		_digitos
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630                           	psect	text3
   631  000A7E                     __ptext3:
   632                           	opt callstack 0
   633  000A7E                     ___lwdiv:
   634                           	opt callstack 29
   635  000A7E  0E00               	movlw	0
   636  000A80  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
   637  000A82  0E00               	movlw	0
   638  000A84  6E0B               	movwf	___lwdiv@quotient^0,c
   639  000A86  5009               	movf	___lwdiv@divisor^0,w,c
   640  000A88  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
   641  000A8A  B4D8               	btfsc	status,2,c
   642  000A8C  EF4A  F005         	goto	u281
   643  000A90  EF4C  F005         	goto	u280
   644  000A94                     u281:
   645  000A94  EF74  F005         	goto	l622
   646  000A98                     u280:
   647  000A98  0E01               	movlw	1
   648  000A9A  6E0D               	movwf	___lwdiv@counter^0,c
   649  000A9C  EF54  F005         	goto	l1154
   650  000AA0                     l1152:
   651  000AA0  90D8               	bcf	status,0,c
   652  000AA2  3609               	rlcf	___lwdiv@divisor^0,f,c
   653  000AA4  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
   654  000AA6  2A0D               	incf	___lwdiv@counter^0,f,c
   655  000AA8                     l1154:
   656  000AA8  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
   657  000AAA  EF59  F005         	goto	u291
   658  000AAE  EF5B  F005         	goto	u290
   659  000AB2                     u291:
   660  000AB2  EF50  F005         	goto	l1152
   661  000AB6                     u290:
   662  000AB6                     l1156:
   663  000AB6  90D8               	bcf	status,0,c
   664  000AB8  360B               	rlcf	___lwdiv@quotient^0,f,c
   665  000ABA  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
   666  000ABC  5009               	movf	___lwdiv@divisor^0,w,c
   667  000ABE  5C07               	subwf	___lwdiv@dividend^0,w,c
   668  000AC0  500A               	movf	(___lwdiv@divisor+1)^0,w,c
   669  000AC2  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
   670  000AC4  A0D8               	btfss	status,0,c
   671  000AC6  EF67  F005         	goto	u301
   672  000ACA  EF69  F005         	goto	u300
   673  000ACE                     u301:
   674  000ACE  EF6E  F005         	goto	l1164
   675  000AD2                     u300:
   676  000AD2  5009               	movf	___lwdiv@divisor^0,w,c
   677  000AD4  5E07               	subwf	___lwdiv@dividend^0,f,c
   678  000AD6  500A               	movf	(___lwdiv@divisor+1)^0,w,c
   679  000AD8  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
   680  000ADA  800B               	bsf	___lwdiv@quotient^0,0,c
   681  000ADC                     l1164:
   682  000ADC  90D8               	bcf	status,0,c
   683  000ADE  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
   684  000AE0  3209               	rrcf	___lwdiv@divisor^0,f,c
   685  000AE2  2E0D               	decfsz	___lwdiv@counter^0,f,c
   686  000AE4  EF5B  F005         	goto	l1156
   687  000AE8                     l622:
   688  000AE8  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
   689  000AEC  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
   690  000AF0  0012               	return		;funcret
   691  000AF2                     __end_of___lwdiv:
   692                           	opt callstack 0
   693                           
   694 ;; *************** function ___awdiv *****************
   695 ;; Defined at:
   696 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;  dividend        2    0[COMRAM] int 
   699 ;;  divisor         2    2[COMRAM] int 
   700 ;; Auto vars:     Size  Location     Type
   701 ;;  quotient        2    6[COMRAM] int 
   702 ;;  sign            1    5[COMRAM] unsigned char 
   703 ;;  counter         1    4[COMRAM] unsigned char 
   704 ;; Return value:  Size  Location     Type
   705 ;;                  2    0[COMRAM] int 
   706 ;; Registers used:
   707 ;;		wreg, status,2, status,0
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   713 ;;      Params:         4       0       0       0       0       0       0       0       0
   714 ;;      Locals:         4       0       0       0       0       0       0       0       0
   715 ;;      Temps:          0       0       0       0       0       0       0       0       0
   716 ;;      Totals:         8       0       0       0       0       0       0       0       0
   717 ;;Total ram usage:        8 bytes
   718 ;; Hardware stack levels used:    1
   719 ;; This function calls:
   720 ;;		Nothing
   721 ;; This function is called by:
   722 ;;		_digitos
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           	psect	text4
   727  00091C                     __ptext4:
   728                           	opt callstack 0
   729  00091C                     ___awdiv:
   730                           	opt callstack 29
   731  00091C  0E00               	movlw	0
   732  00091E  6E06               	movwf	___awdiv@sign^0,c
   733  000920  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   734  000922  EF97  F004         	goto	u220
   735  000926  EF95  F004         	goto	u221
   736  00092A                     u221:
   737  00092A  EF9D  F004         	goto	l1110
   738  00092E                     u220:
   739  00092E  6C03               	negf	___awdiv@divisor^0,c
   740  000930  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   741  000932  B0D8               	btfsc	status,0,c
   742  000934  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   743  000936  0E01               	movlw	1
   744  000938  6E06               	movwf	___awdiv@sign^0,c
   745  00093A                     l1110:
   746  00093A  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   747  00093C  EFA4  F004         	goto	u230
   748  000940  EFA2  F004         	goto	u231
   749  000944                     u231:
   750  000944  EFAA  F004         	goto	l1116
   751  000948                     u230:
   752  000948  6C01               	negf	___awdiv@dividend^0,c
   753  00094A  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   754  00094C  B0D8               	btfsc	status,0,c
   755  00094E  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   756  000950  0E01               	movlw	1
   757  000952  1A06               	xorwf	___awdiv@sign^0,f,c
   758  000954                     l1116:
   759  000954  0E00               	movlw	0
   760  000956  6E08               	movwf	(___awdiv@quotient+1)^0,c
   761  000958  0E00               	movlw	0
   762  00095A  6E07               	movwf	___awdiv@quotient^0,c
   763  00095C  5003               	movf	___awdiv@divisor^0,w,c
   764  00095E  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   765  000960  B4D8               	btfsc	status,2,c
   766  000962  EFB5  F004         	goto	u241
   767  000966  EFB7  F004         	goto	u240
   768  00096A                     u241:
   769  00096A  EFDF  F004         	goto	l1138
   770  00096E                     u240:
   771  00096E  0E01               	movlw	1
   772  000970  6E05               	movwf	___awdiv@counter^0,c
   773  000972  EFBF  F004         	goto	l1124
   774  000976                     l1122:
   775  000976  90D8               	bcf	status,0,c
   776  000978  3603               	rlcf	___awdiv@divisor^0,f,c
   777  00097A  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   778  00097C  2A05               	incf	___awdiv@counter^0,f,c
   779  00097E                     l1124:
   780  00097E  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   781  000980  EFC4  F004         	goto	u251
   782  000984  EFC6  F004         	goto	u250
   783  000988                     u251:
   784  000988  EFBB  F004         	goto	l1122
   785  00098C                     u250:
   786  00098C                     l1126:
   787  00098C  90D8               	bcf	status,0,c
   788  00098E  3607               	rlcf	___awdiv@quotient^0,f,c
   789  000990  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   790  000992  5003               	movf	___awdiv@divisor^0,w,c
   791  000994  5C01               	subwf	___awdiv@dividend^0,w,c
   792  000996  5004               	movf	(___awdiv@divisor+1)^0,w,c
   793  000998  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   794  00099A  A0D8               	btfss	status,0,c
   795  00099C  EFD2  F004         	goto	u261
   796  0009A0  EFD4  F004         	goto	u260
   797  0009A4                     u261:
   798  0009A4  EFD9  F004         	goto	l1134
   799  0009A8                     u260:
   800  0009A8  5003               	movf	___awdiv@divisor^0,w,c
   801  0009AA  5E01               	subwf	___awdiv@dividend^0,f,c
   802  0009AC  5004               	movf	(___awdiv@divisor+1)^0,w,c
   803  0009AE  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   804  0009B0  8007               	bsf	___awdiv@quotient^0,0,c
   805  0009B2                     l1134:
   806  0009B2  90D8               	bcf	status,0,c
   807  0009B4  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   808  0009B6  3203               	rrcf	___awdiv@divisor^0,f,c
   809  0009B8  2E05               	decfsz	___awdiv@counter^0,f,c
   810  0009BA  EFC6  F004         	goto	l1126
   811  0009BE                     l1138:
   812  0009BE  5006               	movf	___awdiv@sign^0,w,c
   813  0009C0  B4D8               	btfsc	status,2,c
   814  0009C2  EFE5  F004         	goto	u271
   815  0009C6  EFE7  F004         	goto	u270
   816  0009CA                     u271:
   817  0009CA  EFEB  F004         	goto	l1142
   818  0009CE                     u270:
   819  0009CE  6C07               	negf	___awdiv@quotient^0,c
   820  0009D0  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   821  0009D2  B0D8               	btfsc	status,0,c
   822  0009D4  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   823  0009D6                     l1142:
   824  0009D6  C007  F001         	movff	___awdiv@quotient,?___awdiv
   825  0009DA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   826  0009DE  0012               	return		;funcret
   827  0009E0                     __end_of___awdiv:
   828                           	opt callstack 0
   829                           
   830 ;; *************** function _POS_CURSOR *****************
   831 ;; Defined at:
   832 ;;		line 6 in file "LCD.c"
   833 ;; Parameters:    Size  Location     Type
   834 ;;  fila            1    wreg     unsigned char 
   835 ;;  columna         1    3[COMRAM] unsigned char 
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  fila            1    4[COMRAM] unsigned char 
   838 ;; Return value:  Size  Location     Type
   839 ;;                  1    wreg      void 
   840 ;; Registers used:
   841 ;;		wreg, status,2, status,0, cstack
   842 ;; Tracked objects:
   843 ;;		On entry : 0/0
   844 ;;		On exit  : 0/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   847 ;;      Params:         1       0       0       0       0       0       0       0       0
   848 ;;      Locals:         1       0       0       0       0       0       0       0       0
   849 ;;      Temps:          0       0       0       0       0       0       0       0       0
   850 ;;      Totals:         2       0       0       0       0       0       0       0       0
   851 ;;Total ram usage:        2 bytes
   852 ;; Hardware stack levels used:    1
   853 ;; Hardware stack levels required when called:    2
   854 ;; This function calls:
   855 ;;		_ENVIA_LCD_CMD
   856 ;; This function is called by:
   857 ;;		_main
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           	psect	text5
   862  000C02                     __ptext5:
   863                           	opt callstack 0
   864  000C02                     _POS_CURSOR:
   865                           	opt callstack 28
   866                           
   867                           ;incstack = 0
   868                           ;POS_CURSOR@fila stored from wreg
   869  000C02  6E05               	movwf	POS_CURSOR@fila^0,c
   870  000C04                     
   871                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   872  000C04  0405               	decf	POS_CURSOR@fila^0,w,c
   873  000C06  A4D8               	btfss	status,2,c
   874  000C08  EF08  F006         	goto	u321
   875  000C0C  EF0A  F006         	goto	u320
   876  000C10                     u321:
   877  000C10  EF10  F006         	goto	l1188
   878  000C14                     u320:
   879  000C14                     
   880                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   881  000C14  5004               	movf	POS_CURSOR@columna^0,w,c
   882  000C16  0F80               	addlw	128
   883  000C18  EC38  F006         	call	_ENVIA_LCD_CMD
   884                           
   885                           ;LCD.c: 11:  }
   886  000C1C  EF1D  F006         	goto	l78
   887  000C20                     l1188:
   888  000C20  0E02               	movlw	2
   889  000C22  1805               	xorwf	POS_CURSOR@fila^0,w,c
   890  000C24  A4D8               	btfss	status,2,c
   891  000C26  EF17  F006         	goto	u331
   892  000C2A  EF19  F006         	goto	u330
   893  000C2E                     u331:
   894  000C2E  EF1D  F006         	goto	l78
   895  000C32                     u330:
   896  000C32                     
   897                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   898  000C32  5004               	movf	POS_CURSOR@columna^0,w,c
   899  000C34  0FC0               	addlw	192
   900  000C36  EC38  F006         	call	_ENVIA_LCD_CMD
   901  000C3A                     l78:
   902  000C3A  0012               	return		;funcret
   903  000C3C                     __end_of_POS_CURSOR:
   904                           	opt callstack 0
   905                           
   906 ;; *************** function _LCD_CONFIG *****************
   907 ;; Defined at:
   908 ;;		line 72 in file "LCD.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;		None
   911 ;; Auto vars:     Size  Location     Type
   912 ;;		None
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg, status,2, status,0, cstack
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   922 ;;      Params:         0       0       0       0       0       0       0       0       0
   923 ;;      Locals:         0       0       0       0       0       0       0       0       0
   924 ;;      Temps:          1       0       0       0       0       0       0       0       0
   925 ;;      Totals:         1       0       0       0       0       0       0       0       0
   926 ;;Total ram usage:        1 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; Hardware stack levels required when called:    2
   929 ;; This function calls:
   930 ;;		_ENVIA_LCD_CMD
   931 ;;		_ENVIA_NIBBLE
   932 ;; This function is called by:
   933 ;;		_main
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           	psect	text6
   938  000B64                     __ptext6:
   939                           	opt callstack 0
   940  000B64                     _LCD_CONFIG:
   941                           	opt callstack 28
   942  000B64                     
   943                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   944  000B64  908C               	bcf	140,0,c	;volatile
   945                           
   946                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   947  000B66  928C               	bcf	140,1,c	;volatile
   948  000B68                     
   949                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   950  000B68  0E30               	movlw	48
   951  000B6A  EC7D  F006         	call	_ENVIA_NIBBLE
   952  000B6E                     
   953                           ;LCD.c: 77:         _delay(24000);
   954  000B6E  0E20               	movlw	32
   955  000B70  6E04               	movwf	??_LCD_CONFIG^0,c
   956  000B72  0E2A               	movlw	42
   957  000B74                     u377:
   958  000B74  2EE8               	decfsz	wreg,f,c
   959  000B76  D7FE               	bra	u377
   960  000B78  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   961  000B7A  D7FC               	bra	u377
   962  000B7C                     
   963                           ;LCD.c: 78:         _delay(24000);
   964  000B7C  0E20               	movlw	32
   965  000B7E  6E04               	movwf	??_LCD_CONFIG^0,c
   966  000B80  0E2A               	movlw	42
   967  000B82                     u387:
   968  000B82  2EE8               	decfsz	wreg,f,c
   969  000B84  D7FE               	bra	u387
   970  000B86  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   971  000B88  D7FC               	bra	u387
   972                           
   973                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   974  000B8A  0E30               	movlw	48
   975  000B8C  EC7D  F006         	call	_ENVIA_NIBBLE
   976  000B90                     
   977                           ;LCD.c: 83:  _delay(1200);
   978  000B90  0EF0               	movlw	240
   979  000B92                     u397:
   980  000B92  D000               	nop2	
   981  000B94  2EE8               	decfsz	wreg,f,c
   982  000B96  D7FD               	bra	u397
   983  000B98                     
   984                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   985  000B98  0E30               	movlw	48
   986  000B9A  EC7D  F006         	call	_ENVIA_NIBBLE
   987  000B9E                     
   988                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   989  000B9E  0E20               	movlw	32
   990  000BA0  EC7D  F006         	call	_ENVIA_NIBBLE
   991  000BA4                     
   992                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   993  000BA4  0E01               	movlw	1
   994  000BA6  EC38  F006         	call	_ENVIA_LCD_CMD
   995  000BAA                     
   996                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   997  000BAA  0E28               	movlw	40
   998  000BAC  EC38  F006         	call	_ENVIA_LCD_CMD
   999  000BB0                     
  1000                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
  1001  000BB0  0E0F               	movlw	15
  1002  000BB2  EC38  F006         	call	_ENVIA_LCD_CMD
  1003  000BB6                     
  1004                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
  1005  000BB6  0E06               	movlw	6
  1006  000BB8  EC38  F006         	call	_ENVIA_LCD_CMD
  1007  000BBC                     
  1008                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
  1009  000BBC  0E01               	movlw	1
  1010  000BBE  EC38  F006         	call	_ENVIA_LCD_CMD
  1011  000BC2  0012               	return		;funcret
  1012  000BC4                     __end_of_LCD_CONFIG:
  1013                           	opt callstack 0
  1014                           
  1015 ;; *************** function _ESCRIBE_MENSAJE *****************
  1016 ;; Defined at:
  1017 ;;		line 41 in file "LCD.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1020 ;;		 -> STR_1(15), 
  1021 ;;  tam             1    5[COMRAM] unsigned char 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;  i               1    8[COMRAM] unsigned char 
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  1    wreg      void 
  1026 ;; Registers used:
  1027 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1033 ;;      Params:         3       0       0       0       0       0       0       0       0
  1034 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1035 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1036 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1037 ;;Total ram usage:        6 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; Hardware stack levels required when called:    2
  1040 ;; This function calls:
  1041 ;;		_ENVIA_CHAR
  1042 ;; This function is called by:
  1043 ;;		_main
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text7
  1048  000BC4                     __ptext7:
  1049                           	opt callstack 0
  1050  000BC4                     _ESCRIBE_MENSAJE:
  1051                           	opt callstack 28
  1052  000BC4                     
  1053                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1054  000BC4  0E00               	movlw	0
  1055  000BC6  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1056                           
  1057                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1058  000BC8  0E00               	movlw	0
  1059  000BCA  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1060  000BCC  EFF7  F005         	goto	l1182
  1061  000BD0                     l1178:
  1062                           
  1063                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1064  000BD0  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1065  000BD2  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1066  000BD4  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1067  000BD6  0E00               	movlw	0
  1068  000BD8  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1069  000BDA  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1070  000BDC  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1071  000BE0  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1072  000BE4                     	if	0	;tblptru may be non-zero
  1073  000BE4                     	endif
  1074  000BE4                     	if	0	;tblptru may be non-zero
  1075  000BE4                     	endif
  1076  000BE4  0008               	tblrd		*
  1077  000BE6  50F5               	movf	tablat,w,c
  1078  000BE8  EC1E  F006         	call	_ENVIA_CHAR
  1079  000BEC                     
  1080                           ;LCD.c: 47:  }
  1081  000BEC  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1082  000BEE                     l1182:
  1083  000BEE  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1084  000BF0  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1085  000BF2  A0D8               	btfss	status,0,c
  1086  000BF4  EFFE  F005         	goto	u311
  1087  000BF8  EF00  F006         	goto	u310
  1088  000BFC                     u311:
  1089  000BFC  EFE8  F005         	goto	l1178
  1090  000C00                     u310:
  1091  000C00  0012               	return		;funcret
  1092  000C02                     __end_of_ESCRIBE_MENSAJE:
  1093                           	opt callstack 0
  1094                           
  1095 ;; *************** function _ENVIA_CHAR *****************
  1096 ;; Defined at:
  1097 ;;		line 50 in file "LCD.c"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;  dato            1    wreg     unsigned char 
  1100 ;; Auto vars:     Size  Location     Type
  1101 ;;  dato            1    1[COMRAM] unsigned char 
  1102 ;;  aux             1    2[COMRAM] unsigned char 
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2, status,0, cstack
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1112 ;;      Params:         0       0       0       0       0       0       0       0       0
  1113 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1115 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1116 ;;Total ram usage:        2 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    1
  1119 ;; This function calls:
  1120 ;;		_ENVIA_NIBBLE
  1121 ;;		_LEER_LCD
  1122 ;; This function is called by:
  1123 ;;		_main
  1124 ;;		_ESCRIBE_MENSAJE
  1125 ;;		_GENERACARACTER
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text8
  1130  000C3C                     __ptext8:
  1131                           	opt callstack 0
  1132  000C3C                     _ENVIA_CHAR:
  1133                           	opt callstack 28
  1134                           
  1135                           ;incstack = 0
  1136                           ;ENVIA_CHAR@dato stored from wreg
  1137  000C3C  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1138  000C3E                     
  1139                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1140  000C3E  808C               	bsf	140,0,c	;volatile
  1141  000C40                     
  1142                           ;LCD.c: 54:  LEER_LCD();
  1143  000C40  EC79  F005         	call	_LEER_LCD	;wreg free
  1144  000C44                     
  1145                           ;LCD.c: 55:  TRISD = 0x00;
  1146  000C44  0E00               	movlw	0
  1147  000C46  6E95               	movwf	149,c	;volatile
  1148  000C48                     
  1149                           ;LCD.c: 56:         _delay(1200);
  1150  000C48  0EF0               	movlw	240
  1151  000C4A                     u407:
  1152  000C4A  D000               	nop2	
  1153  000C4C  2EE8               	decfsz	wreg,f,c
  1154  000C4E  D7FD               	bra	u407
  1155  000C50                     
  1156                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1157  000C50  928C               	bcf	140,1,c	;volatile
  1158  000C52                     
  1159                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1160  000C52  948C               	bcf	140,2,c	;volatile
  1161  000C54                     
  1162                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1163  000C54  808C               	bsf	140,0,c	;volatile
  1164  000C56                     
  1165                           ;LCD.c: 61:  aux = dato & 0xF0;
  1166  000C56  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1167  000C58  0BF0               	andlw	240
  1168  000C5A  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1169  000C5C                     
  1170                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1171  000C5C  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1172  000C5E  EC7D  F006         	call	_ENVIA_NIBBLE
  1173  000C62                     
  1174                           ;LCD.c: 63:  aux = dato << 4;
  1175  000C62  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1176  000C64  0BF0               	andlw	240
  1177  000C66  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1178  000C68                     
  1179                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1180  000C68  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1181  000C6A  EC7D  F006         	call	_ENVIA_NIBBLE
  1182  000C6E  0012               	return		;funcret
  1183  000C70                     __end_of_ENVIA_CHAR:
  1184                           	opt callstack 0
  1185                           
  1186 ;; *************** function _CURSOR_ONOFF *****************
  1187 ;; Defined at:
  1188 ;;		line 35 in file "LCD.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;  estado          1    wreg     unsigned char 
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;  estado          1    3[COMRAM] unsigned char 
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		wreg, status,2, status,0, cstack
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1202 ;;      Params:         0       0       0       0       0       0       0       0       0
  1203 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1204 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1205 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1206 ;;Total ram usage:        1 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; Hardware stack levels required when called:    2
  1209 ;; This function calls:
  1210 ;;		_ENVIA_LCD_CMD
  1211 ;; This function is called by:
  1212 ;;		_main
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text9
  1217  000CA4                     __ptext9:
  1218                           	opt callstack 0
  1219  000CA4                     _CURSOR_ONOFF:
  1220                           	opt callstack 28
  1221                           
  1222                           ;incstack = 0
  1223                           ;CURSOR_ONOFF@estado stored from wreg
  1224  000CA4  6E04               	movwf	CURSOR_ONOFF@estado^0,c
  1225  000CA6                     
  1226                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1227  000CA6  5004               	movf	CURSOR_ONOFF@estado^0,w,c
  1228  000CA8  A4D8               	btfss	status,2,c
  1229  000CAA  EF59  F006         	goto	u111
  1230  000CAE  EF5B  F006         	goto	u110
  1231  000CB2                     u111:
  1232  000CB2  EF5E  F006         	goto	l1006
  1233  000CB6                     u110:
  1234  000CB6  0E0E               	movlw	14
  1235  000CB8  EC38  F006         	call	_ENVIA_LCD_CMD
  1236  000CBC                     l1006:
  1237                           
  1238                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1239  000CBC  0404               	decf	CURSOR_ONOFF@estado^0,w,c
  1240  000CBE  A4D8               	btfss	status,2,c
  1241  000CC0  EF64  F006         	goto	u121
  1242  000CC4  EF66  F006         	goto	u120
  1243  000CC8                     u121:
  1244  000CC8  EF69  F006         	goto	l96
  1245  000CCC                     u120:
  1246  000CCC  0E0C               	movlw	12
  1247  000CCE  EC38  F006         	call	_ENVIA_LCD_CMD
  1248  000CD2                     l96:
  1249  000CD2  0012               	return		;funcret
  1250  000CD4                     __end_of_CURSOR_ONOFF:
  1251                           	opt callstack 0
  1252                           
  1253 ;; *************** function _CURSOR_HOME *****************
  1254 ;; Defined at:
  1255 ;;		line 30 in file "LCD.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;		None
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;		None
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  1    wreg      void 
  1262 ;; Registers used:
  1263 ;;		wreg, status,2, status,0, cstack
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1269 ;;      Params:         0       0       0       0       0       0       0       0       0
  1270 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1271 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1272 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1273 ;;Total ram usage:        0 bytes
  1274 ;; Hardware stack levels used:    1
  1275 ;; Hardware stack levels required when called:    2
  1276 ;; This function calls:
  1277 ;;		_ENVIA_LCD_CMD
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text10
  1284  000D30                     __ptext10:
  1285                           	opt callstack 0
  1286  000D30                     _CURSOR_HOME:
  1287                           	opt callstack 28
  1288  000D30                     
  1289                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1290  000D30  0E02               	movlw	2
  1291  000D32  EC38  F006         	call	_ENVIA_LCD_CMD
  1292  000D36  0012               	return		;funcret
  1293  000D38                     __end_of_CURSOR_HOME:
  1294                           	opt callstack 0
  1295                           
  1296 ;; *************** function _BORRAR_LCD *****************
  1297 ;; Defined at:
  1298 ;;		line 67 in file "LCD.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;		None
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;		None
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, status,0, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1312 ;;      Params:         0       0       0       0       0       0       0       0       0
  1313 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1314 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1315 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1316 ;;Total ram usage:        0 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    2
  1319 ;; This function calls:
  1320 ;;		_ENVIA_LCD_CMD
  1321 ;; This function is called by:
  1322 ;;		_main
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           	psect	text11
  1327  000D38                     __ptext11:
  1328                           	opt callstack 0
  1329  000D38                     _BORRAR_LCD:
  1330                           	opt callstack 28
  1331  000D38                     
  1332                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1333  000D38  0E01               	movlw	1
  1334  000D3A  EC38  F006         	call	_ENVIA_LCD_CMD
  1335  000D3E  0012               	return		;funcret
  1336  000D40                     __end_of_BORRAR_LCD:
  1337                           	opt callstack 0
  1338                           
  1339 ;; *************** function _ENVIA_LCD_CMD *****************
  1340 ;; Defined at:
  1341 ;;		line 104 in file "LCD.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;  dato            1    wreg     unsigned char 
  1344 ;; Auto vars:     Size  Location     Type
  1345 ;;  dato            1    1[COMRAM] unsigned char 
  1346 ;;  aux             1    2[COMRAM] unsigned char 
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2, status,0, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1356 ;;      Params:         0       0       0       0       0       0       0       0       0
  1357 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1359 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1360 ;;Total ram usage:        2 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:    1
  1363 ;; This function calls:
  1364 ;;		_ENVIA_NIBBLE
  1365 ;;		_LEER_LCD
  1366 ;; This function is called by:
  1367 ;;		_POS_CURSOR
  1368 ;;		_CURSOR_HOME
  1369 ;;		_CURSOR_ONOFF
  1370 ;;		_BORRAR_LCD
  1371 ;;		_LCD_CONFIG
  1372 ;;		_BLINK_CURSOR
  1373 ;;		_DISPLAY_ONOFF
  1374 ;;		_GENERACARACTER
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text12
  1379  000C70                     __ptext12:
  1380                           	opt callstack 0
  1381  000C70                     _ENVIA_LCD_CMD:
  1382                           	opt callstack 28
  1383                           
  1384                           ;incstack = 0
  1385                           ;ENVIA_LCD_CMD@dato stored from wreg
  1386  000C70  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1387  000C72                     
  1388                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1389  000C72  908C               	bcf	140,0,c	;volatile
  1390  000C74                     
  1391                           ;LCD.c: 108:  LEER_LCD();
  1392  000C74  EC79  F005         	call	_LEER_LCD	;wreg free
  1393  000C78                     
  1394                           ;LCD.c: 109:  TRISD = 0b00000000;
  1395  000C78  0E00               	movlw	0
  1396  000C7A  6E95               	movwf	149,c	;volatile
  1397  000C7C                     
  1398                           ;LCD.c: 111:         _delay(1200);
  1399  000C7C  0EF0               	movlw	240
  1400  000C7E                     u417:
  1401  000C7E  D000               	nop2	
  1402  000C80  2EE8               	decfsz	wreg,f,c
  1403  000C82  D7FD               	bra	u417
  1404  000C84                     
  1405                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1406  000C84  928C               	bcf	140,1,c	;volatile
  1407  000C86                     
  1408                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1409  000C86  948C               	bcf	140,2,c	;volatile
  1410  000C88                     
  1411                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1412  000C88  908C               	bcf	140,0,c	;volatile
  1413  000C8A                     
  1414                           ;LCD.c: 115:  aux = dato & 0xF0;
  1415  000C8A  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1416  000C8C  0BF0               	andlw	240
  1417  000C8E  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1418  000C90                     
  1419                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1420  000C90  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1421  000C92  EC7D  F006         	call	_ENVIA_NIBBLE
  1422  000C96                     
  1423                           ;LCD.c: 117:  aux = dato<<4;
  1424  000C96  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1425  000C98  0BF0               	andlw	240
  1426  000C9A  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1427  000C9C                     
  1428                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1429  000C9C  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1430  000C9E  EC7D  F006         	call	_ENVIA_NIBBLE
  1431  000CA2  0012               	return		;funcret
  1432  000CA4                     __end_of_ENVIA_LCD_CMD:
  1433                           	opt callstack 0
  1434                           
  1435 ;; *************** function _LEER_LCD *****************
  1436 ;; Defined at:
  1437 ;;		line 121 in file "LCD.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;		None
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;  aux             1    0[COMRAM] unsigned char 
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  1    wreg      void 
  1444 ;; Registers used:
  1445 ;;		wreg, status,2, status,0
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1451 ;;      Params:         0       0       0       0       0       0       0       0       0
  1452 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1453 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1454 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1455 ;;Total ram usage:        1 bytes
  1456 ;; Hardware stack levels used:    1
  1457 ;; This function calls:
  1458 ;;		Nothing
  1459 ;; This function is called by:
  1460 ;;		_ENVIA_CHAR
  1461 ;;		_ENVIA_LCD_CMD
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           	psect	text13
  1466  000AF2                     __ptext13:
  1467                           	opt callstack 0
  1468  000AF2                     _LEER_LCD:
  1469                           	opt callstack 28
  1470  000AF2                     
  1471                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1472  000AF2  0EF8               	movlw	248
  1473  000AF4  6E95               	movwf	149,c	;volatile
  1474  000AF6                     
  1475                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1476  000AF6  908C               	bcf	140,0,c	;volatile
  1477  000AF8                     
  1478                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1479  000AF8  828C               	bsf	140,1,c	;volatile
  1480  000AFA                     
  1481                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1482  000AFA  848C               	bsf	140,2,c	;volatile
  1483  000AFC                     
  1484                           ;LCD.c: 128:         _delay(1200);
  1485  000AFC  0EF0               	movlw	240
  1486  000AFE                     u427:
  1487  000AFE  D000               	nop2	
  1488  000B00  2EE8               	decfsz	wreg,f,c
  1489  000B02  D7FD               	bra	u427
  1490  000B04                     
  1491                           ;LCD.c: 130:  aux = PORTD;
  1492  000B04  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1493  000B08                     
  1494                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1495  000B08  948C               	bcf	140,2,c	;volatile
  1496  000B0A                     
  1497                           ;LCD.c: 132:         _delay(1200);
  1498  000B0A  0EF0               	movlw	240
  1499  000B0C                     u437:
  1500  000B0C  D000               	nop2	
  1501  000B0E  2EE8               	decfsz	wreg,f,c
  1502  000B10  D7FD               	bra	u437
  1503  000B12                     
  1504                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1505  000B12  848C               	bsf	140,2,c	;volatile
  1506  000B14                     
  1507                           ;LCD.c: 135:         _delay(1200);
  1508  000B14  0EF0               	movlw	240
  1509  000B16                     u447:
  1510  000B16  D000               	nop2	
  1511  000B18  2EE8               	decfsz	wreg,f,c
  1512  000B1A  D7FD               	bra	u447
  1513  000B1C                     
  1514                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1515  000B1C  948C               	bcf	140,2,c	;volatile
  1516  000B1E                     l826:
  1517                           
  1518                           ;LCD.c: 138:  aux = aux & 0x80;
  1519  000B1E  5001               	movf	LEER_LCD@aux^0,w,c
  1520  000B20  0B80               	andlw	128
  1521  000B22  6E01               	movwf	LEER_LCD@aux^0,c
  1522                           
  1523                           ;LCD.c: 139:  while(aux == 0x80)
  1524  000B24  EFA8  F005         	goto	l840
  1525  000B28                     l121:
  1526                           
  1527                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1528  000B28  848C               	bsf	140,2,c	;volatile
  1529  000B2A                     
  1530                           ;LCD.c: 142:             _delay(1200);
  1531  000B2A  0EF0               	movlw	240
  1532  000B2C                     u457:
  1533  000B2C  D000               	nop2	
  1534  000B2E  2EE8               	decfsz	wreg,f,c
  1535  000B30  D7FD               	bra	u457
  1536  000B32                     
  1537                           ;LCD.c: 143:             aux = PORTD;
  1538  000B32  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1539  000B36                     
  1540                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1541  000B36  948C               	bcf	140,2,c	;volatile
  1542                           
  1543                           ;LCD.c: 145:             _delay(1200);
  1544  000B38  0EF0               	movlw	240
  1545  000B3A                     u467:
  1546  000B3A  D000               	nop2	
  1547  000B3C  2EE8               	decfsz	wreg,f,c
  1548  000B3E  D7FD               	bra	u467
  1549  000B40                     
  1550                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1551  000B40  848C               	bsf	140,2,c	;volatile
  1552                           
  1553                           ;LCD.c: 147:             _delay(1200);
  1554  000B42  0EF0               	movlw	240
  1555  000B44                     u477:
  1556  000B44  D000               	nop2	
  1557  000B46  2EE8               	decfsz	wreg,f,c
  1558  000B48  D7FD               	bra	u477
  1559  000B4A                     
  1560                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1561  000B4A  948C               	bcf	140,2,c	;volatile
  1562  000B4C  EF8F  F005         	goto	l826
  1563  000B50                     l840:
  1564                           
  1565                           ;LCD.c: 139:  while(aux == 0x80)
  1566  000B50  0E80               	movlw	128
  1567  000B52  1801               	xorwf	LEER_LCD@aux^0,w,c
  1568  000B54  B4D8               	btfsc	status,2,c
  1569  000B56  EFAF  F005         	goto	u11
  1570  000B5A  EFB1  F005         	goto	u10
  1571  000B5E                     u11:
  1572  000B5E  EF94  F005         	goto	l121
  1573  000B62                     u10:
  1574  000B62  0012               	return		;funcret
  1575  000B64                     __end_of_LEER_LCD:
  1576                           	opt callstack 0
  1577                           
  1578 ;; *************** function _ENVIA_NIBBLE *****************
  1579 ;; Defined at:
  1580 ;;		line 93 in file "LCD.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;  dato            1    wreg     unsigned char 
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  dato            1    0[COMRAM] unsigned char 
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  1    wreg      void 
  1587 ;; Registers used:
  1588 ;;		wreg, status,2, status,0
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1594 ;;      Params:         0       0       0       0       0       0       0       0       0
  1595 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1596 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1597 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1598 ;;Total ram usage:        1 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_ENVIA_CHAR
  1604 ;;		_LCD_CONFIG
  1605 ;;		_ENVIA_LCD_CMD
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           	psect	text14
  1610  000CFA                     __ptext14:
  1611                           	opt callstack 0
  1612  000CFA                     _ENVIA_NIBBLE:
  1613                           	opt callstack 28
  1614                           
  1615                           ;incstack = 0
  1616                           ;ENVIA_NIBBLE@dato stored from wreg
  1617  000CFA  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1618  000CFC                     
  1619                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1620  000CFC  0E0F               	movlw	15
  1621  000CFE  168C               	andwf	140,f,c	;volatile
  1622                           
  1623                           ;LCD.c: 96:  dato &= 0xF0;
  1624  000D00  0EF0               	movlw	240
  1625  000D02  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1626                           
  1627                           ;LCD.c: 97:  LATD|= dato;
  1628  000D04  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1629  000D06  128C               	iorwf	140,f,c	;volatile
  1630  000D08                     
  1631                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1632  000D08  848C               	bsf	140,2,c	;volatile
  1633  000D0A                     
  1634                           ;LCD.c: 100:         _delay(1200);
  1635  000D0A  0EF0               	movlw	240
  1636  000D0C                     u487:
  1637  000D0C  D000               	nop2	
  1638  000D0E  2EE8               	decfsz	wreg,f,c
  1639  000D10  D7FD               	bra	u487
  1640  000D12                     
  1641                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1642  000D12  948C               	bcf	140,2,c	;volatile
  1643  000D14  0012               	return		;funcret
  1644  000D16                     __end_of_ENVIA_NIBBLE:
  1645                           	opt callstack 0
  1646                           
  1647                           	psect	rparam
  1648  0000                     tosu	equ	0xFFF
  1649                           tosh	equ	0xFFE
  1650                           tosl	equ	0xFFD
  1651                           stkptr	equ	0xFFC
  1652                           pclatu	equ	0xFFB
  1653                           pclath	equ	0xFFA
  1654                           pcl	equ	0xFF9
  1655                           tblptru	equ	0xFF8
  1656                           tblptrh	equ	0xFF7
  1657                           tblptrl	equ	0xFF6
  1658                           tablat	equ	0xFF5
  1659                           prodh	equ	0xFF4
  1660                           prodl	equ	0xFF3
  1661                           indf0	equ	0xFEF
  1662                           postinc0	equ	0xFEE
  1663                           postdec0	equ	0xFED
  1664                           preinc0	equ	0xFEC
  1665                           plusw0	equ	0xFEB
  1666                           fsr0h	equ	0xFEA
  1667                           fsr0l	equ	0xFE9
  1668                           wreg	equ	0xFE8
  1669                           indf1	equ	0xFE7
  1670                           postinc1	equ	0xFE6
  1671                           postdec1	equ	0xFE5
  1672                           preinc1	equ	0xFE4
  1673                           plusw1	equ	0xFE3
  1674                           fsr1h	equ	0xFE2
  1675                           fsr1l	equ	0xFE1
  1676                           bsr	equ	0xFE0
  1677                           indf2	equ	0xFDF
  1678                           postinc2	equ	0xFDE
  1679                           postdec2	equ	0xFDD
  1680                           preinc2	equ	0xFDC
  1681                           plusw2	equ	0xFDB
  1682                           fsr2h	equ	0xFDA
  1683                           fsr2l	equ	0xFD9
  1684                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_digitos
    _digitos->___lwdiv
    ___lwdiv->___wmul
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3445
                                             17 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
                            _digitos
 ---------------------------------------------------------------------------------
 (1) _digitos                                              4     2      2    2153
                                             13 COMRAM     4     2      2
                            ___awdiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1071
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     363
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _digitos
     ___awdiv
     ___lwdiv
       ___wmul (ARG)
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     12      1E       1       31.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E      20        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Jan 28 21:18:02 2020

                      l43 091A                        l49 0A26                        l91 0D36  
                      l78 0C3A                        l96 0CD2                        u10 0B62  
                      u11 0B5E              ___awdiv@sign 0006       ___wmul@multiplicand 0003  
           ENVIA_CHAR@aux 0003                       l102 0C00                       l111 0BC2  
                     l121 0B28                       l105 0C6E                       l114 0D14  
                     l123 0B62                       l131 0CF8                       l108 0D3E  
                     l117 0CA2                       l362 09DE                       l622 0AE8  
                     l810 0AFA                       l820 0B12                       l812 0AFC  
                     l804 0AF2                       l629 0AF0                       l830 0B32  
                     l822 0B14                       l814 0B04                       l806 0AF6  
                     l832 0B36                       l840 0B50                       l824 0B1C  
                     l816 0B08                       l808 0AF8                       l842 0CFC  
                     l834 0B40                       l826 0B1E                       l818 0B0A  
                     l850 0C3E                       l844 0D08                       l836 0B4A  
                     l828 0B2A                       l860 0C52                       l852 0C40  
                     l846 0D0A                       l870 0C68                       l862 0C54  
                     l854 0C44                       l848 0D12                       l880 0C84  
                     l872 0C72                       l864 0C56                       l856 0C48  
                     l890 0C96                       l882 0C86                       l874 0C74  
                     l866 0C5C                       l858 0C50                       l892 0C9C  
                     l884 0C88                       l876 0C78                       l868 0C62  
                     l980 0B7C                       l886 0C8A                       l878 0C7C  
                     l990 0BAA                       l982 0B90                       l974 0B64  
                     l888 0C90                       l992 0BB0                       l984 0B98  
                     l976 0B68                       l994 0BB6                       l986 0B9E  
                     l978 0B6E                       l996 0BBC                       l988 0BA4  
                     l998 0D38                       u110 0CB6                       u111 0CB2  
                     u120 0CCC                       u121 0CC8                       u220 092E  
                     u300 0AD2                       u221 092A                       u301 0ACE  
                     u310 0C00                       u230 0948                       u311 0BFC  
                     u231 0944                       u320 0C14                       u240 096E  
                     u321 0C10                       u241 096A                       u330 0C32  
                     u250 098C                       u331 0C2E                       u251 0988  
                     u260 09A8                       u340 0A34                       u261 09A4  
                     u341 0A30                       u270 09CE                       u407 0C4A  
                     u271 09CA                       u280 0A98                       u417 0C7E  
                     u281 0A94                       u290 0AB6                       u427 0AFE  
                     u291 0AB2                       u437 0B0C                       u357 09EE  
                     u447 0B16                       u367 0A6E                       u457 0B2C  
                     u377 0B74                       u467 0B3A                       u387 0B82  
                     u477 0B44                       u397 0B92                       u487 0D0C  
            __CFG_BOR$OFF 000000               LEER_LCD@aux 0001                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001              __CFG_LVP$OFF 000000  
          ENVIA_CHAR@dato 0002              __CFG_WDT$OFF 000000                      l1000 0D30  
                    l1002 0CA6                      l1004 0CB6                      l1006 0CBC  
                    l1110 093A                      l1102 091C                      l1008 0CCC  
                    l1120 096E                      l1112 0948                      l1104 0920  
                    l1200 09FA                      l1130 09A8                      l1122 0976  
                    l1114 0950                      l1106 092E                      l1210 0A10  
                    l1202 09FE                      l1140 09CE                      l1132 09B0  
                    l1124 097E                      l1116 0954                      l1108 0936  
                    l1220 0A48                      l1212 0A14                      l1204 0A04  
                    l1142 09D6                      l1134 09B2                      l1126 098C  
                    l1118 095C                      l1150 0A98                      l1222 0A50  
                    l1214 0A24                      l1206 0A08                      l1136 09B8  
                    l1128 0992                      l1160 0AD2                      l1152 0AA0  
                    l1224 0A58                      l1216 0A34                      l1208 0A0C  
                    l1138 09BE                      l1162 0ADA                      l1154 0AA8  
                    l1146 0A7E                      l1170 082E                      l1226 0A60  
                    l1218 0A3E                      l1180 0BEC                      l1164 0ADC  
                    l1156 0AB6                      l1148 0A86                      l1172 0862  
                    l1228 0A68                      l1182 0BEE                      l1190 0C32  
                    l1166 0AE2                      l1158 0ABC                      l1174 08BA  
                    l1176 0BC4                      l1184 0C04                      l1096 0CD4  
                    l1168 0812                      l1192 09E0                      l1178 0BD0  
                    l1186 0C14                      l1098 0CF0                      l1194 09E4  
                    l1188 0C20                      l1196 09E8                      l1198 09F6  
                    STR_1 0801                      _LATD 000F8C              __CFG_PWRT$ON 000000  
                    _main 09E0                      prodh 000FF4                      prodl 000FF3  
                    start 0000             ?_CURSOR_ONOFF 0001              ___param_bank 000000  
         ??_ENVIA_LCD_CMD 0002          __end_of_LEER_LCD 0B64       __size_of_BORRAR_LCD 0008  
                   ?_main 0001           __end_of___awdiv 09E0           ___awdiv@divisor 0003  
         __end_of___lwdiv 0AF2           ___awdiv@counter 0005                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISD 000F95       __size_of_ENVIA_CHAR 0034  
         __end_of_digitos 091C               ?_POS_CURSOR 0004                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0004           __initialization 0D16  
            __end_of_main 0A7E           _ESCRIBE_MENSAJE 0BC4                    ??_main 0012  
           __activetblptr 000001                    _ADCON0 000FC2                    _ADCON1 000FC1  
                  _ADCON2 000FC0                    _ADRESH 000FC4          ___awdiv@dividend 0001  
                  ___wmul 0CD4                 ??___awdiv 0005                    _decena 0017  
    __end_of_ENVIA_NIBBLE 0D16                 ??___lwdiv 000B                    _cuenta 001D  
     __size_of_POS_CURSOR 003A                    _millar 001B                    clear_0 0D1C  
        ___awdiv@quotient 0007                 ??_digitos 0010                    _unidad 0015  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0D22  
         __CFG_PBADEN$OFF 000000           __CFG_FOSC$XT_XT 000000              ??_LCD_CONFIG 0004  
           ___rparam_used 000001              ??_ENVIA_CHAR 0002   __end_of_ESCRIBE_MENSAJE 0C02  
          __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0D40          ENVIA_LCD_CMD@aux 0003  
    __end_of_CURSOR_ONOFF 0CD4        __end_of_LCD_CONFIG 0BC4        __end_of_ENVIA_CHAR 0C70  
              ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001                   ?___wmul 0001  
            ??_POS_CURSOR 0005                _conversion 0013     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0004  
                 ___awdiv 091C           __size_of___wmul 0026                   ___lwdiv 0A7E  
            __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0CA4                   __pcinit 0D16  
      __end_of_POS_CURSOR 0C3C                   __ramtop 0800                   _centena 0019  
                 _digitos 0812                   __ptext0 09E0                   __ptext1 0812  
                 __ptext2 0CD4                   __ptext3 0A7E                   __ptext4 091C  
                 __ptext5 0C02                   __ptext6 0B64                   __ptext7 0BC4  
                 __ptext8 0C3C                   __ptext9 0CA4              _ENVIA_NIBBLE 0CFA  
    end_of_initialization 0D22                   postinc0 000FEE     __size_of_CURSOR_ONOFF 0030  
       __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0CA4        CURSOR_ONOFF@estado 0004  
          __end_of___wmul 0CFA             ??_CURSOR_HOME 0004       start_initialization 0D16  
       ENVIA_LCD_CMD@dato 0002                  ??___wmul 0005               __pbssCOMRAM 0013  
     __end_of_CURSOR_HOME 0D38          ___lwdiv@dividend 0007                  ?___awdiv 0001  
                ?___lwdiv 0007                  ?_digitos 000E               __smallconst 0800  
        ___lwdiv@quotient 000B                  _LEER_LCD 0AF2            ___wmul@product 0005  
                _LATDbits 000F8C          ESCRIBE_MENSAJE@i 0009            POS_CURSOR@fila 0005  
__size_of_ESCRIBE_MENSAJE 003E                _ADCON0bits 000FC2         ___wmul@multiplier 0001  
             _CURSOR_HOME 0D30    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
           digitos@numero 000E                  __Lrparam 0000              __Lsmallconst 0800  
        __size_of___awdiv 00C4          __size_of___lwdiv 0074          __size_of_digitos 010A  
         ___lwdiv@divisor 0009           ___lwdiv@counter 000D                  __ptext10 0D30  
                __ptext11 0D38                  __ptext12 0C70                  __ptext13 0AF2  
                __ptext14 0CFA                _BORRAR_LCD 0D38             __size_of_main 009E  
              _LCD_CONFIG 0B64                _ENVIA_CHAR 0C3C             _ENVIA_LCD_CMD 0C70  
       ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004            ?_ENVIA_LCD_CMD 0001  
             ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001                _POS_CURSOR 0C02  
             ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006               ?_ENVIA_CHAR 0001  
       POS_CURSOR@columna 0004  
