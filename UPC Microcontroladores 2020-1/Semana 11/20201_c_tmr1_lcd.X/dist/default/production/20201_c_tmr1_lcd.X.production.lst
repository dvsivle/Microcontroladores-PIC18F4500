

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Jun 02 11:16:30 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29  0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4550 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     _PIR1bits	set	3998
    65  0000                     _TMR1L	set	4046
    66  0000                     _TMR1H	set	4047
    67  0000                     _T1CON	set	4045
    68  0000                     _PORTD	set	3971
    69  0000                     _LATD	set	3980
    70  0000                     _TRISD	set	3989
    71  0000                     _LATDbits	set	3980
    72                           
    73                           	psect	smallconst
    74  000800                     __psmallconst:
    75                           	callstack 0
    76  000800  00                 	db	0
    77  000801                     STR_1:
    78  000801  43                 	db	67	;'C'
    79  000802  74                 	db	116	;'t'
    80  000803  61                 	db	97	;'a'
    81  000804  73                 	db	115	;'s'
    82  000805  20                 	db	32
    83  000806  54                 	db	84	;'T'
    84  000807  4D                 	db	77	;'M'
    85  000808  52                 	db	82	;'R'
    86  000809  31                 	db	49	;'1'
    87  00080A  3A                 	db	58	;':'
    88  00080B  20                 	db	32
    89  00080C  00                 	db	0
    90  00080D                     STR_2:
    91  00080D  43                 	db	67	;'C'
    92  00080E  61                 	db	97	;'a'
    93  00080F  6E                 	db	110	;'n'
    94  000810  74                 	db	116	;'t'
    95  000811  20                 	db	32
    96  000812  49                 	db	73	;'I'
    97  000813  6E                 	db	110	;'n'
    98  000814  74                 	db	116	;'t'
    99  000815  73                 	db	115	;'s'
   100  000816  3A                 	db	58	;':'
   101  000817  20                 	db	32
   102  000818  00                 	db	0
   103  000819  00                 	db	0	; dummy byte at the end
   104  0000                     
   105                           ; #config settings
   106                           
   107                           	psect	cinit
   108  000CBC                     __pcinit:
   109                           	callstack 0
   110  000CBC                     start_initialization:
   111                           	callstack 0
   112  000CBC                     __initialization:
   113                           	callstack 0
   114                           
   115                           ; Clear objects allocated to COMRAM (14 bytes)
   116  000CBC  EE00  F011         	lfsr	0,__pbssCOMRAM
   117  000CC0  0E0E               	movlw	14
   118  000CC2                     clear_0:
   119  000CC2  6AEE               	clrf	postinc0,c
   120  000CC4  06E8               	decf	wreg,f,c
   121  000CC6  E1FD               	bnz	clear_0
   122  000CC8                     end_of_initialization:
   123                           	callstack 0
   124  000CC8                     __end_of__initialization:
   125                           	callstack 0
   126  000CC8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   127  000CCA  6EF8               	movwf	tblptru,c
   128  000CCC  0E08               	movlw	high __Lsmallconst
   129  000CCE  6EF7               	movwf	tblptrh,c
   130  000CD0  0100               	movlb	0
   131  000CD2  EF0D  F004         	goto	_main	;jump to C main() function
   132                           
   133                           	psect	bssCOMRAM
   134  000011                     __pbssCOMRAM:
   135                           	callstack 0
   136  000011                     _ctas_inttmr1:
   137                           	callstack 0
   138  000011                     	ds	2
   139  000013                     _ctas_tmr1:
   140                           	callstack 0
   141  000013                     	ds	2
   142  000015                     _unidad:
   143                           	callstack 0
   144  000015                     	ds	2
   145  000017                     _decena:
   146                           	callstack 0
   147  000017                     	ds	2
   148  000019                     _centena:
   149                           	callstack 0
   150  000019                     	ds	2
   151  00001B                     _millar:
   152                           	callstack 0
   153  00001B                     	ds	2
   154  00001D                     _d_millar:
   155                           	callstack 0
   156  00001D                     	ds	2
   157                           
   158                           	psect	cstackCOMRAM
   159  000001                     __pcstackCOMRAM:
   160                           	callstack 0
   161  000001                     ?___lwmod:
   162                           	callstack 0
   163  000001                     ENVIA_NIBBLE@dato:
   164                           	callstack 0
   165  000001                     LEER_LCD@aux:
   166                           	callstack 0
   167  000001                     ___lwmod@dividend:
   168                           	callstack 0
   169                           
   170                           ; 2 bytes @ 0x0
   171  000001                     	ds	1
   172  000002                     ENVIA_CHAR@dato:
   173                           	callstack 0
   174  000002                     ENVIA_LCD_CMD@dato:
   175                           	callstack 0
   176                           
   177                           ; 1 bytes @ 0x1
   178  000002                     	ds	1
   179  000003                     ENVIA_CHAR@aux:
   180                           	callstack 0
   181  000003                     ENVIA_LCD_CMD@aux:
   182                           	callstack 0
   183  000003                     ___lwmod@divisor:
   184                           	callstack 0
   185                           
   186                           ; 2 bytes @ 0x2
   187  000003                     	ds	1
   188  000004                     ??_LCD_CONFIG:
   189  000004                     POS_CURSOR@columna:
   190                           	callstack 0
   191  000004                     CURSOR_ONOFF@estado:
   192                           	callstack 0
   193  000004                     ESCRIBE_MENSAJE@cadena:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0x3
   197  000004                     	ds	1
   198  000005                     ??_lcd_init:
   199  000005                     POS_CURSOR@fila:
   200                           	callstack 0
   201  000005                     ___lwmod@counter:
   202                           	callstack 0
   203                           
   204                           ; 1 bytes @ 0x4
   205  000005                     	ds	1
   206  000006                     ?___lwdiv:
   207                           	callstack 0
   208  000006                     ESCRIBE_MENSAJE@tam:
   209                           	callstack 0
   210  000006                     ___lwdiv@dividend:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x5
   214  000006                     	ds	1
   215  000007                     ??_ESCRIBE_MENSAJE:
   216                           
   217                           ; 1 bytes @ 0x6
   218  000007                     	ds	1
   219  000008                     ___lwdiv@divisor:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x7
   223  000008                     	ds	1
   224  000009                     ESCRIBE_MENSAJE@i:
   225                           	callstack 0
   226                           
   227                           ; 1 bytes @ 0x8
   228  000009                     	ds	1
   229  00000A                     ___lwdiv@quotient:
   230                           	callstack 0
   231                           
   232                           ; 2 bytes @ 0x9
   233  00000A                     	ds	2
   234  00000C                     ___lwdiv@counter:
   235                           	callstack 0
   236                           
   237                           ; 1 bytes @ 0xB
   238  00000C                     	ds	1
   239  00000D                     convierte@numero:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0xC
   243  00000D                     	ds	2
   244  00000F                     ??_main:
   245                           
   246                           ; 1 bytes @ 0xE
   247  00000F                     	ds	2
   248                           
   249 ;;
   250 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   251 ;;
   252 ;; *************** function _main *****************
   253 ;; Defined at:
   254 ;;		line 59 in file "newmaincode2.c"
   255 ;; Parameters:    Size  Location     Type
   256 ;;		None
   257 ;; Auto vars:     Size  Location     Type
   258 ;;		None
   259 ;; Return value:  Size  Location     Type
   260 ;;                  1    wreg      void 
   261 ;; Registers used:
   262 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   263 ;; Tracked objects:
   264 ;;		On entry : 0/0
   265 ;;		On exit  : 0/0
   266 ;;		Unchanged: 0/0
   267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   268 ;;      Params:         0       0       0       0       0       0       0       0       0
   269 ;;      Locals:         0       0       0       0       0       0       0       0       0
   270 ;;      Temps:          2       0       0       0       0       0       0       0       0
   271 ;;      Totals:         2       0       0       0       0       0       0       0       0
   272 ;;Total ram usage:        2 bytes
   273 ;; Hardware stack levels required when called:    4
   274 ;; This function calls:
   275 ;;		_ENVIA_CHAR
   276 ;;		_ESCRIBE_MENSAJE
   277 ;;		_POS_CURSOR
   278 ;;		_configuracion
   279 ;;		_convierte
   280 ;;		_lcd_init
   281 ;; This function is called by:
   282 ;;		Startup code after reset
   283 ;; This function uses a non-reentrant model
   284 ;;
   285                           
   286                           	psect	text0
   287  00081A                     __ptext0:
   288                           	callstack 0
   289  00081A                     _main:
   290                           	callstack 27
   291  00081A                     
   292                           ;newmaincode2.c: 60:     configuracion();
   293  00081A  EC73  F006         	call	_configuracion	;wreg free
   294  00081E                     
   295                           ;newmaincode2.c: 61:     lcd_init();
   296  00081E  EC3C  F006         	call	_lcd_init	;wreg free
   297  000822                     l1140:
   298                           
   299                           ;newmaincode2.c: 63:         POS_CURSOR(1, 0);
   300  000822  0E00               	movlw	0
   301  000824  6E04               	movwf	POS_CURSOR@columna^0,c
   302  000826  0E01               	movlw	1
   303  000828  ECD3  F005         	call	_POS_CURSOR
   304  00082C                     
   305                           ;newmaincode2.c: 64:         ESCRIBE_MENSAJE("Ctas TMR1: ",10);
   306  00082C  0E01               	movlw	low STR_1
   307  00082E  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   308  000830  0E08               	movlw	high STR_1
   309  000832  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   310  000834  0E0A               	movlw	10
   311  000836  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   312  000838  ECB4  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   313  00083C                     
   314                           ;newmaincode2.c: 65:         ctas_tmr1 = ((TMR1H << 8) + TMR1L);
   315  00083C  50CF               	movf	207,w,c	;volatile
   316  00083E  6E10               	movwf	(??_main+1)^0,c
   317  000840  6A0F               	clrf	??_main^0,c
   318  000842  50CE               	movf	206,w,c	;volatile
   319  000844  240F               	addwf	??_main^0,w,c
   320  000846  6E13               	movwf	_ctas_tmr1^0,c
   321  000848  0E00               	movlw	0
   322  00084A  2010               	addwfc	(??_main+1)^0,w,c
   323  00084C  6E14               	movwf	(_ctas_tmr1+1)^0,c
   324  00084E                     
   325                           ;newmaincode2.c: 66:         convierte(ctas_tmr1);
   326  00084E  C013  F00D         	movff	_ctas_tmr1,convierte@numero
   327  000852  C014  F00E         	movff	_ctas_tmr1+1,convierte@numero+1
   328  000856  EC7A  F004         	call	_convierte	;wreg free
   329  00085A                     
   330                           ;newmaincode2.c: 67:         ENVIA_CHAR(d_millar + 0x30);
   331  00085A  501D               	movf	_d_millar^0,w,c
   332  00085C  0F30               	addlw	48
   333  00085E  EC0A  F006         	call	_ENVIA_CHAR
   334  000862                     
   335                           ;newmaincode2.c: 68:         ENVIA_CHAR(millar + 0x30);
   336  000862  501B               	movf	_millar^0,w,c
   337  000864  0F30               	addlw	48
   338  000866  EC0A  F006         	call	_ENVIA_CHAR
   339  00086A                     
   340                           ;newmaincode2.c: 69:         ENVIA_CHAR(centena + 0x30);
   341  00086A  5019               	movf	_centena^0,w,c
   342  00086C  0F30               	addlw	48
   343  00086E  EC0A  F006         	call	_ENVIA_CHAR
   344  000872                     
   345                           ;newmaincode2.c: 70:         ENVIA_CHAR(decena + 0x30);
   346  000872  5017               	movf	_decena^0,w,c
   347  000874  0F30               	addlw	48
   348  000876  EC0A  F006         	call	_ENVIA_CHAR
   349  00087A                     
   350                           ;newmaincode2.c: 71:         ENVIA_CHAR(unidad + 0x30);
   351  00087A  5015               	movf	_unidad^0,w,c
   352  00087C  0F30               	addlw	48
   353  00087E  EC0A  F006         	call	_ENVIA_CHAR
   354  000882                     
   355                           ;newmaincode2.c: 72:         if (PIR1bits.TMR1IF == 1) {
   356  000882  A09E               	btfss	158,0,c	;volatile
   357  000884  EF46  F004         	goto	u281
   358  000888  EF48  F004         	goto	u280
   359  00088C                     u281:
   360  00088C  EF4F  F004         	goto	l1164
   361  000890                     u280:
   362  000890                     
   363                           ;newmaincode2.c: 73:             PIR1bits.TMR1IF = 0;
   364  000890  909E               	bcf	158,0,c	;volatile
   365  000892                     
   366                           ;newmaincode2.c: 74:             ctas_inttmr1 = ctas_inttmr1 + 1;
   367  000892  0E01               	movlw	1
   368  000894  2411               	addwf	_ctas_inttmr1^0,w,c
   369  000896  6E11               	movwf	_ctas_inttmr1^0,c
   370  000898  0E00               	movlw	0
   371  00089A  2012               	addwfc	(_ctas_inttmr1+1)^0,w,c
   372  00089C  6E12               	movwf	(_ctas_inttmr1+1)^0,c
   373  00089E                     l1164:
   374                           
   375                           ;newmaincode2.c: 76:         POS_CURSOR(2, 0);
   376  00089E  0E00               	movlw	0
   377  0008A0  6E04               	movwf	POS_CURSOR@columna^0,c
   378  0008A2  0E02               	movlw	2
   379  0008A4  ECD3  F005         	call	_POS_CURSOR
   380  0008A8                     
   381                           ;newmaincode2.c: 77:         ESCRIBE_MENSAJE("Cant Ints: ",11);
   382  0008A8  0E0D               	movlw	low STR_2
   383  0008AA  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   384  0008AC  0E08               	movlw	high STR_2
   385  0008AE  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   386  0008B0  0E0B               	movlw	11
   387  0008B2  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   388  0008B4  ECB4  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   389  0008B8                     
   390                           ;newmaincode2.c: 78:         convierte(ctas_inttmr1);
   391  0008B8  C011  F00D         	movff	_ctas_inttmr1,convierte@numero
   392  0008BC  C012  F00E         	movff	_ctas_inttmr1+1,convierte@numero+1
   393  0008C0  EC7A  F004         	call	_convierte	;wreg free
   394  0008C4                     
   395                           ;newmaincode2.c: 79:         ENVIA_CHAR(d_millar + 0x30);
   396  0008C4  501D               	movf	_d_millar^0,w,c
   397  0008C6  0F30               	addlw	48
   398  0008C8  EC0A  F006         	call	_ENVIA_CHAR
   399  0008CC                     
   400                           ;newmaincode2.c: 80:         ENVIA_CHAR(millar + 0x30);
   401  0008CC  501B               	movf	_millar^0,w,c
   402  0008CE  0F30               	addlw	48
   403  0008D0  EC0A  F006         	call	_ENVIA_CHAR
   404  0008D4                     
   405                           ;newmaincode2.c: 81:         ENVIA_CHAR(centena + 0x30);
   406  0008D4  5019               	movf	_centena^0,w,c
   407  0008D6  0F30               	addlw	48
   408  0008D8  EC0A  F006         	call	_ENVIA_CHAR
   409  0008DC                     
   410                           ;newmaincode2.c: 82:         ENVIA_CHAR(decena + 0x30);
   411  0008DC  5017               	movf	_decena^0,w,c
   412  0008DE  0F30               	addlw	48
   413  0008E0  EC0A  F006         	call	_ENVIA_CHAR
   414  0008E4                     
   415                           ;newmaincode2.c: 83:         ENVIA_CHAR(unidad + 0x30);
   416  0008E4  5015               	movf	_unidad^0,w,c
   417  0008E6  0F30               	addlw	48
   418  0008E8  EC0A  F006         	call	_ENVIA_CHAR
   419  0008EC  EF11  F004         	goto	l1140
   420  0008F0  EF00  F000         	goto	start
   421  0008F4                     __end_of_main:
   422                           	callstack 0
   423                           
   424 ;; *************** function _lcd_init *****************
   425 ;; Defined at:
   426 ;;		line 45 in file "newmaincode2.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;		None
   431 ;; Return value:  Size  Location     Type
   432 ;;                  1    wreg      void 
   433 ;; Registers used:
   434 ;;		wreg, status,2, status,0, cstack
   435 ;; Tracked objects:
   436 ;;		On entry : 0/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   440 ;;      Params:         0       0       0       0       0       0       0       0       0
   441 ;;      Locals:         0       0       0       0       0       0       0       0       0
   442 ;;      Temps:          1       0       0       0       0       0       0       0       0
   443 ;;      Totals:         1       0       0       0       0       0       0       0       0
   444 ;;Total ram usage:        1 bytes
   445 ;; Hardware stack levels used:    1
   446 ;; Hardware stack levels required when called:    3
   447 ;; This function calls:
   448 ;;		_BORRAR_LCD
   449 ;;		_CURSOR_HOME
   450 ;;		_CURSOR_ONOFF
   451 ;;		_LCD_CONFIG
   452 ;; This function is called by:
   453 ;;		_main
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           	psect	text1
   458  000C78                     __ptext1:
   459                           	callstack 0
   460  000C78                     _lcd_init:
   461                           	callstack 27
   462  000C78                     
   463                           ;newmaincode2.c: 46:     TRISD = 0x00;
   464  000C78  0E00               	movlw	0
   465  000C7A  6E95               	movwf	149,c	;volatile
   466  000C7C                     
   467                           ;newmaincode2.c: 47:     LCD_CONFIG();
   468  000C7C  EC84  F005         	call	_LCD_CONFIG	;wreg free
   469  000C80                     
   470                           ;newmaincode2.c: 48:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   471  000C80  0EEA               	movlw	234
   472  000C82  6E05               	movwf	??_lcd_init^0,c
   473  000C84  0EC3               	movlw	195
   474  000C86                     u297:
   475  000C86  2EE8               	decfsz	wreg,f,c
   476  000C88  D7FE               	bra	u297
   477  000C8A  2E05               	decfsz	??_lcd_init^0,f,c
   478  000C8C  D7FC               	bra	u297
   479  000C8E  F000               	nop	
   480  000C90                     
   481                           ;newmaincode2.c: 49:     BORRAR_LCD();
   482  000C90  EC6F  F006         	call	_BORRAR_LCD	;wreg free
   483  000C94                     
   484                           ;newmaincode2.c: 50:     CURSOR_HOME();
   485  000C94  EC6B  F006         	call	_CURSOR_HOME	;wreg free
   486  000C98                     
   487                           ;newmaincode2.c: 51:     CURSOR_ONOFF(1);
   488  000C98  0E01               	movlw	1
   489  000C9A  EC24  F006         	call	_CURSOR_ONOFF
   490  000C9E  0012               	return		;funcret
   491  000CA0                     __end_of_lcd_init:
   492                           	callstack 0
   493                           
   494 ;; *************** function _LCD_CONFIG *****************
   495 ;; Defined at:
   496 ;;		line 72 in file "LCD.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;		None
   499 ;; Auto vars:     Size  Location     Type
   500 ;;		None
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      void 
   503 ;; Registers used:
   504 ;;		wreg, status,2, status,0, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : 0/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   510 ;;      Params:         0       0       0       0       0       0       0       0       0
   511 ;;      Locals:         0       0       0       0       0       0       0       0       0
   512 ;;      Temps:          1       0       0       0       0       0       0       0       0
   513 ;;      Totals:         1       0       0       0       0       0       0       0       0
   514 ;;Total ram usage:        1 bytes
   515 ;; Hardware stack levels used:    1
   516 ;; Hardware stack levels required when called:    2
   517 ;; This function calls:
   518 ;;		_ENVIA_LCD_CMD
   519 ;;		_ENVIA_NIBBLE
   520 ;; This function is called by:
   521 ;;		_lcd_init
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525                           	psect	text2
   526  000B08                     __ptext2:
   527                           	callstack 0
   528  000B08                     _LCD_CONFIG:
   529                           	callstack 27
   530  000B08                     
   531                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   532  000B08  908C               	bcf	140,0,c	;volatile
   533                           
   534                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   535  000B0A  928C               	bcf	140,1,c	;volatile
   536  000B0C                     
   537                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   538  000B0C  0E30               	movlw	48
   539  000B0E  EC50  F006         	call	_ENVIA_NIBBLE
   540  000B12                     
   541                           ;LCD.c: 77:         _delay(24000);
   542  000B12  0E20               	movlw	32
   543  000B14  6E04               	movwf	??_LCD_CONFIG^0,c
   544  000B16  0E2A               	movlw	42
   545  000B18                     u307:
   546  000B18  2EE8               	decfsz	wreg,f,c
   547  000B1A  D7FE               	bra	u307
   548  000B1C  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   549  000B1E  D7FC               	bra	u307
   550  000B20                     
   551                           ;LCD.c: 78:         _delay(24000);
   552  000B20  0E20               	movlw	32
   553  000B22  6E04               	movwf	??_LCD_CONFIG^0,c
   554  000B24  0E2A               	movlw	42
   555  000B26                     u317:
   556  000B26  2EE8               	decfsz	wreg,f,c
   557  000B28  D7FE               	bra	u317
   558  000B2A  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   559  000B2C  D7FC               	bra	u317
   560                           
   561                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   562  000B2E  0E30               	movlw	48
   563  000B30  EC50  F006         	call	_ENVIA_NIBBLE
   564  000B34                     
   565                           ;LCD.c: 83:  _delay(1200);
   566  000B34  0EF0               	movlw	240
   567  000B36                     u327:
   568  000B36  D000               	nop2	
   569  000B38  2EE8               	decfsz	wreg,f,c
   570  000B3A  D7FD               	bra	u327
   571  000B3C                     
   572                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   573  000B3C  0E30               	movlw	48
   574  000B3E  EC50  F006         	call	_ENVIA_NIBBLE
   575  000B42                     
   576                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   577  000B42  0E20               	movlw	32
   578  000B44  EC50  F006         	call	_ENVIA_NIBBLE
   579  000B48                     
   580                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   581  000B48  0E01               	movlw	1
   582  000B4A  ECF0  F005         	call	_ENVIA_LCD_CMD
   583  000B4E                     
   584                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   585  000B4E  0E28               	movlw	40
   586  000B50  ECF0  F005         	call	_ENVIA_LCD_CMD
   587  000B54                     
   588                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   589  000B54  0E0F               	movlw	15
   590  000B56  ECF0  F005         	call	_ENVIA_LCD_CMD
   591  000B5A                     
   592                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   593  000B5A  0E06               	movlw	6
   594  000B5C  ECF0  F005         	call	_ENVIA_LCD_CMD
   595  000B60                     
   596                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   597  000B60  0E01               	movlw	1
   598  000B62  ECF0  F005         	call	_ENVIA_LCD_CMD
   599  000B66  0012               	return		;funcret
   600  000B68                     __end_of_LCD_CONFIG:
   601                           	callstack 0
   602                           
   603 ;; *************** function _CURSOR_ONOFF *****************
   604 ;; Defined at:
   605 ;;		line 35 in file "LCD.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;  estado          1    wreg     unsigned char 
   608 ;; Auto vars:     Size  Location     Type
   609 ;;  estado          1    3[COMRAM] unsigned char 
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, status,2, status,0, cstack
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   619 ;;      Params:         0       0       0       0       0       0       0       0       0
   620 ;;      Locals:         1       0       0       0       0       0       0       0       0
   621 ;;      Temps:          0       0       0       0       0       0       0       0       0
   622 ;;      Totals:         1       0       0       0       0       0       0       0       0
   623 ;;Total ram usage:        1 bytes
   624 ;; Hardware stack levels used:    1
   625 ;; Hardware stack levels required when called:    2
   626 ;; This function calls:
   627 ;;		_ENVIA_LCD_CMD
   628 ;; This function is called by:
   629 ;;		_lcd_init
   630 ;; This function uses a non-reentrant model
   631 ;;
   632                           
   633                           	psect	text3
   634  000C48                     __ptext3:
   635                           	callstack 0
   636  000C48                     _CURSOR_ONOFF:
   637                           	callstack 27
   638                           
   639                           ;incstack = 0
   640                           ;CURSOR_ONOFF@estado stored from wreg
   641  000C48  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   642  000C4A                     
   643                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   644  000C4A  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   645  000C4C  A4D8               	btfss	status,2,c
   646  000C4E  EF2B  F006         	goto	u21
   647  000C52  EF2D  F006         	goto	u20
   648  000C56                     u21:
   649  000C56  EF30  F006         	goto	l882
   650  000C5A                     u20:
   651  000C5A  0E0E               	movlw	14
   652  000C5C  ECF0  F005         	call	_ENVIA_LCD_CMD
   653  000C60                     l882:
   654                           
   655                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   656  000C60  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   657  000C62  A4D8               	btfss	status,2,c
   658  000C64  EF36  F006         	goto	u31
   659  000C68  EF38  F006         	goto	u30
   660  000C6C                     u31:
   661  000C6C  EF3B  F006         	goto	l42
   662  000C70                     u30:
   663  000C70  0E0C               	movlw	12
   664  000C72  ECF0  F005         	call	_ENVIA_LCD_CMD
   665  000C76                     l42:
   666  000C76  0012               	return		;funcret
   667  000C78                     __end_of_CURSOR_ONOFF:
   668                           	callstack 0
   669                           
   670 ;; *************** function _CURSOR_HOME *****************
   671 ;; Defined at:
   672 ;;		line 30 in file "LCD.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;		None
   675 ;; Auto vars:     Size  Location     Type
   676 ;;		None
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   686 ;;      Params:         0       0       0       0       0       0       0       0       0
   687 ;;      Locals:         0       0       0       0       0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0       0       0
   689 ;;      Totals:         0       0       0       0       0       0       0       0       0
   690 ;;Total ram usage:        0 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    2
   693 ;; This function calls:
   694 ;;		_ENVIA_LCD_CMD
   695 ;; This function is called by:
   696 ;;		_lcd_init
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text4
   701  000CD6                     __ptext4:
   702                           	callstack 0
   703  000CD6                     _CURSOR_HOME:
   704                           	callstack 27
   705  000CD6                     
   706                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   707  000CD6  0E02               	movlw	2
   708  000CD8  ECF0  F005         	call	_ENVIA_LCD_CMD
   709  000CDC  0012               	return		;funcret
   710  000CDE                     __end_of_CURSOR_HOME:
   711                           	callstack 0
   712                           
   713 ;; *************** function _BORRAR_LCD *****************
   714 ;; Defined at:
   715 ;;		line 67 in file "LCD.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;		None
   718 ;; Auto vars:     Size  Location     Type
   719 ;;		None
   720 ;; Return value:  Size  Location     Type
   721 ;;                  1    wreg      void 
   722 ;; Registers used:
   723 ;;		wreg, status,2, status,0, cstack
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   729 ;;      Params:         0       0       0       0       0       0       0       0       0
   730 ;;      Locals:         0       0       0       0       0       0       0       0       0
   731 ;;      Temps:          0       0       0       0       0       0       0       0       0
   732 ;;      Totals:         0       0       0       0       0       0       0       0       0
   733 ;;Total ram usage:        0 bytes
   734 ;; Hardware stack levels used:    1
   735 ;; Hardware stack levels required when called:    2
   736 ;; This function calls:
   737 ;;		_ENVIA_LCD_CMD
   738 ;; This function is called by:
   739 ;;		_lcd_init
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           	psect	text5
   744  000CDE                     __ptext5:
   745                           	callstack 0
   746  000CDE                     _BORRAR_LCD:
   747                           	callstack 27
   748  000CDE                     
   749                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   750  000CDE  0E01               	movlw	1
   751  000CE0  ECF0  F005         	call	_ENVIA_LCD_CMD
   752  000CE4  0012               	return		;funcret
   753  000CE6                     __end_of_BORRAR_LCD:
   754                           	callstack 0
   755                           
   756 ;; *************** function _convierte *****************
   757 ;; Defined at:
   758 ;;		line 37 in file "newmaincode2.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;  numero          2   12[COMRAM] unsigned int 
   761 ;; Auto vars:     Size  Location     Type
   762 ;;		None
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, status,2, status,0, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   772 ;;      Params:         2       0       0       0       0       0       0       0       0
   773 ;;      Locals:         0       0       0       0       0       0       0       0       0
   774 ;;      Temps:          0       0       0       0       0       0       0       0       0
   775 ;;      Totals:         2       0       0       0       0       0       0       0       0
   776 ;;Total ram usage:        2 bytes
   777 ;; Hardware stack levels used:    1
   778 ;; Hardware stack levels required when called:    1
   779 ;; This function calls:
   780 ;;		___lwdiv
   781 ;;		___lwmod
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text6
   788  0008F4                     __ptext6:
   789                           	callstack 0
   790  0008F4                     _convierte:
   791                           	callstack 29
   792  0008F4                     
   793                           ;newmaincode2.c: 38:     d_millar = numero / 10000;
   794  0008F4  C00D  F006         	movff	convierte@numero,___lwdiv@dividend
   795  0008F8  C00E  F007         	movff	convierte@numero+1,___lwdiv@dividend+1
   796  0008FC  0E27               	movlw	39
   797  0008FE  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   798  000900  0E10               	movlw	16
   799  000902  6E08               	movwf	___lwdiv@divisor^0,c
   800  000904  ECDF  F004         	call	___lwdiv	;wreg free
   801  000908  C006  F01D         	movff	?___lwdiv,_d_millar
   802  00090C  C007  F01E         	movff	?___lwdiv+1,_d_millar+1
   803                           
   804                           ;newmaincode2.c: 39:     millar = (numero %10000) /1000;
   805  000910  0E27               	movlw	39
   806  000912  6E04               	movwf	(___lwmod@divisor+1)^0,c
   807  000914  0E10               	movlw	16
   808  000916  6E03               	movwf	___lwmod@divisor^0,c
   809  000918  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   810  00091C  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   811  000920  EC52  F005         	call	___lwmod	;wreg free
   812  000924  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   813  000928  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   814  00092C  0E03               	movlw	3
   815  00092E  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   816  000930  0EE8               	movlw	232
   817  000932  6E08               	movwf	___lwdiv@divisor^0,c
   818  000934  ECDF  F004         	call	___lwdiv	;wreg free
   819  000938  C006  F01B         	movff	?___lwdiv,_millar
   820  00093C  C007  F01C         	movff	?___lwdiv+1,_millar+1
   821                           
   822                           ;newmaincode2.c: 40:     centena = (numero % 1000) / 100;
   823  000940  0E03               	movlw	3
   824  000942  6E04               	movwf	(___lwmod@divisor+1)^0,c
   825  000944  0EE8               	movlw	232
   826  000946  6E03               	movwf	___lwmod@divisor^0,c
   827  000948  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   828  00094C  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   829  000950  EC52  F005         	call	___lwmod	;wreg free
   830  000954  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   831  000958  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   832  00095C  0E00               	movlw	0
   833  00095E  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   834  000960  0E64               	movlw	100
   835  000962  6E08               	movwf	___lwdiv@divisor^0,c
   836  000964  ECDF  F004         	call	___lwdiv	;wreg free
   837  000968  C006  F019         	movff	?___lwdiv,_centena
   838  00096C  C007  F01A         	movff	?___lwdiv+1,_centena+1
   839                           
   840                           ;newmaincode2.c: 41:     decena = (numero % 100) / 10;
   841  000970  0E00               	movlw	0
   842  000972  6E04               	movwf	(___lwmod@divisor+1)^0,c
   843  000974  0E64               	movlw	100
   844  000976  6E03               	movwf	___lwmod@divisor^0,c
   845  000978  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   846  00097C  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   847  000980  EC52  F005         	call	___lwmod	;wreg free
   848  000984  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   849  000988  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   850  00098C  0E00               	movlw	0
   851  00098E  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   852  000990  0E0A               	movlw	10
   853  000992  6E08               	movwf	___lwdiv@divisor^0,c
   854  000994  ECDF  F004         	call	___lwdiv	;wreg free
   855  000998  C006  F017         	movff	?___lwdiv,_decena
   856  00099C  C007  F018         	movff	?___lwdiv+1,_decena+1
   857                           
   858                           ;newmaincode2.c: 42:     unidad = numero % 10;
   859  0009A0  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   860  0009A4  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   861  0009A8  0E00               	movlw	0
   862  0009AA  6E04               	movwf	(___lwmod@divisor+1)^0,c
   863  0009AC  0E0A               	movlw	10
   864  0009AE  6E03               	movwf	___lwmod@divisor^0,c
   865  0009B0  EC52  F005         	call	___lwmod	;wreg free
   866  0009B4  C001  F015         	movff	?___lwmod,_unidad
   867  0009B8  C002  F016         	movff	?___lwmod+1,_unidad+1
   868  0009BC  0012               	return		;funcret
   869  0009BE                     __end_of_convierte:
   870                           	callstack 0
   871                           
   872 ;; *************** function ___lwmod *****************
   873 ;; Defined at:
   874 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\lwmod.c"
   875 ;; Parameters:    Size  Location     Type
   876 ;;  dividend        2    0[COMRAM] unsigned int 
   877 ;;  divisor         2    2[COMRAM] unsigned int 
   878 ;; Auto vars:     Size  Location     Type
   879 ;;  counter         1    4[COMRAM] unsigned char 
   880 ;; Return value:  Size  Location     Type
   881 ;;                  2    0[COMRAM] unsigned int 
   882 ;; Registers used:
   883 ;;		wreg, status,2, status,0
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   889 ;;      Params:         4       0       0       0       0       0       0       0       0
   890 ;;      Locals:         1       0       0       0       0       0       0       0       0
   891 ;;      Temps:          0       0       0       0       0       0       0       0       0
   892 ;;      Totals:         5       0       0       0       0       0       0       0       0
   893 ;;Total ram usage:        5 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; This function calls:
   896 ;;		Nothing
   897 ;; This function is called by:
   898 ;;		_convierte
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text7
   903  000AA4                     __ptext7:
   904                           	callstack 0
   905  000AA4                     ___lwmod:
   906                           	callstack 29
   907  000AA4  5003               	movf	___lwmod@divisor^0,w,c
   908  000AA6  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   909  000AA8  B4D8               	btfsc	status,2,c
   910  000AAA  EF59  F005         	goto	u221
   911  000AAE  EF5B  F005         	goto	u220
   912  000AB2                     u221:
   913  000AB2  EF7F  F005         	goto	l636
   914  000AB6                     u220:
   915  000AB6  0E01               	movlw	1
   916  000AB8  6E05               	movwf	___lwmod@counter^0,c
   917  000ABA  EF63  F005         	goto	l1108
   918  000ABE                     l1106:
   919  000ABE  90D8               	bcf	status,0,c
   920  000AC0  3603               	rlcf	___lwmod@divisor^0,f,c
   921  000AC2  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   922  000AC4  2A05               	incf	___lwmod@counter^0,f,c
   923  000AC6                     l1108:
   924  000AC6  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   925  000AC8  EF68  F005         	goto	u231
   926  000ACC  EF6A  F005         	goto	u230
   927  000AD0                     u231:
   928  000AD0  EF5F  F005         	goto	l1106
   929  000AD4                     u230:
   930  000AD4                     l1110:
   931  000AD4  5003               	movf	___lwmod@divisor^0,w,c
   932  000AD6  5C01               	subwf	___lwmod@dividend^0,w,c
   933  000AD8  5004               	movf	(___lwmod@divisor+1)^0,w,c
   934  000ADA  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   935  000ADC  A0D8               	btfss	status,0,c
   936  000ADE  EF73  F005         	goto	u241
   937  000AE2  EF75  F005         	goto	u240
   938  000AE6                     u241:
   939  000AE6  EF79  F005         	goto	l1114
   940  000AEA                     u240:
   941  000AEA  5003               	movf	___lwmod@divisor^0,w,c
   942  000AEC  5E01               	subwf	___lwmod@dividend^0,f,c
   943  000AEE  5004               	movf	(___lwmod@divisor+1)^0,w,c
   944  000AF0  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   945  000AF2                     l1114:
   946  000AF2  90D8               	bcf	status,0,c
   947  000AF4  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   948  000AF6  3203               	rrcf	___lwmod@divisor^0,f,c
   949  000AF8  2E05               	decfsz	___lwmod@counter^0,f,c
   950  000AFA  EF6A  F005         	goto	l1110
   951  000AFE                     l636:
   952  000AFE  C001  F001         	movff	___lwmod@dividend,?___lwmod
   953  000B02  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   954  000B06  0012               	return		;funcret
   955  000B08                     __end_of___lwmod:
   956                           	callstack 0
   957                           
   958 ;; *************** function ___lwdiv *****************
   959 ;; Defined at:
   960 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\lwdiv.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;  dividend        2    5[COMRAM] unsigned int 
   963 ;;  divisor         2    7[COMRAM] unsigned int 
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  quotient        2    9[COMRAM] unsigned int 
   966 ;;  counter         1   11[COMRAM] unsigned char 
   967 ;; Return value:  Size  Location     Type
   968 ;;                  2    5[COMRAM] unsigned int 
   969 ;; Registers used:
   970 ;;		wreg, status,2, status,0
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   976 ;;      Params:         4       0       0       0       0       0       0       0       0
   977 ;;      Locals:         3       0       0       0       0       0       0       0       0
   978 ;;      Temps:          0       0       0       0       0       0       0       0       0
   979 ;;      Totals:         7       0       0       0       0       0       0       0       0
   980 ;;Total ram usage:        7 bytes
   981 ;; Hardware stack levels used:    1
   982 ;; This function calls:
   983 ;;		Nothing
   984 ;; This function is called by:
   985 ;;		_convierte
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           	psect	text8
   990  0009BE                     __ptext8:
   991                           	callstack 0
   992  0009BE                     ___lwdiv:
   993                           	callstack 29
   994  0009BE  0E00               	movlw	0
   995  0009C0  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
   996  0009C2  0E00               	movlw	0
   997  0009C4  6E0A               	movwf	___lwdiv@quotient^0,c
   998  0009C6  5008               	movf	___lwdiv@divisor^0,w,c
   999  0009C8  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1000  0009CA  B4D8               	btfsc	status,2,c
  1001  0009CC  EFEA  F004         	goto	u191
  1002  0009D0  EFEC  F004         	goto	u190
  1003  0009D4                     u191:
  1004  0009D4  EF14  F005         	goto	l626
  1005  0009D8                     u190:
  1006  0009D8  0E01               	movlw	1
  1007  0009DA  6E0C               	movwf	___lwdiv@counter^0,c
  1008  0009DC  EFF4  F004         	goto	l1088
  1009  0009E0                     l1086:
  1010  0009E0  90D8               	bcf	status,0,c
  1011  0009E2  3608               	rlcf	___lwdiv@divisor^0,f,c
  1012  0009E4  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1013  0009E6  2A0C               	incf	___lwdiv@counter^0,f,c
  1014  0009E8                     l1088:
  1015  0009E8  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
  1016  0009EA  EFF9  F004         	goto	u201
  1017  0009EE  EFFB  F004         	goto	u200
  1018  0009F2                     u201:
  1019  0009F2  EFF0  F004         	goto	l1086
  1020  0009F6                     u200:
  1021  0009F6                     l1090:
  1022  0009F6  90D8               	bcf	status,0,c
  1023  0009F8  360A               	rlcf	___lwdiv@quotient^0,f,c
  1024  0009FA  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1025  0009FC  5008               	movf	___lwdiv@divisor^0,w,c
  1026  0009FE  5C06               	subwf	___lwdiv@dividend^0,w,c
  1027  000A00  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1028  000A02  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1029  000A04  A0D8               	btfss	status,0,c
  1030  000A06  EF07  F005         	goto	u211
  1031  000A0A  EF09  F005         	goto	u210
  1032  000A0E                     u211:
  1033  000A0E  EF0E  F005         	goto	l1098
  1034  000A12                     u210:
  1035  000A12  5008               	movf	___lwdiv@divisor^0,w,c
  1036  000A14  5E06               	subwf	___lwdiv@dividend^0,f,c
  1037  000A16  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1038  000A18  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1039  000A1A  800A               	bsf	___lwdiv@quotient^0,0,c
  1040  000A1C                     l1098:
  1041  000A1C  90D8               	bcf	status,0,c
  1042  000A1E  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1043  000A20  3208               	rrcf	___lwdiv@divisor^0,f,c
  1044  000A22  2E0C               	decfsz	___lwdiv@counter^0,f,c
  1045  000A24  EFFB  F004         	goto	l1090
  1046  000A28                     l626:
  1047  000A28  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  1048  000A2C  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1049  000A30  0012               	return		;funcret
  1050  000A32                     __end_of___lwdiv:
  1051                           	callstack 0
  1052                           
  1053 ;; *************** function _configuracion *****************
  1054 ;; Defined at:
  1055 ;;		line 54 in file "newmaincode2.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1069 ;;      Params:         0       0       0       0       0       0       0       0       0
  1070 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1072 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1073 ;;Total ram usage:        0 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text9
  1083  000CE6                     __ptext9:
  1084                           	callstack 0
  1085  000CE6                     _configuracion:
  1086                           	callstack 30
  1087  000CE6                     
  1088                           ;newmaincode2.c: 55:     T1CON = 0x03;
  1089  000CE6  0E03               	movlw	3
  1090  000CE8  6ECD               	movwf	205,c	;volatile
  1091  000CEA  0012               	return		;funcret
  1092  000CEC                     __end_of_configuracion:
  1093                           	callstack 0
  1094                           
  1095 ;; *************** function _POS_CURSOR *****************
  1096 ;; Defined at:
  1097 ;;		line 6 in file "LCD.c"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;  fila            1    wreg     unsigned char 
  1100 ;;  columna         1    3[COMRAM] unsigned char 
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;  fila            1    4[COMRAM] unsigned char 
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2, status,0, cstack
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1112 ;;      Params:         1       0       0       0       0       0       0       0       0
  1113 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1115 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1116 ;;Total ram usage:        2 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    2
  1119 ;; This function calls:
  1120 ;;		_ENVIA_LCD_CMD
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text10
  1127  000BA6                     __ptext10:
  1128                           	callstack 0
  1129  000BA6                     _POS_CURSOR:
  1130                           	callstack 28
  1131                           
  1132                           ;incstack = 0
  1133                           ;POS_CURSOR@fila stored from wreg
  1134  000BA6  6E05               	movwf	POS_CURSOR@fila^0,c
  1135  000BA8                     
  1136                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1137  000BA8  0405               	decf	POS_CURSOR@fila^0,w,c
  1138  000BAA  A4D8               	btfss	status,2,c
  1139  000BAC  EFDA  F005         	goto	u251
  1140  000BB0  EFDC  F005         	goto	u250
  1141  000BB4                     u251:
  1142  000BB4  EFE2  F005         	goto	l1122
  1143  000BB8                     u250:
  1144  000BB8                     
  1145                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1146  000BB8  5004               	movf	POS_CURSOR@columna^0,w,c
  1147  000BBA  0F80               	addlw	128
  1148  000BBC  ECF0  F005         	call	_ENVIA_LCD_CMD
  1149                           
  1150                           ;LCD.c: 11:  }
  1151  000BC0  EFEF  F005         	goto	l24
  1152  000BC4                     l1122:
  1153  000BC4  0E02               	movlw	2
  1154  000BC6  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1155  000BC8  A4D8               	btfss	status,2,c
  1156  000BCA  EFE9  F005         	goto	u261
  1157  000BCE  EFEB  F005         	goto	u260
  1158  000BD2                     u261:
  1159  000BD2  EFEF  F005         	goto	l24
  1160  000BD6                     u260:
  1161  000BD6                     
  1162                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1163  000BD6  5004               	movf	POS_CURSOR@columna^0,w,c
  1164  000BD8  0FC0               	addlw	192
  1165  000BDA  ECF0  F005         	call	_ENVIA_LCD_CMD
  1166  000BDE                     l24:
  1167  000BDE  0012               	return		;funcret
  1168  000BE0                     __end_of_POS_CURSOR:
  1169                           	callstack 0
  1170                           
  1171 ;; *************** function _ENVIA_LCD_CMD *****************
  1172 ;; Defined at:
  1173 ;;		line 104 in file "LCD.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;  dato            1    wreg     unsigned char 
  1176 ;; Auto vars:     Size  Location     Type
  1177 ;;  dato            1    1[COMRAM] unsigned char 
  1178 ;;  aux             1    2[COMRAM] unsigned char 
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  1    wreg      void 
  1181 ;; Registers used:
  1182 ;;		wreg, status,2, status,0, cstack
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1188 ;;      Params:         0       0       0       0       0       0       0       0       0
  1189 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1191 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1192 ;;Total ram usage:        2 bytes
  1193 ;; Hardware stack levels used:    1
  1194 ;; Hardware stack levels required when called:    1
  1195 ;; This function calls:
  1196 ;;		_ENVIA_NIBBLE
  1197 ;;		_LEER_LCD
  1198 ;; This function is called by:
  1199 ;;		_POS_CURSOR
  1200 ;;		_CURSOR_HOME
  1201 ;;		_CURSOR_ONOFF
  1202 ;;		_BORRAR_LCD
  1203 ;;		_LCD_CONFIG
  1204 ;;		_BLINK_CURSOR
  1205 ;;		_DISPLAY_ONOFF
  1206 ;;		_GENERACARACTER
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           	psect	text11
  1211  000BE0                     __ptext11:
  1212                           	callstack 0
  1213  000BE0                     _ENVIA_LCD_CMD:
  1214                           	callstack 27
  1215                           
  1216                           ;incstack = 0
  1217                           ;ENVIA_LCD_CMD@dato stored from wreg
  1218  000BE0  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1219  000BE2                     
  1220                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1221  000BE2  908C               	bcf	140,0,c	;volatile
  1222  000BE4                     
  1223                           ;LCD.c: 108:  LEER_LCD();
  1224  000BE4  EC19  F005         	call	_LEER_LCD	;wreg free
  1225  000BE8                     
  1226                           ;LCD.c: 109:  TRISD = 0b00000000;
  1227  000BE8  0E00               	movlw	0
  1228  000BEA  6E95               	movwf	149,c	;volatile
  1229  000BEC                     
  1230                           ;LCD.c: 111:         _delay(1200);
  1231  000BEC  0EF0               	movlw	240
  1232  000BEE                     u337:
  1233  000BEE  D000               	nop2	
  1234  000BF0  2EE8               	decfsz	wreg,f,c
  1235  000BF2  D7FD               	bra	u337
  1236  000BF4                     
  1237                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1238  000BF4  928C               	bcf	140,1,c	;volatile
  1239  000BF6                     
  1240                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1241  000BF6  948C               	bcf	140,2,c	;volatile
  1242  000BF8                     
  1243                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1244  000BF8  908C               	bcf	140,0,c	;volatile
  1245  000BFA                     
  1246                           ;LCD.c: 115:  aux = dato & 0xF0;
  1247  000BFA  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1248  000BFC  0BF0               	andlw	240
  1249  000BFE  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1250  000C00                     
  1251                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1252  000C00  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1253  000C02  EC50  F006         	call	_ENVIA_NIBBLE
  1254  000C06                     
  1255                           ;LCD.c: 117:  aux = dato<<4;
  1256  000C06  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1257  000C08  0BF0               	andlw	240
  1258  000C0A  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1259  000C0C                     
  1260                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1261  000C0C  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1262  000C0E  EC50  F006         	call	_ENVIA_NIBBLE
  1263  000C12  0012               	return		;funcret
  1264  000C14                     __end_of_ENVIA_LCD_CMD:
  1265                           	callstack 0
  1266                           
  1267 ;; *************** function _ESCRIBE_MENSAJE *****************
  1268 ;; Defined at:
  1269 ;;		line 41 in file "LCD.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1272 ;;		 -> STR_2(12), STR_1(12), 
  1273 ;;  tam             1    5[COMRAM] unsigned char 
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  i               1    8[COMRAM] unsigned char 
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  1    wreg      void 
  1278 ;; Registers used:
  1279 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1285 ;;      Params:         3       0       0       0       0       0       0       0       0
  1286 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1287 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1288 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1289 ;;Total ram usage:        6 bytes
  1290 ;; Hardware stack levels used:    1
  1291 ;; Hardware stack levels required when called:    2
  1292 ;; This function calls:
  1293 ;;		_ENVIA_CHAR
  1294 ;; This function is called by:
  1295 ;;		_main
  1296 ;; This function uses a non-reentrant model
  1297 ;;
  1298                           
  1299                           	psect	text12
  1300  000B68                     __ptext12:
  1301                           	callstack 0
  1302  000B68                     _ESCRIBE_MENSAJE:
  1303                           	callstack 28
  1304  000B68                     
  1305                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1306  000B68  0E00               	movlw	0
  1307  000B6A  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1308                           
  1309                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1310  000B6C  0E00               	movlw	0
  1311  000B6E  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1312  000B70  EFC9  F005         	goto	l1132
  1313  000B74                     l1128:
  1314                           
  1315                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1316  000B74  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1317  000B76  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1318  000B78  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1319  000B7A  0E00               	movlw	0
  1320  000B7C  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1321  000B7E  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1322  000B80  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1323  000B84  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1324  000B88                     	if	0	;tblptru may be non-zero
  1325  000B88                     	endif
  1326  000B88                     	if	0	;tblptru may be non-zero
  1327  000B88                     	endif
  1328  000B88  0008               	tblrd		*
  1329  000B8A  50F5               	movf	tablat,w,c
  1330  000B8C  EC0A  F006         	call	_ENVIA_CHAR
  1331  000B90                     
  1332                           ;LCD.c: 47:  }
  1333  000B90  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1334  000B92                     l1132:
  1335  000B92  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1336  000B94  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1337  000B96  A0D8               	btfss	status,0,c
  1338  000B98  EFD0  F005         	goto	u271
  1339  000B9C  EFD2  F005         	goto	u270
  1340  000BA0                     u271:
  1341  000BA0  EFBA  F005         	goto	l1128
  1342  000BA4                     u270:
  1343  000BA4  0012               	return		;funcret
  1344  000BA6                     __end_of_ESCRIBE_MENSAJE:
  1345                           	callstack 0
  1346                           
  1347 ;; *************** function _ENVIA_CHAR *****************
  1348 ;; Defined at:
  1349 ;;		line 50 in file "LCD.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;  dato            1    wreg     unsigned char 
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;  dato            1    1[COMRAM] unsigned char 
  1354 ;;  aux             1    2[COMRAM] unsigned char 
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  1    wreg      void 
  1357 ;; Registers used:
  1358 ;;		wreg, status,2, status,0, cstack
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1364 ;;      Params:         0       0       0       0       0       0       0       0       0
  1365 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1366 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1367 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1368 ;;Total ram usage:        2 bytes
  1369 ;; Hardware stack levels used:    1
  1370 ;; Hardware stack levels required when called:    1
  1371 ;; This function calls:
  1372 ;;		_ENVIA_NIBBLE
  1373 ;;		_LEER_LCD
  1374 ;; This function is called by:
  1375 ;;		_ESCRIBE_MENSAJE
  1376 ;;		_main
  1377 ;;		_GENERACARACTER
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text13
  1382  000C14                     __ptext13:
  1383                           	callstack 0
  1384  000C14                     _ENVIA_CHAR:
  1385                           	callstack 28
  1386                           
  1387                           ;incstack = 0
  1388                           ;ENVIA_CHAR@dato stored from wreg
  1389  000C14  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1390  000C16                     
  1391                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1392  000C16  808C               	bsf	140,0,c	;volatile
  1393  000C18                     
  1394                           ;LCD.c: 54:  LEER_LCD();
  1395  000C18  EC19  F005         	call	_LEER_LCD	;wreg free
  1396  000C1C                     
  1397                           ;LCD.c: 55:  TRISD = 0x00;
  1398  000C1C  0E00               	movlw	0
  1399  000C1E  6E95               	movwf	149,c	;volatile
  1400  000C20                     
  1401                           ;LCD.c: 56:         _delay(1200);
  1402  000C20  0EF0               	movlw	240
  1403  000C22                     u347:
  1404  000C22  D000               	nop2	
  1405  000C24  2EE8               	decfsz	wreg,f,c
  1406  000C26  D7FD               	bra	u347
  1407  000C28                     
  1408                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1409  000C28  928C               	bcf	140,1,c	;volatile
  1410  000C2A                     
  1411                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1412  000C2A  948C               	bcf	140,2,c	;volatile
  1413  000C2C                     
  1414                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1415  000C2C  808C               	bsf	140,0,c	;volatile
  1416  000C2E                     
  1417                           ;LCD.c: 61:  aux = dato & 0xF0;
  1418  000C2E  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1419  000C30  0BF0               	andlw	240
  1420  000C32  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1421  000C34                     
  1422                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1423  000C34  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1424  000C36  EC50  F006         	call	_ENVIA_NIBBLE
  1425  000C3A                     
  1426                           ;LCD.c: 63:  aux = dato << 4;
  1427  000C3A  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1428  000C3C  0BF0               	andlw	240
  1429  000C3E  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1430  000C40                     
  1431                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1432  000C40  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1433  000C42  EC50  F006         	call	_ENVIA_NIBBLE
  1434  000C46  0012               	return		;funcret
  1435  000C48                     __end_of_ENVIA_CHAR:
  1436                           	callstack 0
  1437                           
  1438 ;; *************** function _LEER_LCD *****************
  1439 ;; Defined at:
  1440 ;;		line 121 in file "LCD.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;		None
  1443 ;; Auto vars:     Size  Location     Type
  1444 ;;  aux             1    0[COMRAM] unsigned char 
  1445 ;; Return value:  Size  Location     Type
  1446 ;;                  1    wreg      void 
  1447 ;; Registers used:
  1448 ;;		wreg, status,2, status,0
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1454 ;;      Params:         0       0       0       0       0       0       0       0       0
  1455 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1456 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1457 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1458 ;;Total ram usage:        1 bytes
  1459 ;; Hardware stack levels used:    1
  1460 ;; This function calls:
  1461 ;;		Nothing
  1462 ;; This function is called by:
  1463 ;;		_ENVIA_CHAR
  1464 ;;		_ENVIA_LCD_CMD
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           	psect	text14
  1469  000A32                     __ptext14:
  1470                           	callstack 0
  1471  000A32                     _LEER_LCD:
  1472                           	callstack 27
  1473  000A32                     
  1474                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1475  000A32  0EF8               	movlw	248
  1476  000A34  6E95               	movwf	149,c	;volatile
  1477  000A36                     
  1478                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1479  000A36  908C               	bcf	140,0,c	;volatile
  1480  000A38                     
  1481                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1482  000A38  828C               	bsf	140,1,c	;volatile
  1483  000A3A                     
  1484                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1485  000A3A  848C               	bsf	140,2,c	;volatile
  1486  000A3C                     
  1487                           ;LCD.c: 128:         _delay(1200);
  1488  000A3C  0EF0               	movlw	240
  1489  000A3E                     u357:
  1490  000A3E  D000               	nop2	
  1491  000A40  2EE8               	decfsz	wreg,f,c
  1492  000A42  D7FD               	bra	u357
  1493  000A44                     
  1494                           ;LCD.c: 130:  aux = PORTD;
  1495  000A44  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1496  000A48                     
  1497                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1498  000A48  948C               	bcf	140,2,c	;volatile
  1499  000A4A                     
  1500                           ;LCD.c: 132:         _delay(1200);
  1501  000A4A  0EF0               	movlw	240
  1502  000A4C                     u367:
  1503  000A4C  D000               	nop2	
  1504  000A4E  2EE8               	decfsz	wreg,f,c
  1505  000A50  D7FD               	bra	u367
  1506  000A52                     
  1507                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1508  000A52  848C               	bsf	140,2,c	;volatile
  1509  000A54                     
  1510                           ;LCD.c: 135:         _delay(1200);
  1511  000A54  0EF0               	movlw	240
  1512  000A56                     u377:
  1513  000A56  D000               	nop2	
  1514  000A58  2EE8               	decfsz	wreg,f,c
  1515  000A5A  D7FD               	bra	u377
  1516  000A5C                     
  1517                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1518  000A5C  948C               	bcf	140,2,c	;volatile
  1519  000A5E                     l830:
  1520                           
  1521                           ;LCD.c: 138:  aux = aux & 0x80;
  1522  000A5E  5001               	movf	LEER_LCD@aux^0,w,c
  1523  000A60  0B80               	andlw	128
  1524  000A62  6E01               	movwf	LEER_LCD@aux^0,c
  1525                           
  1526                           ;LCD.c: 139:  while(aux == 0x80)
  1527  000A64  EF48  F005         	goto	l844
  1528  000A68                     l67:
  1529                           
  1530                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1531  000A68  848C               	bsf	140,2,c	;volatile
  1532  000A6A                     
  1533                           ;LCD.c: 142:             _delay(1200);
  1534  000A6A  0EF0               	movlw	240
  1535  000A6C                     u387:
  1536  000A6C  D000               	nop2	
  1537  000A6E  2EE8               	decfsz	wreg,f,c
  1538  000A70  D7FD               	bra	u387
  1539  000A72                     
  1540                           ;LCD.c: 143:             aux = PORTD;
  1541  000A72  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1542  000A76                     
  1543                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1544  000A76  948C               	bcf	140,2,c	;volatile
  1545                           
  1546                           ;LCD.c: 145:             _delay(1200);
  1547  000A78  0EF0               	movlw	240
  1548  000A7A                     u397:
  1549  000A7A  D000               	nop2	
  1550  000A7C  2EE8               	decfsz	wreg,f,c
  1551  000A7E  D7FD               	bra	u397
  1552  000A80                     
  1553                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1554  000A80  848C               	bsf	140,2,c	;volatile
  1555                           
  1556                           ;LCD.c: 147:             _delay(1200);
  1557  000A82  0EF0               	movlw	240
  1558  000A84                     u407:
  1559  000A84  D000               	nop2	
  1560  000A86  2EE8               	decfsz	wreg,f,c
  1561  000A88  D7FD               	bra	u407
  1562  000A8A                     
  1563                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1564  000A8A  948C               	bcf	140,2,c	;volatile
  1565  000A8C  EF2F  F005         	goto	l830
  1566  000A90                     l844:
  1567                           
  1568                           ;LCD.c: 139:  while(aux == 0x80)
  1569  000A90  0E80               	movlw	128
  1570  000A92  1801               	xorwf	LEER_LCD@aux^0,w,c
  1571  000A94  B4D8               	btfsc	status,2,c
  1572  000A96  EF4F  F005         	goto	u11
  1573  000A9A  EF51  F005         	goto	u10
  1574  000A9E                     u11:
  1575  000A9E  EF34  F005         	goto	l67
  1576  000AA2                     u10:
  1577  000AA2  0012               	return		;funcret
  1578  000AA4                     __end_of_LEER_LCD:
  1579                           	callstack 0
  1580                           
  1581 ;; *************** function _ENVIA_NIBBLE *****************
  1582 ;; Defined at:
  1583 ;;		line 93 in file "LCD.c"
  1584 ;; Parameters:    Size  Location     Type
  1585 ;;  dato            1    wreg     unsigned char 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  dato            1    0[COMRAM] unsigned char 
  1588 ;; Return value:  Size  Location     Type
  1589 ;;                  1    wreg      void 
  1590 ;; Registers used:
  1591 ;;		wreg, status,2, status,0
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1597 ;;      Params:         0       0       0       0       0       0       0       0       0
  1598 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1599 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1600 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1601 ;;Total ram usage:        1 bytes
  1602 ;; Hardware stack levels used:    1
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_ENVIA_CHAR
  1607 ;;		_LCD_CONFIG
  1608 ;;		_ENVIA_LCD_CMD
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           	psect	text15
  1613  000CA0                     __ptext15:
  1614                           	callstack 0
  1615  000CA0                     _ENVIA_NIBBLE:
  1616                           	callstack 28
  1617                           
  1618                           ;incstack = 0
  1619                           ;ENVIA_NIBBLE@dato stored from wreg
  1620  000CA0  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1621  000CA2                     
  1622                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1623  000CA2  0E0F               	movlw	15
  1624  000CA4  168C               	andwf	140,f,c	;volatile
  1625                           
  1626                           ;LCD.c: 96:  dato &= 0xF0;
  1627  000CA6  0EF0               	movlw	240
  1628  000CA8  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1629                           
  1630                           ;LCD.c: 97:  LATD|= dato;
  1631  000CAA  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1632  000CAC  128C               	iorwf	140,f,c	;volatile
  1633  000CAE                     
  1634                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1635  000CAE  848C               	bsf	140,2,c	;volatile
  1636  000CB0                     
  1637                           ;LCD.c: 100:         _delay(1200);
  1638  000CB0  0EF0               	movlw	240
  1639  000CB2                     u417:
  1640  000CB2  D000               	nop2	
  1641  000CB4  2EE8               	decfsz	wreg,f,c
  1642  000CB6  D7FD               	bra	u417
  1643  000CB8                     
  1644                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1645  000CB8  948C               	bcf	140,2,c	;volatile
  1646  000CBA  0012               	return		;funcret
  1647  000CBC                     __end_of_ENVIA_NIBBLE:
  1648                           	callstack 0
  1649                           
  1650                           	psect	rparam
  1651  0000                     
  1652                           	psect	idloc
  1653                           
  1654                           ;Config register IDLOC0 @ 0x200000
  1655                           ;	unspecified, using default values
  1656  200000                     	org	2097152
  1657  200000  FF                 	db	255
  1658                           
  1659                           ;Config register IDLOC1 @ 0x200001
  1660                           ;	unspecified, using default values
  1661  200001                     	org	2097153
  1662  200001  FF                 	db	255
  1663                           
  1664                           ;Config register IDLOC2 @ 0x200002
  1665                           ;	unspecified, using default values
  1666  200002                     	org	2097154
  1667  200002  FF                 	db	255
  1668                           
  1669                           ;Config register IDLOC3 @ 0x200003
  1670                           ;	unspecified, using default values
  1671  200003                     	org	2097155
  1672  200003  FF                 	db	255
  1673                           
  1674                           ;Config register IDLOC4 @ 0x200004
  1675                           ;	unspecified, using default values
  1676  200004                     	org	2097156
  1677  200004  FF                 	db	255
  1678                           
  1679                           ;Config register IDLOC5 @ 0x200005
  1680                           ;	unspecified, using default values
  1681  200005                     	org	2097157
  1682  200005  FF                 	db	255
  1683                           
  1684                           ;Config register IDLOC6 @ 0x200006
  1685                           ;	unspecified, using default values
  1686  200006                     	org	2097158
  1687  200006  FF                 	db	255
  1688                           
  1689                           ;Config register IDLOC7 @ 0x200007
  1690                           ;	unspecified, using default values
  1691  200007                     	org	2097159
  1692  200007  FF                 	db	255
  1693                           
  1694                           	psect	config
  1695                           
  1696                           ;Config register CONFIG1L @ 0x300000
  1697                           ;	PLL Prescaler Selection bits
  1698                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1699                           ;	System Clock Postscaler Selection bits
  1700                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1701                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1702                           ;	USBDIV = 0x0, unprogrammed default
  1703  300000                     	org	3145728
  1704  300000  00                 	db	0
  1705                           
  1706                           ;Config register CONFIG1H @ 0x300001
  1707                           ;	Oscillator Selection bits
  1708                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1709                           ;	Fail-Safe Clock Monitor Enable bit
  1710                           ;	FCMEN = 0x0, unprogrammed default
  1711                           ;	Internal/External Oscillator Switchover bit
  1712                           ;	IESO = 0x0, unprogrammed default
  1713  300001                     	org	3145729
  1714  300001  02                 	db	2
  1715                           
  1716                           ;Config register CONFIG2L @ 0x300002
  1717                           ;	Power-up Timer Enable bit
  1718                           ;	PWRT = ON, PWRT enabled
  1719                           ;	Brown-out Reset Enable bits
  1720                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1721                           ;	Brown-out Reset Voltage bits
  1722                           ;	BORV = 3, Minimum setting 2.05V
  1723                           ;	USB Voltage Regulator Enable bit
  1724                           ;	VREGEN = 0x0, unprogrammed default
  1725  300002                     	org	3145730
  1726  300002  18                 	db	24
  1727                           
  1728                           ;Config register CONFIG2H @ 0x300003
  1729                           ;	Watchdog Timer Enable bit
  1730                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1731                           ;	Watchdog Timer Postscale Select bits
  1732                           ;	WDTPS = 32768, 1:32768
  1733  300003                     	org	3145731
  1734  300003  1E                 	db	30
  1735                           
  1736                           ; Padding undefined space
  1737  300004                     	org	3145732
  1738  300004  FF                 	db	255
  1739                           
  1740                           ;Config register CONFIG3H @ 0x300005
  1741                           ;	CCP2 MUX bit
  1742                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1743                           ;	PORTB A/D Enable bit
  1744                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1745                           ;	Low-Power Timer 1 Oscillator Enable bit
  1746                           ;	LPT1OSC = 0x0, unprogrammed default
  1747                           ;	MCLR Pin Enable bit
  1748                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1749  300005                     	org	3145733
  1750  300005  81                 	db	129
  1751                           
  1752                           ;Config register CONFIG4L @ 0x300006
  1753                           ;	Stack Full/Underflow Reset Enable bit
  1754                           ;	STVREN = 0x1, unprogrammed default
  1755                           ;	Single-Supply ICSP Enable bit
  1756                           ;	LVP = OFF, Single-Supply ICSP disabled
  1757                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1758                           ;	ICPRT = 0x0, unprogrammed default
  1759                           ;	Extended Instruction Set Enable bit
  1760                           ;	XINST = 0x0, unprogrammed default
  1761                           ;	Background Debugger Enable bit
  1762                           ;	DEBUG = 0x1, unprogrammed default
  1763  300006                     	org	3145734
  1764  300006  81                 	db	129
  1765                           
  1766                           ; Padding undefined space
  1767  300007                     	org	3145735
  1768  300007  FF                 	db	255
  1769                           
  1770                           ;Config register CONFIG5L @ 0x300008
  1771                           ;	unspecified, using default values
  1772                           ;	Code Protection bit
  1773                           ;	CP0 = 0x1, unprogrammed default
  1774                           ;	Code Protection bit
  1775                           ;	CP1 = 0x1, unprogrammed default
  1776                           ;	Code Protection bit
  1777                           ;	CP2 = 0x1, unprogrammed default
  1778                           ;	Code Protection bit
  1779                           ;	CP3 = 0x1, unprogrammed default
  1780  300008                     	org	3145736
  1781  300008  0F                 	db	15
  1782                           
  1783                           ;Config register CONFIG5H @ 0x300009
  1784                           ;	unspecified, using default values
  1785                           ;	Boot Block Code Protection bit
  1786                           ;	CPB = 0x1, unprogrammed default
  1787                           ;	Data EEPROM Code Protection bit
  1788                           ;	CPD = 0x1, unprogrammed default
  1789  300009                     	org	3145737
  1790  300009  C0                 	db	192
  1791                           
  1792                           ;Config register CONFIG6L @ 0x30000A
  1793                           ;	unspecified, using default values
  1794                           ;	Write Protection bit
  1795                           ;	WRT0 = 0x1, unprogrammed default
  1796                           ;	Write Protection bit
  1797                           ;	WRT1 = 0x1, unprogrammed default
  1798                           ;	Write Protection bit
  1799                           ;	WRT2 = 0x1, unprogrammed default
  1800                           ;	Write Protection bit
  1801                           ;	WRT3 = 0x1, unprogrammed default
  1802  30000A                     	org	3145738
  1803  30000A  0F                 	db	15
  1804                           
  1805                           ;Config register CONFIG6H @ 0x30000B
  1806                           ;	unspecified, using default values
  1807                           ;	Configuration Register Write Protection bit
  1808                           ;	WRTC = 0x1, unprogrammed default
  1809                           ;	Boot Block Write Protection bit
  1810                           ;	WRTB = 0x1, unprogrammed default
  1811                           ;	Data EEPROM Write Protection bit
  1812                           ;	WRTD = 0x1, unprogrammed default
  1813  30000B                     	org	3145739
  1814  30000B  E0                 	db	224
  1815                           
  1816                           ;Config register CONFIG7L @ 0x30000C
  1817                           ;	unspecified, using default values
  1818                           ;	Table Read Protection bit
  1819                           ;	EBTR0 = 0x1, unprogrammed default
  1820                           ;	Table Read Protection bit
  1821                           ;	EBTR1 = 0x1, unprogrammed default
  1822                           ;	Table Read Protection bit
  1823                           ;	EBTR2 = 0x1, unprogrammed default
  1824                           ;	Table Read Protection bit
  1825                           ;	EBTR3 = 0x1, unprogrammed default
  1826  30000C                     	org	3145740
  1827  30000C  0F                 	db	15
  1828                           
  1829                           ;Config register CONFIG7H @ 0x30000D
  1830                           ;	unspecified, using default values
  1831                           ;	Boot Block Table Read Protection bit
  1832                           ;	EBTRB = 0x1, unprogrammed default
  1833  30000D                     	org	3145741
  1834  30000D  40                 	db	64
  1835                           tosu	equ	0xFFF
  1836                           tosh	equ	0xFFE
  1837                           tosl	equ	0xFFD
  1838                           stkptr	equ	0xFFC
  1839                           pclatu	equ	0xFFB
  1840                           pclath	equ	0xFFA
  1841                           pcl	equ	0xFF9
  1842                           tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           prodh	equ	0xFF4
  1847                           prodl	equ	0xFF3
  1848                           indf0	equ	0xFEF
  1849                           postinc0	equ	0xFEE
  1850                           postdec0	equ	0xFED
  1851                           preinc0	equ	0xFEC
  1852                           plusw0	equ	0xFEB
  1853                           fsr0h	equ	0xFEA
  1854                           fsr0l	equ	0xFE9
  1855                           wreg	equ	0xFE8
  1856                           indf1	equ	0xFE7
  1857                           postinc1	equ	0xFE6
  1858                           postdec1	equ	0xFE5
  1859                           preinc1	equ	0xFE4
  1860                           plusw1	equ	0xFE3
  1861                           fsr1h	equ	0xFE2
  1862                           fsr1l	equ	0xFE1
  1863                           bsr	equ	0xFE0
  1864                           indf2	equ	0xFDF
  1865                           postinc2	equ	0xFDE
  1866                           postdec2	equ	0xFDD
  1867                           preinc2	equ	0xFDC
  1868                           plusw2	equ	0xFDB
  1869                           fsr2h	equ	0xFDA
  1870                           fsr2l	equ	0xFD9
  1871                           status	equ	0xFD8

Data Sizes:
    Strings     24
    Constant    0
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[12]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3319
                                             14 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                      _configuracion
                          _convierte
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1799
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     770
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuracion                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configuracion
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      1E       1       31.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E      20        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Jun 02 11:16:30 2020

                      l24 0BDE                        l42 0C76                        l51 0C46  
                      l60 0CBA                        l37 0CDC                        l54 0CE4  
                      l63 0C12                        l48 0BA4                        l57 0B66  
                      l67 0A68                        l69 0AA2                        u10 0AA2  
                      u11 0A9E                        u20 0C5A                        u21 0C56  
                      u30 0C70                        u31 0C6C            ?_configuracion 0001  
           ENVIA_CHAR@aux 0003                       l120 0C9E                       l123 0CEA  
                     l117 09BC                       l633 0A30                       l810 0A36  
                     l626 0A28                       l643 0B06                       l820 0A48  
                     l812 0A38                       l900 0C2E                       l636 0AFE  
                     l830 0A5E                       l822 0A4A                       l814 0A3A  
                     l902 0C34                       l910 0B08                       l840 0A8A  
                     l832 0A6A                       l824 0A52                       l816 0A3C  
                     l808 0A32                       l904 0C3A                       l920 0B3C  
                     l912 0B0C                       l850 0CB0                       l834 0A72  
                     l826 0A54                       l818 0A44                       l906 0C40  
                     l930 0B5A                       l922 0B42                       l914 0B12  
                     l852 0CB8                       l836 0A76                       l844 0A90  
                     l828 0A5C                       l860 0BEC                       l908 0CDE  
                     l932 0B60                       l924 0B48                       l916 0B20  
                     l846 0CA2                       l838 0A80                       l870 0C00  
                     l862 0BF4                       l854 0BE2                       l926 0B4E  
                     l918 0B34                       l848 0CAE                       l872 0C06  
                     l864 0BF6                       l856 0BE4                       l880 0C5A  
                     l928 0B54                       l890 0C1C                       l874 0C0C  
                     l866 0BF8                       l858 0BE8                       l882 0C60  
                     l892 0C20                       l868 0BFA                       l876 0CD6  
                     l884 0C70                       l894 0C28                       l886 0C16  
                     l878 0C4A                       l990 0C78                       l896 0C2A  
                     l888 0C18                       l992 0C7C                       l898 0C2C  
                     l994 0C80                       l996 0C90                       l998 0C94  
                     u200 09F6                       u201 09F2                       u210 0A12  
                     u211 0A0E                       u220 0AB6                       u221 0AB2  
                     u230 0AD4                       u231 0AD0                       u240 0AEA  
                     u241 0AE6                       u250 0BB8                       u251 0BB4  
                     u307 0B18                       u260 0BD6                       u261 0BD2  
                     u317 0B26                       u270 0BA4                       u190 09D8  
                     u407 0A84                       u271 0BA0                       u191 09D4  
                     u327 0B36                       u280 0890                       u417 0CB2  
                     u337 0BEE                       u281 088C                       u347 0C22  
                     u357 0A3E                       u367 0A4C                       u377 0A56  
                     u297 0C86                       u387 0A6C                       u397 0A7A  
             LEER_LCD@aux 0001                       wreg 000FE8              ?_CURSOR_HOME 0001  
          ??_ENVIA_NIBBLE 0001            ENVIA_CHAR@dato 0002                      l1000 0C98  
                    l1002 0CE6                      l1100 0A22                      l1110 0AD4  
                    l1102 0AA4                      l1120 0BB8                      l1112 0AEA  
                    l1104 0AB6                      l1130 0B90                      l1122 0BC4  
                    l1114 0AF2                      l1106 0ABE                      l1132 0B92  
                    l1124 0BD6                      l1116 0AF8                      l1108 0AC6  
                    l1140 0822                      l1126 0B68                      l1118 0BA8  
                    l1134 08F4                      l1150 0862                      l1142 082C  
                    l1128 0B74                      l1080 09BE                      l1160 0890  
                    l1152 086A                      l1144 083C                      l1136 081A  
                    l1090 09F6                      l1082 09C6                      l1170 08C4  
                    l1162 0892                      l1154 0872                      l1146 084E  
                    l1138 081E                      l1092 09FC                      l1084 09D8  
                    l1172 08CC                      l1164 089E                      l1156 087A  
                    l1148 085A                      l1094 0A12                      l1086 09E0  
                    l1174 08D4                      l1166 08A8                      l1158 0882  
                    l1096 0A1A                      l1088 09E8                      l1176 08DC  
                    l1168 08B8                      l1098 0A1C                      l1178 08E4  
                    STR_1 0801                      STR_2 080D                      _LATD 000F8C  
                    _main 081A                      start 0000             ?_CURSOR_ONOFF 0001  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0002          __end_of_LEER_LCD 0AA4  
     __size_of_BORRAR_LCD 0008                     ?_main 0001                     _T1CON 000FCD  
         __end_of___lwdiv 0A32           __end_of___lwmod 0B08                     _TMR1H 000FCF  
                   _TMR1L 000FCE                     _PORTD 000F83       __size_of_LCD_CONFIG 0060  
                   _TRISD 000F95       __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0004  
                   tablat 000FF5                     status 000FD8            ??_CURSOR_ONOFF 0004  
         __initialization 0CBC              __end_of_main 08F4           ??_configuracion 0001  
         _ESCRIBE_MENSAJE 0B68                    ??_main 000F             __activetblptr 000001  
        __end_of_lcd_init 0CA0                    _decena 0017      __end_of_ENVIA_NIBBLE 0CBC  
               ??___lwdiv 000A                 ??___lwmod 0005       __size_of_POS_CURSOR 003A  
                  _millar 001B                    clear_0 0CC2                    _unidad 0015  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0CC8  
            ??_LCD_CONFIG 0004             ___rparam_used 000001              ??_ENVIA_CHAR 0002  
 __end_of_ESCRIBE_MENSAJE 0BA6            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0CE6  
        ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0C78        __end_of_LCD_CONFIG 0B68  
      __end_of_ENVIA_CHAR 0C48        __size_of_convierte 00CA                ??_LEER_LCD 0001  
        ENVIA_NIBBLE@dato 0001              ??_POS_CURSOR 0005                 ?_lcd_init 0001  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0004                   ___lwdiv 09BE                   ___lwmod 0AA4  
            __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0C14         __end_of_convierte 09BE  
                 __pcinit 0CBC        __end_of_POS_CURSOR 0BE0                   __ramtop 0800  
                 _centena 0019                   __ptext0 081A                   __ptext1 0C78  
                 __ptext2 0B08                   __ptext3 0C48                   __ptext4 0CD6  
                 __ptext5 0CDE                   __ptext6 08F4                   __ptext7 0AA4  
                 __ptext8 09BE                   __ptext9 0CE6                ??_lcd_init 0005  
            _ENVIA_NIBBLE 0CA0      end_of_initialization 0CC8                   postinc0 000FEE  
   __end_of_configuracion 0CEC     __size_of_CURSOR_ONOFF 0030              _ctas_inttmr1 0011  
       __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0C48        CURSOR_ONOFF@estado 0004  
           ??_CURSOR_HOME 0004       start_initialization 0CBC         ENVIA_LCD_CMD@dato 0002  
             __pbssCOMRAM 0011       __end_of_CURSOR_HOME 0CDE         __size_of_lcd_init 0028  
        ___lwdiv@dividend 0006                  ?___lwdiv 0006                  ?___lwmod 0001  
               _ctas_tmr1 0013               __smallconst 0800                 _convierte 08F4  
         convierte@numero 000D          ___lwdiv@quotient 000A                  _LEER_LCD 0A32  
                _LATDbits 000F8C                  _PIR1bits 000F9E          ESCRIBE_MENSAJE@i 0009  
          POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 003E                ?_convierte 000D  
             _CURSOR_HOME 0CD6    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800          __size_of___lwdiv 0074  
        __size_of___lwmod 0064                  _d_millar 001D           ___lwdiv@divisor 0008  
         ___lwdiv@counter 000C                  __ptext10 0BA6                  __ptext11 0BE0  
                __ptext12 0B68                  __ptext13 0C14                  __ptext14 0A32  
                __ptext15 0CA0                _BORRAR_LCD 0CDE                  _lcd_init 0C78  
  __size_of_configuracion 0006             __size_of_main 00DA                _LCD_CONFIG 0B08  
              _ENVIA_CHAR 0C14             _ENVIA_LCD_CMD 0BE0               ??_convierte 000F  
       ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004          ___lwmod@dividend 0001  
          ?_ENVIA_LCD_CMD 0001             _configuracion 0CE6           ___lwmod@divisor 0003  
         ___lwmod@counter 0005               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0BA6               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
