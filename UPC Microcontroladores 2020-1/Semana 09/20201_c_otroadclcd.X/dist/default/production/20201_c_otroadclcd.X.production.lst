

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed May 20 21:47:07 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29  0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4550 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     _ADRESL	set	4035
    65  0000                     _ADRESH	set	4036
    66  0000                     _ADCON0	set	4034
    67  0000                     _ADCON0bits	set	4034
    68  0000                     _ADCON1	set	4033
    69  0000                     _ADCON2	set	4032
    70  0000                     _PORTD	set	3971
    71  0000                     _LATD	set	3980
    72  0000                     _TRISD	set	3989
    73  0000                     _LATDbits	set	3980
    74                           
    75                           	psect	smallconst
    76  000800                     __psmallconst:
    77                           	callstack 0
    78  000800  00                 	db	0
    79  000801                     STR_1:
    80  000801  4C                 	db	76	;'L'
    81  000802  6F                 	db	111	;'o'
    82  000803  73                 	db	115	;'s'
    83  000804  20                 	db	32
    84  000805  71                 	db	113	;'q'
    85  000806  20                 	db	32
    86  000807  71                 	db	113	;'q'
    87  000808  75                 	db	117	;'u'
    88  000809  65                 	db	101	;'e'
    89  00080A  64                 	db	100	;'d'
    90  00080B  61                 	db	97	;'a'
    91  00080C  72                 	db	114	;'r'
    92  00080D  6F                 	db	111	;'o'
    93  00080E  6E                 	db	110	;'n'
    94  00080F  00                 	db	0
    95  000810                     STR_3:
    96  000810  20                 	db	32
    97  000811  43                 	db	67	;'C'
    98  000812  31                 	db	49	;'1'
    99  000813  3A                 	db	58	;':'
   100  000814  00                 	db	0
   101  000815                     STR_2:
   102  000815  43                 	db	67	;'C'
   103  000816  30                 	db	48	;'0'
   104  000817  3A                 	db	58	;':'
   105  000818  00                 	db	0
   106  000819  00                 	db	0	; dummy byte at the end
   107  0000                     
   108                           ; #config settings
   109                           
   110                           	psect	cinit
   111  000C98                     __pcinit:
   112                           	callstack 0
   113  000C98                     start_initialization:
   114                           	callstack 0
   115  000C98                     __initialization:
   116                           	callstack 0
   117                           
   118                           ; Clear objects allocated to COMRAM (12 bytes)
   119  000C98  EE00  F011         	lfsr	0,__pbssCOMRAM
   120  000C9C  0E0C               	movlw	12
   121  000C9E                     clear_0:
   122  000C9E  6AEE               	clrf	postinc0,c
   123  000CA0  06E8               	decf	wreg,f,c
   124  000CA2  E1FD               	bnz	clear_0
   125  000CA4                     end_of_initialization:
   126                           	callstack 0
   127  000CA4                     __end_of__initialization:
   128                           	callstack 0
   129  000CA4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   130  000CA6  6EF8               	movwf	tblptru,c
   131  000CA8  0E08               	movlw	high __Lsmallconst
   132  000CAA  6EF7               	movwf	tblptrh,c
   133  000CAC  0100               	movlb	0
   134  000CAE  EF0D  F004         	goto	_main	;jump to C main() function
   135                           
   136                           	psect	bssCOMRAM
   137  000011                     __pbssCOMRAM:
   138                           	callstack 0
   139  000011                     _unidad:
   140                           	callstack 0
   141  000011                     	ds	2
   142  000013                     _decena:
   143                           	callstack 0
   144  000013                     	ds	2
   145  000015                     _centena:
   146                           	callstack 0
   147  000015                     	ds	2
   148  000017                     _millar:
   149                           	callstack 0
   150  000017                     	ds	2
   151  000019                     _res_ad1:
   152                           	callstack 0
   153  000019                     	ds	2
   154  00001B                     _res_ad0:
   155                           	callstack 0
   156  00001B                     	ds	2
   157                           
   158                           	psect	cstackCOMRAM
   159  000001                     __pcstackCOMRAM:
   160                           	callstack 0
   161  000001                     ?___lwmod:
   162                           	callstack 0
   163  000001                     ENVIA_NIBBLE@dato:
   164                           	callstack 0
   165  000001                     LEER_LCD@aux:
   166                           	callstack 0
   167  000001                     ___lwmod@dividend:
   168                           	callstack 0
   169                           
   170                           ; 2 bytes @ 0x0
   171  000001                     	ds	1
   172  000002                     ENVIA_CHAR@dato:
   173                           	callstack 0
   174  000002                     ENVIA_LCD_CMD@dato:
   175                           	callstack 0
   176                           
   177                           ; 1 bytes @ 0x1
   178  000002                     	ds	1
   179  000003                     ENVIA_CHAR@aux:
   180                           	callstack 0
   181  000003                     ENVIA_LCD_CMD@aux:
   182                           	callstack 0
   183  000003                     ___lwmod@divisor:
   184                           	callstack 0
   185                           
   186                           ; 2 bytes @ 0x2
   187  000003                     	ds	1
   188  000004                     ??_LCD_CONFIG:
   189  000004                     POS_CURSOR@columna:
   190                           	callstack 0
   191  000004                     CURSOR_ONOFF@estado:
   192                           	callstack 0
   193  000004                     ESCRIBE_MENSAJE@cadena:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0x3
   197  000004                     	ds	1
   198  000005                     ??_lcd_init:
   199  000005                     POS_CURSOR@fila:
   200                           	callstack 0
   201  000005                     ___lwmod@counter:
   202                           	callstack 0
   203                           
   204                           ; 1 bytes @ 0x4
   205  000005                     	ds	1
   206  000006                     ?___lwdiv:
   207                           	callstack 0
   208  000006                     ESCRIBE_MENSAJE@tam:
   209                           	callstack 0
   210  000006                     ___lwdiv@dividend:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x5
   214  000006                     	ds	1
   215  000007                     ??_ESCRIBE_MENSAJE:
   216                           
   217                           ; 1 bytes @ 0x6
   218  000007                     	ds	1
   219  000008                     ___lwdiv@divisor:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x7
   223  000008                     	ds	1
   224  000009                     ESCRIBE_MENSAJE@i:
   225                           	callstack 0
   226                           
   227                           ; 1 bytes @ 0x8
   228  000009                     	ds	1
   229  00000A                     ___lwdiv@quotient:
   230                           	callstack 0
   231                           
   232                           ; 2 bytes @ 0x9
   233  00000A                     	ds	2
   234  00000C                     ___lwdiv@counter:
   235                           	callstack 0
   236                           
   237                           ; 1 bytes @ 0xB
   238  00000C                     	ds	1
   239  00000D                     convierte@numero:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0xC
   243  00000D                     	ds	2
   244  00000F                     ??_main:
   245                           
   246                           ; 1 bytes @ 0xE
   247  00000F                     	ds	2
   248                           
   249 ;;
   250 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   251 ;;
   252 ;; *************** function _main *****************
   253 ;; Defined at:
   254 ;;		line 66 in file "maincode.c"
   255 ;; Parameters:    Size  Location     Type
   256 ;;		None
   257 ;; Auto vars:     Size  Location     Type
   258 ;;		None
   259 ;; Return value:  Size  Location     Type
   260 ;;                  1    wreg      void 
   261 ;; Registers used:
   262 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   263 ;; Tracked objects:
   264 ;;		On entry : 0/0
   265 ;;		On exit  : 0/0
   266 ;;		Unchanged: 0/0
   267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   268 ;;      Params:         0       0       0       0       0       0       0       0       0
   269 ;;      Locals:         0       0       0       0       0       0       0       0       0
   270 ;;      Temps:          2       0       0       0       0       0       0       0       0
   271 ;;      Totals:         2       0       0       0       0       0       0       0       0
   272 ;;Total ram usage:        2 bytes
   273 ;; Hardware stack levels required when called:    5
   274 ;; This function calls:
   275 ;;		_ENVIA_CHAR
   276 ;;		_ESCRIBE_MENSAJE
   277 ;;		_POS_CURSOR
   278 ;;		_configuracion
   279 ;;		_convierte
   280 ;; This function is called by:
   281 ;;		Startup code after reset
   282 ;; This function uses a non-reentrant model
   283 ;;
   284                           
   285                           	psect	text0
   286  00081A                     __ptext0:
   287                           	callstack 0
   288  00081A                     _main:
   289                           	callstack 26
   290  00081A                     
   291                           ;maincode.c: 67:     configuracion();
   292  00081A  EC59  F006         	call	_configuracion	;wreg free
   293  00081E                     
   294                           ;maincode.c: 68:     ESCRIBE_MENSAJE("Los q quedaron",14);
   295  00081E  0E01               	movlw	low STR_1
   296  000820  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   297  000822  0E08               	movlw	high STR_1
   298  000824  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   299  000826  0E0E               	movlw	14
   300  000828  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   301  00082A  ECA2  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   302  00082E                     l1145:
   303                           
   304                           ;maincode.c: 70:         ADCON0 = 0x03;
   305  00082E  0E03               	movlw	3
   306  000830  6EC2               	movwf	194,c	;volatile
   307  000832                     l131:
   308  000832  B2C2               	btfsc	194,1,c	;volatile
   309  000834  EF1E  F004         	goto	u291
   310  000838  EF20  F004         	goto	u290
   311  00083C                     u291:
   312  00083C  EF19  F004         	goto	l131
   313  000840                     u290:
   314  000840                     
   315                           ;maincode.c: 73:         res_ad0 = (ADRESH << 8) + ADRESL;
   316  000840  50C4               	movf	196,w,c	;volatile
   317  000842  6E10               	movwf	(??_main+1)^0,c
   318  000844  6A0F               	clrf	??_main^0,c
   319  000846  50C3               	movf	195,w,c	;volatile
   320  000848  240F               	addwf	??_main^0,w,c
   321  00084A  6E1B               	movwf	_res_ad0^0,c
   322  00084C  0E00               	movlw	0
   323  00084E  2010               	addwfc	(??_main+1)^0,w,c
   324  000850  6E1C               	movwf	(_res_ad0+1)^0,c
   325  000852                     
   326                           ;maincode.c: 74:         ADCON0 = 0x07;
   327  000852  0E07               	movlw	7
   328  000854  6EC2               	movwf	194,c	;volatile
   329  000856                     l134:
   330  000856  B2C2               	btfsc	194,1,c	;volatile
   331  000858  EF30  F004         	goto	u301
   332  00085C  EF32  F004         	goto	u300
   333  000860                     u301:
   334  000860  EF2B  F004         	goto	l134
   335  000864                     u300:
   336  000864                     
   337                           ;maincode.c: 76:         res_ad1 = (ADRESH << 8) + ADRESL;
   338  000864  50C4               	movf	196,w,c	;volatile
   339  000866  6E10               	movwf	(??_main+1)^0,c
   340  000868  6A0F               	clrf	??_main^0,c
   341  00086A  50C3               	movf	195,w,c	;volatile
   342  00086C  240F               	addwf	??_main^0,w,c
   343  00086E  6E19               	movwf	_res_ad1^0,c
   344  000870  0E00               	movlw	0
   345  000872  2010               	addwfc	(??_main+1)^0,w,c
   346  000874  6E1A               	movwf	(_res_ad1+1)^0,c
   347  000876                     
   348                           ;maincode.c: 77:         POS_CURSOR(2,0);
   349  000876  0E00               	movlw	0
   350  000878  6E04               	movwf	POS_CURSOR@columna^0,c
   351  00087A  0E02               	movlw	2
   352  00087C  ECC1  F005         	call	_POS_CURSOR
   353  000880                     
   354                           ;maincode.c: 78:         ESCRIBE_MENSAJE("C0:",3);
   355  000880  0E15               	movlw	low STR_2
   356  000882  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   357  000884  0E08               	movlw	high STR_2
   358  000886  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   359  000888  0E03               	movlw	3
   360  00088A  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   361  00088C  ECA2  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   362  000890                     
   363                           ;maincode.c: 79:         convierte(res_ad0);
   364  000890  C01B  F00D         	movff	_res_ad0,convierte@numero
   365  000894  C01C  F00E         	movff	_res_ad0+1,convierte@numero+1
   366  000898  EC80  F004         	call	_convierte	;wreg free
   367  00089C                     
   368                           ;maincode.c: 80:         ENVIA_CHAR(millar+0x30);
   369  00089C  5017               	movf	_millar^0,w,c
   370  00089E  0F30               	addlw	48
   371  0008A0  ECF8  F005         	call	_ENVIA_CHAR
   372  0008A4                     
   373                           ;maincode.c: 81:         ENVIA_CHAR(centena+0x30);
   374  0008A4  5015               	movf	_centena^0,w,c
   375  0008A6  0F30               	addlw	48
   376  0008A8  ECF8  F005         	call	_ENVIA_CHAR
   377  0008AC                     
   378                           ;maincode.c: 82:         ENVIA_CHAR(decena+0x30);
   379  0008AC  5013               	movf	_decena^0,w,c
   380  0008AE  0F30               	addlw	48
   381  0008B0  ECF8  F005         	call	_ENVIA_CHAR
   382  0008B4                     
   383                           ;maincode.c: 83:         ENVIA_CHAR(unidad+0x30);
   384  0008B4  5011               	movf	_unidad^0,w,c
   385  0008B6  0F30               	addlw	48
   386  0008B8  ECF8  F005         	call	_ENVIA_CHAR
   387  0008BC                     
   388                           ;maincode.c: 84:         ESCRIBE_MENSAJE(" C1:",4);
   389  0008BC  0E10               	movlw	low STR_3
   390  0008BE  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   391  0008C0  0E08               	movlw	high STR_3
   392  0008C2  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   393  0008C4  0E04               	movlw	4
   394  0008C6  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   395  0008C8  ECA2  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   396  0008CC                     
   397                           ;maincode.c: 85:         convierte(res_ad1);
   398  0008CC  C019  F00D         	movff	_res_ad1,convierte@numero
   399  0008D0  C01A  F00E         	movff	_res_ad1+1,convierte@numero+1
   400  0008D4  EC80  F004         	call	_convierte	;wreg free
   401  0008D8                     
   402                           ;maincode.c: 86:         ENVIA_CHAR(millar+0x30);
   403  0008D8  5017               	movf	_millar^0,w,c
   404  0008DA  0F30               	addlw	48
   405  0008DC  ECF8  F005         	call	_ENVIA_CHAR
   406  0008E0                     
   407                           ;maincode.c: 87:         ENVIA_CHAR(centena+0x30);
   408  0008E0  5015               	movf	_centena^0,w,c
   409  0008E2  0F30               	addlw	48
   410  0008E4  ECF8  F005         	call	_ENVIA_CHAR
   411  0008E8                     
   412                           ;maincode.c: 88:         ENVIA_CHAR(decena+0x30);
   413  0008E8  5013               	movf	_decena^0,w,c
   414  0008EA  0F30               	addlw	48
   415  0008EC  ECF8  F005         	call	_ENVIA_CHAR
   416  0008F0                     
   417                           ;maincode.c: 89:         ENVIA_CHAR(unidad+0x30);
   418  0008F0  5011               	movf	_unidad^0,w,c
   419  0008F2  0F30               	addlw	48
   420  0008F4  ECF8  F005         	call	_ENVIA_CHAR
   421  0008F8  EF17  F004         	goto	l1145
   422  0008FC  EF00  F000         	goto	start
   423  000900                     __end_of_main:
   424                           	callstack 0
   425                           
   426 ;; *************** function _convierte *****************
   427 ;; Defined at:
   428 ;;		line 42 in file "maincode.c"
   429 ;; Parameters:    Size  Location     Type
   430 ;;  numero          2   12[COMRAM] unsigned int 
   431 ;; Auto vars:     Size  Location     Type
   432 ;;		None
   433 ;; Return value:  Size  Location     Type
   434 ;;                  1    wreg      void 
   435 ;; Registers used:
   436 ;;		wreg, status,2, status,0, cstack
   437 ;; Tracked objects:
   438 ;;		On entry : 0/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   442 ;;      Params:         2       0       0       0       0       0       0       0       0
   443 ;;      Locals:         0       0       0       0       0       0       0       0       0
   444 ;;      Temps:          0       0       0       0       0       0       0       0       0
   445 ;;      Totals:         2       0       0       0       0       0       0       0       0
   446 ;;Total ram usage:        2 bytes
   447 ;; Hardware stack levels used:    1
   448 ;; Hardware stack levels required when called:    1
   449 ;; This function calls:
   450 ;;		___lwdiv
   451 ;;		___lwmod
   452 ;; This function is called by:
   453 ;;		_main
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           	psect	text1
   458  000900                     __ptext1:
   459                           	callstack 0
   460  000900                     _convierte:
   461                           	callstack 29
   462  000900                     
   463                           ;maincode.c: 43:     millar = numero /1000;
   464  000900  C00D  F006         	movff	convierte@numero,___lwdiv@dividend
   465  000904  C00E  F007         	movff	convierte@numero+1,___lwdiv@dividend+1
   466  000908  0E03               	movlw	3
   467  00090A  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   468  00090C  0EE8               	movlw	232
   469  00090E  6E08               	movwf	___lwdiv@divisor^0,c
   470  000910  ECCD  F004         	call	___lwdiv	;wreg free
   471  000914  C006  F017         	movff	?___lwdiv,_millar
   472  000918  C007  F018         	movff	?___lwdiv+1,_millar+1
   473                           
   474                           ;maincode.c: 44:     centena = (numero % 1000) / 100;
   475  00091C  0E03               	movlw	3
   476  00091E  6E04               	movwf	(___lwmod@divisor+1)^0,c
   477  000920  0EE8               	movlw	232
   478  000922  6E03               	movwf	___lwmod@divisor^0,c
   479  000924  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   480  000928  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   481  00092C  EC40  F005         	call	___lwmod	;wreg free
   482  000930  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   483  000934  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   484  000938  0E00               	movlw	0
   485  00093A  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   486  00093C  0E64               	movlw	100
   487  00093E  6E08               	movwf	___lwdiv@divisor^0,c
   488  000940  ECCD  F004         	call	___lwdiv	;wreg free
   489  000944  C006  F015         	movff	?___lwdiv,_centena
   490  000948  C007  F016         	movff	?___lwdiv+1,_centena+1
   491                           
   492                           ;maincode.c: 45:     decena = (numero % 100) / 10;
   493  00094C  0E00               	movlw	0
   494  00094E  6E04               	movwf	(___lwmod@divisor+1)^0,c
   495  000950  0E64               	movlw	100
   496  000952  6E03               	movwf	___lwmod@divisor^0,c
   497  000954  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   498  000958  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   499  00095C  EC40  F005         	call	___lwmod	;wreg free
   500  000960  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   501  000964  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   502  000968  0E00               	movlw	0
   503  00096A  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   504  00096C  0E0A               	movlw	10
   505  00096E  6E08               	movwf	___lwdiv@divisor^0,c
   506  000970  ECCD  F004         	call	___lwdiv	;wreg free
   507  000974  C006  F013         	movff	?___lwdiv,_decena
   508  000978  C007  F014         	movff	?___lwdiv+1,_decena+1
   509                           
   510                           ;maincode.c: 46:     unidad = numero % 10;
   511  00097C  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   512  000980  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   513  000984  0E00               	movlw	0
   514  000986  6E04               	movwf	(___lwmod@divisor+1)^0,c
   515  000988  0E0A               	movlw	10
   516  00098A  6E03               	movwf	___lwmod@divisor^0,c
   517  00098C  EC40  F005         	call	___lwmod	;wreg free
   518  000990  C001  F011         	movff	?___lwmod,_unidad
   519  000994  C002  F012         	movff	?___lwmod+1,_unidad+1
   520  000998  0012               	return		;funcret
   521  00099A                     __end_of_convierte:
   522                           	callstack 0
   523                           
   524 ;; *************** function ___lwmod *****************
   525 ;; Defined at:
   526 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\lwmod.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;  dividend        2    0[COMRAM] unsigned int 
   529 ;;  divisor         2    2[COMRAM] unsigned int 
   530 ;; Auto vars:     Size  Location     Type
   531 ;;  counter         1    4[COMRAM] unsigned char 
   532 ;; Return value:  Size  Location     Type
   533 ;;                  2    0[COMRAM] unsigned int 
   534 ;; Registers used:
   535 ;;		wreg, status,2, status,0
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   541 ;;      Params:         4       0       0       0       0       0       0       0       0
   542 ;;      Locals:         1       0       0       0       0       0       0       0       0
   543 ;;      Temps:          0       0       0       0       0       0       0       0       0
   544 ;;      Totals:         5       0       0       0       0       0       0       0       0
   545 ;;Total ram usage:        5 bytes
   546 ;; Hardware stack levels used:    1
   547 ;; This function calls:
   548 ;;		Nothing
   549 ;; This function is called by:
   550 ;;		_convierte
   551 ;; This function uses a non-reentrant model
   552 ;;
   553                           
   554                           	psect	text2
   555  000A80                     __ptext2:
   556                           	callstack 0
   557  000A80                     ___lwmod:
   558                           	callstack 29
   559  000A80  5003               	movf	___lwmod@divisor^0,w,c
   560  000A82  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   561  000A84  B4D8               	btfsc	status,2,c
   562  000A86  EF47  F005         	goto	u231
   563  000A8A  EF49  F005         	goto	u230
   564  000A8E                     u231:
   565  000A8E  EF6D  F005         	goto	l643
   566  000A92                     u230:
   567  000A92  0E01               	movlw	1
   568  000A94  6E05               	movwf	___lwmod@counter^0,c
   569  000A96  EF51  F005         	goto	l1113
   570  000A9A                     l1111:
   571  000A9A  90D8               	bcf	status,0,c
   572  000A9C  3603               	rlcf	___lwmod@divisor^0,f,c
   573  000A9E  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   574  000AA0  2A05               	incf	___lwmod@counter^0,f,c
   575  000AA2                     l1113:
   576  000AA2  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   577  000AA4  EF56  F005         	goto	u241
   578  000AA8  EF58  F005         	goto	u240
   579  000AAC                     u241:
   580  000AAC  EF4D  F005         	goto	l1111
   581  000AB0                     u240:
   582  000AB0                     l1115:
   583  000AB0  5003               	movf	___lwmod@divisor^0,w,c
   584  000AB2  5C01               	subwf	___lwmod@dividend^0,w,c
   585  000AB4  5004               	movf	(___lwmod@divisor+1)^0,w,c
   586  000AB6  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   587  000AB8  A0D8               	btfss	status,0,c
   588  000ABA  EF61  F005         	goto	u251
   589  000ABE  EF63  F005         	goto	u250
   590  000AC2                     u251:
   591  000AC2  EF67  F005         	goto	l1119
   592  000AC6                     u250:
   593  000AC6  5003               	movf	___lwmod@divisor^0,w,c
   594  000AC8  5E01               	subwf	___lwmod@dividend^0,f,c
   595  000ACA  5004               	movf	(___lwmod@divisor+1)^0,w,c
   596  000ACC  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   597  000ACE                     l1119:
   598  000ACE  90D8               	bcf	status,0,c
   599  000AD0  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   600  000AD2  3203               	rrcf	___lwmod@divisor^0,f,c
   601  000AD4  2E05               	decfsz	___lwmod@counter^0,f,c
   602  000AD6  EF58  F005         	goto	l1115
   603  000ADA                     l643:
   604  000ADA  C001  F001         	movff	___lwmod@dividend,?___lwmod
   605  000ADE  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   606  000AE2  0012               	return		;funcret
   607  000AE4                     __end_of___lwmod:
   608                           	callstack 0
   609                           
   610 ;; *************** function ___lwdiv *****************
   611 ;; Defined at:
   612 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\lwdiv.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;  dividend        2    5[COMRAM] unsigned int 
   615 ;;  divisor         2    7[COMRAM] unsigned int 
   616 ;; Auto vars:     Size  Location     Type
   617 ;;  quotient        2    9[COMRAM] unsigned int 
   618 ;;  counter         1   11[COMRAM] unsigned char 
   619 ;; Return value:  Size  Location     Type
   620 ;;                  2    5[COMRAM] unsigned int 
   621 ;; Registers used:
   622 ;;		wreg, status,2, status,0
   623 ;; Tracked objects:
   624 ;;		On entry : 0/0
   625 ;;		On exit  : 0/0
   626 ;;		Unchanged: 0/0
   627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   628 ;;      Params:         4       0       0       0       0       0       0       0       0
   629 ;;      Locals:         3       0       0       0       0       0       0       0       0
   630 ;;      Temps:          0       0       0       0       0       0       0       0       0
   631 ;;      Totals:         7       0       0       0       0       0       0       0       0
   632 ;;Total ram usage:        7 bytes
   633 ;; Hardware stack levels used:    1
   634 ;; This function calls:
   635 ;;		Nothing
   636 ;; This function is called by:
   637 ;;		_convierte
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641                           	psect	text3
   642  00099A                     __ptext3:
   643                           	callstack 0
   644  00099A                     ___lwdiv:
   645                           	callstack 29
   646  00099A  0E00               	movlw	0
   647  00099C  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
   648  00099E  0E00               	movlw	0
   649  0009A0  6E0A               	movwf	___lwdiv@quotient^0,c
   650  0009A2  5008               	movf	___lwdiv@divisor^0,w,c
   651  0009A4  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
   652  0009A6  B4D8               	btfsc	status,2,c
   653  0009A8  EFD8  F004         	goto	u201
   654  0009AC  EFDA  F004         	goto	u200
   655  0009B0                     u201:
   656  0009B0  EF02  F005         	goto	l633
   657  0009B4                     u200:
   658  0009B4  0E01               	movlw	1
   659  0009B6  6E0C               	movwf	___lwdiv@counter^0,c
   660  0009B8  EFE2  F004         	goto	l1093
   661  0009BC                     l1091:
   662  0009BC  90D8               	bcf	status,0,c
   663  0009BE  3608               	rlcf	___lwdiv@divisor^0,f,c
   664  0009C0  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
   665  0009C2  2A0C               	incf	___lwdiv@counter^0,f,c
   666  0009C4                     l1093:
   667  0009C4  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
   668  0009C6  EFE7  F004         	goto	u211
   669  0009CA  EFE9  F004         	goto	u210
   670  0009CE                     u211:
   671  0009CE  EFDE  F004         	goto	l1091
   672  0009D2                     u210:
   673  0009D2                     l1095:
   674  0009D2  90D8               	bcf	status,0,c
   675  0009D4  360A               	rlcf	___lwdiv@quotient^0,f,c
   676  0009D6  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
   677  0009D8  5008               	movf	___lwdiv@divisor^0,w,c
   678  0009DA  5C06               	subwf	___lwdiv@dividend^0,w,c
   679  0009DC  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   680  0009DE  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
   681  0009E0  A0D8               	btfss	status,0,c
   682  0009E2  EFF5  F004         	goto	u221
   683  0009E6  EFF7  F004         	goto	u220
   684  0009EA                     u221:
   685  0009EA  EFFC  F004         	goto	l1103
   686  0009EE                     u220:
   687  0009EE  5008               	movf	___lwdiv@divisor^0,w,c
   688  0009F0  5E06               	subwf	___lwdiv@dividend^0,f,c
   689  0009F2  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   690  0009F4  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
   691  0009F6  800A               	bsf	___lwdiv@quotient^0,0,c
   692  0009F8                     l1103:
   693  0009F8  90D8               	bcf	status,0,c
   694  0009FA  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
   695  0009FC  3208               	rrcf	___lwdiv@divisor^0,f,c
   696  0009FE  2E0C               	decfsz	___lwdiv@counter^0,f,c
   697  000A00  EFE9  F004         	goto	l1095
   698  000A04                     l633:
   699  000A04  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
   700  000A08  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
   701  000A0C  0012               	return		;funcret
   702  000A0E                     __end_of___lwdiv:
   703                           	callstack 0
   704                           
   705 ;; *************** function _configuracion *****************
   706 ;; Defined at:
   707 ;;		line 58 in file "maincode.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;		None
   710 ;; Auto vars:     Size  Location     Type
   711 ;;		None
   712 ;; Return value:  Size  Location     Type
   713 ;;                  1    wreg      void 
   714 ;; Registers used:
   715 ;;		wreg, status,2, status,0, cstack
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   721 ;;      Params:         0       0       0       0       0       0       0       0       0
   722 ;;      Locals:         0       0       0       0       0       0       0       0       0
   723 ;;      Temps:          0       0       0       0       0       0       0       0       0
   724 ;;      Totals:         0       0       0       0       0       0       0       0       0
   725 ;;Total ram usage:        0 bytes
   726 ;; Hardware stack levels used:    1
   727 ;; Hardware stack levels required when called:    4
   728 ;; This function calls:
   729 ;;		_lcd_init
   730 ;; This function is called by:
   731 ;;		_main
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735                           	psect	text4
   736  000CB2                     __ptext4:
   737                           	callstack 0
   738  000CB2                     _configuracion:
   739                           	callstack 26
   740  000CB2                     
   741                           ;maincode.c: 60:     ADCON2 = 0xA4;
   742  000CB2  0EA4               	movlw	164
   743  000CB4  6EC0               	movwf	192,c	;volatile
   744                           
   745                           ;maincode.c: 61:     ADCON1 = 0x0D;
   746  000CB6  0E0D               	movlw	13
   747  000CB8  6EC1               	movwf	193,c	;volatile
   748  000CBA                     
   749                           ;maincode.c: 62:     ADCON0bits.ADON = 1;
   750  000CBA  80C2               	bsf	194,0,c	;volatile
   751  000CBC                     
   752                           ;maincode.c: 63:     lcd_init();
   753  000CBC  EC2A  F006         	call	_lcd_init	;wreg free
   754  000CC0  0012               	return		;funcret
   755  000CC2                     __end_of_configuracion:
   756                           	callstack 0
   757                           
   758 ;; *************** function _lcd_init *****************
   759 ;; Defined at:
   760 ;;		line 49 in file "maincode.c"
   761 ;; Parameters:    Size  Location     Type
   762 ;;		None
   763 ;; Auto vars:     Size  Location     Type
   764 ;;		None
   765 ;; Return value:  Size  Location     Type
   766 ;;                  1    wreg      void 
   767 ;; Registers used:
   768 ;;		wreg, status,2, status,0, cstack
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   774 ;;      Params:         0       0       0       0       0       0       0       0       0
   775 ;;      Locals:         0       0       0       0       0       0       0       0       0
   776 ;;      Temps:          1       0       0       0       0       0       0       0       0
   777 ;;      Totals:         1       0       0       0       0       0       0       0       0
   778 ;;Total ram usage:        1 bytes
   779 ;; Hardware stack levels used:    1
   780 ;; Hardware stack levels required when called:    3
   781 ;; This function calls:
   782 ;;		_BORRAR_LCD
   783 ;;		_CURSOR_HOME
   784 ;;		_CURSOR_ONOFF
   785 ;;		_LCD_CONFIG
   786 ;; This function is called by:
   787 ;;		_configuracion
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           	psect	text5
   792  000C54                     __ptext5:
   793                           	callstack 0
   794  000C54                     _lcd_init:
   795                           	callstack 26
   796  000C54                     
   797                           ;maincode.c: 50:     TRISD = 0x00;
   798  000C54  0E00               	movlw	0
   799  000C56  6E95               	movwf	149,c	;volatile
   800  000C58                     
   801                           ;maincode.c: 51:     LCD_CONFIG();
   802  000C58  EC72  F005         	call	_LCD_CONFIG	;wreg free
   803  000C5C                     
   804                           ;maincode.c: 52:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   805  000C5C  0EEA               	movlw	234
   806  000C5E  6E05               	movwf	??_lcd_init^0,c
   807  000C60  0EC3               	movlw	195
   808  000C62                     u317:
   809  000C62  2EE8               	decfsz	wreg,f,c
   810  000C64  D7FE               	bra	u317
   811  000C66  2E05               	decfsz	??_lcd_init^0,f,c
   812  000C68  D7FC               	bra	u317
   813  000C6A  F000               	nop	
   814  000C6C                     
   815                           ;maincode.c: 53:     BORRAR_LCD();
   816  000C6C  EC65  F006         	call	_BORRAR_LCD	;wreg free
   817  000C70                     
   818                           ;maincode.c: 54:     CURSOR_HOME();
   819  000C70  EC61  F006         	call	_CURSOR_HOME	;wreg free
   820  000C74                     
   821                           ;maincode.c: 55:     CURSOR_ONOFF(1);
   822  000C74  0E01               	movlw	1
   823  000C76  EC12  F006         	call	_CURSOR_ONOFF
   824  000C7A  0012               	return		;funcret
   825  000C7C                     __end_of_lcd_init:
   826                           	callstack 0
   827                           
   828 ;; *************** function _LCD_CONFIG *****************
   829 ;; Defined at:
   830 ;;		line 72 in file "LCD.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, status,2, status,0, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   844 ;;      Params:         0       0       0       0       0       0       0       0       0
   845 ;;      Locals:         0       0       0       0       0       0       0       0       0
   846 ;;      Temps:          1       0       0       0       0       0       0       0       0
   847 ;;      Totals:         1       0       0       0       0       0       0       0       0
   848 ;;Total ram usage:        1 bytes
   849 ;; Hardware stack levels used:    1
   850 ;; Hardware stack levels required when called:    2
   851 ;; This function calls:
   852 ;;		_ENVIA_LCD_CMD
   853 ;;		_ENVIA_NIBBLE
   854 ;; This function is called by:
   855 ;;		_lcd_init
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text6
   860  000AE4                     __ptext6:
   861                           	callstack 0
   862  000AE4                     _LCD_CONFIG:
   863                           	callstack 26
   864  000AE4                     
   865                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   866  000AE4  908C               	bcf	140,0,c	;volatile
   867                           
   868                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   869  000AE6  928C               	bcf	140,1,c	;volatile
   870  000AE8                     
   871                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   872  000AE8  0E30               	movlw	48
   873  000AEA  EC3E  F006         	call	_ENVIA_NIBBLE
   874  000AEE                     
   875                           ;LCD.c: 77:         _delay(24000);
   876  000AEE  0E20               	movlw	32
   877  000AF0  6E04               	movwf	??_LCD_CONFIG^0,c
   878  000AF2  0E2A               	movlw	42
   879  000AF4                     u327:
   880  000AF4  2EE8               	decfsz	wreg,f,c
   881  000AF6  D7FE               	bra	u327
   882  000AF8  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   883  000AFA  D7FC               	bra	u327
   884  000AFC                     
   885                           ;LCD.c: 78:         _delay(24000);
   886  000AFC  0E20               	movlw	32
   887  000AFE  6E04               	movwf	??_LCD_CONFIG^0,c
   888  000B00  0E2A               	movlw	42
   889  000B02                     u337:
   890  000B02  2EE8               	decfsz	wreg,f,c
   891  000B04  D7FE               	bra	u337
   892  000B06  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   893  000B08  D7FC               	bra	u337
   894                           
   895                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   896  000B0A  0E30               	movlw	48
   897  000B0C  EC3E  F006         	call	_ENVIA_NIBBLE
   898  000B10                     
   899                           ;LCD.c: 83:  _delay(1200);
   900  000B10  0EF0               	movlw	240
   901  000B12                     u347:
   902  000B12  D000               	nop2	
   903  000B14  2EE8               	decfsz	wreg,f,c
   904  000B16  D7FD               	bra	u347
   905  000B18                     
   906                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   907  000B18  0E30               	movlw	48
   908  000B1A  EC3E  F006         	call	_ENVIA_NIBBLE
   909  000B1E                     
   910                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   911  000B1E  0E20               	movlw	32
   912  000B20  EC3E  F006         	call	_ENVIA_NIBBLE
   913  000B24                     
   914                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   915  000B24  0E01               	movlw	1
   916  000B26  ECDE  F005         	call	_ENVIA_LCD_CMD
   917  000B2A                     
   918                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   919  000B2A  0E28               	movlw	40
   920  000B2C  ECDE  F005         	call	_ENVIA_LCD_CMD
   921  000B30                     
   922                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   923  000B30  0E0F               	movlw	15
   924  000B32  ECDE  F005         	call	_ENVIA_LCD_CMD
   925  000B36                     
   926                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   927  000B36  0E06               	movlw	6
   928  000B38  ECDE  F005         	call	_ENVIA_LCD_CMD
   929  000B3C                     
   930                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   931  000B3C  0E01               	movlw	1
   932  000B3E  ECDE  F005         	call	_ENVIA_LCD_CMD
   933  000B42  0012               	return		;funcret
   934  000B44                     __end_of_LCD_CONFIG:
   935                           	callstack 0
   936                           
   937 ;; *************** function _CURSOR_ONOFF *****************
   938 ;; Defined at:
   939 ;;		line 35 in file "LCD.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;  estado          1    wreg     unsigned char 
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  estado          1    3[COMRAM] unsigned char 
   944 ;; Return value:  Size  Location     Type
   945 ;;                  1    wreg      void 
   946 ;; Registers used:
   947 ;;		wreg, status,2, status,0, cstack
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   953 ;;      Params:         0       0       0       0       0       0       0       0       0
   954 ;;      Locals:         1       0       0       0       0       0       0       0       0
   955 ;;      Temps:          0       0       0       0       0       0       0       0       0
   956 ;;      Totals:         1       0       0       0       0       0       0       0       0
   957 ;;Total ram usage:        1 bytes
   958 ;; Hardware stack levels used:    1
   959 ;; Hardware stack levels required when called:    2
   960 ;; This function calls:
   961 ;;		_ENVIA_LCD_CMD
   962 ;; This function is called by:
   963 ;;		_lcd_init
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           	psect	text7
   968  000C24                     __ptext7:
   969                           	callstack 0
   970  000C24                     _CURSOR_ONOFF:
   971                           	callstack 26
   972                           
   973                           ;incstack = 0
   974                           ;CURSOR_ONOFF@estado stored from wreg
   975  000C24  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   976  000C26                     
   977                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   978  000C26  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   979  000C28  A4D8               	btfss	status,2,c
   980  000C2A  EF19  F006         	goto	u21
   981  000C2E  EF1B  F006         	goto	u20
   982  000C32                     u21:
   983  000C32  EF1E  F006         	goto	l889
   984  000C36                     u20:
   985  000C36  0E0E               	movlw	14
   986  000C38  ECDE  F005         	call	_ENVIA_LCD_CMD
   987  000C3C                     l889:
   988                           
   989                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   990  000C3C  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   991  000C3E  A4D8               	btfss	status,2,c
   992  000C40  EF24  F006         	goto	u31
   993  000C44  EF26  F006         	goto	u30
   994  000C48                     u31:
   995  000C48  EF29  F006         	goto	l42
   996  000C4C                     u30:
   997  000C4C  0E0C               	movlw	12
   998  000C4E  ECDE  F005         	call	_ENVIA_LCD_CMD
   999  000C52                     l42:
  1000  000C52  0012               	return		;funcret
  1001  000C54                     __end_of_CURSOR_ONOFF:
  1002                           	callstack 0
  1003                           
  1004 ;; *************** function _CURSOR_HOME *****************
  1005 ;; Defined at:
  1006 ;;		line 30 in file "LCD.c"
  1007 ;; Parameters:    Size  Location     Type
  1008 ;;		None
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;		None
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  1    wreg      void 
  1013 ;; Registers used:
  1014 ;;		wreg, status,2, status,0, cstack
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1020 ;;      Params:         0       0       0       0       0       0       0       0       0
  1021 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1023 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1024 ;;Total ram usage:        0 bytes
  1025 ;; Hardware stack levels used:    1
  1026 ;; Hardware stack levels required when called:    2
  1027 ;; This function calls:
  1028 ;;		_ENVIA_LCD_CMD
  1029 ;; This function is called by:
  1030 ;;		_lcd_init
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           	psect	text8
  1035  000CC2                     __ptext8:
  1036                           	callstack 0
  1037  000CC2                     _CURSOR_HOME:
  1038                           	callstack 26
  1039  000CC2                     
  1040                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1041  000CC2  0E02               	movlw	2
  1042  000CC4  ECDE  F005         	call	_ENVIA_LCD_CMD
  1043  000CC8  0012               	return		;funcret
  1044  000CCA                     __end_of_CURSOR_HOME:
  1045                           	callstack 0
  1046                           
  1047 ;; *************** function _BORRAR_LCD *****************
  1048 ;; Defined at:
  1049 ;;		line 67 in file "LCD.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;		None
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;		None
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      void 
  1056 ;; Registers used:
  1057 ;;		wreg, status,2, status,0, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1063 ;;      Params:         0       0       0       0       0       0       0       0       0
  1064 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1065 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1066 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1067 ;;Total ram usage:        0 bytes
  1068 ;; Hardware stack levels used:    1
  1069 ;; Hardware stack levels required when called:    2
  1070 ;; This function calls:
  1071 ;;		_ENVIA_LCD_CMD
  1072 ;; This function is called by:
  1073 ;;		_lcd_init
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text9
  1078  000CCA                     __ptext9:
  1079                           	callstack 0
  1080  000CCA                     _BORRAR_LCD:
  1081                           	callstack 26
  1082  000CCA                     
  1083                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1084  000CCA  0E01               	movlw	1
  1085  000CCC  ECDE  F005         	call	_ENVIA_LCD_CMD
  1086  000CD0  0012               	return		;funcret
  1087  000CD2                     __end_of_BORRAR_LCD:
  1088                           	callstack 0
  1089                           
  1090 ;; *************** function _POS_CURSOR *****************
  1091 ;; Defined at:
  1092 ;;		line 6 in file "LCD.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;  fila            1    wreg     unsigned char 
  1095 ;;  columna         1    3[COMRAM] unsigned char 
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;  fila            1    4[COMRAM] unsigned char 
  1098 ;; Return value:  Size  Location     Type
  1099 ;;                  1    wreg      void 
  1100 ;; Registers used:
  1101 ;;		wreg, status,2, status,0, cstack
  1102 ;; Tracked objects:
  1103 ;;		On entry : 0/0
  1104 ;;		On exit  : 0/0
  1105 ;;		Unchanged: 0/0
  1106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1107 ;;      Params:         1       0       0       0       0       0       0       0       0
  1108 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1109 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1110 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1111 ;;Total ram usage:        2 bytes
  1112 ;; Hardware stack levels used:    1
  1113 ;; Hardware stack levels required when called:    2
  1114 ;; This function calls:
  1115 ;;		_ENVIA_LCD_CMD
  1116 ;; This function is called by:
  1117 ;;		_main
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           	psect	text10
  1122  000B82                     __ptext10:
  1123                           	callstack 0
  1124  000B82                     _POS_CURSOR:
  1125                           	callstack 28
  1126                           
  1127                           ;incstack = 0
  1128                           ;POS_CURSOR@fila stored from wreg
  1129  000B82  6E05               	movwf	POS_CURSOR@fila^0,c
  1130  000B84                     
  1131                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1132  000B84  0405               	decf	POS_CURSOR@fila^0,w,c
  1133  000B86  A4D8               	btfss	status,2,c
  1134  000B88  EFC8  F005         	goto	u261
  1135  000B8C  EFCA  F005         	goto	u260
  1136  000B90                     u261:
  1137  000B90  EFD0  F005         	goto	l1127
  1138  000B94                     u260:
  1139  000B94                     
  1140                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1141  000B94  5004               	movf	POS_CURSOR@columna^0,w,c
  1142  000B96  0F80               	addlw	128
  1143  000B98  ECDE  F005         	call	_ENVIA_LCD_CMD
  1144                           
  1145                           ;LCD.c: 11:  }
  1146  000B9C  EFDD  F005         	goto	l24
  1147  000BA0                     l1127:
  1148  000BA0  0E02               	movlw	2
  1149  000BA2  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1150  000BA4  A4D8               	btfss	status,2,c
  1151  000BA6  EFD7  F005         	goto	u271
  1152  000BAA  EFD9  F005         	goto	u270
  1153  000BAE                     u271:
  1154  000BAE  EFDD  F005         	goto	l24
  1155  000BB2                     u270:
  1156  000BB2                     
  1157                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1158  000BB2  5004               	movf	POS_CURSOR@columna^0,w,c
  1159  000BB4  0FC0               	addlw	192
  1160  000BB6  ECDE  F005         	call	_ENVIA_LCD_CMD
  1161  000BBA                     l24:
  1162  000BBA  0012               	return		;funcret
  1163  000BBC                     __end_of_POS_CURSOR:
  1164                           	callstack 0
  1165                           
  1166 ;; *************** function _ENVIA_LCD_CMD *****************
  1167 ;; Defined at:
  1168 ;;		line 104 in file "LCD.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;  dato            1    wreg     unsigned char 
  1171 ;; Auto vars:     Size  Location     Type
  1172 ;;  dato            1    1[COMRAM] unsigned char 
  1173 ;;  aux             1    2[COMRAM] unsigned char 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg, status,2, status,0, cstack
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1183 ;;      Params:         0       0       0       0       0       0       0       0       0
  1184 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1185 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1186 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1187 ;;Total ram usage:        2 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; Hardware stack levels required when called:    1
  1190 ;; This function calls:
  1191 ;;		_ENVIA_NIBBLE
  1192 ;;		_LEER_LCD
  1193 ;; This function is called by:
  1194 ;;		_POS_CURSOR
  1195 ;;		_CURSOR_HOME
  1196 ;;		_CURSOR_ONOFF
  1197 ;;		_BORRAR_LCD
  1198 ;;		_LCD_CONFIG
  1199 ;;		_BLINK_CURSOR
  1200 ;;		_DISPLAY_ONOFF
  1201 ;;		_GENERACARACTER
  1202 ;; This function uses a non-reentrant model
  1203 ;;
  1204                           
  1205                           	psect	text11
  1206  000BBC                     __ptext11:
  1207                           	callstack 0
  1208  000BBC                     _ENVIA_LCD_CMD:
  1209                           	callstack 26
  1210                           
  1211                           ;incstack = 0
  1212                           ;ENVIA_LCD_CMD@dato stored from wreg
  1213  000BBC  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1214  000BBE                     
  1215                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1216  000BBE  908C               	bcf	140,0,c	;volatile
  1217  000BC0                     
  1218                           ;LCD.c: 108:  LEER_LCD();
  1219  000BC0  EC07  F005         	call	_LEER_LCD	;wreg free
  1220  000BC4                     
  1221                           ;LCD.c: 109:  TRISD = 0b00000000;
  1222  000BC4  0E00               	movlw	0
  1223  000BC6  6E95               	movwf	149,c	;volatile
  1224  000BC8                     
  1225                           ;LCD.c: 111:         _delay(1200);
  1226  000BC8  0EF0               	movlw	240
  1227  000BCA                     u357:
  1228  000BCA  D000               	nop2	
  1229  000BCC  2EE8               	decfsz	wreg,f,c
  1230  000BCE  D7FD               	bra	u357
  1231  000BD0                     
  1232                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1233  000BD0  928C               	bcf	140,1,c	;volatile
  1234  000BD2                     
  1235                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1236  000BD2  948C               	bcf	140,2,c	;volatile
  1237  000BD4                     
  1238                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1239  000BD4  908C               	bcf	140,0,c	;volatile
  1240  000BD6                     
  1241                           ;LCD.c: 115:  aux = dato & 0xF0;
  1242  000BD6  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1243  000BD8  0BF0               	andlw	240
  1244  000BDA  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1245  000BDC                     
  1246                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1247  000BDC  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1248  000BDE  EC3E  F006         	call	_ENVIA_NIBBLE
  1249  000BE2                     
  1250                           ;LCD.c: 117:  aux = dato<<4;
  1251  000BE2  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1252  000BE4  0BF0               	andlw	240
  1253  000BE6  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1254  000BE8                     
  1255                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1256  000BE8  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1257  000BEA  EC3E  F006         	call	_ENVIA_NIBBLE
  1258  000BEE  0012               	return		;funcret
  1259  000BF0                     __end_of_ENVIA_LCD_CMD:
  1260                           	callstack 0
  1261                           
  1262 ;; *************** function _ESCRIBE_MENSAJE *****************
  1263 ;; Defined at:
  1264 ;;		line 41 in file "LCD.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1267 ;;		 -> STR_3(5), STR_2(4), STR_1(15), 
  1268 ;;  tam             1    5[COMRAM] unsigned char 
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;  i               1    8[COMRAM] unsigned char 
  1271 ;; Return value:  Size  Location     Type
  1272 ;;                  1    wreg      void 
  1273 ;; Registers used:
  1274 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1275 ;; Tracked objects:
  1276 ;;		On entry : 0/0
  1277 ;;		On exit  : 0/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1280 ;;      Params:         3       0       0       0       0       0       0       0       0
  1281 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1282 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1283 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1284 ;;Total ram usage:        6 bytes
  1285 ;; Hardware stack levels used:    1
  1286 ;; Hardware stack levels required when called:    2
  1287 ;; This function calls:
  1288 ;;		_ENVIA_CHAR
  1289 ;; This function is called by:
  1290 ;;		_main
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           	psect	text12
  1295  000B44                     __ptext12:
  1296                           	callstack 0
  1297  000B44                     _ESCRIBE_MENSAJE:
  1298                           	callstack 28
  1299  000B44                     
  1300                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1301  000B44  0E00               	movlw	0
  1302  000B46  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1303                           
  1304                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1305  000B48  0E00               	movlw	0
  1306  000B4A  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1307  000B4C  EFB7  F005         	goto	l1137
  1308  000B50                     l1133:
  1309                           
  1310                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1311  000B50  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1312  000B52  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1313  000B54  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1314  000B56  0E00               	movlw	0
  1315  000B58  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1316  000B5A  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1317  000B5C  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1318  000B60  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1319  000B64                     	if	0	;tblptru may be non-zero
  1320  000B64                     	endif
  1321  000B64                     	if	0	;tblptru may be non-zero
  1322  000B64                     	endif
  1323  000B64  0008               	tblrd		*
  1324  000B66  50F5               	movf	tablat,w,c
  1325  000B68  ECF8  F005         	call	_ENVIA_CHAR
  1326  000B6C                     
  1327                           ;LCD.c: 47:  }
  1328  000B6C  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1329  000B6E                     l1137:
  1330  000B6E  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1331  000B70  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1332  000B72  A0D8               	btfss	status,0,c
  1333  000B74  EFBE  F005         	goto	u281
  1334  000B78  EFC0  F005         	goto	u280
  1335  000B7C                     u281:
  1336  000B7C  EFA8  F005         	goto	l1133
  1337  000B80                     u280:
  1338  000B80  0012               	return		;funcret
  1339  000B82                     __end_of_ESCRIBE_MENSAJE:
  1340                           	callstack 0
  1341                           
  1342 ;; *************** function _ENVIA_CHAR *****************
  1343 ;; Defined at:
  1344 ;;		line 50 in file "LCD.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  dato            1    wreg     unsigned char 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  dato            1    1[COMRAM] unsigned char 
  1349 ;;  aux             1    2[COMRAM] unsigned char 
  1350 ;; Return value:  Size  Location     Type
  1351 ;;                  1    wreg      void 
  1352 ;; Registers used:
  1353 ;;		wreg, status,2, status,0, cstack
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1359 ;;      Params:         0       0       0       0       0       0       0       0       0
  1360 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1361 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1362 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1363 ;;Total ram usage:        2 bytes
  1364 ;; Hardware stack levels used:    1
  1365 ;; Hardware stack levels required when called:    1
  1366 ;; This function calls:
  1367 ;;		_ENVIA_NIBBLE
  1368 ;;		_LEER_LCD
  1369 ;; This function is called by:
  1370 ;;		_ESCRIBE_MENSAJE
  1371 ;;		_main
  1372 ;;		_GENERACARACTER
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           	psect	text13
  1377  000BF0                     __ptext13:
  1378                           	callstack 0
  1379  000BF0                     _ENVIA_CHAR:
  1380                           	callstack 28
  1381                           
  1382                           ;incstack = 0
  1383                           ;ENVIA_CHAR@dato stored from wreg
  1384  000BF0  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1385  000BF2                     
  1386                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1387  000BF2  808C               	bsf	140,0,c	;volatile
  1388  000BF4                     
  1389                           ;LCD.c: 54:  LEER_LCD();
  1390  000BF4  EC07  F005         	call	_LEER_LCD	;wreg free
  1391  000BF8                     
  1392                           ;LCD.c: 55:  TRISD = 0x00;
  1393  000BF8  0E00               	movlw	0
  1394  000BFA  6E95               	movwf	149,c	;volatile
  1395  000BFC                     
  1396                           ;LCD.c: 56:         _delay(1200);
  1397  000BFC  0EF0               	movlw	240
  1398  000BFE                     u367:
  1399  000BFE  D000               	nop2	
  1400  000C00  2EE8               	decfsz	wreg,f,c
  1401  000C02  D7FD               	bra	u367
  1402  000C04                     
  1403                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1404  000C04  928C               	bcf	140,1,c	;volatile
  1405  000C06                     
  1406                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1407  000C06  948C               	bcf	140,2,c	;volatile
  1408  000C08                     
  1409                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1410  000C08  808C               	bsf	140,0,c	;volatile
  1411  000C0A                     
  1412                           ;LCD.c: 61:  aux = dato & 0xF0;
  1413  000C0A  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1414  000C0C  0BF0               	andlw	240
  1415  000C0E  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1416  000C10                     
  1417                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1418  000C10  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1419  000C12  EC3E  F006         	call	_ENVIA_NIBBLE
  1420  000C16                     
  1421                           ;LCD.c: 63:  aux = dato << 4;
  1422  000C16  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1423  000C18  0BF0               	andlw	240
  1424  000C1A  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1425  000C1C                     
  1426                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1427  000C1C  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1428  000C1E  EC3E  F006         	call	_ENVIA_NIBBLE
  1429  000C22  0012               	return		;funcret
  1430  000C24                     __end_of_ENVIA_CHAR:
  1431                           	callstack 0
  1432                           
  1433 ;; *************** function _LEER_LCD *****************
  1434 ;; Defined at:
  1435 ;;		line 121 in file "LCD.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;		None
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;  aux             1    0[COMRAM] unsigned char 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  1    wreg      void 
  1442 ;; Registers used:
  1443 ;;		wreg, status,2, status,0
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1449 ;;      Params:         0       0       0       0       0       0       0       0       0
  1450 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1451 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1452 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1453 ;;Total ram usage:        1 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; This function calls:
  1456 ;;		Nothing
  1457 ;; This function is called by:
  1458 ;;		_ENVIA_CHAR
  1459 ;;		_ENVIA_LCD_CMD
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text14
  1464  000A0E                     __ptext14:
  1465                           	callstack 0
  1466  000A0E                     _LEER_LCD:
  1467                           	callstack 26
  1468  000A0E                     
  1469                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1470  000A0E  0EF8               	movlw	248
  1471  000A10  6E95               	movwf	149,c	;volatile
  1472  000A12                     
  1473                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1474  000A12  908C               	bcf	140,0,c	;volatile
  1475  000A14                     
  1476                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1477  000A14  828C               	bsf	140,1,c	;volatile
  1478  000A16                     
  1479                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1480  000A16  848C               	bsf	140,2,c	;volatile
  1481  000A18                     
  1482                           ;LCD.c: 128:         _delay(1200);
  1483  000A18  0EF0               	movlw	240
  1484  000A1A                     u377:
  1485  000A1A  D000               	nop2	
  1486  000A1C  2EE8               	decfsz	wreg,f,c
  1487  000A1E  D7FD               	bra	u377
  1488  000A20                     
  1489                           ;LCD.c: 130:  aux = PORTD;
  1490  000A20  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1491  000A24                     
  1492                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1493  000A24  948C               	bcf	140,2,c	;volatile
  1494  000A26                     
  1495                           ;LCD.c: 132:         _delay(1200);
  1496  000A26  0EF0               	movlw	240
  1497  000A28                     u387:
  1498  000A28  D000               	nop2	
  1499  000A2A  2EE8               	decfsz	wreg,f,c
  1500  000A2C  D7FD               	bra	u387
  1501  000A2E                     
  1502                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1503  000A2E  848C               	bsf	140,2,c	;volatile
  1504  000A30                     
  1505                           ;LCD.c: 135:         _delay(1200);
  1506  000A30  0EF0               	movlw	240
  1507  000A32                     u397:
  1508  000A32  D000               	nop2	
  1509  000A34  2EE8               	decfsz	wreg,f,c
  1510  000A36  D7FD               	bra	u397
  1511  000A38                     
  1512                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1513  000A38  948C               	bcf	140,2,c	;volatile
  1514  000A3A                     l837:
  1515                           
  1516                           ;LCD.c: 138:  aux = aux & 0x80;
  1517  000A3A  5001               	movf	LEER_LCD@aux^0,w,c
  1518  000A3C  0B80               	andlw	128
  1519  000A3E  6E01               	movwf	LEER_LCD@aux^0,c
  1520                           
  1521                           ;LCD.c: 139:  while(aux == 0x80)
  1522  000A40  EF36  F005         	goto	l851
  1523  000A44                     l67:
  1524                           
  1525                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1526  000A44  848C               	bsf	140,2,c	;volatile
  1527  000A46                     
  1528                           ;LCD.c: 142:             _delay(1200);
  1529  000A46  0EF0               	movlw	240
  1530  000A48                     u407:
  1531  000A48  D000               	nop2	
  1532  000A4A  2EE8               	decfsz	wreg,f,c
  1533  000A4C  D7FD               	bra	u407
  1534  000A4E                     
  1535                           ;LCD.c: 143:             aux = PORTD;
  1536  000A4E  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1537  000A52                     
  1538                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1539  000A52  948C               	bcf	140,2,c	;volatile
  1540                           
  1541                           ;LCD.c: 145:             _delay(1200);
  1542  000A54  0EF0               	movlw	240
  1543  000A56                     u417:
  1544  000A56  D000               	nop2	
  1545  000A58  2EE8               	decfsz	wreg,f,c
  1546  000A5A  D7FD               	bra	u417
  1547  000A5C                     
  1548                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1549  000A5C  848C               	bsf	140,2,c	;volatile
  1550                           
  1551                           ;LCD.c: 147:             _delay(1200);
  1552  000A5E  0EF0               	movlw	240
  1553  000A60                     u427:
  1554  000A60  D000               	nop2	
  1555  000A62  2EE8               	decfsz	wreg,f,c
  1556  000A64  D7FD               	bra	u427
  1557  000A66                     
  1558                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1559  000A66  948C               	bcf	140,2,c	;volatile
  1560  000A68  EF1D  F005         	goto	l837
  1561  000A6C                     l851:
  1562                           
  1563                           ;LCD.c: 139:  while(aux == 0x80)
  1564  000A6C  0E80               	movlw	128
  1565  000A6E  1801               	xorwf	LEER_LCD@aux^0,w,c
  1566  000A70  B4D8               	btfsc	status,2,c
  1567  000A72  EF3D  F005         	goto	u11
  1568  000A76  EF3F  F005         	goto	u10
  1569  000A7A                     u11:
  1570  000A7A  EF22  F005         	goto	l67
  1571  000A7E                     u10:
  1572  000A7E  0012               	return		;funcret
  1573  000A80                     __end_of_LEER_LCD:
  1574                           	callstack 0
  1575                           
  1576 ;; *************** function _ENVIA_NIBBLE *****************
  1577 ;; Defined at:
  1578 ;;		line 93 in file "LCD.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;  dato            1    wreg     unsigned char 
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;  dato            1    0[COMRAM] unsigned char 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, status,2, status,0
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1592 ;;      Params:         0       0       0       0       0       0       0       0       0
  1593 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1594 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1595 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1596 ;;Total ram usage:        1 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; This function calls:
  1599 ;;		Nothing
  1600 ;; This function is called by:
  1601 ;;		_ENVIA_CHAR
  1602 ;;		_LCD_CONFIG
  1603 ;;		_ENVIA_LCD_CMD
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text15
  1608  000C7C                     __ptext15:
  1609                           	callstack 0
  1610  000C7C                     _ENVIA_NIBBLE:
  1611                           	callstack 27
  1612                           
  1613                           ;incstack = 0
  1614                           ;ENVIA_NIBBLE@dato stored from wreg
  1615  000C7C  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1616  000C7E                     
  1617                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1618  000C7E  0E0F               	movlw	15
  1619  000C80  168C               	andwf	140,f,c	;volatile
  1620                           
  1621                           ;LCD.c: 96:  dato &= 0xF0;
  1622  000C82  0EF0               	movlw	240
  1623  000C84  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1624                           
  1625                           ;LCD.c: 97:  LATD|= dato;
  1626  000C86  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1627  000C88  128C               	iorwf	140,f,c	;volatile
  1628  000C8A                     
  1629                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1630  000C8A  848C               	bsf	140,2,c	;volatile
  1631  000C8C                     
  1632                           ;LCD.c: 100:         _delay(1200);
  1633  000C8C  0EF0               	movlw	240
  1634  000C8E                     u437:
  1635  000C8E  D000               	nop2	
  1636  000C90  2EE8               	decfsz	wreg,f,c
  1637  000C92  D7FD               	bra	u437
  1638  000C94                     
  1639                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1640  000C94  948C               	bcf	140,2,c	;volatile
  1641  000C96  0012               	return		;funcret
  1642  000C98                     __end_of_ENVIA_NIBBLE:
  1643                           	callstack 0
  1644                           
  1645                           	psect	rparam
  1646  0000                     
  1647                           	psect	idloc
  1648                           
  1649                           ;Config register IDLOC0 @ 0x200000
  1650                           ;	unspecified, using default values
  1651  200000                     	org	2097152
  1652  200000  FF                 	db	255
  1653                           
  1654                           ;Config register IDLOC1 @ 0x200001
  1655                           ;	unspecified, using default values
  1656  200001                     	org	2097153
  1657  200001  FF                 	db	255
  1658                           
  1659                           ;Config register IDLOC2 @ 0x200002
  1660                           ;	unspecified, using default values
  1661  200002                     	org	2097154
  1662  200002  FF                 	db	255
  1663                           
  1664                           ;Config register IDLOC3 @ 0x200003
  1665                           ;	unspecified, using default values
  1666  200003                     	org	2097155
  1667  200003  FF                 	db	255
  1668                           
  1669                           ;Config register IDLOC4 @ 0x200004
  1670                           ;	unspecified, using default values
  1671  200004                     	org	2097156
  1672  200004  FF                 	db	255
  1673                           
  1674                           ;Config register IDLOC5 @ 0x200005
  1675                           ;	unspecified, using default values
  1676  200005                     	org	2097157
  1677  200005  FF                 	db	255
  1678                           
  1679                           ;Config register IDLOC6 @ 0x200006
  1680                           ;	unspecified, using default values
  1681  200006                     	org	2097158
  1682  200006  FF                 	db	255
  1683                           
  1684                           ;Config register IDLOC7 @ 0x200007
  1685                           ;	unspecified, using default values
  1686  200007                     	org	2097159
  1687  200007  FF                 	db	255
  1688                           
  1689                           	psect	config
  1690                           
  1691                           ;Config register CONFIG1L @ 0x300000
  1692                           ;	PLL Prescaler Selection bits
  1693                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1694                           ;	System Clock Postscaler Selection bits
  1695                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1696                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1697                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1698  300000                     	org	3145728
  1699  300000  00                 	db	0
  1700                           
  1701                           ;Config register CONFIG1H @ 0x300001
  1702                           ;	Oscillator Selection bits
  1703                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1704                           ;	Fail-Safe Clock Monitor Enable bit
  1705                           ;	FCMEN = 0x0, unprogrammed default
  1706                           ;	Internal/External Oscillator Switchover bit
  1707                           ;	IESO = 0x0, unprogrammed default
  1708  300001                     	org	3145729
  1709  300001  02                 	db	2
  1710                           
  1711                           ;Config register CONFIG2L @ 0x300002
  1712                           ;	Power-up Timer Enable bit
  1713                           ;	PWRT = ON, PWRT enabled
  1714                           ;	Brown-out Reset Enable bits
  1715                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1716                           ;	Brown-out Reset Voltage bits
  1717                           ;	BORV = 3, Minimum setting 2.05V
  1718                           ;	USB Voltage Regulator Enable bit
  1719                           ;	VREGEN = 0x0, unprogrammed default
  1720  300002                     	org	3145730
  1721  300002  18                 	db	24
  1722                           
  1723                           ;Config register CONFIG2H @ 0x300003
  1724                           ;	Watchdog Timer Enable bit
  1725                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1726                           ;	Watchdog Timer Postscale Select bits
  1727                           ;	WDTPS = 32768, 1:32768
  1728  300003                     	org	3145731
  1729  300003  1E                 	db	30
  1730                           
  1731                           ; Padding undefined space
  1732  300004                     	org	3145732
  1733  300004  FF                 	db	255
  1734                           
  1735                           ;Config register CONFIG3H @ 0x300005
  1736                           ;	CCP2 MUX bit
  1737                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1738                           ;	PORTB A/D Enable bit
  1739                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1740                           ;	Low-Power Timer 1 Oscillator Enable bit
  1741                           ;	LPT1OSC = 0x0, unprogrammed default
  1742                           ;	MCLR Pin Enable bit
  1743                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1744  300005                     	org	3145733
  1745  300005  81                 	db	129
  1746                           
  1747                           ;Config register CONFIG4L @ 0x300006
  1748                           ;	Stack Full/Underflow Reset Enable bit
  1749                           ;	STVREN = 0x1, unprogrammed default
  1750                           ;	Single-Supply ICSP Enable bit
  1751                           ;	LVP = OFF, Single-Supply ICSP disabled
  1752                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1753                           ;	ICPRT = 0x0, unprogrammed default
  1754                           ;	Extended Instruction Set Enable bit
  1755                           ;	XINST = 0x0, unprogrammed default
  1756                           ;	Background Debugger Enable bit
  1757                           ;	DEBUG = 0x1, unprogrammed default
  1758  300006                     	org	3145734
  1759  300006  81                 	db	129
  1760                           
  1761                           ; Padding undefined space
  1762  300007                     	org	3145735
  1763  300007  FF                 	db	255
  1764                           
  1765                           ;Config register CONFIG5L @ 0x300008
  1766                           ;	unspecified, using default values
  1767                           ;	Code Protection bit
  1768                           ;	CP0 = 0x1, unprogrammed default
  1769                           ;	Code Protection bit
  1770                           ;	CP1 = 0x1, unprogrammed default
  1771                           ;	Code Protection bit
  1772                           ;	CP2 = 0x1, unprogrammed default
  1773                           ;	Code Protection bit
  1774                           ;	CP3 = 0x1, unprogrammed default
  1775  300008                     	org	3145736
  1776  300008  0F                 	db	15
  1777                           
  1778                           ;Config register CONFIG5H @ 0x300009
  1779                           ;	unspecified, using default values
  1780                           ;	Boot Block Code Protection bit
  1781                           ;	CPB = 0x1, unprogrammed default
  1782                           ;	Data EEPROM Code Protection bit
  1783                           ;	CPD = 0x1, unprogrammed default
  1784  300009                     	org	3145737
  1785  300009  C0                 	db	192
  1786                           
  1787                           ;Config register CONFIG6L @ 0x30000A
  1788                           ;	unspecified, using default values
  1789                           ;	Write Protection bit
  1790                           ;	WRT0 = 0x1, unprogrammed default
  1791                           ;	Write Protection bit
  1792                           ;	WRT1 = 0x1, unprogrammed default
  1793                           ;	Write Protection bit
  1794                           ;	WRT2 = 0x1, unprogrammed default
  1795                           ;	Write Protection bit
  1796                           ;	WRT3 = 0x1, unprogrammed default
  1797  30000A                     	org	3145738
  1798  30000A  0F                 	db	15
  1799                           
  1800                           ;Config register CONFIG6H @ 0x30000B
  1801                           ;	unspecified, using default values
  1802                           ;	Configuration Register Write Protection bit
  1803                           ;	WRTC = 0x1, unprogrammed default
  1804                           ;	Boot Block Write Protection bit
  1805                           ;	WRTB = 0x1, unprogrammed default
  1806                           ;	Data EEPROM Write Protection bit
  1807                           ;	WRTD = 0x1, unprogrammed default
  1808  30000B                     	org	3145739
  1809  30000B  E0                 	db	224
  1810                           
  1811                           ;Config register CONFIG7L @ 0x30000C
  1812                           ;	unspecified, using default values
  1813                           ;	Table Read Protection bit
  1814                           ;	EBTR0 = 0x1, unprogrammed default
  1815                           ;	Table Read Protection bit
  1816                           ;	EBTR1 = 0x1, unprogrammed default
  1817                           ;	Table Read Protection bit
  1818                           ;	EBTR2 = 0x1, unprogrammed default
  1819                           ;	Table Read Protection bit
  1820                           ;	EBTR3 = 0x1, unprogrammed default
  1821  30000C                     	org	3145740
  1822  30000C  0F                 	db	15
  1823                           
  1824                           ;Config register CONFIG7H @ 0x30000D
  1825                           ;	unspecified, using default values
  1826                           ;	Boot Block Table Read Protection bit
  1827                           ;	EBTRB = 0x1, unprogrammed default
  1828  30000D                     	org	3145741
  1829  30000D  40                 	db	64
  1830                           tosu	equ	0xFFF
  1831                           tosh	equ	0xFFE
  1832                           tosl	equ	0xFFD
  1833                           stkptr	equ	0xFFC
  1834                           pclatu	equ	0xFFB
  1835                           pclath	equ	0xFFA
  1836                           pcl	equ	0xFF9
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           prodh	equ	0xFF4
  1842                           prodl	equ	0xFF3
  1843                           indf0	equ	0xFEF
  1844                           postinc0	equ	0xFEE
  1845                           postdec0	equ	0xFED
  1846                           preinc0	equ	0xFEC
  1847                           plusw0	equ	0xFEB
  1848                           fsr0h	equ	0xFEA
  1849                           fsr0l	equ	0xFE9
  1850                           wreg	equ	0xFE8
  1851                           indf1	equ	0xFE7
  1852                           postinc1	equ	0xFE6
  1853                           postdec1	equ	0xFE5
  1854                           preinc1	equ	0xFE4
  1855                           plusw1	equ	0xFE3
  1856                           fsr1h	equ	0xFE2
  1857                           fsr1l	equ	0xFE1
  1858                           bsr	equ	0xFE0
  1859                           indf2	equ	0xFDF
  1860                           postinc2	equ	0xFDE
  1861                           postdec2	equ	0xFDD
  1862                           preinc2	equ	0xFDC
  1863                           plusw2	equ	0xFDB
  1864                           fsr2h	equ	0xFDA
  1865                           fsr2l	equ	0xFD9
  1866                           status	equ	0xFD8

Data Sizes:
    Strings     24
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      28
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[5]), STR_2(CODE[4]), STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _configuracion->_lcd_init
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3069
                                             14 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                      _configuracion
                          _convierte
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1473
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuracion                                        0     0      0     525
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (3) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (3) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (4) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     667
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (5) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configuracion
     _lcd_init
       _BORRAR_LCD
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
       _CURSOR_HOME
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
       _CURSOR_ONOFF
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
       _LCD_CONFIG
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
         _ENVIA_NIBBLE
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      1C       1       29.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1C      20        0.0%
DATA                 0      0      1C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed May 20 21:47:07 2020

                      l24 0BBA                        l42 0C52                        l51 0C22  
                      l60 0C96                        l37 0CC8                        l54 0CD0  
                      l63 0BEE                        l48 0B80                        l57 0B42  
                      l67 0A44                        l69 0A7E                        u10 0A7E  
                      u11 0A7A                        u20 0C36                        u21 0C32  
                      u30 0C4C                        u31 0C48            ?_configuracion 0001  
           ENVIA_CHAR@aux 0003                       l122 0C7A                       l131 0832  
                     l125 0CC0                       l134 0856                       l119 0998  
                     l640 0A0C                       l633 0A04                       l650 0AE2  
                     l643 0ADA                       l821 0A16                       l901 0AFC  
                     l831 0A2E                       l823 0A18                       l815 0A0E  
                     l911 0B2A                       l903 0B10                       l841 0A4E  
                     l833 0A30                       l825 0A20                       l817 0A12  
                     l921 0BF4                       l913 0B30                       l905 0B18  
                     l843 0A52                       l851 0A6C                       l835 0A38  
                     l827 0A24                       l819 0A14                       l931 0C08  
                     l923 0BF8                       l915 0B36                       l907 0B1E  
                     l853 0C7E                       l845 0A5C                       l837 0A3A  
                     l829 0A26                       l933 0C0A                       l925 0BFC  
                     l861 0BBE                       l917 0B3C                       l909 0B24  
                     l941 0C54                       l855 0C8A                       l847 0A66  
                     l839 0A46                       l935 0C10                       l927 0C04  
                     l919 0BF2                       l871 0BD2                       l863 0BC0  
                     l951 0C74                       l943 0C58                       l857 0C8C  
                     l937 0C16                       l929 0C06                       l881 0BE8  
                     l873 0BD4                       l865 0BC4                       l945 0C5C  
                     l859 0C94                       l939 0C1C                       l875 0BD6  
                     l867 0BC8                       l883 0CC2                       l891 0C4C  
                     l947 0C6C                       l877 0BDC                       l869 0BD0  
                     l893 0CCA                       l885 0C26                       l949 0C70  
                     l879 0BE2                       l887 0C36                       l895 0AE4  
                     l889 0C3C                       l897 0AE8                       l899 0AEE  
                     u200 09B4                       u201 09B0                       u210 09D2  
                     u211 09CE                       u220 09EE                       u300 0864  
                     u221 09EA                       u301 0860                       u230 0A92  
                     u231 0A8E                       u240 0AB0                       u241 0AAC  
                     u250 0AC6                       u251 0AC2                       u260 0B94  
                     u261 0B90                       u317 0C62                       u270 0BB2  
                     u407 0A48                       u271 0BAE                       u327 0AF4  
                     u280 0B80                       u417 0A56                       u281 0B7C  
                     u337 0B02                       u290 0840                       u427 0A60  
                     u347 0B12                       u291 083C                       u437 0C8E  
                     u357 0BCA                       u367 0BFE                       u377 0A1A  
                     u387 0A28                       u397 0A32               LEER_LCD@aux 0001  
                     wreg 000FE8              ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001  
          ENVIA_CHAR@dato 0002                      l1011 0CBA                      l1013 0CBC  
                    l1101 09F6                      l1103 09F8                      l1111 0A9A  
                    l1009 0CB2                      l1105 09FE                      l1121 0AD4  
                    l1113 0AA2                      l1131 0B44                      l1123 0B84  
                    l1115 0AB0                      l1107 0A80                      l1133 0B50  
                    l1125 0B94                      l1117 0AC6                      l1109 0A92  
                    l1141 081A                      l1135 0B6C                      l1127 0BA0  
                    l1119 0ACE                      l1151 0864                      l1143 081E  
                    l1137 0B6E                      l1129 0BB2                      l1161 08A4  
                    l1153 0876                      l1145 082E                      l1091 09BC  
                    l1139 0900                      l1171 08D8                      l1163 08AC  
                    l1155 0880                      l1147 0840                      l1093 09C4  
                    l1085 099A                      l1173 08E0                      l1165 08B4  
                    l1157 0890                      l1149 0852                      l1095 09D2  
                    l1087 09A2                      l1175 08E8                      l1167 08BC  
                    l1159 089C                      l1097 09D8                      l1089 09B4  
                    l1177 08F0                      l1169 08CC                      l1099 09EE  
                    STR_1 0801                      STR_2 0815                      STR_3 0810  
                    _LATD 000F8C                      _main 081A                      start 0000  
           ?_CURSOR_ONOFF 0001              ___param_bank 000000           ??_ENVIA_LCD_CMD 0002  
        __end_of_LEER_LCD 0A80       __size_of_BORRAR_LCD 0008                     ?_main 0001  
         __end_of___lwdiv 0A0E           __end_of___lwmod 0AE4                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISD 000F95       __size_of_ENVIA_CHAR 0034  
             ?_POS_CURSOR 0004                     tablat 000FF5                     status 000FD8  
          ??_CURSOR_ONOFF 0004           __initialization 0C98              __end_of_main 0900  
         ??_configuracion 0006           _ESCRIBE_MENSAJE 0B44                    ??_main 000F  
           __activetblptr 000001                    _ADCON0 000FC2                    _ADCON1 000FC1  
                  _ADCON2 000FC0                    _ADRESH 000FC4                    _ADRESL 000FC3  
        __end_of_lcd_init 0C7C                    _decena 0013      __end_of_ENVIA_NIBBLE 0C98  
               ??___lwdiv 000A                 ??___lwmod 0005       __size_of_POS_CURSOR 003A  
                  _millar 0017                    clear_0 0C9E                    _unidad 0011  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0CA4  
            ??_LCD_CONFIG 0004             ___rparam_used 000001              ??_ENVIA_CHAR 0002  
 __end_of_ESCRIBE_MENSAJE 0B82            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0CD2  
        ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0C54        __end_of_LCD_CONFIG 0B44  
      __end_of_ENVIA_CHAR 0C24        __size_of_convierte 009A                ??_LEER_LCD 0001  
        ENVIA_NIBBLE@dato 0001              ??_POS_CURSOR 0005                 ?_lcd_init 0001  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0004                   ___lwdiv 099A                   ___lwmod 0A80  
            __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0BF0         __end_of_convierte 099A  
                 __pcinit 0C98        __end_of_POS_CURSOR 0BBC                   __ramtop 0800  
                 _centena 0015                   __ptext0 081A                   __ptext1 0900  
                 __ptext2 0A80                   __ptext3 099A                   __ptext4 0CB2  
                 __ptext5 0C54                   __ptext6 0AE4                   __ptext7 0C24  
                 __ptext8 0CC2                   __ptext9 0CCA                   _res_ad0 001B  
                 _res_ad1 0019                ??_lcd_init 0005              _ENVIA_NIBBLE 0C7C  
    end_of_initialization 0CA4                   postinc0 000FEE     __end_of_configuracion 0CC2  
   __size_of_CURSOR_ONOFF 0030         __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0C24  
      CURSOR_ONOFF@estado 0004             ??_CURSOR_HOME 0004       start_initialization 0C98  
       ENVIA_LCD_CMD@dato 0002               __pbssCOMRAM 0011       __end_of_CURSOR_HOME 0CCA  
       __size_of_lcd_init 0028          ___lwdiv@dividend 0006                  ?___lwdiv 0006  
                ?___lwmod 0001               __smallconst 0800                 _convierte 0900  
         convierte@numero 000D          ___lwdiv@quotient 000A                  _LEER_LCD 0A0E  
                _LATDbits 000F8C          ESCRIBE_MENSAJE@i 0009            POS_CURSOR@fila 0005  
__size_of_ESCRIBE_MENSAJE 003E                _ADCON0bits 000FC2                ?_convierte 000D  
             _CURSOR_HOME 0CC2    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800          __size_of___lwdiv 0074  
        __size_of___lwmod 0064           ___lwdiv@divisor 0008           ___lwdiv@counter 000C  
                __ptext10 0B82                  __ptext11 0BBC                  __ptext12 0B44  
                __ptext13 0BF0                  __ptext14 0A0E                  __ptext15 0C7C  
              _BORRAR_LCD 0CCA                  _lcd_init 0C54    __size_of_configuracion 0010  
           __size_of_main 00E6                _LCD_CONFIG 0AE4                _ENVIA_CHAR 0BF0  
           _ENVIA_LCD_CMD 0BBC               ??_convierte 000F         ??_ESCRIBE_MENSAJE 0007  
   ESCRIBE_MENSAJE@cadena 0004          ___lwmod@dividend 0001            ?_ENVIA_LCD_CMD 0001  
           _configuracion 0CB2           ___lwmod@divisor 0003           ___lwmod@counter 0005  
             ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001                _POS_CURSOR 0B82  
             ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006               ?_ENVIA_CHAR 0001  
       POS_CURSOR@columna 0004  
