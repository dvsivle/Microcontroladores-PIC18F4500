

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu May 21 14:42:46 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29  0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4550 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     _PORTD	set	3971
    65  0000                     _LATD	set	3980
    66  0000                     _LATDbits	set	3980
    67  0000                     _ADRESL	set	4035
    68  0000                     _ADRESH	set	4036
    69  0000                     _ADCON0bits	set	4034
    70  0000                     _ADCON0	set	4034
    71  0000                     _ADCON1	set	4033
    72  0000                     _ADCON2	set	4032
    73  0000                     _TRISD	set	3989
    74                           
    75                           	psect	smallconst
    76  000800                     __psmallconst:
    77                           	callstack 0
    78  000800  00                 	db	0
    79  000801                     STR_1:
    80  000801  20                 	db	32
    81  000802  20                 	db	32
    82  000803  4A                 	db	74	;'J'
    83  000804  41                 	db	65	;'A'
    84  000805  4C                 	db	76	;'L'
    85  000806  41                 	db	65	;'A'
    86  000807  44                 	db	68	;'D'
    87  000808  41                 	db	65	;'A'
    88  000809  53                 	db	83	;'S'
    89  00080A  4F                 	db	79	;'O'
    90  00080B  00                 	db	0
    91  00080C                     STR_2:
    92  00080C  43                 	db	67	;'C'
    93  00080D  30                 	db	48	;'0'
    94  00080E  3A                 	db	58	;':'
    95  00080F  00                 	db	0
    96  000810  00                 	db	0	; dummy byte at the end
    97  0000                     
    98                           ; #config settings
    99                           
   100                           	psect	cinit
   101  000C2E                     __pcinit:
   102                           	callstack 0
   103  000C2E                     start_initialization:
   104                           	callstack 0
   105  000C2E                     __initialization:
   106                           	callstack 0
   107                           
   108                           ; Clear objects allocated to COMRAM (10 bytes)
   109  000C2E  EE00  F011         	lfsr	0,__pbssCOMRAM
   110  000C32  0E0A               	movlw	10
   111  000C34                     clear_0:
   112  000C34  6AEE               	clrf	postinc0,c
   113  000C36  06E8               	decf	wreg,f,c
   114  000C38  E1FD               	bnz	clear_0
   115  000C3A                     end_of_initialization:
   116                           	callstack 0
   117  000C3A                     __end_of__initialization:
   118                           	callstack 0
   119  000C3A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   120  000C3C  6EF8               	movwf	tblptru,c
   121  000C3E  0E08               	movlw	high __Lsmallconst
   122  000C40  6EF7               	movwf	tblptrh,c
   123  000C42  0100               	movlb	0
   124  000C44  EF56  F004         	goto	_main	;jump to C main() function
   125                           
   126                           	psect	bssCOMRAM
   127  000011                     __pbssCOMRAM:
   128                           	callstack 0
   129  000011                     _unidad:
   130                           	callstack 0
   131  000011                     	ds	2
   132  000013                     _decena:
   133                           	callstack 0
   134  000013                     	ds	2
   135  000015                     _centena:
   136                           	callstack 0
   137  000015                     	ds	2
   138  000017                     _millar:
   139                           	callstack 0
   140  000017                     	ds	2
   141  000019                     _res_ad:
   142                           	callstack 0
   143  000019                     	ds	2
   144                           
   145                           	psect	cstackCOMRAM
   146  000001                     __pcstackCOMRAM:
   147                           	callstack 0
   148  000001                     ?___lwmod:
   149                           	callstack 0
   150  000001                     ENVIA_NIBBLE@dato:
   151                           	callstack 0
   152  000001                     LEER_LCD@aux:
   153                           	callstack 0
   154  000001                     ___lwmod@dividend:
   155                           	callstack 0
   156                           
   157                           ; 2 bytes @ 0x0
   158  000001                     	ds	1
   159  000002                     ENVIA_CHAR@dato:
   160                           	callstack 0
   161  000002                     ENVIA_LCD_CMD@dato:
   162                           	callstack 0
   163                           
   164                           ; 1 bytes @ 0x1
   165  000002                     	ds	1
   166  000003                     ENVIA_CHAR@aux:
   167                           	callstack 0
   168  000003                     ENVIA_LCD_CMD@aux:
   169                           	callstack 0
   170  000003                     ___lwmod@divisor:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0x2
   174  000003                     	ds	1
   175  000004                     ??_LCD_CONFIG:
   176  000004                     POS_CURSOR@columna:
   177                           	callstack 0
   178  000004                     CURSOR_ONOFF@estado:
   179                           	callstack 0
   180  000004                     ESCRIBE_MENSAJE@cadena:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x3
   184  000004                     	ds	1
   185  000005                     ??_lcd_init:
   186  000005                     POS_CURSOR@fila:
   187                           	callstack 0
   188  000005                     ___lwmod@counter:
   189                           	callstack 0
   190                           
   191                           ; 1 bytes @ 0x4
   192  000005                     	ds	1
   193  000006                     ?___lwdiv:
   194                           	callstack 0
   195  000006                     ESCRIBE_MENSAJE@tam:
   196                           	callstack 0
   197  000006                     ___lwdiv@dividend:
   198                           	callstack 0
   199                           
   200                           ; 2 bytes @ 0x5
   201  000006                     	ds	1
   202  000007                     ??_ESCRIBE_MENSAJE:
   203                           
   204                           ; 1 bytes @ 0x6
   205  000007                     	ds	1
   206  000008                     ___lwdiv@divisor:
   207                           	callstack 0
   208                           
   209                           ; 2 bytes @ 0x7
   210  000008                     	ds	1
   211  000009                     ESCRIBE_MENSAJE@i:
   212                           	callstack 0
   213                           
   214                           ; 1 bytes @ 0x8
   215  000009                     	ds	1
   216  00000A                     ___lwdiv@quotient:
   217                           	callstack 0
   218                           
   219                           ; 2 bytes @ 0x9
   220  00000A                     	ds	2
   221  00000C                     ___lwdiv@counter:
   222                           	callstack 0
   223                           
   224                           ; 1 bytes @ 0xB
   225  00000C                     	ds	1
   226  00000D                     convierte@numero:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0xC
   230  00000D                     	ds	2
   231  00000F                     ??_main:
   232                           
   233                           ; 1 bytes @ 0xE
   234  00000F                     	ds	2
   235                           
   236 ;;
   237 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   238 ;;
   239 ;; *************** function _main *****************
   240 ;; Defined at:
   241 ;;		line 58 in file "newmaincode.c"
   242 ;; Parameters:    Size  Location     Type
   243 ;;		None
   244 ;; Auto vars:     Size  Location     Type
   245 ;;		None
   246 ;; Return value:  Size  Location     Type
   247 ;;                  1    wreg      void 
   248 ;; Registers used:
   249 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   250 ;; Tracked objects:
   251 ;;		On entry : 0/0
   252 ;;		On exit  : 0/0
   253 ;;		Unchanged: 0/0
   254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   255 ;;      Params:         0       0       0       0       0       0       0       0       0
   256 ;;      Locals:         0       0       0       0       0       0       0       0       0
   257 ;;      Temps:          2       0       0       0       0       0       0       0       0
   258 ;;      Totals:         2       0       0       0       0       0       0       0       0
   259 ;;Total ram usage:        2 bytes
   260 ;; Hardware stack levels required when called:    5
   261 ;; This function calls:
   262 ;;		_ENVIA_CHAR
   263 ;;		_ESCRIBE_MENSAJE
   264 ;;		_POS_CURSOR
   265 ;;		_configuracion
   266 ;;		_convierte
   267 ;; This function is called by:
   268 ;;		Startup code after reset
   269 ;; This function uses a non-reentrant model
   270 ;;
   271                           
   272                           	psect	text0
   273  0008AC                     __ptext0:
   274                           	callstack 0
   275  0008AC                     _main:
   276                           	callstack 26
   277  0008AC                     
   278                           ;newmaincode.c: 59:     configuracion();
   279  0008AC  EC24  F006         	call	_configuracion	;wreg free
   280  0008B0                     
   281                           ;newmaincode.c: 60:     ESCRIBE_MENSAJE("  JALADASO",10);
   282  0008B0  0E01               	movlw	low STR_1
   283  0008B2  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   284  0008B4  0E08               	movlw	high STR_1
   285  0008B6  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   286  0008B8  0E0A               	movlw	10
   287  0008BA  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   288  0008BC  EC6D  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   289  0008C0                     l1122:
   290                           
   291                           ;newmaincode.c: 63:         ADCON0bits.GODONE = 1;
   292  0008C0  82C2               	bsf	194,1,c	;volatile
   293  0008C2                     l55:
   294  0008C2  B2C2               	btfsc	194,1,c	;volatile
   295  0008C4  EF66  F004         	goto	u281
   296  0008C8  EF68  F004         	goto	u280
   297  0008CC                     u281:
   298  0008CC  EF61  F004         	goto	l55
   299  0008D0                     u280:
   300  0008D0                     
   301                           ;newmaincode.c: 65:         POS_CURSOR(2,0);
   302  0008D0  0E00               	movlw	0
   303  0008D2  6E04               	movwf	POS_CURSOR@columna^0,c
   304  0008D4  0E02               	movlw	2
   305  0008D6  EC8C  F005         	call	_POS_CURSOR
   306  0008DA                     
   307                           ;newmaincode.c: 66:         ESCRIBE_MENSAJE("C0:",3);
   308  0008DA  0E0C               	movlw	low STR_2
   309  0008DC  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   310  0008DE  0E08               	movlw	high STR_2
   311  0008E0  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   312  0008E2  0E03               	movlw	3
   313  0008E4  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   314  0008E6  EC6D  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   315  0008EA                     
   316                           ;newmaincode.c: 67:         res_ad = (ADRESH << 8) + ADRESL;
   317  0008EA  50C4               	movf	196,w,c	;volatile
   318  0008EC  6E10               	movwf	(??_main+1)^0,c
   319  0008EE  6A0F               	clrf	??_main^0,c
   320  0008F0  50C3               	movf	195,w,c	;volatile
   321  0008F2  240F               	addwf	??_main^0,w,c
   322  0008F4  6E19               	movwf	_res_ad^0,c
   323  0008F6  0E00               	movlw	0
   324  0008F8  2010               	addwfc	(??_main+1)^0,w,c
   325  0008FA  6E1A               	movwf	(_res_ad+1)^0,c
   326  0008FC                     
   327                           ;newmaincode.c: 68:         convierte(res_ad);
   328  0008FC  C019  F00D         	movff	_res_ad,convierte@numero
   329  000900  C01A  F00E         	movff	_res_ad+1,convierte@numero+1
   330  000904  EC09  F004         	call	_convierte	;wreg free
   331  000908                     
   332                           ;newmaincode.c: 69:         ENVIA_CHAR(millar+0x30);
   333  000908  5017               	movf	_millar^0,w,c
   334  00090A  0F30               	addlw	48
   335  00090C  ECC3  F005         	call	_ENVIA_CHAR
   336  000910                     
   337                           ;newmaincode.c: 70:         ENVIA_CHAR(centena+0x30);
   338  000910  5015               	movf	_centena^0,w,c
   339  000912  0F30               	addlw	48
   340  000914  ECC3  F005         	call	_ENVIA_CHAR
   341  000918                     
   342                           ;newmaincode.c: 71:         ENVIA_CHAR(decena+0x30);
   343  000918  5013               	movf	_decena^0,w,c
   344  00091A  0F30               	addlw	48
   345  00091C  ECC3  F005         	call	_ENVIA_CHAR
   346  000920                     
   347                           ;newmaincode.c: 72:         ENVIA_CHAR(unidad+0x30);
   348  000920  5011               	movf	_unidad^0,w,c
   349  000922  0F30               	addlw	48
   350  000924  ECC3  F005         	call	_ENVIA_CHAR
   351  000928  EF60  F004         	goto	l1122
   352  00092C  EF00  F000         	goto	start
   353  000930                     __end_of_main:
   354                           	callstack 0
   355                           
   356 ;; *************** function _convierte *****************
   357 ;; Defined at:
   358 ;;		line 34 in file "newmaincode.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;  numero          2   12[COMRAM] unsigned int 
   361 ;; Auto vars:     Size  Location     Type
   362 ;;		None
   363 ;; Return value:  Size  Location     Type
   364 ;;                  1    wreg      void 
   365 ;; Registers used:
   366 ;;		wreg, status,2, status,0, cstack
   367 ;; Tracked objects:
   368 ;;		On entry : 0/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   372 ;;      Params:         2       0       0       0       0       0       0       0       0
   373 ;;      Locals:         0       0       0       0       0       0       0       0       0
   374 ;;      Temps:          0       0       0       0       0       0       0       0       0
   375 ;;      Totals:         2       0       0       0       0       0       0       0       0
   376 ;;Total ram usage:        2 bytes
   377 ;; Hardware stack levels used:    1
   378 ;; Hardware stack levels required when called:    1
   379 ;; This function calls:
   380 ;;		___lwdiv
   381 ;;		___lwmod
   382 ;; This function is called by:
   383 ;;		_main
   384 ;; This function uses a non-reentrant model
   385 ;;
   386                           
   387                           	psect	text1
   388  000812                     __ptext1:
   389                           	callstack 0
   390  000812                     _convierte:
   391                           	callstack 29
   392  000812                     
   393                           ;newmaincode.c: 35:     millar = numero /1000;
   394  000812  C00D  F006         	movff	convierte@numero,___lwdiv@dividend
   395  000816  C00E  F007         	movff	convierte@numero+1,___lwdiv@dividend+1
   396  00081A  0E03               	movlw	3
   397  00081C  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   398  00081E  0EE8               	movlw	232
   399  000820  6E08               	movwf	___lwdiv@divisor^0,c
   400  000822  EC98  F004         	call	___lwdiv	;wreg free
   401  000826  C006  F017         	movff	?___lwdiv,_millar
   402  00082A  C007  F018         	movff	?___lwdiv+1,_millar+1
   403                           
   404                           ;newmaincode.c: 36:     centena = (numero % 1000) / 100;
   405  00082E  0E03               	movlw	3
   406  000830  6E04               	movwf	(___lwmod@divisor+1)^0,c
   407  000832  0EE8               	movlw	232
   408  000834  6E03               	movwf	___lwmod@divisor^0,c
   409  000836  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   410  00083A  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   411  00083E  EC0B  F005         	call	___lwmod	;wreg free
   412  000842  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   413  000846  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   414  00084A  0E00               	movlw	0
   415  00084C  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   416  00084E  0E64               	movlw	100
   417  000850  6E08               	movwf	___lwdiv@divisor^0,c
   418  000852  EC98  F004         	call	___lwdiv	;wreg free
   419  000856  C006  F015         	movff	?___lwdiv,_centena
   420  00085A  C007  F016         	movff	?___lwdiv+1,_centena+1
   421                           
   422                           ;newmaincode.c: 37:     decena = (numero % 100) / 10;
   423  00085E  0E00               	movlw	0
   424  000860  6E04               	movwf	(___lwmod@divisor+1)^0,c
   425  000862  0E64               	movlw	100
   426  000864  6E03               	movwf	___lwmod@divisor^0,c
   427  000866  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   428  00086A  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   429  00086E  EC0B  F005         	call	___lwmod	;wreg free
   430  000872  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   431  000876  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   432  00087A  0E00               	movlw	0
   433  00087C  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   434  00087E  0E0A               	movlw	10
   435  000880  6E08               	movwf	___lwdiv@divisor^0,c
   436  000882  EC98  F004         	call	___lwdiv	;wreg free
   437  000886  C006  F013         	movff	?___lwdiv,_decena
   438  00088A  C007  F014         	movff	?___lwdiv+1,_decena+1
   439                           
   440                           ;newmaincode.c: 38:     unidad = numero % 10;
   441  00088E  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   442  000892  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   443  000896  0E00               	movlw	0
   444  000898  6E04               	movwf	(___lwmod@divisor+1)^0,c
   445  00089A  0E0A               	movlw	10
   446  00089C  6E03               	movwf	___lwmod@divisor^0,c
   447  00089E  EC0B  F005         	call	___lwmod	;wreg free
   448  0008A2  C001  F011         	movff	?___lwmod,_unidad
   449  0008A6  C002  F012         	movff	?___lwmod+1,_unidad+1
   450  0008AA  0012               	return		;funcret
   451  0008AC                     __end_of_convierte:
   452                           	callstack 0
   453                           
   454 ;; *************** function ___lwmod *****************
   455 ;; Defined at:
   456 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\lwmod.c"
   457 ;; Parameters:    Size  Location     Type
   458 ;;  dividend        2    0[COMRAM] unsigned int 
   459 ;;  divisor         2    2[COMRAM] unsigned int 
   460 ;; Auto vars:     Size  Location     Type
   461 ;;  counter         1    4[COMRAM] unsigned char 
   462 ;; Return value:  Size  Location     Type
   463 ;;                  2    0[COMRAM] unsigned int 
   464 ;; Registers used:
   465 ;;		wreg, status,2, status,0
   466 ;; Tracked objects:
   467 ;;		On entry : 0/0
   468 ;;		On exit  : 0/0
   469 ;;		Unchanged: 0/0
   470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   471 ;;      Params:         4       0       0       0       0       0       0       0       0
   472 ;;      Locals:         1       0       0       0       0       0       0       0       0
   473 ;;      Temps:          0       0       0       0       0       0       0       0       0
   474 ;;      Totals:         5       0       0       0       0       0       0       0       0
   475 ;;Total ram usage:        5 bytes
   476 ;; Hardware stack levels used:    1
   477 ;; This function calls:
   478 ;;		Nothing
   479 ;; This function is called by:
   480 ;;		_convierte
   481 ;; This function uses a non-reentrant model
   482 ;;
   483                           
   484                           	psect	text2
   485  000A16                     __ptext2:
   486                           	callstack 0
   487  000A16                     ___lwmod:
   488                           	callstack 29
   489  000A16  5003               	movf	___lwmod@divisor^0,w,c
   490  000A18  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   491  000A1A  B4D8               	btfsc	status,2,c
   492  000A1C  EF12  F005         	goto	u221
   493  000A20  EF14  F005         	goto	u220
   494  000A24                     u221:
   495  000A24  EF38  F005         	goto	l638
   496  000A28                     u220:
   497  000A28  0E01               	movlw	1
   498  000A2A  6E05               	movwf	___lwmod@counter^0,c
   499  000A2C  EF1C  F005         	goto	l1090
   500  000A30                     l1088:
   501  000A30  90D8               	bcf	status,0,c
   502  000A32  3603               	rlcf	___lwmod@divisor^0,f,c
   503  000A34  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   504  000A36  2A05               	incf	___lwmod@counter^0,f,c
   505  000A38                     l1090:
   506  000A38  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   507  000A3A  EF21  F005         	goto	u231
   508  000A3E  EF23  F005         	goto	u230
   509  000A42                     u231:
   510  000A42  EF18  F005         	goto	l1088
   511  000A46                     u230:
   512  000A46                     l1092:
   513  000A46  5003               	movf	___lwmod@divisor^0,w,c
   514  000A48  5C01               	subwf	___lwmod@dividend^0,w,c
   515  000A4A  5004               	movf	(___lwmod@divisor+1)^0,w,c
   516  000A4C  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   517  000A4E  A0D8               	btfss	status,0,c
   518  000A50  EF2C  F005         	goto	u241
   519  000A54  EF2E  F005         	goto	u240
   520  000A58                     u241:
   521  000A58  EF32  F005         	goto	l1096
   522  000A5C                     u240:
   523  000A5C  5003               	movf	___lwmod@divisor^0,w,c
   524  000A5E  5E01               	subwf	___lwmod@dividend^0,f,c
   525  000A60  5004               	movf	(___lwmod@divisor+1)^0,w,c
   526  000A62  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   527  000A64                     l1096:
   528  000A64  90D8               	bcf	status,0,c
   529  000A66  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   530  000A68  3203               	rrcf	___lwmod@divisor^0,f,c
   531  000A6A  2E05               	decfsz	___lwmod@counter^0,f,c
   532  000A6C  EF23  F005         	goto	l1092
   533  000A70                     l638:
   534  000A70  C001  F001         	movff	___lwmod@dividend,?___lwmod
   535  000A74  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   536  000A78  0012               	return		;funcret
   537  000A7A                     __end_of___lwmod:
   538                           	callstack 0
   539                           
   540 ;; *************** function ___lwdiv *****************
   541 ;; Defined at:
   542 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\lwdiv.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;  dividend        2    5[COMRAM] unsigned int 
   545 ;;  divisor         2    7[COMRAM] unsigned int 
   546 ;; Auto vars:     Size  Location     Type
   547 ;;  quotient        2    9[COMRAM] unsigned int 
   548 ;;  counter         1   11[COMRAM] unsigned char 
   549 ;; Return value:  Size  Location     Type
   550 ;;                  2    5[COMRAM] unsigned int 
   551 ;; Registers used:
   552 ;;		wreg, status,2, status,0
   553 ;; Tracked objects:
   554 ;;		On entry : 0/0
   555 ;;		On exit  : 0/0
   556 ;;		Unchanged: 0/0
   557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   558 ;;      Params:         4       0       0       0       0       0       0       0       0
   559 ;;      Locals:         3       0       0       0       0       0       0       0       0
   560 ;;      Temps:          0       0       0       0       0       0       0       0       0
   561 ;;      Totals:         7       0       0       0       0       0       0       0       0
   562 ;;Total ram usage:        7 bytes
   563 ;; Hardware stack levels used:    1
   564 ;; This function calls:
   565 ;;		Nothing
   566 ;; This function is called by:
   567 ;;		_convierte
   568 ;; This function uses a non-reentrant model
   569 ;;
   570                           
   571                           	psect	text3
   572  000930                     __ptext3:
   573                           	callstack 0
   574  000930                     ___lwdiv:
   575                           	callstack 29
   576  000930  0E00               	movlw	0
   577  000932  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
   578  000934  0E00               	movlw	0
   579  000936  6E0A               	movwf	___lwdiv@quotient^0,c
   580  000938  5008               	movf	___lwdiv@divisor^0,w,c
   581  00093A  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
   582  00093C  B4D8               	btfsc	status,2,c
   583  00093E  EFA3  F004         	goto	u191
   584  000942  EFA5  F004         	goto	u190
   585  000946                     u191:
   586  000946  EFCD  F004         	goto	l628
   587  00094A                     u190:
   588  00094A  0E01               	movlw	1
   589  00094C  6E0C               	movwf	___lwdiv@counter^0,c
   590  00094E  EFAD  F004         	goto	l1070
   591  000952                     l1068:
   592  000952  90D8               	bcf	status,0,c
   593  000954  3608               	rlcf	___lwdiv@divisor^0,f,c
   594  000956  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
   595  000958  2A0C               	incf	___lwdiv@counter^0,f,c
   596  00095A                     l1070:
   597  00095A  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
   598  00095C  EFB2  F004         	goto	u201
   599  000960  EFB4  F004         	goto	u200
   600  000964                     u201:
   601  000964  EFA9  F004         	goto	l1068
   602  000968                     u200:
   603  000968                     l1072:
   604  000968  90D8               	bcf	status,0,c
   605  00096A  360A               	rlcf	___lwdiv@quotient^0,f,c
   606  00096C  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
   607  00096E  5008               	movf	___lwdiv@divisor^0,w,c
   608  000970  5C06               	subwf	___lwdiv@dividend^0,w,c
   609  000972  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   610  000974  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
   611  000976  A0D8               	btfss	status,0,c
   612  000978  EFC0  F004         	goto	u211
   613  00097C  EFC2  F004         	goto	u210
   614  000980                     u211:
   615  000980  EFC7  F004         	goto	l1080
   616  000984                     u210:
   617  000984  5008               	movf	___lwdiv@divisor^0,w,c
   618  000986  5E06               	subwf	___lwdiv@dividend^0,f,c
   619  000988  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   620  00098A  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
   621  00098C  800A               	bsf	___lwdiv@quotient^0,0,c
   622  00098E                     l1080:
   623  00098E  90D8               	bcf	status,0,c
   624  000990  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
   625  000992  3208               	rrcf	___lwdiv@divisor^0,f,c
   626  000994  2E0C               	decfsz	___lwdiv@counter^0,f,c
   627  000996  EFB4  F004         	goto	l1072
   628  00099A                     l628:
   629  00099A  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
   630  00099E  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
   631  0009A2  0012               	return		;funcret
   632  0009A4                     __end_of___lwdiv:
   633                           	callstack 0
   634                           
   635 ;; *************** function _configuracion *****************
   636 ;; Defined at:
   637 ;;		line 50 in file "newmaincode.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;		None
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg, status,2, status,0, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   651 ;;      Params:         0       0       0       0       0       0       0       0       0
   652 ;;      Locals:         0       0       0       0       0       0       0       0       0
   653 ;;      Temps:          0       0       0       0       0       0       0       0       0
   654 ;;      Totals:         0       0       0       0       0       0       0       0       0
   655 ;;Total ram usage:        0 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; Hardware stack levels required when called:    4
   658 ;; This function calls:
   659 ;;		_lcd_init
   660 ;; This function is called by:
   661 ;;		_main
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           	psect	text4
   666  000C48                     __ptext4:
   667                           	callstack 0
   668  000C48                     _configuracion:
   669                           	callstack 26
   670  000C48                     
   671                           ;newmaincode.c: 52:     ADCON2 = 0xA4;
   672  000C48  0EA4               	movlw	164
   673  000C4A  6EC0               	movwf	192,c	;volatile
   674                           
   675                           ;newmaincode.c: 53:     ADCON1 = 0x0E;
   676  000C4C  0E0E               	movlw	14
   677  000C4E  6EC1               	movwf	193,c	;volatile
   678                           
   679                           ;newmaincode.c: 54:     ADCON0 = 0x01;
   680  000C50  0E01               	movlw	1
   681  000C52  6EC2               	movwf	194,c	;volatile
   682  000C54                     
   683                           ;newmaincode.c: 55:     lcd_init();
   684  000C54  ECF5  F005         	call	_lcd_init	;wreg free
   685  000C58  0012               	return		;funcret
   686  000C5A                     __end_of_configuracion:
   687                           	callstack 0
   688                           
   689 ;; *************** function _lcd_init *****************
   690 ;; Defined at:
   691 ;;		line 41 in file "newmaincode.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;		None
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, status,2, status,0, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   705 ;;      Params:         0       0       0       0       0       0       0       0       0
   706 ;;      Locals:         0       0       0       0       0       0       0       0       0
   707 ;;      Temps:          1       0       0       0       0       0       0       0       0
   708 ;;      Totals:         1       0       0       0       0       0       0       0       0
   709 ;;Total ram usage:        1 bytes
   710 ;; Hardware stack levels used:    1
   711 ;; Hardware stack levels required when called:    3
   712 ;; This function calls:
   713 ;;		_BORRAR_LCD
   714 ;;		_CURSOR_HOME
   715 ;;		_CURSOR_ONOFF
   716 ;;		_LCD_CONFIG
   717 ;; This function is called by:
   718 ;;		_configuracion
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text5
   723  000BEA                     __ptext5:
   724                           	callstack 0
   725  000BEA                     _lcd_init:
   726                           	callstack 26
   727  000BEA                     
   728                           ;newmaincode.c: 42:     TRISD = 0x00;
   729  000BEA  0E00               	movlw	0
   730  000BEC  6E95               	movwf	149,c	;volatile
   731  000BEE                     
   732                           ;newmaincode.c: 43:     LCD_CONFIG();
   733  000BEE  EC3D  F005         	call	_LCD_CONFIG	;wreg free
   734  000BF2                     
   735                           ;newmaincode.c: 44:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   736  000BF2  0EEA               	movlw	234
   737  000BF4  6E05               	movwf	??_lcd_init^0,c
   738  000BF6  0EC3               	movlw	195
   739  000BF8                     u297:
   740  000BF8  2EE8               	decfsz	wreg,f,c
   741  000BFA  D7FE               	bra	u297
   742  000BFC  2E05               	decfsz	??_lcd_init^0,f,c
   743  000BFE  D7FC               	bra	u297
   744  000C00  F000               	nop	
   745  000C02                     
   746                           ;newmaincode.c: 45:     BORRAR_LCD();
   747  000C02  EC31  F006         	call	_BORRAR_LCD	;wreg free
   748  000C06                     
   749                           ;newmaincode.c: 46:     CURSOR_HOME();
   750  000C06  EC2D  F006         	call	_CURSOR_HOME	;wreg free
   751  000C0A                     
   752                           ;newmaincode.c: 47:     CURSOR_ONOFF(1);
   753  000C0A  0E01               	movlw	1
   754  000C0C  ECDD  F005         	call	_CURSOR_ONOFF
   755  000C10  0012               	return		;funcret
   756  000C12                     __end_of_lcd_init:
   757                           	callstack 0
   758                           
   759 ;; *************** function _LCD_CONFIG *****************
   760 ;; Defined at:
   761 ;;		line 72 in file "LCD.c"
   762 ;; Parameters:    Size  Location     Type
   763 ;;		None
   764 ;; Auto vars:     Size  Location     Type
   765 ;;		None
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      void 
   768 ;; Registers used:
   769 ;;		wreg, status,2, status,0, cstack
   770 ;; Tracked objects:
   771 ;;		On entry : 0/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   775 ;;      Params:         0       0       0       0       0       0       0       0       0
   776 ;;      Locals:         0       0       0       0       0       0       0       0       0
   777 ;;      Temps:          1       0       0       0       0       0       0       0       0
   778 ;;      Totals:         1       0       0       0       0       0       0       0       0
   779 ;;Total ram usage:        1 bytes
   780 ;; Hardware stack levels used:    1
   781 ;; Hardware stack levels required when called:    2
   782 ;; This function calls:
   783 ;;		_ENVIA_LCD_CMD
   784 ;;		_ENVIA_NIBBLE
   785 ;; This function is called by:
   786 ;;		_lcd_init
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text6
   791  000A7A                     __ptext6:
   792                           	callstack 0
   793  000A7A                     _LCD_CONFIG:
   794                           	callstack 26
   795  000A7A                     
   796                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   797  000A7A  908C               	bcf	140,0,c	;volatile
   798                           
   799                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   800  000A7C  928C               	bcf	140,1,c	;volatile
   801  000A7E                     
   802                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   803  000A7E  0E30               	movlw	48
   804  000A80  EC09  F006         	call	_ENVIA_NIBBLE
   805  000A84                     
   806                           ;LCD.c: 77:         _delay(24000);
   807  000A84  0E20               	movlw	32
   808  000A86  6E04               	movwf	??_LCD_CONFIG^0,c
   809  000A88  0E2A               	movlw	42
   810  000A8A                     u307:
   811  000A8A  2EE8               	decfsz	wreg,f,c
   812  000A8C  D7FE               	bra	u307
   813  000A8E  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   814  000A90  D7FC               	bra	u307
   815  000A92                     
   816                           ;LCD.c: 78:         _delay(24000);
   817  000A92  0E20               	movlw	32
   818  000A94  6E04               	movwf	??_LCD_CONFIG^0,c
   819  000A96  0E2A               	movlw	42
   820  000A98                     u317:
   821  000A98  2EE8               	decfsz	wreg,f,c
   822  000A9A  D7FE               	bra	u317
   823  000A9C  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   824  000A9E  D7FC               	bra	u317
   825                           
   826                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   827  000AA0  0E30               	movlw	48
   828  000AA2  EC09  F006         	call	_ENVIA_NIBBLE
   829  000AA6                     
   830                           ;LCD.c: 83:  _delay(1200);
   831  000AA6  0EF0               	movlw	240
   832  000AA8                     u327:
   833  000AA8  D000               	nop2	
   834  000AAA  2EE8               	decfsz	wreg,f,c
   835  000AAC  D7FD               	bra	u327
   836  000AAE                     
   837                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   838  000AAE  0E30               	movlw	48
   839  000AB0  EC09  F006         	call	_ENVIA_NIBBLE
   840  000AB4                     
   841                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   842  000AB4  0E20               	movlw	32
   843  000AB6  EC09  F006         	call	_ENVIA_NIBBLE
   844  000ABA                     
   845                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   846  000ABA  0E01               	movlw	1
   847  000ABC  ECA9  F005         	call	_ENVIA_LCD_CMD
   848  000AC0                     
   849                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   850  000AC0  0E28               	movlw	40
   851  000AC2  ECA9  F005         	call	_ENVIA_LCD_CMD
   852  000AC6                     
   853                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   854  000AC6  0E0F               	movlw	15
   855  000AC8  ECA9  F005         	call	_ENVIA_LCD_CMD
   856  000ACC                     
   857                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   858  000ACC  0E06               	movlw	6
   859  000ACE  ECA9  F005         	call	_ENVIA_LCD_CMD
   860  000AD2                     
   861                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   862  000AD2  0E01               	movlw	1
   863  000AD4  ECA9  F005         	call	_ENVIA_LCD_CMD
   864  000AD8  0012               	return		;funcret
   865  000ADA                     __end_of_LCD_CONFIG:
   866                           	callstack 0
   867                           
   868 ;; *************** function _CURSOR_ONOFF *****************
   869 ;; Defined at:
   870 ;;		line 35 in file "LCD.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;  estado          1    wreg     unsigned char 
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  estado          1    3[COMRAM] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, status,2, status,0, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   884 ;;      Params:         0       0       0       0       0       0       0       0       0
   885 ;;      Locals:         1       0       0       0       0       0       0       0       0
   886 ;;      Temps:          0       0       0       0       0       0       0       0       0
   887 ;;      Totals:         1       0       0       0       0       0       0       0       0
   888 ;;Total ram usage:        1 bytes
   889 ;; Hardware stack levels used:    1
   890 ;; Hardware stack levels required when called:    2
   891 ;; This function calls:
   892 ;;		_ENVIA_LCD_CMD
   893 ;; This function is called by:
   894 ;;		_lcd_init
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           	psect	text7
   899  000BBA                     __ptext7:
   900                           	callstack 0
   901  000BBA                     _CURSOR_ONOFF:
   902                           	callstack 26
   903                           
   904                           ;incstack = 0
   905                           ;CURSOR_ONOFF@estado stored from wreg
   906  000BBA  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   907  000BBC                     
   908                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   909  000BBC  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   910  000BBE  A4D8               	btfss	status,2,c
   911  000BC0  EFE4  F005         	goto	u21
   912  000BC4  EFE6  F005         	goto	u20
   913  000BC8                     u21:
   914  000BC8  EFE9  F005         	goto	l910
   915  000BCC                     u20:
   916  000BCC  0E0E               	movlw	14
   917  000BCE  ECA9  F005         	call	_ENVIA_LCD_CMD
   918  000BD2                     l910:
   919                           
   920                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   921  000BD2  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   922  000BD4  A4D8               	btfss	status,2,c
   923  000BD6  EFEF  F005         	goto	u31
   924  000BDA  EFF1  F005         	goto	u30
   925  000BDE                     u31:
   926  000BDE  EFF4  F005         	goto	l102
   927  000BE2                     u30:
   928  000BE2  0E0C               	movlw	12
   929  000BE4  ECA9  F005         	call	_ENVIA_LCD_CMD
   930  000BE8                     l102:
   931  000BE8  0012               	return		;funcret
   932  000BEA                     __end_of_CURSOR_ONOFF:
   933                           	callstack 0
   934                           
   935 ;; *************** function _CURSOR_HOME *****************
   936 ;; Defined at:
   937 ;;		line 30 in file "LCD.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;		None
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, status,2, status,0, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   951 ;;      Params:         0       0       0       0       0       0       0       0       0
   952 ;;      Locals:         0       0       0       0       0       0       0       0       0
   953 ;;      Temps:          0       0       0       0       0       0       0       0       0
   954 ;;      Totals:         0       0       0       0       0       0       0       0       0
   955 ;;Total ram usage:        0 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    2
   958 ;; This function calls:
   959 ;;		_ENVIA_LCD_CMD
   960 ;; This function is called by:
   961 ;;		_lcd_init
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           	psect	text8
   966  000C5A                     __ptext8:
   967                           	callstack 0
   968  000C5A                     _CURSOR_HOME:
   969                           	callstack 26
   970  000C5A                     
   971                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   972  000C5A  0E02               	movlw	2
   973  000C5C  ECA9  F005         	call	_ENVIA_LCD_CMD
   974  000C60  0012               	return		;funcret
   975  000C62                     __end_of_CURSOR_HOME:
   976                           	callstack 0
   977                           
   978 ;; *************** function _BORRAR_LCD *****************
   979 ;; Defined at:
   980 ;;		line 67 in file "LCD.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg, status,2, status,0, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   994 ;;      Params:         0       0       0       0       0       0       0       0       0
   995 ;;      Locals:         0       0       0       0       0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0       0       0       0       0
   997 ;;      Totals:         0       0       0       0       0       0       0       0       0
   998 ;;Total ram usage:        0 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    2
  1001 ;; This function calls:
  1002 ;;		_ENVIA_LCD_CMD
  1003 ;; This function is called by:
  1004 ;;		_lcd_init
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           	psect	text9
  1009  000C62                     __ptext9:
  1010                           	callstack 0
  1011  000C62                     _BORRAR_LCD:
  1012                           	callstack 26
  1013  000C62                     
  1014                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1015  000C62  0E01               	movlw	1
  1016  000C64  ECA9  F005         	call	_ENVIA_LCD_CMD
  1017  000C68  0012               	return		;funcret
  1018  000C6A                     __end_of_BORRAR_LCD:
  1019                           	callstack 0
  1020                           
  1021 ;; *************** function _POS_CURSOR *****************
  1022 ;; Defined at:
  1023 ;;		line 6 in file "LCD.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;  fila            1    wreg     unsigned char 
  1026 ;;  columna         1    3[COMRAM] unsigned char 
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;  fila            1    4[COMRAM] unsigned char 
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      void 
  1031 ;; Registers used:
  1032 ;;		wreg, status,2, status,0, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1038 ;;      Params:         1       0       0       0       0       0       0       0       0
  1039 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1040 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1041 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1042 ;;Total ram usage:        2 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; Hardware stack levels required when called:    2
  1045 ;; This function calls:
  1046 ;;		_ENVIA_LCD_CMD
  1047 ;; This function is called by:
  1048 ;;		_main
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           	psect	text10
  1053  000B18                     __ptext10:
  1054                           	callstack 0
  1055  000B18                     _POS_CURSOR:
  1056                           	callstack 28
  1057                           
  1058                           ;incstack = 0
  1059                           ;POS_CURSOR@fila stored from wreg
  1060  000B18  6E05               	movwf	POS_CURSOR@fila^0,c
  1061  000B1A                     
  1062                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1063  000B1A  0405               	decf	POS_CURSOR@fila^0,w,c
  1064  000B1C  A4D8               	btfss	status,2,c
  1065  000B1E  EF93  F005         	goto	u261
  1066  000B22  EF95  F005         	goto	u260
  1067  000B26                     u261:
  1068  000B26  EF9B  F005         	goto	l1114
  1069  000B2A                     u260:
  1070  000B2A                     
  1071                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1072  000B2A  5004               	movf	POS_CURSOR@columna^0,w,c
  1073  000B2C  0F80               	addlw	128
  1074  000B2E  ECA9  F005         	call	_ENVIA_LCD_CMD
  1075                           
  1076                           ;LCD.c: 11:  }
  1077  000B32  EFA8  F005         	goto	l84
  1078  000B36                     l1114:
  1079  000B36  0E02               	movlw	2
  1080  000B38  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1081  000B3A  A4D8               	btfss	status,2,c
  1082  000B3C  EFA2  F005         	goto	u271
  1083  000B40  EFA4  F005         	goto	u270
  1084  000B44                     u271:
  1085  000B44  EFA8  F005         	goto	l84
  1086  000B48                     u270:
  1087  000B48                     
  1088                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1089  000B48  5004               	movf	POS_CURSOR@columna^0,w,c
  1090  000B4A  0FC0               	addlw	192
  1091  000B4C  ECA9  F005         	call	_ENVIA_LCD_CMD
  1092  000B50                     l84:
  1093  000B50  0012               	return		;funcret
  1094  000B52                     __end_of_POS_CURSOR:
  1095                           	callstack 0
  1096                           
  1097 ;; *************** function _ENVIA_LCD_CMD *****************
  1098 ;; Defined at:
  1099 ;;		line 104 in file "LCD.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;  dato            1    wreg     unsigned char 
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;  dato            1    1[COMRAM] unsigned char 
  1104 ;;  aux             1    2[COMRAM] unsigned char 
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		wreg, status,2, status,0, cstack
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1114 ;;      Params:         0       0       0       0       0       0       0       0       0
  1115 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1116 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1117 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1118 ;;Total ram usage:        2 bytes
  1119 ;; Hardware stack levels used:    1
  1120 ;; Hardware stack levels required when called:    1
  1121 ;; This function calls:
  1122 ;;		_ENVIA_NIBBLE
  1123 ;;		_LEER_LCD
  1124 ;; This function is called by:
  1125 ;;		_POS_CURSOR
  1126 ;;		_CURSOR_HOME
  1127 ;;		_CURSOR_ONOFF
  1128 ;;		_BORRAR_LCD
  1129 ;;		_LCD_CONFIG
  1130 ;;		_BLINK_CURSOR
  1131 ;;		_DISPLAY_ONOFF
  1132 ;;		_GENERACARACTER
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text11
  1137  000B52                     __ptext11:
  1138                           	callstack 0
  1139  000B52                     _ENVIA_LCD_CMD:
  1140                           	callstack 26
  1141                           
  1142                           ;incstack = 0
  1143                           ;ENVIA_LCD_CMD@dato stored from wreg
  1144  000B52  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1145  000B54                     
  1146                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1147  000B54  908C               	bcf	140,0,c	;volatile
  1148  000B56                     
  1149                           ;LCD.c: 108:  LEER_LCD();
  1150  000B56  ECD2  F004         	call	_LEER_LCD	;wreg free
  1151  000B5A                     
  1152                           ;LCD.c: 109:  TRISD = 0b00000000;
  1153  000B5A  0E00               	movlw	0
  1154  000B5C  6E95               	movwf	149,c	;volatile
  1155  000B5E                     
  1156                           ;LCD.c: 111:         _delay(1200);
  1157  000B5E  0EF0               	movlw	240
  1158  000B60                     u337:
  1159  000B60  D000               	nop2	
  1160  000B62  2EE8               	decfsz	wreg,f,c
  1161  000B64  D7FD               	bra	u337
  1162  000B66                     
  1163                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1164  000B66  928C               	bcf	140,1,c	;volatile
  1165  000B68                     
  1166                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1167  000B68  948C               	bcf	140,2,c	;volatile
  1168  000B6A                     
  1169                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1170  000B6A  908C               	bcf	140,0,c	;volatile
  1171  000B6C                     
  1172                           ;LCD.c: 115:  aux = dato & 0xF0;
  1173  000B6C  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1174  000B6E  0BF0               	andlw	240
  1175  000B70  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1176  000B72                     
  1177                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1178  000B72  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1179  000B74  EC09  F006         	call	_ENVIA_NIBBLE
  1180  000B78                     
  1181                           ;LCD.c: 117:  aux = dato<<4;
  1182  000B78  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1183  000B7A  0BF0               	andlw	240
  1184  000B7C  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1185  000B7E                     
  1186                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1187  000B7E  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1188  000B80  EC09  F006         	call	_ENVIA_NIBBLE
  1189  000B84  0012               	return		;funcret
  1190  000B86                     __end_of_ENVIA_LCD_CMD:
  1191                           	callstack 0
  1192                           
  1193 ;; *************** function _ESCRIBE_MENSAJE *****************
  1194 ;; Defined at:
  1195 ;;		line 41 in file "LCD.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1198 ;;		 -> STR_2(4), STR_1(11), 
  1199 ;;  tam             1    5[COMRAM] unsigned char 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  i               1    8[COMRAM] unsigned char 
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1211 ;;      Params:         3       0       0       0       0       0       0       0       0
  1212 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1213 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1214 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1215 ;;Total ram usage:        6 bytes
  1216 ;; Hardware stack levels used:    1
  1217 ;; Hardware stack levels required when called:    2
  1218 ;; This function calls:
  1219 ;;		_ENVIA_CHAR
  1220 ;; This function is called by:
  1221 ;;		_main
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text12
  1226  000ADA                     __ptext12:
  1227                           	callstack 0
  1228  000ADA                     _ESCRIBE_MENSAJE:
  1229                           	callstack 28
  1230  000ADA                     
  1231                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1232  000ADA  0E00               	movlw	0
  1233  000ADC  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1234                           
  1235                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1236  000ADE  0E00               	movlw	0
  1237  000AE0  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1238  000AE2  EF82  F005         	goto	l1108
  1239  000AE6                     l1104:
  1240                           
  1241                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1242  000AE6  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1243  000AE8  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1244  000AEA  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1245  000AEC  0E00               	movlw	0
  1246  000AEE  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1247  000AF0  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1248  000AF2  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1249  000AF6  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1250  000AFA                     	if	0	;tblptru may be non-zero
  1251  000AFA                     	endif
  1252  000AFA                     	if	0	;tblptru may be non-zero
  1253  000AFA                     	endif
  1254  000AFA  0008               	tblrd		*
  1255  000AFC  50F5               	movf	tablat,w,c
  1256  000AFE  ECC3  F005         	call	_ENVIA_CHAR
  1257  000B02                     
  1258                           ;LCD.c: 47:  }
  1259  000B02  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1260  000B04                     l1108:
  1261  000B04  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1262  000B06  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1263  000B08  A0D8               	btfss	status,0,c
  1264  000B0A  EF89  F005         	goto	u251
  1265  000B0E  EF8B  F005         	goto	u250
  1266  000B12                     u251:
  1267  000B12  EF73  F005         	goto	l1104
  1268  000B16                     u250:
  1269  000B16  0012               	return		;funcret
  1270  000B18                     __end_of_ESCRIBE_MENSAJE:
  1271                           	callstack 0
  1272                           
  1273 ;; *************** function _ENVIA_CHAR *****************
  1274 ;; Defined at:
  1275 ;;		line 50 in file "LCD.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  dato            1    wreg     unsigned char 
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  dato            1    1[COMRAM] unsigned char 
  1280 ;;  aux             1    2[COMRAM] unsigned char 
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  1    wreg      void 
  1283 ;; Registers used:
  1284 ;;		wreg, status,2, status,0, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1290 ;;      Params:         0       0       0       0       0       0       0       0       0
  1291 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1293 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1294 ;;Total ram usage:        2 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; Hardware stack levels required when called:    1
  1297 ;; This function calls:
  1298 ;;		_ENVIA_NIBBLE
  1299 ;;		_LEER_LCD
  1300 ;; This function is called by:
  1301 ;;		_main
  1302 ;;		_ESCRIBE_MENSAJE
  1303 ;;		_GENERACARACTER
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text13
  1308  000B86                     __ptext13:
  1309                           	callstack 0
  1310  000B86                     _ENVIA_CHAR:
  1311                           	callstack 28
  1312                           
  1313                           ;incstack = 0
  1314                           ;ENVIA_CHAR@dato stored from wreg
  1315  000B86  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1316  000B88                     
  1317                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1318  000B88  808C               	bsf	140,0,c	;volatile
  1319  000B8A                     
  1320                           ;LCD.c: 54:  LEER_LCD();
  1321  000B8A  ECD2  F004         	call	_LEER_LCD	;wreg free
  1322  000B8E                     
  1323                           ;LCD.c: 55:  TRISD = 0x00;
  1324  000B8E  0E00               	movlw	0
  1325  000B90  6E95               	movwf	149,c	;volatile
  1326  000B92                     
  1327                           ;LCD.c: 56:         _delay(1200);
  1328  000B92  0EF0               	movlw	240
  1329  000B94                     u347:
  1330  000B94  D000               	nop2	
  1331  000B96  2EE8               	decfsz	wreg,f,c
  1332  000B98  D7FD               	bra	u347
  1333  000B9A                     
  1334                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1335  000B9A  928C               	bcf	140,1,c	;volatile
  1336  000B9C                     
  1337                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1338  000B9C  948C               	bcf	140,2,c	;volatile
  1339  000B9E                     
  1340                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1341  000B9E  808C               	bsf	140,0,c	;volatile
  1342  000BA0                     
  1343                           ;LCD.c: 61:  aux = dato & 0xF0;
  1344  000BA0  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1345  000BA2  0BF0               	andlw	240
  1346  000BA4  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1347  000BA6                     
  1348                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1349  000BA6  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1350  000BA8  EC09  F006         	call	_ENVIA_NIBBLE
  1351  000BAC                     
  1352                           ;LCD.c: 63:  aux = dato << 4;
  1353  000BAC  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1354  000BAE  0BF0               	andlw	240
  1355  000BB0  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1356  000BB2                     
  1357                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1358  000BB2  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1359  000BB4  EC09  F006         	call	_ENVIA_NIBBLE
  1360  000BB8  0012               	return		;funcret
  1361  000BBA                     __end_of_ENVIA_CHAR:
  1362                           	callstack 0
  1363                           
  1364 ;; *************** function _LEER_LCD *****************
  1365 ;; Defined at:
  1366 ;;		line 121 in file "LCD.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;		None
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  aux             1    0[COMRAM] unsigned char 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      void 
  1373 ;; Registers used:
  1374 ;;		wreg, status,2, status,0
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1380 ;;      Params:         0       0       0       0       0       0       0       0       0
  1381 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1382 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1383 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1384 ;;Total ram usage:        1 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_ENVIA_CHAR
  1390 ;;		_ENVIA_LCD_CMD
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text14
  1395  0009A4                     __ptext14:
  1396                           	callstack 0
  1397  0009A4                     _LEER_LCD:
  1398                           	callstack 26
  1399  0009A4                     
  1400                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1401  0009A4  0EF8               	movlw	248
  1402  0009A6  6E95               	movwf	149,c	;volatile
  1403  0009A8                     
  1404                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1405  0009A8  908C               	bcf	140,0,c	;volatile
  1406  0009AA                     
  1407                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1408  0009AA  828C               	bsf	140,1,c	;volatile
  1409  0009AC                     
  1410                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1411  0009AC  848C               	bsf	140,2,c	;volatile
  1412  0009AE                     
  1413                           ;LCD.c: 128:         _delay(1200);
  1414  0009AE  0EF0               	movlw	240
  1415  0009B0                     u357:
  1416  0009B0  D000               	nop2	
  1417  0009B2  2EE8               	decfsz	wreg,f,c
  1418  0009B4  D7FD               	bra	u357
  1419  0009B6                     
  1420                           ;LCD.c: 130:  aux = PORTD;
  1421  0009B6  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1422  0009BA                     
  1423                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1424  0009BA  948C               	bcf	140,2,c	;volatile
  1425  0009BC                     
  1426                           ;LCD.c: 132:         _delay(1200);
  1427  0009BC  0EF0               	movlw	240
  1428  0009BE                     u367:
  1429  0009BE  D000               	nop2	
  1430  0009C0  2EE8               	decfsz	wreg,f,c
  1431  0009C2  D7FD               	bra	u367
  1432  0009C4                     
  1433                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1434  0009C4  848C               	bsf	140,2,c	;volatile
  1435  0009C6                     
  1436                           ;LCD.c: 135:         _delay(1200);
  1437  0009C6  0EF0               	movlw	240
  1438  0009C8                     u377:
  1439  0009C8  D000               	nop2	
  1440  0009CA  2EE8               	decfsz	wreg,f,c
  1441  0009CC  D7FD               	bra	u377
  1442  0009CE                     
  1443                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1444  0009CE  948C               	bcf	140,2,c	;volatile
  1445  0009D0                     l832:
  1446                           
  1447                           ;LCD.c: 138:  aux = aux & 0x80;
  1448  0009D0  5001               	movf	LEER_LCD@aux^0,w,c
  1449  0009D2  0B80               	andlw	128
  1450  0009D4  6E01               	movwf	LEER_LCD@aux^0,c
  1451                           
  1452                           ;LCD.c: 139:  while(aux == 0x80)
  1453  0009D6  EF01  F005         	goto	l846
  1454  0009DA                     l127:
  1455                           
  1456                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1457  0009DA  848C               	bsf	140,2,c	;volatile
  1458  0009DC                     
  1459                           ;LCD.c: 142:             _delay(1200);
  1460  0009DC  0EF0               	movlw	240
  1461  0009DE                     u387:
  1462  0009DE  D000               	nop2	
  1463  0009E0  2EE8               	decfsz	wreg,f,c
  1464  0009E2  D7FD               	bra	u387
  1465  0009E4                     
  1466                           ;LCD.c: 143:             aux = PORTD;
  1467  0009E4  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1468  0009E8                     
  1469                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1470  0009E8  948C               	bcf	140,2,c	;volatile
  1471                           
  1472                           ;LCD.c: 145:             _delay(1200);
  1473  0009EA  0EF0               	movlw	240
  1474  0009EC                     u397:
  1475  0009EC  D000               	nop2	
  1476  0009EE  2EE8               	decfsz	wreg,f,c
  1477  0009F0  D7FD               	bra	u397
  1478  0009F2                     
  1479                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1480  0009F2  848C               	bsf	140,2,c	;volatile
  1481                           
  1482                           ;LCD.c: 147:             _delay(1200);
  1483  0009F4  0EF0               	movlw	240
  1484  0009F6                     u407:
  1485  0009F6  D000               	nop2	
  1486  0009F8  2EE8               	decfsz	wreg,f,c
  1487  0009FA  D7FD               	bra	u407
  1488  0009FC                     
  1489                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1490  0009FC  948C               	bcf	140,2,c	;volatile
  1491  0009FE  EFE8  F004         	goto	l832
  1492  000A02                     l846:
  1493                           
  1494                           ;LCD.c: 139:  while(aux == 0x80)
  1495  000A02  0E80               	movlw	128
  1496  000A04  1801               	xorwf	LEER_LCD@aux^0,w,c
  1497  000A06  B4D8               	btfsc	status,2,c
  1498  000A08  EF08  F005         	goto	u11
  1499  000A0C  EF0A  F005         	goto	u10
  1500  000A10                     u11:
  1501  000A10  EFED  F004         	goto	l127
  1502  000A14                     u10:
  1503  000A14  0012               	return		;funcret
  1504  000A16                     __end_of_LEER_LCD:
  1505                           	callstack 0
  1506                           
  1507 ;; *************** function _ENVIA_NIBBLE *****************
  1508 ;; Defined at:
  1509 ;;		line 93 in file "LCD.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  dato            1    wreg     unsigned char 
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  dato            1    0[COMRAM] unsigned char 
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, status,2, status,0
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1523 ;;      Params:         0       0       0       0       0       0       0       0       0
  1524 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1525 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1526 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1527 ;;Total ram usage:        1 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; This function calls:
  1530 ;;		Nothing
  1531 ;; This function is called by:
  1532 ;;		_ENVIA_CHAR
  1533 ;;		_LCD_CONFIG
  1534 ;;		_ENVIA_LCD_CMD
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text15
  1539  000C12                     __ptext15:
  1540                           	callstack 0
  1541  000C12                     _ENVIA_NIBBLE:
  1542                           	callstack 27
  1543                           
  1544                           ;incstack = 0
  1545                           ;ENVIA_NIBBLE@dato stored from wreg
  1546  000C12  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1547  000C14                     
  1548                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1549  000C14  0E0F               	movlw	15
  1550  000C16  168C               	andwf	140,f,c	;volatile
  1551                           
  1552                           ;LCD.c: 96:  dato &= 0xF0;
  1553  000C18  0EF0               	movlw	240
  1554  000C1A  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1555                           
  1556                           ;LCD.c: 97:  LATD|= dato;
  1557  000C1C  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1558  000C1E  128C               	iorwf	140,f,c	;volatile
  1559  000C20                     
  1560                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1561  000C20  848C               	bsf	140,2,c	;volatile
  1562  000C22                     
  1563                           ;LCD.c: 100:         _delay(1200);
  1564  000C22  0EF0               	movlw	240
  1565  000C24                     u417:
  1566  000C24  D000               	nop2	
  1567  000C26  2EE8               	decfsz	wreg,f,c
  1568  000C28  D7FD               	bra	u417
  1569  000C2A                     
  1570                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1571  000C2A  948C               	bcf	140,2,c	;volatile
  1572  000C2C  0012               	return		;funcret
  1573  000C2E                     __end_of_ENVIA_NIBBLE:
  1574                           	callstack 0
  1575                           
  1576                           	psect	rparam
  1577  0000                     
  1578                           	psect	idloc
  1579                           
  1580                           ;Config register IDLOC0 @ 0x200000
  1581                           ;	unspecified, using default values
  1582  200000                     	org	2097152
  1583  200000  FF                 	db	255
  1584                           
  1585                           ;Config register IDLOC1 @ 0x200001
  1586                           ;	unspecified, using default values
  1587  200001                     	org	2097153
  1588  200001  FF                 	db	255
  1589                           
  1590                           ;Config register IDLOC2 @ 0x200002
  1591                           ;	unspecified, using default values
  1592  200002                     	org	2097154
  1593  200002  FF                 	db	255
  1594                           
  1595                           ;Config register IDLOC3 @ 0x200003
  1596                           ;	unspecified, using default values
  1597  200003                     	org	2097155
  1598  200003  FF                 	db	255
  1599                           
  1600                           ;Config register IDLOC4 @ 0x200004
  1601                           ;	unspecified, using default values
  1602  200004                     	org	2097156
  1603  200004  FF                 	db	255
  1604                           
  1605                           ;Config register IDLOC5 @ 0x200005
  1606                           ;	unspecified, using default values
  1607  200005                     	org	2097157
  1608  200005  FF                 	db	255
  1609                           
  1610                           ;Config register IDLOC6 @ 0x200006
  1611                           ;	unspecified, using default values
  1612  200006                     	org	2097158
  1613  200006  FF                 	db	255
  1614                           
  1615                           ;Config register IDLOC7 @ 0x200007
  1616                           ;	unspecified, using default values
  1617  200007                     	org	2097159
  1618  200007  FF                 	db	255
  1619                           
  1620                           	psect	config
  1621                           
  1622                           ;Config register CONFIG1L @ 0x300000
  1623                           ;	PLL Prescaler Selection bits
  1624                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1625                           ;	System Clock Postscaler Selection bits
  1626                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1627                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1628                           ;	USBDIV = 0x0, unprogrammed default
  1629  300000                     	org	3145728
  1630  300000  00                 	db	0
  1631                           
  1632                           ;Config register CONFIG1H @ 0x300001
  1633                           ;	Oscillator Selection bits
  1634                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1635                           ;	Fail-Safe Clock Monitor Enable bit
  1636                           ;	FCMEN = 0x0, unprogrammed default
  1637                           ;	Internal/External Oscillator Switchover bit
  1638                           ;	IESO = 0x0, unprogrammed default
  1639  300001                     	org	3145729
  1640  300001  02                 	db	2
  1641                           
  1642                           ;Config register CONFIG2L @ 0x300002
  1643                           ;	Power-up Timer Enable bit
  1644                           ;	PWRT = ON, PWRT enabled
  1645                           ;	Brown-out Reset Enable bits
  1646                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1647                           ;	Brown-out Reset Voltage bits
  1648                           ;	BORV = 3, Minimum setting 2.05V
  1649                           ;	USB Voltage Regulator Enable bit
  1650                           ;	VREGEN = 0x0, unprogrammed default
  1651  300002                     	org	3145730
  1652  300002  18                 	db	24
  1653                           
  1654                           ;Config register CONFIG2H @ 0x300003
  1655                           ;	Watchdog Timer Enable bit
  1656                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1657                           ;	Watchdog Timer Postscale Select bits
  1658                           ;	WDTPS = 32768, 1:32768
  1659  300003                     	org	3145731
  1660  300003  1E                 	db	30
  1661                           
  1662                           ; Padding undefined space
  1663  300004                     	org	3145732
  1664  300004  FF                 	db	255
  1665                           
  1666                           ;Config register CONFIG3H @ 0x300005
  1667                           ;	CCP2 MUX bit
  1668                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1669                           ;	PORTB A/D Enable bit
  1670                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1671                           ;	Low-Power Timer 1 Oscillator Enable bit
  1672                           ;	LPT1OSC = 0x0, unprogrammed default
  1673                           ;	MCLR Pin Enable bit
  1674                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1675  300005                     	org	3145733
  1676  300005  81                 	db	129
  1677                           
  1678                           ;Config register CONFIG4L @ 0x300006
  1679                           ;	Stack Full/Underflow Reset Enable bit
  1680                           ;	STVREN = 0x1, unprogrammed default
  1681                           ;	Single-Supply ICSP Enable bit
  1682                           ;	LVP = OFF, Single-Supply ICSP disabled
  1683                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1684                           ;	ICPRT = 0x0, unprogrammed default
  1685                           ;	Extended Instruction Set Enable bit
  1686                           ;	XINST = 0x0, unprogrammed default
  1687                           ;	Background Debugger Enable bit
  1688                           ;	DEBUG = 0x1, unprogrammed default
  1689  300006                     	org	3145734
  1690  300006  81                 	db	129
  1691                           
  1692                           ; Padding undefined space
  1693  300007                     	org	3145735
  1694  300007  FF                 	db	255
  1695                           
  1696                           ;Config register CONFIG5L @ 0x300008
  1697                           ;	unspecified, using default values
  1698                           ;	Code Protection bit
  1699                           ;	CP0 = 0x1, unprogrammed default
  1700                           ;	Code Protection bit
  1701                           ;	CP1 = 0x1, unprogrammed default
  1702                           ;	Code Protection bit
  1703                           ;	CP2 = 0x1, unprogrammed default
  1704                           ;	Code Protection bit
  1705                           ;	CP3 = 0x1, unprogrammed default
  1706  300008                     	org	3145736
  1707  300008  0F                 	db	15
  1708                           
  1709                           ;Config register CONFIG5H @ 0x300009
  1710                           ;	unspecified, using default values
  1711                           ;	Boot Block Code Protection bit
  1712                           ;	CPB = 0x1, unprogrammed default
  1713                           ;	Data EEPROM Code Protection bit
  1714                           ;	CPD = 0x1, unprogrammed default
  1715  300009                     	org	3145737
  1716  300009  C0                 	db	192
  1717                           
  1718                           ;Config register CONFIG6L @ 0x30000A
  1719                           ;	unspecified, using default values
  1720                           ;	Write Protection bit
  1721                           ;	WRT0 = 0x1, unprogrammed default
  1722                           ;	Write Protection bit
  1723                           ;	WRT1 = 0x1, unprogrammed default
  1724                           ;	Write Protection bit
  1725                           ;	WRT2 = 0x1, unprogrammed default
  1726                           ;	Write Protection bit
  1727                           ;	WRT3 = 0x1, unprogrammed default
  1728  30000A                     	org	3145738
  1729  30000A  0F                 	db	15
  1730                           
  1731                           ;Config register CONFIG6H @ 0x30000B
  1732                           ;	unspecified, using default values
  1733                           ;	Configuration Register Write Protection bit
  1734                           ;	WRTC = 0x1, unprogrammed default
  1735                           ;	Boot Block Write Protection bit
  1736                           ;	WRTB = 0x1, unprogrammed default
  1737                           ;	Data EEPROM Write Protection bit
  1738                           ;	WRTD = 0x1, unprogrammed default
  1739  30000B                     	org	3145739
  1740  30000B  E0                 	db	224
  1741                           
  1742                           ;Config register CONFIG7L @ 0x30000C
  1743                           ;	unspecified, using default values
  1744                           ;	Table Read Protection bit
  1745                           ;	EBTR0 = 0x1, unprogrammed default
  1746                           ;	Table Read Protection bit
  1747                           ;	EBTR1 = 0x1, unprogrammed default
  1748                           ;	Table Read Protection bit
  1749                           ;	EBTR2 = 0x1, unprogrammed default
  1750                           ;	Table Read Protection bit
  1751                           ;	EBTR3 = 0x1, unprogrammed default
  1752  30000C                     	org	3145740
  1753  30000C  0F                 	db	15
  1754                           
  1755                           ;Config register CONFIG7H @ 0x30000D
  1756                           ;	unspecified, using default values
  1757                           ;	Boot Block Table Read Protection bit
  1758                           ;	EBTRB = 0x1, unprogrammed default
  1759  30000D                     	org	3145741
  1760  30000D  40                 	db	64
  1761                           tosu	equ	0xFFF
  1762                           tosh	equ	0xFFE
  1763                           tosl	equ	0xFFD
  1764                           stkptr	equ	0xFFC
  1765                           pclatu	equ	0xFFB
  1766                           pclath	equ	0xFFA
  1767                           pcl	equ	0xFF9
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           prodh	equ	0xFF4
  1773                           prodl	equ	0xFF3
  1774                           indf0	equ	0xFEF
  1775                           postinc0	equ	0xFEE
  1776                           postdec0	equ	0xFED
  1777                           preinc0	equ	0xFEC
  1778                           plusw0	equ	0xFEB
  1779                           fsr0h	equ	0xFEA
  1780                           fsr0l	equ	0xFE9
  1781                           wreg	equ	0xFE8
  1782                           indf1	equ	0xFE7
  1783                           postinc1	equ	0xFE6
  1784                           postdec1	equ	0xFE5
  1785                           preinc1	equ	0xFE4
  1786                           plusw1	equ	0xFE3
  1787                           fsr1h	equ	0xFE2
  1788                           fsr1l	equ	0xFE1
  1789                           bsr	equ	0xFE0
  1790                           indf2	equ	0xFDF
  1791                           postinc2	equ	0xFDE
  1792                           postdec2	equ	0xFDD
  1793                           preinc2	equ	0xFDC
  1794                           plusw2	equ	0xFDB
  1795                           fsr2h	equ	0xFDA
  1796                           fsr2l	equ	0xFD9
  1797                           status	equ	0xFD8

Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[4]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _configuracion->_lcd_init
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2841
                                             14 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                      _configuracion
                          _convierte
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1397
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuracion                                        0     0      0     525
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (3) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (3) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (4) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (5) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configuracion
     _lcd_init
       _BORRAR_LCD
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
       _CURSOR_HOME
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
       _CURSOR_ONOFF
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
       _LCD_CONFIG
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
         _ENVIA_NIBBLE
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      1A       1       27.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1A      20        0.0%
DATA                 0      0      1A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu May 21 14:42:46 2020

                      l43 08AA                        l46 0C10                        l55 08C2  
                      l49 0C58                        l84 0B50                        l97 0C60  
                      u10 0A14                        u11 0A10                        u20 0BCC  
                      u21 0BC8                        u30 0BE2                        u31 0BDE  
          ?_configuracion 0001             ENVIA_CHAR@aux 0003                       l102 0BE8  
                     l111 0BB8                       l120 0C2C                       l114 0C68  
                     l123 0B84                       l108 0B16                       l117 0AD8  
                     l127 09DA                       l129 0A14                       l810 09A4  
                     l635 09A2                       l820 09B6                       l812 09A8  
                     l900 0AD2                       l628 099A                       l645 0A78  
                     l830 09CE                       l822 09BA                       l814 09AA  
                     l902 0C62                       l910 0BD2                       l638 0A70  
                     l840 09F2                       l832 09D0                       l824 09BC  
                     l816 09AC                       l904 0C5A                       l912 0BE2  
                     l920 0C02                       l850 0C20                       l842 09FC  
                     l834 09DC                       l826 09C4                       l818 09AE  
                     l930 0B8E                       l906 0BBC                       l922 0C06  
                     l914 0BEA                       l852 0C22                       l836 09E4  
                     l828 09C6                       l940 0BA0                       l932 0B92  
                     l860 0B5A                       l908 0BCC                       l924 0C0A  
                     l916 0BEE                       l854 0C2A                       l838 09E8  
                     l846 0A02                       l942 0BA6                       l934 0B9A  
                     l926 0B88                       l870 0B6C                       l862 0B5E  
                     l918 0BF2                       l848 0C14                       l944 0BAC  
                     l936 0B9C                       l928 0B8A                       l872 0B72  
                     l864 0B66                       l856 0B54                       l880 0A7E  
                     l946 0BB2                       l938 0B9E                       l874 0B78  
                     l866 0B68                       l858 0B56                       l890 0AB4  
                     l882 0A84                       l876 0B7E                       l868 0B6A  
                     l892 0ABA                       l884 0A92                       l894 0AC0  
                     l886 0AA6                       l878 0A7A                       l990 0C54  
                     l896 0AC6                       l888 0AAE                       l898 0ACC  
                     l988 0C48                       u200 0968                       u201 0964  
                     u210 0984                       u211 0980                       u220 0A28  
                     u221 0A24                       u230 0A46                       u231 0A42  
                     u240 0A5C                       u241 0A58                       u250 0B16  
                     u251 0B12                       u307 0A8A                       u260 0B2A  
                     u261 0B26                       u317 0A98                       u270 0B48  
                     u190 094A                       u407 09F6                       u271 0B44  
                     u327 0AA8                       u191 0946                       u280 08D0  
                     u417 0C24                       u337 0B60                       u281 08CC  
                     u347 0B94                       u357 09B0                       u367 09BE  
                     u377 09C8                       u297 0BF8                       u387 09DE  
                     u397 09EC               LEER_LCD@aux 0001                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001            ENVIA_CHAR@dato 0002  
                    l1100 0812                      l1102 0ADA                      l1110 0B1A  
                    l1104 0AE6                      l1112 0B2A                      l1120 08B0  
                    l1106 0B02                      l1114 0B36                      l1130 08FC  
                    l1122 08C0                      l1108 0B04                      l1116 0B48  
                    l1132 0908                      l1124 08D0                      l1070 095A  
                    l1062 0930                      l1134 0910                      l1126 08DA  
                    l1118 08AC                      l1080 098E                      l1072 0968  
                    l1064 0938                      l1136 0918                      l1128 08EA  
                    l1082 0994                      l1074 096E                      l1066 094A  
                    l1090 0A38                      l1138 0920                      l1076 0984  
                    l1068 0952                      l1092 0A46                      l1084 0A16  
                    l1078 098C                      l1094 0A5C                      l1086 0A28  
                    l1096 0A64                      l1088 0A30                      l1098 0A6A  
                    STR_1 0801                      STR_2 080C                      _LATD 000F8C  
                    _main 08AC                      start 0000             ?_CURSOR_ONOFF 0001  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0002          __end_of_LEER_LCD 0A16  
     __size_of_BORRAR_LCD 0008                     ?_main 0001           __end_of___lwdiv 09A4  
         __end_of___lwmod 0A7A                     _PORTD 000F83       __size_of_LCD_CONFIG 0060  
                   _TRISD 000F95       __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0004  
                   tablat 000FF5                     status 000FD8            ??_CURSOR_ONOFF 0004  
         __initialization 0C2E              __end_of_main 0930           ??_configuracion 0006  
         _ESCRIBE_MENSAJE 0ADA                    ??_main 000F             __activetblptr 000001  
                  _ADCON0 000FC2                    _ADCON1 000FC1                    _ADCON2 000FC0  
                  _ADRESH 000FC4                    _ADRESL 000FC3          __end_of_lcd_init 0C12  
                  _decena 0013      __end_of_ENVIA_NIBBLE 0C2E                 ??___lwdiv 000A  
               ??___lwmod 0005       __size_of_POS_CURSOR 003A                    _millar 0017  
                  clear_0 0C34                    _res_ad 0019                    _unidad 0011  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0C3A  
            ??_LCD_CONFIG 0004             ___rparam_used 000001              ??_ENVIA_CHAR 0002  
 __end_of_ESCRIBE_MENSAJE 0B18            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0C6A  
        ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0BEA        __end_of_LCD_CONFIG 0ADA  
      __end_of_ENVIA_CHAR 0BBA        __size_of_convierte 009A                ??_LEER_LCD 0001  
        ENVIA_NIBBLE@dato 0001              ??_POS_CURSOR 0005                 ?_lcd_init 0001  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0004                   ___lwdiv 0930                   ___lwmod 0A16  
            __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0B86         __end_of_convierte 08AC  
                 __pcinit 0C2E        __end_of_POS_CURSOR 0B52                   __ramtop 0800  
                 _centena 0015                   __ptext0 08AC                   __ptext1 0812  
                 __ptext2 0A16                   __ptext3 0930                   __ptext4 0C48  
                 __ptext5 0BEA                   __ptext6 0A7A                   __ptext7 0BBA  
                 __ptext8 0C5A                   __ptext9 0C62                ??_lcd_init 0005  
            _ENVIA_NIBBLE 0C12      end_of_initialization 0C3A                   postinc0 000FEE  
   __end_of_configuracion 0C5A     __size_of_CURSOR_ONOFF 0030         __size_of_LEER_LCD 0072  
            _CURSOR_ONOFF 0BBA        CURSOR_ONOFF@estado 0004             ??_CURSOR_HOME 0004  
     start_initialization 0C2E         ENVIA_LCD_CMD@dato 0002               __pbssCOMRAM 0011  
     __end_of_CURSOR_HOME 0C62         __size_of_lcd_init 0028          ___lwdiv@dividend 0006  
                ?___lwdiv 0006                  ?___lwmod 0001               __smallconst 0800  
               _convierte 0812           convierte@numero 000D          ___lwdiv@quotient 000A  
                _LEER_LCD 09A4                  _LATDbits 000F8C          ESCRIBE_MENSAJE@i 0009  
          POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 003E                _ADCON0bits 000FC2  
              ?_convierte 000D               _CURSOR_HOME 0C5A    __size_of_ENVIA_LCD_CMD 0034  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
        __size_of___lwdiv 0074          __size_of___lwmod 0064           ___lwdiv@divisor 0008  
         ___lwdiv@counter 000C                  __ptext10 0B18                  __ptext11 0B52  
                __ptext12 0ADA                  __ptext13 0B86                  __ptext14 09A4  
                __ptext15 0C12                _BORRAR_LCD 0C62                  _lcd_init 0BEA  
  __size_of_configuracion 0012             __size_of_main 0084                _LCD_CONFIG 0A7A  
              _ENVIA_CHAR 0B86             _ENVIA_LCD_CMD 0B52               ??_convierte 000F  
       ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004          ___lwmod@dividend 0001  
          ?_ENVIA_LCD_CMD 0001             _configuracion 0C48           ___lwmod@divisor 0003  
         ___lwmod@counter 0005               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0B18               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
