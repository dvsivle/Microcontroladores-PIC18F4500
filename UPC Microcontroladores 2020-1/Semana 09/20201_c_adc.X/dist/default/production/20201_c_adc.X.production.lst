

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed May 20 12:45:34 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 2.10
    29                           ; Generated 31/07/2019 GMT
    30                           ; 
    31                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4550 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     _PORTD	set	3971
    63  0000                     _LATD	set	3980
    64  0000                     _LATDbits	set	3980
    65  0000                     _ADRESL	set	4035
    66  0000                     _ADRESH	set	4036
    67  0000                     _ADCON0bits	set	4034
    68  0000                     _ADCON0	set	4034
    69  0000                     _ADCON1	set	4033
    70  0000                     _ADCON2	set	4032
    71  0000                     _TRISD	set	3989
    72                           
    73                           	psect	smallconst
    74  000800                     __psmallconst:
    75                           	opt callstack 0
    76  000800  00                 	db	0
    77  000801                     STR_1:
    78  000801  56                 	db	86	;'V'
    79  000802  49                 	db	73	;'I'
    80  000803  52                 	db	82	;'R'
    81  000804  54                 	db	84	;'T'
    82  000805  55                 	db	85	;'U'
    83  000806  41                 	db	65	;'A'
    84  000807  4C                 	db	76	;'L'
    85  000808  41                 	db	65	;'A'
    86  000809  53                 	db	83	;'S'
    87  00080A  4F                 	db	79	;'O'
    88  00080B  00                 	db	0
    89  00080C                     STR_3:
    90  00080C  20                 	db	32
    91  00080D  43                 	db	67	;'C'
    92  00080E  31                 	db	49	;'1'
    93  00080F  3A                 	db	58	;':'
    94  000810  00                 	db	0
    95  000811                     STR_2:
    96  000811  43                 	db	67	;'C'
    97  000812  30                 	db	48	;'0'
    98  000813  3A                 	db	58	;':'
    99  000814  00                 	db	0
   100                           
   101                           ; #config settings
   102  000815  00                 	db	0	; dummy byte at the end
   103  0000                     
   104                           	psect	cinit
   105  000CA0                     __pcinit:
   106                           	opt callstack 0
   107  000CA0                     start_initialization:
   108                           	opt callstack 0
   109  000CA0                     __initialization:
   110                           	opt callstack 0
   111                           
   112                           ; Clear objects allocated to COMRAM (12 bytes)
   113  000CA0  EE00  F011         	lfsr	0,__pbssCOMRAM
   114  000CA4  0E0C               	movlw	12
   115  000CA6                     clear_0:
   116  000CA6  6AEE               	clrf	postinc0,c
   117  000CA8  06E8               	decf	wreg,f,c
   118  000CAA  E1FD               	bnz	clear_0
   119  000CAC                     end_of_initialization:
   120                           	opt callstack 0
   121  000CAC                     __end_of__initialization:
   122                           	opt callstack 0
   123  000CAC  0E00               	movlw	low (__Lsmallconst shr (0+16))
   124  000CAE  6EF8               	movwf	tblptru,c
   125  000CB0  0E08               	movlw	high __Lsmallconst
   126  000CB2  6EF7               	movwf	tblptrh,c
   127  000CB4  0100               	movlb	0
   128  000CB6  EF0B  F004         	goto	_main	;jump to C main() function
   129                           
   130                           	psect	bssCOMRAM
   131  000011                     __pbssCOMRAM:
   132                           	opt callstack 0
   133  000011                     _unidad:
   134                           	opt callstack 0
   135  000011                     	ds	2
   136  000013                     _decena:
   137                           	opt callstack 0
   138  000013                     	ds	2
   139  000015                     _centena:
   140                           	opt callstack 0
   141  000015                     	ds	2
   142  000017                     _millar:
   143                           	opt callstack 0
   144  000017                     	ds	2
   145  000019                     _res_ad1:
   146                           	opt callstack 0
   147  000019                     	ds	2
   148  00001B                     _res_ad0:
   149                           	opt callstack 0
   150  00001B                     	ds	2
   151                           
   152                           	psect	cstackCOMRAM
   153  000001                     __pcstackCOMRAM:
   154                           	opt callstack 0
   155  000001                     ?___lwmod:
   156                           	opt callstack 0
   157  000001                     ENVIA_NIBBLE@dato:
   158                           	opt callstack 0
   159  000001                     LEER_LCD@aux:
   160                           	opt callstack 0
   161  000001                     ___lwmod@dividend:
   162                           	opt callstack 0
   163                           
   164                           ; 2 bytes @ 0x0
   165  000001                     	ds	1
   166  000002                     ENVIA_CHAR@dato:
   167                           	opt callstack 0
   168  000002                     ENVIA_LCD_CMD@dato:
   169                           	opt callstack 0
   170                           
   171                           ; 1 bytes @ 0x1
   172  000002                     	ds	1
   173  000003                     ENVIA_CHAR@aux:
   174                           	opt callstack 0
   175  000003                     ENVIA_LCD_CMD@aux:
   176                           	opt callstack 0
   177  000003                     ___lwmod@divisor:
   178                           	opt callstack 0
   179                           
   180                           ; 2 bytes @ 0x2
   181  000003                     	ds	1
   182  000004                     ??_LCD_CONFIG:
   183  000004                     POS_CURSOR@columna:
   184                           	opt callstack 0
   185  000004                     CURSOR_ONOFF@estado:
   186                           	opt callstack 0
   187  000004                     ESCRIBE_MENSAJE@cadena:
   188                           	opt callstack 0
   189                           
   190                           ; 2 bytes @ 0x3
   191  000004                     	ds	1
   192  000005                     ??_lcd_init:
   193  000005                     POS_CURSOR@fila:
   194                           	opt callstack 0
   195  000005                     ___lwmod@counter:
   196                           	opt callstack 0
   197                           
   198                           ; 1 bytes @ 0x4
   199  000005                     	ds	1
   200  000006                     ?___lwdiv:
   201                           	opt callstack 0
   202  000006                     ESCRIBE_MENSAJE@tam:
   203                           	opt callstack 0
   204  000006                     ___lwdiv@dividend:
   205                           	opt callstack 0
   206                           
   207                           ; 2 bytes @ 0x5
   208  000006                     	ds	1
   209  000007                     ??_ESCRIBE_MENSAJE:
   210                           
   211                           ; 1 bytes @ 0x6
   212  000007                     	ds	1
   213  000008                     ___lwdiv@divisor:
   214                           	opt callstack 0
   215                           
   216                           ; 2 bytes @ 0x7
   217  000008                     	ds	1
   218  000009                     ESCRIBE_MENSAJE@i:
   219                           	opt callstack 0
   220                           
   221                           ; 1 bytes @ 0x8
   222  000009                     	ds	1
   223  00000A                     ___lwdiv@quotient:
   224                           	opt callstack 0
   225                           
   226                           ; 2 bytes @ 0x9
   227  00000A                     	ds	2
   228  00000C                     ___lwdiv@counter:
   229                           	opt callstack 0
   230                           
   231                           ; 1 bytes @ 0xB
   232  00000C                     	ds	1
   233  00000D                     convierte@numero:
   234                           	opt callstack 0
   235                           
   236                           ; 2 bytes @ 0xC
   237  00000D                     	ds	2
   238  00000F                     ??_main:
   239                           
   240                           ; 1 bytes @ 0xE
   241  00000F                     	ds	2
   242                           
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   245 ;;
   246 ;; *************** function _main *****************
   247 ;; Defined at:
   248 ;;		line 59 in file "maincode.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;		None
   253 ;; Return value:  Size  Location     Type
   254 ;;                  1    wreg      void 
   255 ;; Registers used:
   256 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   257 ;; Tracked objects:
   258 ;;		On entry : 0/0
   259 ;;		On exit  : 0/0
   260 ;;		Unchanged: 0/0
   261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   262 ;;      Params:         0       0       0       0       0       0       0       0       0
   263 ;;      Locals:         0       0       0       0       0       0       0       0       0
   264 ;;      Temps:          2       0       0       0       0       0       0       0       0
   265 ;;      Totals:         2       0       0       0       0       0       0       0       0
   266 ;;Total ram usage:        2 bytes
   267 ;; Hardware stack levels required when called:    5
   268 ;; This function calls:
   269 ;;		_ENVIA_CHAR
   270 ;;		_ESCRIBE_MENSAJE
   271 ;;		_POS_CURSOR
   272 ;;		_configuracion
   273 ;;		_convierte
   274 ;; This function is called by:
   275 ;;		Startup code after reset
   276 ;; This function uses a non-reentrant model
   277 ;;
   278                           
   279                           	psect	text0
   280  000816                     __ptext0:
   281                           	opt callstack 0
   282  000816                     _main:
   283                           	opt callstack 26
   284  000816                     
   285                           ;maincode.c: 60:     configuracion();
   286  000816  EC5D  F006         	call	_configuracion	;wreg free
   287  00081A                     
   288                           ;maincode.c: 61:     ESCRIBE_MENSAJE("VIRTUALASO",10);
   289  00081A  0E01               	movlw	low STR_1
   290  00081C  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   291  00081E  0E08               	movlw	high STR_1
   292  000820  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   293  000822  0E0A               	movlw	10
   294  000824  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   295  000826  ECA6  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   296  00082A                     l1159:
   297                           
   298                           ;maincode.c: 64:         ADCON0bits.CHS3 = 0;
   299  00082A  9AC2               	bcf	194,5,c	;volatile
   300  00082C                     
   301                           ;maincode.c: 65:         ADCON0bits.CHS2 = 0;
   302  00082C  98C2               	bcf	194,4,c	;volatile
   303  00082E                     
   304                           ;maincode.c: 66:         ADCON0bits.CHS1 = 0;
   305  00082E  96C2               	bcf	194,3,c	;volatile
   306  000830                     
   307                           ;maincode.c: 67:         ADCON0bits.CHS0 = 0;
   308  000830  94C2               	bcf	194,2,c	;volatile
   309  000832                     
   310                           ;maincode.c: 68:         ADCON0bits.GODONE = 1;
   311  000832  82C2               	bsf	194,1,c	;volatile
   312  000834                     l57:
   313  000834  B2C2               	btfsc	194,1,c	;volatile
   314  000836  EF1F  F004         	goto	u291
   315  00083A  EF21  F004         	goto	u290
   316  00083E                     u291:
   317  00083E  EF1A  F004         	goto	l57
   318  000842                     u290:
   319  000842                     
   320                           ;maincode.c: 70:         POS_CURSOR(2,0);
   321  000842  0E00               	movlw	0
   322  000844  6E04               	movwf	POS_CURSOR@columna^0,c
   323  000846  0E02               	movlw	2
   324  000848  ECC5  F005         	call	_POS_CURSOR
   325  00084C                     
   326                           ;maincode.c: 71:         ESCRIBE_MENSAJE("C0:",3);
   327  00084C  0E11               	movlw	low STR_2
   328  00084E  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   329  000850  0E08               	movlw	high STR_2
   330  000852  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   331  000854  0E03               	movlw	3
   332  000856  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   333  000858  ECA6  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   334  00085C                     
   335                           ;maincode.c: 72:         res_ad0 = (ADRESH << 8) + ADRESL;
   336  00085C  50C4               	movf	196,w,c	;volatile
   337  00085E  6E10               	movwf	(??_main+1)^0,c
   338  000860  6A0F               	clrf	??_main^0,c
   339  000862  50C3               	movf	195,w,c	;volatile
   340  000864  240F               	addwf	??_main^0,w,c
   341  000866  6E1B               	movwf	_res_ad0^0,c
   342  000868  0E00               	movlw	0
   343  00086A  2010               	addwfc	(??_main+1)^0,w,c
   344  00086C  6E1C               	movwf	(_res_ad0+1)^0,c
   345  00086E                     
   346                           ;maincode.c: 73:         convierte(res_ad0);
   347  00086E  C01B  F00D         	movff	_res_ad0,convierte@numero
   348  000872  C01C  F00E         	movff	_res_ad0+1,convierte@numero+1
   349  000876  EC84  F004         	call	_convierte	;wreg free
   350  00087A                     
   351                           ;maincode.c: 74:         ENVIA_CHAR(millar+0x30);
   352  00087A  5017               	movf	_millar^0,w,c
   353  00087C  0F30               	addlw	48
   354  00087E  ECFC  F005         	call	_ENVIA_CHAR
   355  000882                     
   356                           ;maincode.c: 75:         ENVIA_CHAR(centena+0x30);
   357  000882  5015               	movf	_centena^0,w,c
   358  000884  0F30               	addlw	48
   359  000886  ECFC  F005         	call	_ENVIA_CHAR
   360  00088A                     
   361                           ;maincode.c: 76:         ENVIA_CHAR(decena+0x30);
   362  00088A  5013               	movf	_decena^0,w,c
   363  00088C  0F30               	addlw	48
   364  00088E  ECFC  F005         	call	_ENVIA_CHAR
   365  000892                     
   366                           ;maincode.c: 77:         ENVIA_CHAR(unidad+0x30);
   367  000892  5011               	movf	_unidad^0,w,c
   368  000894  0F30               	addlw	48
   369  000896  ECFC  F005         	call	_ENVIA_CHAR
   370  00089A                     
   371                           ;maincode.c: 79:         ADCON0bits.CHS3 = 0;
   372  00089A  9AC2               	bcf	194,5,c	;volatile
   373  00089C                     
   374                           ;maincode.c: 80:         ADCON0bits.CHS2 = 0;
   375  00089C  98C2               	bcf	194,4,c	;volatile
   376  00089E                     
   377                           ;maincode.c: 81:         ADCON0bits.CHS1 = 0;
   378  00089E  96C2               	bcf	194,3,c	;volatile
   379  0008A0                     
   380                           ;maincode.c: 82:         ADCON0bits.CHS0 = 1;
   381  0008A0  84C2               	bsf	194,2,c	;volatile
   382  0008A2                     
   383                           ;maincode.c: 83:         ADCON0bits.GODONE = 1;
   384  0008A2  82C2               	bsf	194,1,c	;volatile
   385  0008A4                     l60:
   386  0008A4  B2C2               	btfsc	194,1,c	;volatile
   387  0008A6  EF57  F004         	goto	u301
   388  0008AA  EF59  F004         	goto	u300
   389  0008AE                     u301:
   390  0008AE  EF52  F004         	goto	l60
   391  0008B2                     u300:
   392  0008B2                     
   393                           ;maincode.c: 85:         ESCRIBE_MENSAJE(" C1:",4);
   394  0008B2  0E0C               	movlw	low STR_3
   395  0008B4  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   396  0008B6  0E08               	movlw	high STR_3
   397  0008B8  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   398  0008BA  0E04               	movlw	4
   399  0008BC  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   400  0008BE  ECA6  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   401  0008C2                     
   402                           ;maincode.c: 86:         res_ad1 = (ADRESH << 8) + ADRESL;
   403  0008C2  50C4               	movf	196,w,c	;volatile
   404  0008C4  6E10               	movwf	(??_main+1)^0,c
   405  0008C6  6A0F               	clrf	??_main^0,c
   406  0008C8  50C3               	movf	195,w,c	;volatile
   407  0008CA  240F               	addwf	??_main^0,w,c
   408  0008CC  6E19               	movwf	_res_ad1^0,c
   409  0008CE  0E00               	movlw	0
   410  0008D0  2010               	addwfc	(??_main+1)^0,w,c
   411  0008D2  6E1A               	movwf	(_res_ad1+1)^0,c
   412  0008D4                     
   413                           ;maincode.c: 87:         convierte(res_ad1);
   414  0008D4  C019  F00D         	movff	_res_ad1,convierte@numero
   415  0008D8  C01A  F00E         	movff	_res_ad1+1,convierte@numero+1
   416  0008DC  EC84  F004         	call	_convierte	;wreg free
   417  0008E0                     
   418                           ;maincode.c: 88:         ENVIA_CHAR(millar+0x30);
   419  0008E0  5017               	movf	_millar^0,w,c
   420  0008E2  0F30               	addlw	48
   421  0008E4  ECFC  F005         	call	_ENVIA_CHAR
   422  0008E8                     
   423                           ;maincode.c: 89:         ENVIA_CHAR(centena+0x30);
   424  0008E8  5015               	movf	_centena^0,w,c
   425  0008EA  0F30               	addlw	48
   426  0008EC  ECFC  F005         	call	_ENVIA_CHAR
   427  0008F0                     
   428                           ;maincode.c: 90:         ENVIA_CHAR(decena+0x30);
   429  0008F0  5013               	movf	_decena^0,w,c
   430  0008F2  0F30               	addlw	48
   431  0008F4  ECFC  F005         	call	_ENVIA_CHAR
   432  0008F8                     
   433                           ;maincode.c: 91:         ENVIA_CHAR(unidad+0x30);
   434  0008F8  5011               	movf	_unidad^0,w,c
   435  0008FA  0F30               	addlw	48
   436  0008FC  ECFC  F005         	call	_ENVIA_CHAR
   437  000900  EF15  F004         	goto	l1159
   438  000904  EF00  F000         	goto	start
   439  000908                     __end_of_main:
   440                           	opt callstack 0
   441                           
   442 ;; *************** function _convierte *****************
   443 ;; Defined at:
   444 ;;		line 35 in file "maincode.c"
   445 ;; Parameters:    Size  Location     Type
   446 ;;  numero          2   12[COMRAM] unsigned int 
   447 ;; Auto vars:     Size  Location     Type
   448 ;;		None
   449 ;; Return value:  Size  Location     Type
   450 ;;                  1    wreg      void 
   451 ;; Registers used:
   452 ;;		wreg, status,2, status,0, cstack
   453 ;; Tracked objects:
   454 ;;		On entry : 0/0
   455 ;;		On exit  : 0/0
   456 ;;		Unchanged: 0/0
   457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   458 ;;      Params:         2       0       0       0       0       0       0       0       0
   459 ;;      Locals:         0       0       0       0       0       0       0       0       0
   460 ;;      Temps:          0       0       0       0       0       0       0       0       0
   461 ;;      Totals:         2       0       0       0       0       0       0       0       0
   462 ;;Total ram usage:        2 bytes
   463 ;; Hardware stack levels used:    1
   464 ;; Hardware stack levels required when called:    1
   465 ;; This function calls:
   466 ;;		___lwdiv
   467 ;;		___lwmod
   468 ;; This function is called by:
   469 ;;		_main
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           	psect	text1
   474  000908                     __ptext1:
   475                           	opt callstack 0
   476  000908                     _convierte:
   477                           	opt callstack 29
   478  000908                     
   479                           ;maincode.c: 36:     millar = numero /1000;
   480  000908  C00D  F006         	movff	convierte@numero,___lwdiv@dividend
   481  00090C  C00E  F007         	movff	convierte@numero+1,___lwdiv@dividend+1
   482  000910  0E03               	movlw	3
   483  000912  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   484  000914  0EE8               	movlw	232
   485  000916  6E08               	movwf	___lwdiv@divisor^0,c
   486  000918  ECD1  F004         	call	___lwdiv	;wreg free
   487  00091C  C006  F017         	movff	?___lwdiv,_millar
   488  000920  C007  F018         	movff	?___lwdiv+1,_millar+1
   489                           
   490                           ;maincode.c: 37:     centena = (numero % 1000) / 100;
   491  000924  0E03               	movlw	3
   492  000926  6E04               	movwf	(___lwmod@divisor+1)^0,c
   493  000928  0EE8               	movlw	232
   494  00092A  6E03               	movwf	___lwmod@divisor^0,c
   495  00092C  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   496  000930  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   497  000934  EC44  F005         	call	___lwmod	;wreg free
   498  000938  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   499  00093C  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   500  000940  0E00               	movlw	0
   501  000942  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   502  000944  0E64               	movlw	100
   503  000946  6E08               	movwf	___lwdiv@divisor^0,c
   504  000948  ECD1  F004         	call	___lwdiv	;wreg free
   505  00094C  C006  F015         	movff	?___lwdiv,_centena
   506  000950  C007  F016         	movff	?___lwdiv+1,_centena+1
   507                           
   508                           ;maincode.c: 38:     decena = (numero % 100) / 10;
   509  000954  0E00               	movlw	0
   510  000956  6E04               	movwf	(___lwmod@divisor+1)^0,c
   511  000958  0E64               	movlw	100
   512  00095A  6E03               	movwf	___lwmod@divisor^0,c
   513  00095C  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   514  000960  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   515  000964  EC44  F005         	call	___lwmod	;wreg free
   516  000968  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   517  00096C  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   518  000970  0E00               	movlw	0
   519  000972  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   520  000974  0E0A               	movlw	10
   521  000976  6E08               	movwf	___lwdiv@divisor^0,c
   522  000978  ECD1  F004         	call	___lwdiv	;wreg free
   523  00097C  C006  F013         	movff	?___lwdiv,_decena
   524  000980  C007  F014         	movff	?___lwdiv+1,_decena+1
   525                           
   526                           ;maincode.c: 39:     unidad = numero % 10;
   527  000984  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   528  000988  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   529  00098C  0E00               	movlw	0
   530  00098E  6E04               	movwf	(___lwmod@divisor+1)^0,c
   531  000990  0E0A               	movlw	10
   532  000992  6E03               	movwf	___lwmod@divisor^0,c
   533  000994  EC44  F005         	call	___lwmod	;wreg free
   534  000998  C001  F011         	movff	?___lwmod,_unidad
   535  00099C  C002  F012         	movff	?___lwmod+1,_unidad+1
   536  0009A0  0012               	return		;funcret
   537  0009A2                     __end_of_convierte:
   538                           	opt callstack 0
   539                           
   540 ;; *************** function ___lwmod *****************
   541 ;; Defined at:
   542 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwmod.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;  dividend        2    0[COMRAM] unsigned int 
   545 ;;  divisor         2    2[COMRAM] unsigned int 
   546 ;; Auto vars:     Size  Location     Type
   547 ;;  counter         1    4[COMRAM] unsigned char 
   548 ;; Return value:  Size  Location     Type
   549 ;;                  2    0[COMRAM] unsigned int 
   550 ;; Registers used:
   551 ;;		wreg, status,2, status,0
   552 ;; Tracked objects:
   553 ;;		On entry : 0/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   557 ;;      Params:         4       0       0       0       0       0       0       0       0
   558 ;;      Locals:         1       0       0       0       0       0       0       0       0
   559 ;;      Temps:          0       0       0       0       0       0       0       0       0
   560 ;;      Totals:         5       0       0       0       0       0       0       0       0
   561 ;;Total ram usage:        5 bytes
   562 ;; Hardware stack levels used:    1
   563 ;; This function calls:
   564 ;;		Nothing
   565 ;; This function is called by:
   566 ;;		_convierte
   567 ;; This function uses a non-reentrant model
   568 ;;
   569                           
   570                           	psect	text2
   571  000A88                     __ptext2:
   572                           	opt callstack 0
   573  000A88                     ___lwmod:
   574                           	opt callstack 29
   575  000A88  5003               	movf	___lwmod@divisor^0,w,c
   576  000A8A  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   577  000A8C  B4D8               	btfsc	status,2,c
   578  000A8E  EF4B  F005         	goto	u231
   579  000A92  EF4D  F005         	goto	u230
   580  000A96                     u231:
   581  000A96  EF71  F005         	goto	l643
   582  000A9A                     u230:
   583  000A9A  0E01               	movlw	1
   584  000A9C  6E05               	movwf	___lwmod@counter^0,c
   585  000A9E  EF55  F005         	goto	l1127
   586  000AA2                     l1125:
   587  000AA2  90D8               	bcf	status,0,c
   588  000AA4  3603               	rlcf	___lwmod@divisor^0,f,c
   589  000AA6  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   590  000AA8  2A05               	incf	___lwmod@counter^0,f,c
   591  000AAA                     l1127:
   592  000AAA  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   593  000AAC  EF5A  F005         	goto	u241
   594  000AB0  EF5C  F005         	goto	u240
   595  000AB4                     u241:
   596  000AB4  EF51  F005         	goto	l1125
   597  000AB8                     u240:
   598  000AB8                     l1129:
   599  000AB8  5003               	movf	___lwmod@divisor^0,w,c
   600  000ABA  5C01               	subwf	___lwmod@dividend^0,w,c
   601  000ABC  5004               	movf	(___lwmod@divisor+1)^0,w,c
   602  000ABE  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   603  000AC0  A0D8               	btfss	status,0,c
   604  000AC2  EF65  F005         	goto	u251
   605  000AC6  EF67  F005         	goto	u250
   606  000ACA                     u251:
   607  000ACA  EF6B  F005         	goto	l1133
   608  000ACE                     u250:
   609  000ACE  5003               	movf	___lwmod@divisor^0,w,c
   610  000AD0  5E01               	subwf	___lwmod@dividend^0,f,c
   611  000AD2  5004               	movf	(___lwmod@divisor+1)^0,w,c
   612  000AD4  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   613  000AD6                     l1133:
   614  000AD6  90D8               	bcf	status,0,c
   615  000AD8  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   616  000ADA  3203               	rrcf	___lwmod@divisor^0,f,c
   617  000ADC  2E05               	decfsz	___lwmod@counter^0,f,c
   618  000ADE  EF5C  F005         	goto	l1129
   619  000AE2                     l643:
   620  000AE2  C001  F001         	movff	___lwmod@dividend,?___lwmod
   621  000AE6  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   622  000AEA  0012               	return		;funcret
   623  000AEC                     __end_of___lwmod:
   624                           	opt callstack 0
   625                           
   626 ;; *************** function ___lwdiv *****************
   627 ;; Defined at:
   628 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwdiv.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;  dividend        2    5[COMRAM] unsigned int 
   631 ;;  divisor         2    7[COMRAM] unsigned int 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  quotient        2    9[COMRAM] unsigned int 
   634 ;;  counter         1   11[COMRAM] unsigned char 
   635 ;; Return value:  Size  Location     Type
   636 ;;                  2    5[COMRAM] unsigned int 
   637 ;; Registers used:
   638 ;;		wreg, status,2, status,0
   639 ;; Tracked objects:
   640 ;;		On entry : 0/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   644 ;;      Params:         4       0       0       0       0       0       0       0       0
   645 ;;      Locals:         3       0       0       0       0       0       0       0       0
   646 ;;      Temps:          0       0       0       0       0       0       0       0       0
   647 ;;      Totals:         7       0       0       0       0       0       0       0       0
   648 ;;Total ram usage:        7 bytes
   649 ;; Hardware stack levels used:    1
   650 ;; This function calls:
   651 ;;		Nothing
   652 ;; This function is called by:
   653 ;;		_convierte
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text3
   658  0009A2                     __ptext3:
   659                           	opt callstack 0
   660  0009A2                     ___lwdiv:
   661                           	opt callstack 29
   662  0009A2  0E00               	movlw	0
   663  0009A4  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
   664  0009A6  0E00               	movlw	0
   665  0009A8  6E0A               	movwf	___lwdiv@quotient^0,c
   666  0009AA  5008               	movf	___lwdiv@divisor^0,w,c
   667  0009AC  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
   668  0009AE  B4D8               	btfsc	status,2,c
   669  0009B0  EFDC  F004         	goto	u201
   670  0009B4  EFDE  F004         	goto	u200
   671  0009B8                     u201:
   672  0009B8  EF06  F005         	goto	l633
   673  0009BC                     u200:
   674  0009BC  0E01               	movlw	1
   675  0009BE  6E0C               	movwf	___lwdiv@counter^0,c
   676  0009C0  EFE6  F004         	goto	l1107
   677  0009C4                     l1105:
   678  0009C4  90D8               	bcf	status,0,c
   679  0009C6  3608               	rlcf	___lwdiv@divisor^0,f,c
   680  0009C8  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
   681  0009CA  2A0C               	incf	___lwdiv@counter^0,f,c
   682  0009CC                     l1107:
   683  0009CC  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
   684  0009CE  EFEB  F004         	goto	u211
   685  0009D2  EFED  F004         	goto	u210
   686  0009D6                     u211:
   687  0009D6  EFE2  F004         	goto	l1105
   688  0009DA                     u210:
   689  0009DA                     l1109:
   690  0009DA  90D8               	bcf	status,0,c
   691  0009DC  360A               	rlcf	___lwdiv@quotient^0,f,c
   692  0009DE  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
   693  0009E0  5008               	movf	___lwdiv@divisor^0,w,c
   694  0009E2  5C06               	subwf	___lwdiv@dividend^0,w,c
   695  0009E4  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   696  0009E6  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
   697  0009E8  A0D8               	btfss	status,0,c
   698  0009EA  EFF9  F004         	goto	u221
   699  0009EE  EFFB  F004         	goto	u220
   700  0009F2                     u221:
   701  0009F2  EF00  F005         	goto	l1117
   702  0009F6                     u220:
   703  0009F6  5008               	movf	___lwdiv@divisor^0,w,c
   704  0009F8  5E06               	subwf	___lwdiv@dividend^0,f,c
   705  0009FA  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   706  0009FC  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
   707  0009FE  800A               	bsf	___lwdiv@quotient^0,0,c
   708  000A00                     l1117:
   709  000A00  90D8               	bcf	status,0,c
   710  000A02  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
   711  000A04  3208               	rrcf	___lwdiv@divisor^0,f,c
   712  000A06  2E0C               	decfsz	___lwdiv@counter^0,f,c
   713  000A08  EFED  F004         	goto	l1109
   714  000A0C                     l633:
   715  000A0C  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
   716  000A10  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
   717  000A14  0012               	return		;funcret
   718  000A16                     __end_of___lwdiv:
   719                           	opt callstack 0
   720                           
   721 ;; *************** function _configuracion *****************
   722 ;; Defined at:
   723 ;;		line 51 in file "maincode.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;		None
   726 ;; Auto vars:     Size  Location     Type
   727 ;;		None
   728 ;; Return value:  Size  Location     Type
   729 ;;                  1    wreg      void 
   730 ;; Registers used:
   731 ;;		wreg, status,2, status,0, cstack
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   737 ;;      Params:         0       0       0       0       0       0       0       0       0
   738 ;;      Locals:         0       0       0       0       0       0       0       0       0
   739 ;;      Temps:          0       0       0       0       0       0       0       0       0
   740 ;;      Totals:         0       0       0       0       0       0       0       0       0
   741 ;;Total ram usage:        0 bytes
   742 ;; Hardware stack levels used:    1
   743 ;; Hardware stack levels required when called:    4
   744 ;; This function calls:
   745 ;;		_lcd_init
   746 ;; This function is called by:
   747 ;;		_main
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           	psect	text4
   752  000CBA                     __ptext4:
   753                           	opt callstack 0
   754  000CBA                     _configuracion:
   755                           	opt callstack 26
   756  000CBA                     
   757                           ;maincode.c: 53:     ADCON2 = 0xA4;
   758  000CBA  0EA4               	movlw	164
   759  000CBC  6EC0               	movwf	192,c	;volatile
   760                           
   761                           ;maincode.c: 54:     ADCON1 = 0x0E;
   762  000CBE  0E0E               	movlw	14
   763  000CC0  6EC1               	movwf	193,c	;volatile
   764                           
   765                           ;maincode.c: 55:     ADCON0 = 0x01;
   766  000CC2  0E01               	movlw	1
   767  000CC4  6EC2               	movwf	194,c	;volatile
   768  000CC6                     
   769                           ;maincode.c: 56:     lcd_init();
   770  000CC6  EC2E  F006         	call	_lcd_init	;wreg free
   771  000CCA  0012               	return		;funcret
   772  000CCC                     __end_of_configuracion:
   773                           	opt callstack 0
   774                           
   775 ;; *************** function _lcd_init *****************
   776 ;; Defined at:
   777 ;;		line 42 in file "maincode.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;		None
   780 ;; Auto vars:     Size  Location     Type
   781 ;;		None
   782 ;; Return value:  Size  Location     Type
   783 ;;                  1    wreg      void 
   784 ;; Registers used:
   785 ;;		wreg, status,2, status,0, cstack
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   791 ;;      Params:         0       0       0       0       0       0       0       0       0
   792 ;;      Locals:         0       0       0       0       0       0       0       0       0
   793 ;;      Temps:          1       0       0       0       0       0       0       0       0
   794 ;;      Totals:         1       0       0       0       0       0       0       0       0
   795 ;;Total ram usage:        1 bytes
   796 ;; Hardware stack levels used:    1
   797 ;; Hardware stack levels required when called:    3
   798 ;; This function calls:
   799 ;;		_BORRAR_LCD
   800 ;;		_CURSOR_HOME
   801 ;;		_CURSOR_ONOFF
   802 ;;		_LCD_CONFIG
   803 ;; This function is called by:
   804 ;;		_configuracion
   805 ;; This function uses a non-reentrant model
   806 ;;
   807                           
   808                           	psect	text5
   809  000C5C                     __ptext5:
   810                           	opt callstack 0
   811  000C5C                     _lcd_init:
   812                           	opt callstack 26
   813  000C5C                     
   814                           ;maincode.c: 43:     TRISD = 0x00;
   815  000C5C  0E00               	movlw	0
   816  000C5E  6E95               	movwf	149,c	;volatile
   817  000C60                     
   818                           ;maincode.c: 44:     LCD_CONFIG();
   819  000C60  EC76  F005         	call	_LCD_CONFIG	;wreg free
   820  000C64                     
   821                           ;maincode.c: 45:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   822  000C64  0EEA               	movlw	234
   823  000C66  6E05               	movwf	??_lcd_init^0,c
   824  000C68  0EC3               	movlw	195
   825  000C6A                     u317:
   826  000C6A  2EE8               	decfsz	wreg,f,c
   827  000C6C  D7FE               	bra	u317
   828  000C6E  2E05               	decfsz	??_lcd_init^0,f,c
   829  000C70  D7FC               	bra	u317
   830  000C72  F000               	nop	
   831  000C74                     
   832                           ;maincode.c: 46:     BORRAR_LCD();
   833  000C74  EC6A  F006         	call	_BORRAR_LCD	;wreg free
   834  000C78                     
   835                           ;maincode.c: 47:     CURSOR_HOME();
   836  000C78  EC66  F006         	call	_CURSOR_HOME	;wreg free
   837  000C7C                     
   838                           ;maincode.c: 48:     CURSOR_ONOFF(1);
   839  000C7C  0E01               	movlw	1
   840  000C7E  EC16  F006         	call	_CURSOR_ONOFF
   841  000C82  0012               	return		;funcret
   842  000C84                     __end_of_lcd_init:
   843                           	opt callstack 0
   844                           
   845 ;; *************** function _LCD_CONFIG *****************
   846 ;; Defined at:
   847 ;;		line 72 in file "LCD.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;		None
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, status,2, status,0, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   861 ;;      Params:         0       0       0       0       0       0       0       0       0
   862 ;;      Locals:         0       0       0       0       0       0       0       0       0
   863 ;;      Temps:          1       0       0       0       0       0       0       0       0
   864 ;;      Totals:         1       0       0       0       0       0       0       0       0
   865 ;;Total ram usage:        1 bytes
   866 ;; Hardware stack levels used:    1
   867 ;; Hardware stack levels required when called:    2
   868 ;; This function calls:
   869 ;;		_ENVIA_LCD_CMD
   870 ;;		_ENVIA_NIBBLE
   871 ;; This function is called by:
   872 ;;		_lcd_init
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           	psect	text6
   877  000AEC                     __ptext6:
   878                           	opt callstack 0
   879  000AEC                     _LCD_CONFIG:
   880                           	opt callstack 26
   881  000AEC                     
   882                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   883  000AEC  908C               	bcf	140,0,c	;volatile
   884                           
   885                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   886  000AEE  928C               	bcf	140,1,c	;volatile
   887  000AF0                     
   888                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   889  000AF0  0E30               	movlw	48
   890  000AF2  EC42  F006         	call	_ENVIA_NIBBLE
   891  000AF6                     
   892                           ;LCD.c: 77:         _delay(24000);
   893  000AF6  0E20               	movlw	32
   894  000AF8  6E04               	movwf	??_LCD_CONFIG^0,c
   895  000AFA  0E2A               	movlw	42
   896  000AFC                     u327:
   897  000AFC  2EE8               	decfsz	wreg,f,c
   898  000AFE  D7FE               	bra	u327
   899  000B00  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   900  000B02  D7FC               	bra	u327
   901  000B04                     
   902                           ;LCD.c: 78:         _delay(24000);
   903  000B04  0E20               	movlw	32
   904  000B06  6E04               	movwf	??_LCD_CONFIG^0,c
   905  000B08  0E2A               	movlw	42
   906  000B0A                     u337:
   907  000B0A  2EE8               	decfsz	wreg,f,c
   908  000B0C  D7FE               	bra	u337
   909  000B0E  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   910  000B10  D7FC               	bra	u337
   911                           
   912                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   913  000B12  0E30               	movlw	48
   914  000B14  EC42  F006         	call	_ENVIA_NIBBLE
   915  000B18                     
   916                           ;LCD.c: 83:  _delay(1200);
   917  000B18  0EF0               	movlw	240
   918  000B1A                     u347:
   919  000B1A  D000               	nop2	
   920  000B1C  2EE8               	decfsz	wreg,f,c
   921  000B1E  D7FD               	bra	u347
   922  000B20                     
   923                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   924  000B20  0E30               	movlw	48
   925  000B22  EC42  F006         	call	_ENVIA_NIBBLE
   926  000B26                     
   927                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   928  000B26  0E20               	movlw	32
   929  000B28  EC42  F006         	call	_ENVIA_NIBBLE
   930  000B2C                     
   931                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   932  000B2C  0E01               	movlw	1
   933  000B2E  ECE2  F005         	call	_ENVIA_LCD_CMD
   934  000B32                     
   935                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   936  000B32  0E28               	movlw	40
   937  000B34  ECE2  F005         	call	_ENVIA_LCD_CMD
   938  000B38                     
   939                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   940  000B38  0E0F               	movlw	15
   941  000B3A  ECE2  F005         	call	_ENVIA_LCD_CMD
   942  000B3E                     
   943                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   944  000B3E  0E06               	movlw	6
   945  000B40  ECE2  F005         	call	_ENVIA_LCD_CMD
   946  000B44                     
   947                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   948  000B44  0E01               	movlw	1
   949  000B46  ECE2  F005         	call	_ENVIA_LCD_CMD
   950  000B4A  0012               	return		;funcret
   951  000B4C                     __end_of_LCD_CONFIG:
   952                           	opt callstack 0
   953                           
   954 ;; *************** function _CURSOR_ONOFF *****************
   955 ;; Defined at:
   956 ;;		line 35 in file "LCD.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;  estado          1    wreg     unsigned char 
   959 ;; Auto vars:     Size  Location     Type
   960 ;;  estado          1    3[COMRAM] unsigned char 
   961 ;; Return value:  Size  Location     Type
   962 ;;                  1    wreg      void 
   963 ;; Registers used:
   964 ;;		wreg, status,2, status,0, cstack
   965 ;; Tracked objects:
   966 ;;		On entry : 0/0
   967 ;;		On exit  : 0/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   970 ;;      Params:         0       0       0       0       0       0       0       0       0
   971 ;;      Locals:         1       0       0       0       0       0       0       0       0
   972 ;;      Temps:          0       0       0       0       0       0       0       0       0
   973 ;;      Totals:         1       0       0       0       0       0       0       0       0
   974 ;;Total ram usage:        1 bytes
   975 ;; Hardware stack levels used:    1
   976 ;; Hardware stack levels required when called:    2
   977 ;; This function calls:
   978 ;;		_ENVIA_LCD_CMD
   979 ;; This function is called by:
   980 ;;		_lcd_init
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984                           	psect	text7
   985  000C2C                     __ptext7:
   986                           	opt callstack 0
   987  000C2C                     _CURSOR_ONOFF:
   988                           	opt callstack 26
   989                           
   990                           ;incstack = 0
   991                           ;CURSOR_ONOFF@estado stored from wreg
   992  000C2C  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   993  000C2E                     
   994                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   995  000C2E  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   996  000C30  A4D8               	btfss	status,2,c
   997  000C32  EF1D  F006         	goto	u21
   998  000C36  EF1F  F006         	goto	u20
   999  000C3A                     u21:
  1000  000C3A  EF22  F006         	goto	l915
  1001  000C3E                     u20:
  1002  000C3E  0E0E               	movlw	14
  1003  000C40  ECE2  F005         	call	_ENVIA_LCD_CMD
  1004  000C44                     l915:
  1005                           
  1006                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1007  000C44  0404               	decf	CURSOR_ONOFF@estado^0,w,c
  1008  000C46  A4D8               	btfss	status,2,c
  1009  000C48  EF28  F006         	goto	u31
  1010  000C4C  EF2A  F006         	goto	u30
  1011  000C50                     u31:
  1012  000C50  EF2D  F006         	goto	l107
  1013  000C54                     u30:
  1014  000C54  0E0C               	movlw	12
  1015  000C56  ECE2  F005         	call	_ENVIA_LCD_CMD
  1016  000C5A                     l107:
  1017  000C5A  0012               	return		;funcret
  1018  000C5C                     __end_of_CURSOR_ONOFF:
  1019                           	opt callstack 0
  1020                           
  1021 ;; *************** function _CURSOR_HOME *****************
  1022 ;; Defined at:
  1023 ;;		line 30 in file "LCD.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		wreg, status,2, status,0, cstack
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1037 ;;      Params:         0       0       0       0       0       0       0       0       0
  1038 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1039 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1040 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1041 ;;Total ram usage:        0 bytes
  1042 ;; Hardware stack levels used:    1
  1043 ;; Hardware stack levels required when called:    2
  1044 ;; This function calls:
  1045 ;;		_ENVIA_LCD_CMD
  1046 ;; This function is called by:
  1047 ;;		_lcd_init
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text8
  1052  000CCC                     __ptext8:
  1053                           	opt callstack 0
  1054  000CCC                     _CURSOR_HOME:
  1055                           	opt callstack 26
  1056  000CCC                     
  1057                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1058  000CCC  0E02               	movlw	2
  1059  000CCE  ECE2  F005         	call	_ENVIA_LCD_CMD
  1060  000CD2  0012               	return		;funcret
  1061  000CD4                     __end_of_CURSOR_HOME:
  1062                           	opt callstack 0
  1063                           
  1064 ;; *************** function _BORRAR_LCD *****************
  1065 ;; Defined at:
  1066 ;;		line 67 in file "LCD.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;		None
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;		None
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  1    wreg      void 
  1073 ;; Registers used:
  1074 ;;		wreg, status,2, status,0, cstack
  1075 ;; Tracked objects:
  1076 ;;		On entry : 0/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1080 ;;      Params:         0       0       0       0       0       0       0       0       0
  1081 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1082 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1083 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1084 ;;Total ram usage:        0 bytes
  1085 ;; Hardware stack levels used:    1
  1086 ;; Hardware stack levels required when called:    2
  1087 ;; This function calls:
  1088 ;;		_ENVIA_LCD_CMD
  1089 ;; This function is called by:
  1090 ;;		_lcd_init
  1091 ;; This function uses a non-reentrant model
  1092 ;;
  1093                           
  1094                           	psect	text9
  1095  000CD4                     __ptext9:
  1096                           	opt callstack 0
  1097  000CD4                     _BORRAR_LCD:
  1098                           	opt callstack 26
  1099  000CD4                     
  1100                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1101  000CD4  0E01               	movlw	1
  1102  000CD6  ECE2  F005         	call	_ENVIA_LCD_CMD
  1103  000CDA  0012               	return		;funcret
  1104  000CDC                     __end_of_BORRAR_LCD:
  1105                           	opt callstack 0
  1106                           
  1107 ;; *************** function _POS_CURSOR *****************
  1108 ;; Defined at:
  1109 ;;		line 6 in file "LCD.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;  fila            1    wreg     unsigned char 
  1112 ;;  columna         1    3[COMRAM] unsigned char 
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;  fila            1    4[COMRAM] unsigned char 
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, status,2, status,0, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1124 ;;      Params:         1       0       0       0       0       0       0       0       0
  1125 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1126 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1127 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1128 ;;Total ram usage:        2 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    2
  1131 ;; This function calls:
  1132 ;;		_ENVIA_LCD_CMD
  1133 ;; This function is called by:
  1134 ;;		_main
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           	psect	text10
  1139  000B8A                     __ptext10:
  1140                           	opt callstack 0
  1141  000B8A                     _POS_CURSOR:
  1142                           	opt callstack 28
  1143                           
  1144                           ;incstack = 0
  1145                           ;POS_CURSOR@fila stored from wreg
  1146  000B8A  6E05               	movwf	POS_CURSOR@fila^0,c
  1147  000B8C                     
  1148                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1149  000B8C  0405               	decf	POS_CURSOR@fila^0,w,c
  1150  000B8E  A4D8               	btfss	status,2,c
  1151  000B90  EFCC  F005         	goto	u271
  1152  000B94  EFCE  F005         	goto	u270
  1153  000B98                     u271:
  1154  000B98  EFD4  F005         	goto	l1151
  1155  000B9C                     u270:
  1156  000B9C                     
  1157                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1158  000B9C  5004               	movf	POS_CURSOR@columna^0,w,c
  1159  000B9E  0F80               	addlw	128
  1160  000BA0  ECE2  F005         	call	_ENVIA_LCD_CMD
  1161                           
  1162                           ;LCD.c: 11:  }
  1163  000BA4  EFE1  F005         	goto	l89
  1164  000BA8                     l1151:
  1165  000BA8  0E02               	movlw	2
  1166  000BAA  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1167  000BAC  A4D8               	btfss	status,2,c
  1168  000BAE  EFDB  F005         	goto	u281
  1169  000BB2  EFDD  F005         	goto	u280
  1170  000BB6                     u281:
  1171  000BB6  EFE1  F005         	goto	l89
  1172  000BBA                     u280:
  1173  000BBA                     
  1174                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1175  000BBA  5004               	movf	POS_CURSOR@columna^0,w,c
  1176  000BBC  0FC0               	addlw	192
  1177  000BBE  ECE2  F005         	call	_ENVIA_LCD_CMD
  1178  000BC2                     l89:
  1179  000BC2  0012               	return		;funcret
  1180  000BC4                     __end_of_POS_CURSOR:
  1181                           	opt callstack 0
  1182                           
  1183 ;; *************** function _ENVIA_LCD_CMD *****************
  1184 ;; Defined at:
  1185 ;;		line 104 in file "LCD.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;  dato            1    wreg     unsigned char 
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;  dato            1    1[COMRAM] unsigned char 
  1190 ;;  aux             1    2[COMRAM] unsigned char 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      void 
  1193 ;; Registers used:
  1194 ;;		wreg, status,2, status,0, cstack
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1200 ;;      Params:         0       0       0       0       0       0       0       0       0
  1201 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1202 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1203 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1204 ;;Total ram usage:        2 bytes
  1205 ;; Hardware stack levels used:    1
  1206 ;; Hardware stack levels required when called:    1
  1207 ;; This function calls:
  1208 ;;		_ENVIA_NIBBLE
  1209 ;;		_LEER_LCD
  1210 ;; This function is called by:
  1211 ;;		_POS_CURSOR
  1212 ;;		_CURSOR_HOME
  1213 ;;		_CURSOR_ONOFF
  1214 ;;		_BORRAR_LCD
  1215 ;;		_LCD_CONFIG
  1216 ;;		_BLINK_CURSOR
  1217 ;;		_DISPLAY_ONOFF
  1218 ;;		_GENERACARACTER
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text11
  1223  000BC4                     __ptext11:
  1224                           	opt callstack 0
  1225  000BC4                     _ENVIA_LCD_CMD:
  1226                           	opt callstack 26
  1227                           
  1228                           ;incstack = 0
  1229                           ;ENVIA_LCD_CMD@dato stored from wreg
  1230  000BC4  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1231  000BC6                     
  1232                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1233  000BC6  908C               	bcf	140,0,c	;volatile
  1234  000BC8                     
  1235                           ;LCD.c: 108:  LEER_LCD();
  1236  000BC8  EC0B  F005         	call	_LEER_LCD	;wreg free
  1237  000BCC                     
  1238                           ;LCD.c: 109:  TRISD = 0b00000000;
  1239  000BCC  0E00               	movlw	0
  1240  000BCE  6E95               	movwf	149,c	;volatile
  1241  000BD0                     
  1242                           ;LCD.c: 111:         _delay(1200);
  1243  000BD0  0EF0               	movlw	240
  1244  000BD2                     u357:
  1245  000BD2  D000               	nop2	
  1246  000BD4  2EE8               	decfsz	wreg,f,c
  1247  000BD6  D7FD               	bra	u357
  1248  000BD8                     
  1249                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1250  000BD8  928C               	bcf	140,1,c	;volatile
  1251  000BDA                     
  1252                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1253  000BDA  948C               	bcf	140,2,c	;volatile
  1254  000BDC                     
  1255                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1256  000BDC  908C               	bcf	140,0,c	;volatile
  1257  000BDE                     
  1258                           ;LCD.c: 115:  aux = dato & 0xF0;
  1259  000BDE  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1260  000BE0  0BF0               	andlw	240
  1261  000BE2  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1262  000BE4                     
  1263                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1264  000BE4  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1265  000BE6  EC42  F006         	call	_ENVIA_NIBBLE
  1266  000BEA                     
  1267                           ;LCD.c: 117:  aux = dato<<4;
  1268  000BEA  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1269  000BEC  0BF0               	andlw	240
  1270  000BEE  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1271  000BF0                     
  1272                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1273  000BF0  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1274  000BF2  EC42  F006         	call	_ENVIA_NIBBLE
  1275  000BF6  0012               	return		;funcret
  1276  000BF8                     __end_of_ENVIA_LCD_CMD:
  1277                           	opt callstack 0
  1278                           
  1279 ;; *************** function _ESCRIBE_MENSAJE *****************
  1280 ;; Defined at:
  1281 ;;		line 41 in file "LCD.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1284 ;;		 -> STR_3(5), STR_2(4), STR_1(11), 
  1285 ;;  tam             1    5[COMRAM] unsigned char 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  i               1    8[COMRAM] unsigned char 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  1    wreg      void 
  1290 ;; Registers used:
  1291 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1297 ;;      Params:         3       0       0       0       0       0       0       0       0
  1298 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1299 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1300 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1301 ;;Total ram usage:        6 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:    2
  1304 ;; This function calls:
  1305 ;;		_ENVIA_CHAR
  1306 ;; This function is called by:
  1307 ;;		_main
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text12
  1312  000B4C                     __ptext12:
  1313                           	opt callstack 0
  1314  000B4C                     _ESCRIBE_MENSAJE:
  1315                           	opt callstack 28
  1316  000B4C                     
  1317                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1318  000B4C  0E00               	movlw	0
  1319  000B4E  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1320                           
  1321                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1322  000B50  0E00               	movlw	0
  1323  000B52  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1324  000B54  EFBB  F005         	goto	l1145
  1325  000B58                     l1141:
  1326                           
  1327                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1328  000B58  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1329  000B5A  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1330  000B5C  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1331  000B5E  0E00               	movlw	0
  1332  000B60  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1333  000B62  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1334  000B64  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1335  000B68  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1336  000B6C                     	if	0	;tblptru may be non-zero
  1337  000B6C                     	endif
  1338  000B6C                     	if	0	;tblptru may be non-zero
  1339  000B6C                     	endif
  1340  000B6C  0008               	tblrd		*
  1341  000B6E  50F5               	movf	tablat,w,c
  1342  000B70  ECFC  F005         	call	_ENVIA_CHAR
  1343  000B74                     
  1344                           ;LCD.c: 47:  }
  1345  000B74  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1346  000B76                     l1145:
  1347  000B76  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1348  000B78  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1349  000B7A  A0D8               	btfss	status,0,c
  1350  000B7C  EFC2  F005         	goto	u261
  1351  000B80  EFC4  F005         	goto	u260
  1352  000B84                     u261:
  1353  000B84  EFAC  F005         	goto	l1141
  1354  000B88                     u260:
  1355  000B88  0012               	return		;funcret
  1356  000B8A                     __end_of_ESCRIBE_MENSAJE:
  1357                           	opt callstack 0
  1358                           
  1359 ;; *************** function _ENVIA_CHAR *****************
  1360 ;; Defined at:
  1361 ;;		line 50 in file "LCD.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;  dato            1    wreg     unsigned char 
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  dato            1    1[COMRAM] unsigned char 
  1366 ;;  aux             1    2[COMRAM] unsigned char 
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg, status,2, status,0, cstack
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1376 ;;      Params:         0       0       0       0       0       0       0       0       0
  1377 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1378 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1379 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1380 ;;Total ram usage:        2 bytes
  1381 ;; Hardware stack levels used:    1
  1382 ;; Hardware stack levels required when called:    1
  1383 ;; This function calls:
  1384 ;;		_ENVIA_NIBBLE
  1385 ;;		_LEER_LCD
  1386 ;; This function is called by:
  1387 ;;		_main
  1388 ;;		_ESCRIBE_MENSAJE
  1389 ;;		_GENERACARACTER
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text13
  1394  000BF8                     __ptext13:
  1395                           	opt callstack 0
  1396  000BF8                     _ENVIA_CHAR:
  1397                           	opt callstack 28
  1398                           
  1399                           ;incstack = 0
  1400                           ;ENVIA_CHAR@dato stored from wreg
  1401  000BF8  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1402  000BFA                     
  1403                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1404  000BFA  808C               	bsf	140,0,c	;volatile
  1405  000BFC                     
  1406                           ;LCD.c: 54:  LEER_LCD();
  1407  000BFC  EC0B  F005         	call	_LEER_LCD	;wreg free
  1408  000C00                     
  1409                           ;LCD.c: 55:  TRISD = 0x00;
  1410  000C00  0E00               	movlw	0
  1411  000C02  6E95               	movwf	149,c	;volatile
  1412  000C04                     
  1413                           ;LCD.c: 56:         _delay(1200);
  1414  000C04  0EF0               	movlw	240
  1415  000C06                     u367:
  1416  000C06  D000               	nop2	
  1417  000C08  2EE8               	decfsz	wreg,f,c
  1418  000C0A  D7FD               	bra	u367
  1419  000C0C                     
  1420                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1421  000C0C  928C               	bcf	140,1,c	;volatile
  1422  000C0E                     
  1423                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1424  000C0E  948C               	bcf	140,2,c	;volatile
  1425  000C10                     
  1426                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1427  000C10  808C               	bsf	140,0,c	;volatile
  1428  000C12                     
  1429                           ;LCD.c: 61:  aux = dato & 0xF0;
  1430  000C12  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1431  000C14  0BF0               	andlw	240
  1432  000C16  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1433  000C18                     
  1434                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1435  000C18  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1436  000C1A  EC42  F006         	call	_ENVIA_NIBBLE
  1437  000C1E                     
  1438                           ;LCD.c: 63:  aux = dato << 4;
  1439  000C1E  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1440  000C20  0BF0               	andlw	240
  1441  000C22  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1442  000C24                     
  1443                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1444  000C24  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1445  000C26  EC42  F006         	call	_ENVIA_NIBBLE
  1446  000C2A  0012               	return		;funcret
  1447  000C2C                     __end_of_ENVIA_CHAR:
  1448                           	opt callstack 0
  1449                           
  1450 ;; *************** function _LEER_LCD *****************
  1451 ;; Defined at:
  1452 ;;		line 121 in file "LCD.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;		None
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  aux             1    0[COMRAM] unsigned char 
  1457 ;; Return value:  Size  Location     Type
  1458 ;;                  1    wreg      void 
  1459 ;; Registers used:
  1460 ;;		wreg, status,2, status,0
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1466 ;;      Params:         0       0       0       0       0       0       0       0       0
  1467 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1469 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1470 ;;Total ram usage:        1 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; This function calls:
  1473 ;;		Nothing
  1474 ;; This function is called by:
  1475 ;;		_ENVIA_CHAR
  1476 ;;		_ENVIA_LCD_CMD
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text14
  1481  000A16                     __ptext14:
  1482                           	opt callstack 0
  1483  000A16                     _LEER_LCD:
  1484                           	opt callstack 26
  1485  000A16                     
  1486                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1487  000A16  0EF8               	movlw	248
  1488  000A18  6E95               	movwf	149,c	;volatile
  1489  000A1A                     
  1490                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1491  000A1A  908C               	bcf	140,0,c	;volatile
  1492  000A1C                     
  1493                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1494  000A1C  828C               	bsf	140,1,c	;volatile
  1495  000A1E                     
  1496                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1497  000A1E  848C               	bsf	140,2,c	;volatile
  1498  000A20                     
  1499                           ;LCD.c: 128:         _delay(1200);
  1500  000A20  0EF0               	movlw	240
  1501  000A22                     u377:
  1502  000A22  D000               	nop2	
  1503  000A24  2EE8               	decfsz	wreg,f,c
  1504  000A26  D7FD               	bra	u377
  1505  000A28                     
  1506                           ;LCD.c: 130:  aux = PORTD;
  1507  000A28  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1508  000A2C                     
  1509                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1510  000A2C  948C               	bcf	140,2,c	;volatile
  1511  000A2E                     
  1512                           ;LCD.c: 132:         _delay(1200);
  1513  000A2E  0EF0               	movlw	240
  1514  000A30                     u387:
  1515  000A30  D000               	nop2	
  1516  000A32  2EE8               	decfsz	wreg,f,c
  1517  000A34  D7FD               	bra	u387
  1518  000A36                     
  1519                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1520  000A36  848C               	bsf	140,2,c	;volatile
  1521  000A38                     
  1522                           ;LCD.c: 135:         _delay(1200);
  1523  000A38  0EF0               	movlw	240
  1524  000A3A                     u397:
  1525  000A3A  D000               	nop2	
  1526  000A3C  2EE8               	decfsz	wreg,f,c
  1527  000A3E  D7FD               	bra	u397
  1528  000A40                     
  1529                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1530  000A40  948C               	bcf	140,2,c	;volatile
  1531  000A42                     l837:
  1532                           
  1533                           ;LCD.c: 138:  aux = aux & 0x80;
  1534  000A42  5001               	movf	LEER_LCD@aux^0,w,c
  1535  000A44  0B80               	andlw	128
  1536  000A46  6E01               	movwf	LEER_LCD@aux^0,c
  1537                           
  1538                           ;LCD.c: 139:  while(aux == 0x80)
  1539  000A48  EF3A  F005         	goto	l851
  1540  000A4C                     l132:
  1541                           
  1542                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1543  000A4C  848C               	bsf	140,2,c	;volatile
  1544  000A4E                     
  1545                           ;LCD.c: 142:             _delay(1200);
  1546  000A4E  0EF0               	movlw	240
  1547  000A50                     u407:
  1548  000A50  D000               	nop2	
  1549  000A52  2EE8               	decfsz	wreg,f,c
  1550  000A54  D7FD               	bra	u407
  1551  000A56                     
  1552                           ;LCD.c: 143:             aux = PORTD;
  1553  000A56  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1554  000A5A                     
  1555                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1556  000A5A  948C               	bcf	140,2,c	;volatile
  1557                           
  1558                           ;LCD.c: 145:             _delay(1200);
  1559  000A5C  0EF0               	movlw	240
  1560  000A5E                     u417:
  1561  000A5E  D000               	nop2	
  1562  000A60  2EE8               	decfsz	wreg,f,c
  1563  000A62  D7FD               	bra	u417
  1564  000A64                     
  1565                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1566  000A64  848C               	bsf	140,2,c	;volatile
  1567                           
  1568                           ;LCD.c: 147:             _delay(1200);
  1569  000A66  0EF0               	movlw	240
  1570  000A68                     u427:
  1571  000A68  D000               	nop2	
  1572  000A6A  2EE8               	decfsz	wreg,f,c
  1573  000A6C  D7FD               	bra	u427
  1574  000A6E                     
  1575                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1576  000A6E  948C               	bcf	140,2,c	;volatile
  1577  000A70  EF21  F005         	goto	l837
  1578  000A74                     l851:
  1579                           
  1580                           ;LCD.c: 139:  while(aux == 0x80)
  1581  000A74  0E80               	movlw	128
  1582  000A76  1801               	xorwf	LEER_LCD@aux^0,w,c
  1583  000A78  B4D8               	btfsc	status,2,c
  1584  000A7A  EF41  F005         	goto	u11
  1585  000A7E  EF43  F005         	goto	u10
  1586  000A82                     u11:
  1587  000A82  EF26  F005         	goto	l132
  1588  000A86                     u10:
  1589  000A86  0012               	return		;funcret
  1590  000A88                     __end_of_LEER_LCD:
  1591                           	opt callstack 0
  1592                           
  1593 ;; *************** function _ENVIA_NIBBLE *****************
  1594 ;; Defined at:
  1595 ;;		line 93 in file "LCD.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;  dato            1    wreg     unsigned char 
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;  dato            1    0[COMRAM] unsigned char 
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		wreg, status,2, status,0
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1609 ;;      Params:         0       0       0       0       0       0       0       0       0
  1610 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1611 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1612 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1613 ;;Total ram usage:        1 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; This function calls:
  1616 ;;		Nothing
  1617 ;; This function is called by:
  1618 ;;		_ENVIA_CHAR
  1619 ;;		_LCD_CONFIG
  1620 ;;		_ENVIA_LCD_CMD
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text15
  1625  000C84                     __ptext15:
  1626                           	opt callstack 0
  1627  000C84                     _ENVIA_NIBBLE:
  1628                           	opt callstack 27
  1629                           
  1630                           ;incstack = 0
  1631                           ;ENVIA_NIBBLE@dato stored from wreg
  1632  000C84  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1633  000C86                     
  1634                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1635  000C86  0E0F               	movlw	15
  1636  000C88  168C               	andwf	140,f,c	;volatile
  1637                           
  1638                           ;LCD.c: 96:  dato &= 0xF0;
  1639  000C8A  0EF0               	movlw	240
  1640  000C8C  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1641                           
  1642                           ;LCD.c: 97:  LATD|= dato;
  1643  000C8E  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1644  000C90  128C               	iorwf	140,f,c	;volatile
  1645  000C92                     
  1646                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1647  000C92  848C               	bsf	140,2,c	;volatile
  1648  000C94                     
  1649                           ;LCD.c: 100:         _delay(1200);
  1650  000C94  0EF0               	movlw	240
  1651  000C96                     u437:
  1652  000C96  D000               	nop2	
  1653  000C98  2EE8               	decfsz	wreg,f,c
  1654  000C9A  D7FD               	bra	u437
  1655  000C9C                     
  1656                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1657  000C9C  948C               	bcf	140,2,c	;volatile
  1658  000C9E  0012               	return		;funcret
  1659  000CA0                     __end_of_ENVIA_NIBBLE:
  1660                           	opt callstack 0
  1661                           
  1662                           	psect	rparam
  1663  0000                     tosu	equ	0xFFF
  1664                           tosh	equ	0xFFE
  1665                           tosl	equ	0xFFD
  1666                           stkptr	equ	0xFFC
  1667                           pclatu	equ	0xFFB
  1668                           pclath	equ	0xFFA
  1669                           pcl	equ	0xFF9
  1670                           tblptru	equ	0xFF8
  1671                           tblptrh	equ	0xFF7
  1672                           tblptrl	equ	0xFF6
  1673                           tablat	equ	0xFF5
  1674                           prodh	equ	0xFF4
  1675                           prodl	equ	0xFF3
  1676                           indf0	equ	0xFEF
  1677                           postinc0	equ	0xFEE
  1678                           postdec0	equ	0xFED
  1679                           preinc0	equ	0xFEC
  1680                           plusw0	equ	0xFEB
  1681                           fsr0h	equ	0xFEA
  1682                           fsr0l	equ	0xFE9
  1683                           wreg	equ	0xFE8
  1684                           indf1	equ	0xFE7
  1685                           postinc1	equ	0xFE6
  1686                           postdec1	equ	0xFE5
  1687                           preinc1	equ	0xFE4
  1688                           plusw1	equ	0xFE3
  1689                           fsr1h	equ	0xFE2
  1690                           fsr1l	equ	0xFE1
  1691                           bsr	equ	0xFE0
  1692                           indf2	equ	0xFDF
  1693                           postinc2	equ	0xFDE
  1694                           postdec2	equ	0xFDD
  1695                           preinc2	equ	0xFDC
  1696                           plusw2	equ	0xFDB
  1697                           fsr2h	equ	0xFDA
  1698                           fsr2l	equ	0xFD9
  1699                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      28
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[5]), STR_2(CODE[4]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _configuracion->_lcd_init
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3069
                                             14 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                      _configuracion
                          _convierte
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1473
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuracion                                        0     0      0     525
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (3) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (3) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (4) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     667
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (5) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configuracion
     _lcd_init
       _BORRAR_LCD
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
       _CURSOR_HOME
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
       _CURSOR_ONOFF
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
       _LCD_CONFIG
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
         _ENVIA_NIBBLE
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      1C       1       29.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1C      20        0.0%
DATA                 0      0      1C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed May 20 12:45:34 2020

                      l51 0CCA                        l60 08A4                        l45 09A0  
                      l48 0C82                        l57 0834                        l89 0BC2  
                      u10 0A86                        u11 0A82                        u20 0C3E  
                      u21 0C3A                        u30 0C54                        u31 0C50  
          ?_configuracion 0001               __CFG_BORV$3 000000        __CFG_FOSC$XTPLL_XT 000000  
           ENVIA_CHAR@aux 0003                       l102 0CD2                       l113 0B88  
                     l122 0B4A                       l107 0C5A                       l132 0A4C  
                     l116 0C2A                       l125 0C9E                       l134 0A86  
                     l119 0CDA                       l128 0BF6                       l640 0A14  
                     l633 0A0C                       l650 0AEA                       l643 0AE2  
                     l821 0A1E                       l901 0B38                       l831 0A36  
                     l823 0A20                       l815 0A16                       l911 0C2E  
                     l903 0B3E                       l841 0A56                       l833 0A38  
                     l825 0A28                       l817 0A1A                       l913 0C3E  
                     l905 0B44                       l921 0C60                       l843 0A5A  
                     l851 0A74                       l835 0A40                       l827 0A2C  
                     l819 0A1C                       l931 0BFA                       l907 0CD4  
                     l915 0C44                       l923 0C64                       l853 0C86  
                     l845 0A64                       l837 0A42                       l829 0A2E  
                     l941 0C0E                       l933 0BFC                       l861 0BC6  
                     l909 0CCC                       l917 0C54                       l925 0C74  
                     l855 0C92                       l847 0A6E                       l839 0A4E  
                     l951 0C24                       l943 0C10                       l935 0C00  
                     l871 0BDA                       l863 0BC8                       l927 0C78  
                     l919 0C5C                       l857 0C94                       l945 0C12  
                     l937 0C04                       l881 0BF0                       l873 0BDC  
                     l865 0BCC                       l929 0C7C                       l859 0C9C  
                     l947 0C18                       l939 0C0C                       l875 0BDE  
                     l867 0BD0                       l891 0B18                       l883 0AEC  
                     l949 0C1E                       l877 0BE4                       l869 0BD8  
                     l893 0B20                       l885 0AF0                       l879 0BEA  
                     l895 0B26                       l887 0AF6                       l897 0B2C  
                     l889 0B04                       l993 0CBA                       l899 0B32  
                     l995 0CC6                       u200 09BC                       u201 09B8  
                     u210 09DA                       u211 09D6                       u220 09F6  
                     u300 08B2                       u221 09F2                       u301 08AE  
                     u230 0A9A                       u231 0A96                       u240 0AB8  
                     u241 0AB4                       u250 0ACE                       u251 0ACA  
                     u260 0B88                       u261 0B84                       u317 0C6A  
                     u270 0B9C                       u407 0A50                       u271 0B98  
                     u327 0AFC                       u280 0BBA                       u417 0A5E  
                     u281 0BB6                       u337 0B0A                       u290 0842  
                     u427 0A68                       u347 0B1A                       u291 083E  
                     u437 0C96                       u357 0BD2                       u367 0C06  
                     u377 0A22                       u387 0A30                       u397 0A3A  
            __CFG_BOR$OFF 000000               LEER_LCD@aux 0001                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001              __CFG_LVP$OFF 000000  
          ENVIA_CHAR@dato 0002              __CFG_WDT$OFF 000000                      l1101 09AA  
                    l1111 09E0                      l1103 09BC                      l1113 09F6  
                    l1105 09C4                      l1121 0A88                      l1201 08E0  
                    l1115 09FE                      l1107 09CC                      l1131 0ACE  
                    l1123 0A9A                      l1203 08E8                      l1141 0B58  
                    l1117 0A00                      l1109 09DA                      l1133 0AD6  
                    l1125 0AA2                      l1205 08F0                      l1143 0B74  
                    l1151 0BA8                      l1119 0A06                      l1135 0ADC  
                    l1127 0AAA                      l1207 08F8                      l1145 0B76  
                    l1153 0BBA                      l1129 0AB8                      l1137 0908  
                    l1161 082C                      l1139 0B4C                      l1147 0B8C  
                    l1171 084C                      l1163 082E                      l1155 0816  
                    l1149 0B9C                      l1181 088A                      l1173 085C  
                    l1165 0830                      l1157 081A                      l1191 08A0  
                    l1183 0892                      l1175 086E                      l1167 0832  
                    l1159 082A                      l1193 08A2                      l1185 089A  
                    l1177 087A                      l1169 0842                      l1099 09A2  
                    l1195 08B2                      l1187 089C                      l1179 0882  
                    l1197 08C2                      l1189 089E                      l1199 08D4  
                    STR_1 0801                      STR_2 0811                      STR_3 080C  
                    _LATD 000F8C              __CFG_PWRT$ON 000000                      _main 0816  
                    start 0000             ?_CURSOR_ONOFF 0001             __CFG_MCLRE$ON 000000  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0002          __end_of_LEER_LCD 0A88  
     __size_of_BORRAR_LCD 0008             __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000  
                   ?_main 0001           __end_of___lwdiv 0A16           __end_of___lwmod 0AEC  
                   _PORTD 000F83       __size_of_LCD_CONFIG 0060                     _TRISD 000F95  
     __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0004                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0004           __initialization 0CA0  
            __end_of_main 0908           ??_configuracion 0006           _ESCRIBE_MENSAJE 0B4C  
                  ??_main 000F             __activetblptr 000001                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  _ADRESL 000FC3          __end_of_lcd_init 0C84                    _decena 0013  
    __end_of_ENVIA_NIBBLE 0CA0                 ??___lwdiv 000A                 ??___lwmod 0005  
     __size_of_POS_CURSOR 003A                    _millar 0017                    clear_0 0CA6  
                  _unidad 0011              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8              ??_BORRAR_LCD 0004  
    __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0001                __accesstop 0060  
 __end_of__initialization 0CAC           __CFG_PBADEN$OFF 000000              ??_LCD_CONFIG 0004  
           ___rparam_used 000001              ??_ENVIA_CHAR 0002   __end_of_ESCRIBE_MENSAJE 0B8A  
          __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0CDC          ENVIA_LCD_CMD@aux 0003  
    __end_of_CURSOR_ONOFF 0C5C        __end_of_LCD_CONFIG 0B4C        __end_of_ENVIA_CHAR 0C2C  
      __size_of_convierte 009A                ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001  
            ??_POS_CURSOR 0005                 ?_lcd_init 0001     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0004  
                 ___lwdiv 09A2                   ___lwmod 0A88              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0BF8         __end_of_convierte 09A2                   __pcinit 0CA0  
      __end_of_POS_CURSOR 0BC4                   __ramtop 0800                   _centena 0015  
                 __ptext0 0816                   __ptext1 0908                   __ptext2 0A88  
                 __ptext3 09A2                   __ptext4 0CBA                   __ptext5 0C5C  
                 __ptext6 0AEC                   __ptext7 0C2C                   __ptext8 0CCC  
                 __ptext9 0CD4                   _res_ad0 001B                   _res_ad1 0019  
              ??_lcd_init 0005              _ENVIA_NIBBLE 0C84      end_of_initialization 0CAC  
                 postinc0 000FEE     __end_of_configuracion 0CCC     __size_of_CURSOR_ONOFF 0030  
       __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0C2C        CURSOR_ONOFF@estado 0004  
           ??_CURSOR_HOME 0004       start_initialization 0CA0         ENVIA_LCD_CMD@dato 0002  
             __pbssCOMRAM 0011       __end_of_CURSOR_HOME 0CD4         __size_of_lcd_init 0028  
        ___lwdiv@dividend 0006                  ?___lwdiv 0006                  ?___lwmod 0001  
             __smallconst 0800                 _convierte 0908           convierte@numero 000D  
        ___lwdiv@quotient 000A                  _LEER_LCD 0A16                  _LATDbits 000F8C  
        __CFG_WDTPS$32768 000000          ESCRIBE_MENSAJE@i 0009            POS_CURSOR@fila 0005  
__size_of_ESCRIBE_MENSAJE 003E                _ADCON0bits 000FC2                ?_convierte 000D  
             _CURSOR_HOME 0CCC    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800          __size_of___lwdiv 0074  
        __size_of___lwmod 0064           ___lwdiv@divisor 0008           ___lwdiv@counter 000C  
                __ptext10 0B8A                  __ptext11 0BC4                  __ptext12 0B4C  
                __ptext13 0BF8                  __ptext14 0A16                  __ptext15 0C84  
              _BORRAR_LCD 0CD4                  _lcd_init 0C5C    __size_of_configuracion 0012  
           __size_of_main 00F2                _LCD_CONFIG 0AEC                _ENVIA_CHAR 0BF8  
           _ENVIA_LCD_CMD 0BC4     __CFG_CPUDIV$OSC1_PLL2 000000               ??_convierte 000F  
       ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004          ___lwmod@dividend 0001  
          ?_ENVIA_LCD_CMD 0001             _configuracion 0CBA           ___lwmod@divisor 0003  
         ___lwmod@counter 0005               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0B8A               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
