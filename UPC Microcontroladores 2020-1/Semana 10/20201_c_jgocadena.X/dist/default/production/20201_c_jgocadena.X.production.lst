

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed May 27 15:28:55 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    25  0000                     
    26                           ; Version 2.20
    27                           ; Generated 12/02/2020 GMT
    28                           ; 
    29                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataCOMRAM
    62  000A4A                     __pidataCOMRAM:
    63                           	callstack 0
    64                           
    65                           ;initializer for _secreta
    66  000A4A  04                 	db	4
    67  000A4B  0B                 	db	11
    68  000A4C  04                 	db	4
    69  000A4D  02                 	db	2
    70  000A4E  13                 	db	19
    71  000A4F  11                 	db	17
    72  000A50  0E                 	db	14
    73  000A51  0D                 	db	13
    74  000A52  08                 	db	8
    75  000A53  02                 	db	2
    76  000A54  00                 	db	0
    77                           
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	callstack 0
    81  000800  00                 	db	0
    82  000801                     _letras:
    83                           	callstack 0
    84  000801  61                 	db	97
    85  000802  62                 	db	98
    86  000803  63                 	db	99
    87  000804  64                 	db	100
    88  000805  65                 	db	101
    89  000806  66                 	db	102
    90  000807  67                 	db	103
    91  000808  68                 	db	104
    92  000809  69                 	db	105
    93  00080A  6A                 	db	106
    94  00080B  6B                 	db	107
    95  00080C  6C                 	db	108
    96  00080D  6D                 	db	109
    97  00080E  6E                 	db	110
    98  00080F  6F                 	db	111
    99  000810  70                 	db	112
   100  000811  71                 	db	113
   101  000812  72                 	db	114
   102  000813  73                 	db	115
   103  000814  74                 	db	116
   104  000815  75                 	db	117
   105  000816  76                 	db	118
   106  000817  77                 	db	119
   107  000818  78                 	db	120
   108  000819  79                 	db	121
   109  00081A  7A                 	db	122
   110  00081B  00                 	db	0
   111  00081C                     __end_of_letras:
   112                           	callstack 0
   113  0000                     _PORTD	set	3971
   114  0000                     _LATD	set	3980
   115  0000                     _LATDbits	set	3980
   116  0000                     _TRISD	set	3989
   117  00081C  00                 	db	0	; dummy byte at the end
   118  0000                     
   119                           ; #config settings
   120                           
   121                           	psect	cinit
   122  0009D8                     __pcinit:
   123                           	callstack 0
   124  0009D8                     start_initialization:
   125                           	callstack 0
   126  0009D8                     __initialization:
   127                           	callstack 0
   128                           
   129                           ; Initialize objects allocated to COMRAM (11 bytes)
   130                           ; load TBLPTR registers with __pidataCOMRAM
   131  0009D8  0E4A               	movlw	low __pidataCOMRAM
   132  0009DA  6EF6               	movwf	tblptrl,c
   133  0009DC  0E0A               	movlw	high __pidataCOMRAM
   134  0009DE  6EF7               	movwf	tblptrh,c
   135  0009E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   136  0009E2  6EF8               	movwf	tblptru,c
   137  0009E4  EE00  F001         	lfsr	0,__pdataCOMRAM
   138  0009E8  EE10 F00B          	lfsr	1,11
   139  0009EC                     copy_data0:
   140  0009EC  0009               	tblrd		*+
   141  0009EE  CFF5 FFEE          	movff	tablat,postinc0
   142  0009F2  50E5               	movf	postdec1,w,c
   143  0009F4  50E1               	movf	fsr1l,w,c
   144  0009F6  E1FA               	bnz	copy_data0
   145  0009F8                     end_of_initialization:
   146                           	callstack 0
   147  0009F8                     __end_of__initialization:
   148                           	callstack 0
   149  0009F8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   150  0009FA  6EF8               	movwf	tblptru,c
   151  0009FC  0E08               	movlw	high __Lsmallconst
   152  0009FE  6EF7               	movwf	tblptrh,c
   153  000A00  0100               	movlb	0
   154  000A02  EF78  F004         	goto	_main	;jump to C main() function
   155                           
   156                           	psect	dataCOMRAM
   157  000001                     __pdataCOMRAM:
   158                           	callstack 0
   159  000001                     _secreta:
   160                           	callstack 0
   161  000001                     	ds	11
   162                           
   163                           	psect	cstackCOMRAM
   164  00000C                     __pcstackCOMRAM:
   165                           	callstack 0
   166  00000C                     ENVIA_NIBBLE@dato:
   167                           	callstack 0
   168  00000C                     LEER_LCD@aux:
   169                           	callstack 0
   170                           
   171                           ; 1 bytes @ 0x0
   172  00000C                     	ds	1
   173  00000D                     ENVIA_CHAR@dato:
   174                           	callstack 0
   175  00000D                     ENVIA_LCD_CMD@dato:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0x1
   179  00000D                     	ds	1
   180  00000E                     ENVIA_CHAR@aux:
   181                           	callstack 0
   182  00000E                     ENVIA_LCD_CMD@aux:
   183                           	callstack 0
   184                           
   185                           ; 1 bytes @ 0x2
   186  00000E                     	ds	1
   187  00000F                     ??_LCD_CONFIG:
   188  00000F                     CURSOR_ONOFF@estado:
   189                           	callstack 0
   190                           
   191                           ; 1 bytes @ 0x3
   192  00000F                     	ds	1
   193  000010                     ??_lcd_init:
   194                           
   195                           ; 1 bytes @ 0x4
   196  000010                     	ds	1
   197  000011                     ??_main:
   198                           
   199                           ; 1 bytes @ 0x5
   200  000011                     	ds	2
   201  000013                     main@i:
   202                           	callstack 0
   203                           
   204                           ; 1 bytes @ 0x7
   205  000013                     	ds	1
   206                           
   207 ;;
   208 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   209 ;;
   210 ;; *************** function _main *****************
   211 ;; Defined at:
   212 ;;		line 46 in file "maincode.c"
   213 ;; Parameters:    Size  Location     Type
   214 ;;		None
   215 ;; Auto vars:     Size  Location     Type
   216 ;;  i               1    7[COMRAM] unsigned char 
   217 ;; Return value:  Size  Location     Type
   218 ;;                  1    wreg      void 
   219 ;; Registers used:
   220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   221 ;; Tracked objects:
   222 ;;		On entry : 0/0
   223 ;;		On exit  : 0/0
   224 ;;		Unchanged: 0/0
   225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   226 ;;      Params:         0       0       0       0       0       0       0       0       0
   227 ;;      Locals:         1       0       0       0       0       0       0       0       0
   228 ;;      Temps:          2       0       0       0       0       0       0       0       0
   229 ;;      Totals:         3       0       0       0       0       0       0       0       0
   230 ;;Total ram usage:        3 bytes
   231 ;; Hardware stack levels required when called:    4
   232 ;; This function calls:
   233 ;;		_CURSOR_HOME
   234 ;;		_ENVIA_CHAR
   235 ;;		_configuracion
   236 ;;		_lcd_init
   237 ;; This function is called by:
   238 ;;		Startup code after reset
   239 ;; This function uses a non-reentrant model
   240 ;;
   241                           
   242                           	psect	text0
   243  0008F0                     __ptext0:
   244                           	callstack 0
   245  0008F0                     _main:
   246                           	callstack 27
   247  0008F0                     
   248                           ;maincode.c: 47:     configuracion();
   249  0008F0  EC33  F005         	call	_configuracion	;wreg free
   250  0008F4                     
   251                           ;maincode.c: 48:     lcd_init();
   252  0008F4  EC03  F005         	call	_lcd_init	;wreg free
   253  0008F8                     l926:
   254                           
   255                           ;maincode.c: 50:         for (unsigned char i=0;i<11;i++) {
   256  0008F8  0E00               	movlw	0
   257  0008FA  6E13               	movwf	main@i^0,c
   258  0008FC                     l932:
   259                           
   260                           ;maincode.c: 51:             ENVIA_CHAR(letras[secreta[i]]);
   261  0008FC  0E01               	movlw	low _secreta
   262  0008FE  2413               	addwf	main@i^0,w,c
   263  000900  6ED9               	movwf	fsr2l,c
   264  000902  6ADA               	clrf	fsr2h,c
   265  000904  0E00               	movlw	high _secreta
   266  000906  22DA               	addwfc	fsr2h,f,c
   267  000908  50DF               	movf	indf2,w,c
   268  00090A  6E11               	movwf	??_main^0,c
   269  00090C  6A12               	clrf	(??_main+1)^0,c
   270  00090E  0E01               	movlw	low _letras
   271  000910  2411               	addwf	??_main^0,w,c
   272  000912  6EF6               	movwf	tblptrl,c
   273  000914  0E08               	movlw	high _letras
   274  000916  2012               	addwfc	(??_main+1)^0,w,c
   275  000918  6EF7               	movwf	tblptrh,c
   276  00091A                     	if	0	;There are less than 3 active tblptr bytes
   277  00091A                     	endif
   278  00091A  0008               	tblrd		*
   279  00091C  50F5               	movf	tablat,w,c
   280  00091E  ECBA  F004         	call	_ENVIA_CHAR
   281  000922                     
   282                           ;maincode.c: 52:         }
   283  000922  2A13               	incf	main@i^0,f,c
   284  000924  0E0A               	movlw	10
   285  000926  6413               	cpfsgt	main@i^0,c
   286  000928  EF98  F004         	goto	u41
   287  00092C  EF9A  F004         	goto	u40
   288  000930                     u41:
   289  000930  EF7E  F004         	goto	l932
   290  000934                     u40:
   291  000934                     
   292                           ;maincode.c: 53:         CURSOR_HOME();
   293  000934  EC2B  F005         	call	_CURSOR_HOME	;wreg free
   294  000938  EF7C  F004         	goto	l926
   295  00093C  EF00  F000         	goto	start
   296  000940                     __end_of_main:
   297                           	callstack 0
   298                           
   299 ;; *************** function _lcd_init *****************
   300 ;; Defined at:
   301 ;;		line 37 in file "maincode.c"
   302 ;; Parameters:    Size  Location     Type
   303 ;;		None
   304 ;; Auto vars:     Size  Location     Type
   305 ;;		None
   306 ;; Return value:  Size  Location     Type
   307 ;;                  1    wreg      void 
   308 ;; Registers used:
   309 ;;		wreg, status,2, status,0, cstack
   310 ;; Tracked objects:
   311 ;;		On entry : 0/0
   312 ;;		On exit  : 0/0
   313 ;;		Unchanged: 0/0
   314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   315 ;;      Params:         0       0       0       0       0       0       0       0       0
   316 ;;      Locals:         0       0       0       0       0       0       0       0       0
   317 ;;      Temps:          1       0       0       0       0       0       0       0       0
   318 ;;      Totals:         1       0       0       0       0       0       0       0       0
   319 ;;Total ram usage:        1 bytes
   320 ;; Hardware stack levels used:    1
   321 ;; Hardware stack levels required when called:    3
   322 ;; This function calls:
   323 ;;		_BORRAR_LCD
   324 ;;		_CURSOR_HOME
   325 ;;		_CURSOR_ONOFF
   326 ;;		_LCD_CONFIG
   327 ;; This function is called by:
   328 ;;		_main
   329 ;; This function uses a non-reentrant model
   330 ;;
   331                           
   332                           	psect	text1
   333  000A06                     __ptext1:
   334                           	callstack 0
   335  000A06                     _lcd_init:
   336                           	callstack 27
   337  000A06                     
   338                           ;maincode.c: 38:     TRISD = 0x00;
   339  000A06  0E00               	movlw	0
   340  000A08  6E95               	movwf	149,c	;volatile
   341  000A0A                     
   342                           ;maincode.c: 39:     LCD_CONFIG();
   343  000A0A  EC48  F004         	call	_LCD_CONFIG	;wreg free
   344  000A0E                     
   345                           ;maincode.c: 40:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   346  000A0E  0EEA               	movlw	234
   347  000A10  6E10               	movwf	??_lcd_init^0,c
   348  000A12  0EC3               	movlw	195
   349  000A14                     u137:
   350  000A14  2EE8               	decfsz	wreg,f,c
   351  000A16  D7FE               	bra	u137
   352  000A18  2E10               	decfsz	??_lcd_init^0,f,c
   353  000A1A  D7FC               	bra	u137
   354  000A1C  F000               	nop	
   355  000A1E                     
   356                           ;maincode.c: 41:     BORRAR_LCD();
   357  000A1E  EC2F  F005         	call	_BORRAR_LCD	;wreg free
   358  000A22                     
   359                           ;maincode.c: 42:     CURSOR_HOME();
   360  000A22  EC2B  F005         	call	_CURSOR_HOME	;wreg free
   361  000A26                     
   362                           ;maincode.c: 43:     CURSOR_ONOFF(1);
   363  000A26  0E01               	movlw	1
   364  000A28  ECD4  F004         	call	_CURSOR_ONOFF
   365  000A2C  0012               	return		;funcret
   366  000A2E                     __end_of_lcd_init:
   367                           	callstack 0
   368                           
   369 ;; *************** function _LCD_CONFIG *****************
   370 ;; Defined at:
   371 ;;		line 72 in file "LCD.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;		None
   374 ;; Auto vars:     Size  Location     Type
   375 ;;		None
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      void 
   378 ;; Registers used:
   379 ;;		wreg, status,2, status,0, cstack
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   385 ;;      Params:         0       0       0       0       0       0       0       0       0
   386 ;;      Locals:         0       0       0       0       0       0       0       0       0
   387 ;;      Temps:          1       0       0       0       0       0       0       0       0
   388 ;;      Totals:         1       0       0       0       0       0       0       0       0
   389 ;;Total ram usage:        1 bytes
   390 ;; Hardware stack levels used:    1
   391 ;; Hardware stack levels required when called:    2
   392 ;; This function calls:
   393 ;;		_ENVIA_LCD_CMD
   394 ;;		_ENVIA_NIBBLE
   395 ;; This function is called by:
   396 ;;		_lcd_init
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400                           	psect	text2
   401  000890                     __ptext2:
   402                           	callstack 0
   403  000890                     _LCD_CONFIG:
   404                           	callstack 27
   405  000890                     
   406                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   407  000890  908C               	bcf	140,0,c	;volatile
   408                           
   409                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   410  000892  928C               	bcf	140,1,c	;volatile
   411  000894                     
   412                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   413  000894  0E30               	movlw	48
   414  000896  EC17  F005         	call	_ENVIA_NIBBLE
   415  00089A                     
   416                           ;LCD.c: 77:         _delay(24000);
   417  00089A  0E20               	movlw	32
   418  00089C  6E0F               	movwf	??_LCD_CONFIG^0,c
   419  00089E  0E2A               	movlw	42
   420  0008A0                     u147:
   421  0008A0  2EE8               	decfsz	wreg,f,c
   422  0008A2  D7FE               	bra	u147
   423  0008A4  2E0F               	decfsz	??_LCD_CONFIG^0,f,c
   424  0008A6  D7FC               	bra	u147
   425  0008A8                     
   426                           ;LCD.c: 78:         _delay(24000);
   427  0008A8  0E20               	movlw	32
   428  0008AA  6E0F               	movwf	??_LCD_CONFIG^0,c
   429  0008AC  0E2A               	movlw	42
   430  0008AE                     u157:
   431  0008AE  2EE8               	decfsz	wreg,f,c
   432  0008B0  D7FE               	bra	u157
   433  0008B2  2E0F               	decfsz	??_LCD_CONFIG^0,f,c
   434  0008B4  D7FC               	bra	u157
   435                           
   436                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   437  0008B6  0E30               	movlw	48
   438  0008B8  EC17  F005         	call	_ENVIA_NIBBLE
   439  0008BC                     
   440                           ;LCD.c: 83:  _delay(1200);
   441  0008BC  0EF0               	movlw	240
   442  0008BE                     u167:
   443  0008BE  D000               	nop2	
   444  0008C0  2EE8               	decfsz	wreg,f,c
   445  0008C2  D7FD               	bra	u167
   446  0008C4                     
   447                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   448  0008C4  0E30               	movlw	48
   449  0008C6  EC17  F005         	call	_ENVIA_NIBBLE
   450  0008CA                     
   451                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   452  0008CA  0E20               	movlw	32
   453  0008CC  EC17  F005         	call	_ENVIA_NIBBLE
   454  0008D0                     
   455                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   456  0008D0  0E01               	movlw	1
   457  0008D2  ECA0  F004         	call	_ENVIA_LCD_CMD
   458  0008D6                     
   459                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   460  0008D6  0E28               	movlw	40
   461  0008D8  ECA0  F004         	call	_ENVIA_LCD_CMD
   462  0008DC                     
   463                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   464  0008DC  0E0F               	movlw	15
   465  0008DE  ECA0  F004         	call	_ENVIA_LCD_CMD
   466  0008E2                     
   467                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   468  0008E2  0E06               	movlw	6
   469  0008E4  ECA0  F004         	call	_ENVIA_LCD_CMD
   470  0008E8                     
   471                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   472  0008E8  0E01               	movlw	1
   473  0008EA  ECA0  F004         	call	_ENVIA_LCD_CMD
   474  0008EE  0012               	return		;funcret
   475  0008F0                     __end_of_LCD_CONFIG:
   476                           	callstack 0
   477                           
   478 ;; *************** function _CURSOR_ONOFF *****************
   479 ;; Defined at:
   480 ;;		line 35 in file "LCD.c"
   481 ;; Parameters:    Size  Location     Type
   482 ;;  estado          1    wreg     unsigned char 
   483 ;; Auto vars:     Size  Location     Type
   484 ;;  estado          1    3[COMRAM] unsigned char 
   485 ;; Return value:  Size  Location     Type
   486 ;;                  1    wreg      void 
   487 ;; Registers used:
   488 ;;		wreg, status,2, status,0, cstack
   489 ;; Tracked objects:
   490 ;;		On entry : 0/0
   491 ;;		On exit  : 0/0
   492 ;;		Unchanged: 0/0
   493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   494 ;;      Params:         0       0       0       0       0       0       0       0       0
   495 ;;      Locals:         1       0       0       0       0       0       0       0       0
   496 ;;      Temps:          0       0       0       0       0       0       0       0       0
   497 ;;      Totals:         1       0       0       0       0       0       0       0       0
   498 ;;Total ram usage:        1 bytes
   499 ;; Hardware stack levels used:    1
   500 ;; Hardware stack levels required when called:    2
   501 ;; This function calls:
   502 ;;		_ENVIA_LCD_CMD
   503 ;; This function is called by:
   504 ;;		_lcd_init
   505 ;; This function uses a non-reentrant model
   506 ;;
   507                           
   508                           	psect	text3
   509  0009A8                     __ptext3:
   510                           	callstack 0
   511  0009A8                     _CURSOR_ONOFF:
   512                           	callstack 27
   513                           
   514                           ;incstack = 0
   515                           ;CURSOR_ONOFF@estado stored from wreg
   516  0009A8  6E0F               	movwf	CURSOR_ONOFF@estado^0,c
   517  0009AA                     
   518                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   519  0009AA  500F               	movf	CURSOR_ONOFF@estado^0,w,c
   520  0009AC  A4D8               	btfss	status,2,c
   521  0009AE  EFDB  F004         	goto	u21
   522  0009B2  EFDD  F004         	goto	u20
   523  0009B6                     u21:
   524  0009B6  EFE0  F004         	goto	l884
   525  0009BA                     u20:
   526  0009BA  0E0E               	movlw	14
   527  0009BC  ECA0  F004         	call	_ENVIA_LCD_CMD
   528  0009C0                     l884:
   529                           
   530                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   531  0009C0  040F               	decf	CURSOR_ONOFF@estado^0,w,c
   532  0009C2  A4D8               	btfss	status,2,c
   533  0009C4  EFE6  F004         	goto	u31
   534  0009C8  EFE8  F004         	goto	u30
   535  0009CC                     u31:
   536  0009CC  EFEB  F004         	goto	l76
   537  0009D0                     u30:
   538  0009D0  0E0C               	movlw	12
   539  0009D2  ECA0  F004         	call	_ENVIA_LCD_CMD
   540  0009D6                     l76:
   541  0009D6  0012               	return		;funcret
   542  0009D8                     __end_of_CURSOR_ONOFF:
   543                           	callstack 0
   544                           
   545 ;; *************** function _CURSOR_HOME *****************
   546 ;; Defined at:
   547 ;;		line 30 in file "LCD.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;		None
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, status,2, status,0, cstack
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   561 ;;      Params:         0       0       0       0       0       0       0       0       0
   562 ;;      Locals:         0       0       0       0       0       0       0       0       0
   563 ;;      Temps:          0       0       0       0       0       0       0       0       0
   564 ;;      Totals:         0       0       0       0       0       0       0       0       0
   565 ;;Total ram usage:        0 bytes
   566 ;; Hardware stack levels used:    1
   567 ;; Hardware stack levels required when called:    2
   568 ;; This function calls:
   569 ;;		_ENVIA_LCD_CMD
   570 ;; This function is called by:
   571 ;;		_lcd_init
   572 ;;		_main
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           	psect	text4
   577  000A56                     __ptext4:
   578                           	callstack 0
   579  000A56                     _CURSOR_HOME:
   580                           	callstack 27
   581  000A56                     
   582                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   583  000A56  0E02               	movlw	2
   584  000A58  ECA0  F004         	call	_ENVIA_LCD_CMD
   585  000A5C  0012               	return		;funcret
   586  000A5E                     __end_of_CURSOR_HOME:
   587                           	callstack 0
   588                           
   589 ;; *************** function _BORRAR_LCD *****************
   590 ;; Defined at:
   591 ;;		line 67 in file "LCD.c"
   592 ;; Parameters:    Size  Location     Type
   593 ;;		None
   594 ;; Auto vars:     Size  Location     Type
   595 ;;		None
   596 ;; Return value:  Size  Location     Type
   597 ;;                  1    wreg      void 
   598 ;; Registers used:
   599 ;;		wreg, status,2, status,0, cstack
   600 ;; Tracked objects:
   601 ;;		On entry : 0/0
   602 ;;		On exit  : 0/0
   603 ;;		Unchanged: 0/0
   604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   605 ;;      Params:         0       0       0       0       0       0       0       0       0
   606 ;;      Locals:         0       0       0       0       0       0       0       0       0
   607 ;;      Temps:          0       0       0       0       0       0       0       0       0
   608 ;;      Totals:         0       0       0       0       0       0       0       0       0
   609 ;;Total ram usage:        0 bytes
   610 ;; Hardware stack levels used:    1
   611 ;; Hardware stack levels required when called:    2
   612 ;; This function calls:
   613 ;;		_ENVIA_LCD_CMD
   614 ;; This function is called by:
   615 ;;		_lcd_init
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           	psect	text5
   620  000A5E                     __ptext5:
   621                           	callstack 0
   622  000A5E                     _BORRAR_LCD:
   623                           	callstack 27
   624  000A5E                     
   625                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   626  000A5E  0E01               	movlw	1
   627  000A60  ECA0  F004         	call	_ENVIA_LCD_CMD
   628  000A64  0012               	return		;funcret
   629  000A66                     __end_of_BORRAR_LCD:
   630                           	callstack 0
   631                           
   632 ;; *************** function _ENVIA_LCD_CMD *****************
   633 ;; Defined at:
   634 ;;		line 104 in file "LCD.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;  dato            1    wreg     unsigned char 
   637 ;; Auto vars:     Size  Location     Type
   638 ;;  dato            1    1[COMRAM] unsigned char 
   639 ;;  aux             1    2[COMRAM] unsigned char 
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		wreg, status,2, status,0, cstack
   644 ;; Tracked objects:
   645 ;;		On entry : 0/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   649 ;;      Params:         0       0       0       0       0       0       0       0       0
   650 ;;      Locals:         2       0       0       0       0       0       0       0       0
   651 ;;      Temps:          0       0       0       0       0       0       0       0       0
   652 ;;      Totals:         2       0       0       0       0       0       0       0       0
   653 ;;Total ram usage:        2 bytes
   654 ;; Hardware stack levels used:    1
   655 ;; Hardware stack levels required when called:    1
   656 ;; This function calls:
   657 ;;		_ENVIA_NIBBLE
   658 ;;		_LEER_LCD
   659 ;; This function is called by:
   660 ;;		_CURSOR_HOME
   661 ;;		_CURSOR_ONOFF
   662 ;;		_BORRAR_LCD
   663 ;;		_LCD_CONFIG
   664 ;;		_POS_CURSOR
   665 ;;		_BLINK_CURSOR
   666 ;;		_DISPLAY_ONOFF
   667 ;;		_GENERACARACTER
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           	psect	text6
   672  000940                     __ptext6:
   673                           	callstack 0
   674  000940                     _ENVIA_LCD_CMD:
   675                           	callstack 27
   676                           
   677                           ;incstack = 0
   678                           ;ENVIA_LCD_CMD@dato stored from wreg
   679  000940  6E0D               	movwf	ENVIA_LCD_CMD@dato^0,c
   680  000942                     
   681                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
   682  000942  908C               	bcf	140,0,c	;volatile
   683  000944                     
   684                           ;LCD.c: 108:  LEER_LCD();
   685  000944  EC0F  F004         	call	_LEER_LCD	;wreg free
   686  000948                     
   687                           ;LCD.c: 109:  TRISD = 0b00000000;
   688  000948  0E00               	movlw	0
   689  00094A  6E95               	movwf	149,c	;volatile
   690  00094C                     
   691                           ;LCD.c: 111:         _delay(1200);
   692  00094C  0EF0               	movlw	240
   693  00094E                     u177:
   694  00094E  D000               	nop2	
   695  000950  2EE8               	decfsz	wreg,f,c
   696  000952  D7FD               	bra	u177
   697  000954                     
   698                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
   699  000954  928C               	bcf	140,1,c	;volatile
   700  000956                     
   701                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
   702  000956  948C               	bcf	140,2,c	;volatile
   703  000958                     
   704                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
   705  000958  908C               	bcf	140,0,c	;volatile
   706  00095A                     
   707                           ;LCD.c: 115:  aux = dato & 0xF0;
   708  00095A  500D               	movf	ENVIA_LCD_CMD@dato^0,w,c
   709  00095C  0BF0               	andlw	240
   710  00095E  6E0E               	movwf	ENVIA_LCD_CMD@aux^0,c
   711  000960                     
   712                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
   713  000960  500E               	movf	ENVIA_LCD_CMD@aux^0,w,c
   714  000962  EC17  F005         	call	_ENVIA_NIBBLE
   715  000966                     
   716                           ;LCD.c: 117:  aux = dato<<4;
   717  000966  380D               	swapf	ENVIA_LCD_CMD@dato^0,w,c
   718  000968  0BF0               	andlw	240
   719  00096A  6E0E               	movwf	ENVIA_LCD_CMD@aux^0,c
   720  00096C                     
   721                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
   722  00096C  500E               	movf	ENVIA_LCD_CMD@aux^0,w,c
   723  00096E  EC17  F005         	call	_ENVIA_NIBBLE
   724  000972  0012               	return		;funcret
   725  000974                     __end_of_ENVIA_LCD_CMD:
   726                           	callstack 0
   727                           
   728 ;; *************** function _configuracion *****************
   729 ;; Defined at:
   730 ;;		line 33 in file "maincode.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;		None
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		None
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   744 ;;      Params:         0       0       0       0       0       0       0       0       0
   745 ;;      Locals:         0       0       0       0       0       0       0       0       0
   746 ;;      Temps:          0       0       0       0       0       0       0       0       0
   747 ;;      Totals:         0       0       0       0       0       0       0       0       0
   748 ;;Total ram usage:        0 bytes
   749 ;; Hardware stack levels used:    1
   750 ;; This function calls:
   751 ;;		Nothing
   752 ;; This function is called by:
   753 ;;		_main
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757                           	psect	text7
   758  000A66                     __ptext7:
   759                           	callstack 0
   760  000A66                     _configuracion:
   761                           	callstack 30
   762  000A66  0012               	return		;funcret
   763  000A68                     __end_of_configuracion:
   764                           	callstack 0
   765                           
   766 ;; *************** function _ENVIA_CHAR *****************
   767 ;; Defined at:
   768 ;;		line 50 in file "LCD.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;  dato            1    wreg     unsigned char 
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  dato            1    1[COMRAM] unsigned char 
   773 ;;  aux             1    2[COMRAM] unsigned char 
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, status,2, status,0, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   783 ;;      Params:         0       0       0       0       0       0       0       0       0
   784 ;;      Locals:         2       0       0       0       0       0       0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0       0       0
   786 ;;      Totals:         2       0       0       0       0       0       0       0       0
   787 ;;Total ram usage:        2 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    1
   790 ;; This function calls:
   791 ;;		_ENVIA_NIBBLE
   792 ;;		_LEER_LCD
   793 ;; This function is called by:
   794 ;;		_main
   795 ;;		_ESCRIBE_MENSAJE
   796 ;;		_GENERACARACTER
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text8
   801  000974                     __ptext8:
   802                           	callstack 0
   803  000974                     _ENVIA_CHAR:
   804                           	callstack 29
   805                           
   806                           ;incstack = 0
   807                           ;ENVIA_CHAR@dato stored from wreg
   808  000974  6E0D               	movwf	ENVIA_CHAR@dato^0,c
   809  000976                     
   810                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   811  000976  808C               	bsf	140,0,c	;volatile
   812  000978                     
   813                           ;LCD.c: 54:  LEER_LCD();
   814  000978  EC0F  F004         	call	_LEER_LCD	;wreg free
   815  00097C                     
   816                           ;LCD.c: 55:  TRISD = 0x00;
   817  00097C  0E00               	movlw	0
   818  00097E  6E95               	movwf	149,c	;volatile
   819  000980                     
   820                           ;LCD.c: 56:         _delay(1200);
   821  000980  0EF0               	movlw	240
   822  000982                     u187:
   823  000982  D000               	nop2	
   824  000984  2EE8               	decfsz	wreg,f,c
   825  000986  D7FD               	bra	u187
   826  000988                     
   827                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
   828  000988  928C               	bcf	140,1,c	;volatile
   829  00098A                     
   830                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
   831  00098A  948C               	bcf	140,2,c	;volatile
   832  00098C                     
   833                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
   834  00098C  808C               	bsf	140,0,c	;volatile
   835  00098E                     
   836                           ;LCD.c: 61:  aux = dato & 0xF0;
   837  00098E  500D               	movf	ENVIA_CHAR@dato^0,w,c
   838  000990  0BF0               	andlw	240
   839  000992  6E0E               	movwf	ENVIA_CHAR@aux^0,c
   840  000994                     
   841                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
   842  000994  500E               	movf	ENVIA_CHAR@aux^0,w,c
   843  000996  EC17  F005         	call	_ENVIA_NIBBLE
   844  00099A                     
   845                           ;LCD.c: 63:  aux = dato << 4;
   846  00099A  380D               	swapf	ENVIA_CHAR@dato^0,w,c
   847  00099C  0BF0               	andlw	240
   848  00099E  6E0E               	movwf	ENVIA_CHAR@aux^0,c
   849  0009A0                     
   850                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
   851  0009A0  500E               	movf	ENVIA_CHAR@aux^0,w,c
   852  0009A2  EC17  F005         	call	_ENVIA_NIBBLE
   853  0009A6  0012               	return		;funcret
   854  0009A8                     __end_of_ENVIA_CHAR:
   855                           	callstack 0
   856                           
   857 ;; *************** function _LEER_LCD *****************
   858 ;; Defined at:
   859 ;;		line 121 in file "LCD.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;  aux             1    0[COMRAM] unsigned char 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, status,2, status,0
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   873 ;;      Params:         0       0       0       0       0       0       0       0       0
   874 ;;      Locals:         1       0       0       0       0       0       0       0       0
   875 ;;      Temps:          0       0       0       0       0       0       0       0       0
   876 ;;      Totals:         1       0       0       0       0       0       0       0       0
   877 ;;Total ram usage:        1 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; This function calls:
   880 ;;		Nothing
   881 ;; This function is called by:
   882 ;;		_ENVIA_CHAR
   883 ;;		_ENVIA_LCD_CMD
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text9
   888  00081E                     __ptext9:
   889                           	callstack 0
   890  00081E                     _LEER_LCD:
   891                           	callstack 27
   892  00081E                     
   893                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
   894  00081E  0EF8               	movlw	248
   895  000820  6E95               	movwf	149,c	;volatile
   896  000822                     
   897                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
   898  000822  908C               	bcf	140,0,c	;volatile
   899  000824                     
   900                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
   901  000824  828C               	bsf	140,1,c	;volatile
   902  000826                     
   903                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
   904  000826  848C               	bsf	140,2,c	;volatile
   905  000828                     
   906                           ;LCD.c: 128:         _delay(1200);
   907  000828  0EF0               	movlw	240
   908  00082A                     u197:
   909  00082A  D000               	nop2	
   910  00082C  2EE8               	decfsz	wreg,f,c
   911  00082E  D7FD               	bra	u197
   912  000830                     
   913                           ;LCD.c: 130:  aux = PORTD;
   914  000830  CF83 F00C          	movff	3971,LEER_LCD@aux	;volatile
   915  000834                     
   916                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
   917  000834  948C               	bcf	140,2,c	;volatile
   918  000836                     
   919                           ;LCD.c: 132:         _delay(1200);
   920  000836  0EF0               	movlw	240
   921  000838                     u207:
   922  000838  D000               	nop2	
   923  00083A  2EE8               	decfsz	wreg,f,c
   924  00083C  D7FD               	bra	u207
   925  00083E                     
   926                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
   927  00083E  848C               	bsf	140,2,c	;volatile
   928  000840                     
   929                           ;LCD.c: 135:         _delay(1200);
   930  000840  0EF0               	movlw	240
   931  000842                     u217:
   932  000842  D000               	nop2	
   933  000844  2EE8               	decfsz	wreg,f,c
   934  000846  D7FD               	bra	u217
   935  000848                     
   936                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
   937  000848  948C               	bcf	140,2,c	;volatile
   938  00084A                     l806:
   939                           
   940                           ;LCD.c: 138:  aux = aux & 0x80;
   941  00084A  500C               	movf	LEER_LCD@aux^0,w,c
   942  00084C  0B80               	andlw	128
   943  00084E  6E0C               	movwf	LEER_LCD@aux^0,c
   944                           
   945                           ;LCD.c: 139:  while(aux == 0x80)
   946  000850  EF3E  F004         	goto	l820
   947  000854                     l101:
   948                           
   949                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
   950  000854  848C               	bsf	140,2,c	;volatile
   951  000856                     
   952                           ;LCD.c: 142:             _delay(1200);
   953  000856  0EF0               	movlw	240
   954  000858                     u227:
   955  000858  D000               	nop2	
   956  00085A  2EE8               	decfsz	wreg,f,c
   957  00085C  D7FD               	bra	u227
   958  00085E                     
   959                           ;LCD.c: 143:             aux = PORTD;
   960  00085E  CF83 F00C          	movff	3971,LEER_LCD@aux	;volatile
   961  000862                     
   962                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
   963  000862  948C               	bcf	140,2,c	;volatile
   964                           
   965                           ;LCD.c: 145:             _delay(1200);
   966  000864  0EF0               	movlw	240
   967  000866                     u237:
   968  000866  D000               	nop2	
   969  000868  2EE8               	decfsz	wreg,f,c
   970  00086A  D7FD               	bra	u237
   971  00086C                     
   972                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
   973  00086C  848C               	bsf	140,2,c	;volatile
   974                           
   975                           ;LCD.c: 147:             _delay(1200);
   976  00086E  0EF0               	movlw	240
   977  000870                     u247:
   978  000870  D000               	nop2	
   979  000872  2EE8               	decfsz	wreg,f,c
   980  000874  D7FD               	bra	u247
   981  000876                     
   982                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
   983  000876  948C               	bcf	140,2,c	;volatile
   984  000878  EF25  F004         	goto	l806
   985  00087C                     l820:
   986                           
   987                           ;LCD.c: 139:  while(aux == 0x80)
   988  00087C  0E80               	movlw	128
   989  00087E  180C               	xorwf	LEER_LCD@aux^0,w,c
   990  000880  B4D8               	btfsc	status,2,c
   991  000882  EF45  F004         	goto	u11
   992  000886  EF47  F004         	goto	u10
   993  00088A                     u11:
   994  00088A  EF2A  F004         	goto	l101
   995  00088E                     u10:
   996  00088E  0012               	return		;funcret
   997  000890                     __end_of_LEER_LCD:
   998                           	callstack 0
   999                           
  1000 ;; *************** function _ENVIA_NIBBLE *****************
  1001 ;; Defined at:
  1002 ;;		line 93 in file "LCD.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;  dato            1    wreg     unsigned char 
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;  dato            1    0[COMRAM] unsigned char 
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  1    wreg      void 
  1009 ;; Registers used:
  1010 ;;		wreg, status,2, status,0
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1016 ;;      Params:         0       0       0       0       0       0       0       0       0
  1017 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1018 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1019 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1020 ;;Total ram usage:        1 bytes
  1021 ;; Hardware stack levels used:    1
  1022 ;; This function calls:
  1023 ;;		Nothing
  1024 ;; This function is called by:
  1025 ;;		_ENVIA_CHAR
  1026 ;;		_LCD_CONFIG
  1027 ;;		_ENVIA_LCD_CMD
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           	psect	text10
  1032  000A2E                     __ptext10:
  1033                           	callstack 0
  1034  000A2E                     _ENVIA_NIBBLE:
  1035                           	callstack 28
  1036                           
  1037                           ;incstack = 0
  1038                           ;ENVIA_NIBBLE@dato stored from wreg
  1039  000A2E  6E0C               	movwf	ENVIA_NIBBLE@dato^0,c
  1040  000A30                     
  1041                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1042  000A30  0E0F               	movlw	15
  1043  000A32  168C               	andwf	140,f,c	;volatile
  1044                           
  1045                           ;LCD.c: 96:  dato &= 0xF0;
  1046  000A34  0EF0               	movlw	240
  1047  000A36  160C               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1048                           
  1049                           ;LCD.c: 97:  LATD|= dato;
  1050  000A38  500C               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1051  000A3A  128C               	iorwf	140,f,c	;volatile
  1052  000A3C                     
  1053                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1054  000A3C  848C               	bsf	140,2,c	;volatile
  1055  000A3E                     
  1056                           ;LCD.c: 100:         _delay(1200);
  1057  000A3E  0EF0               	movlw	240
  1058  000A40                     u257:
  1059  000A40  D000               	nop2	
  1060  000A42  2EE8               	decfsz	wreg,f,c
  1061  000A44  D7FD               	bra	u257
  1062  000A46                     
  1063                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1064  000A46  948C               	bcf	140,2,c	;volatile
  1065  000A48  0012               	return		;funcret
  1066  000A4A                     __end_of_ENVIA_NIBBLE:
  1067                           	callstack 0
  1068                           
  1069                           	psect	rparam
  1070  0000                     
  1071                           	psect	idloc
  1072                           
  1073                           ;Config register IDLOC0 @ 0x200000
  1074                           ;	unspecified, using default values
  1075  200000                     	org	2097152
  1076  200000  FF                 	db	255
  1077                           
  1078                           ;Config register IDLOC1 @ 0x200001
  1079                           ;	unspecified, using default values
  1080  200001                     	org	2097153
  1081  200001  FF                 	db	255
  1082                           
  1083                           ;Config register IDLOC2 @ 0x200002
  1084                           ;	unspecified, using default values
  1085  200002                     	org	2097154
  1086  200002  FF                 	db	255
  1087                           
  1088                           ;Config register IDLOC3 @ 0x200003
  1089                           ;	unspecified, using default values
  1090  200003                     	org	2097155
  1091  200003  FF                 	db	255
  1092                           
  1093                           ;Config register IDLOC4 @ 0x200004
  1094                           ;	unspecified, using default values
  1095  200004                     	org	2097156
  1096  200004  FF                 	db	255
  1097                           
  1098                           ;Config register IDLOC5 @ 0x200005
  1099                           ;	unspecified, using default values
  1100  200005                     	org	2097157
  1101  200005  FF                 	db	255
  1102                           
  1103                           ;Config register IDLOC6 @ 0x200006
  1104                           ;	unspecified, using default values
  1105  200006                     	org	2097158
  1106  200006  FF                 	db	255
  1107                           
  1108                           ;Config register IDLOC7 @ 0x200007
  1109                           ;	unspecified, using default values
  1110  200007                     	org	2097159
  1111  200007  FF                 	db	255
  1112                           
  1113                           	psect	config
  1114                           
  1115                           ;Config register CONFIG1L @ 0x300000
  1116                           ;	PLL Prescaler Selection bits
  1117                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1118                           ;	System Clock Postscaler Selection bits
  1119                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1120                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1121                           ;	USBDIV = 0x0, unprogrammed default
  1122  300000                     	org	3145728
  1123  300000  00                 	db	0
  1124                           
  1125                           ;Config register CONFIG1H @ 0x300001
  1126                           ;	Oscillator Selection bits
  1127                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1128                           ;	Fail-Safe Clock Monitor Enable bit
  1129                           ;	FCMEN = 0x0, unprogrammed default
  1130                           ;	Internal/External Oscillator Switchover bit
  1131                           ;	IESO = 0x0, unprogrammed default
  1132  300001                     	org	3145729
  1133  300001  02                 	db	2
  1134                           
  1135                           ;Config register CONFIG2L @ 0x300002
  1136                           ;	Power-up Timer Enable bit
  1137                           ;	PWRT = ON, PWRT enabled
  1138                           ;	Brown-out Reset Enable bits
  1139                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1140                           ;	Brown-out Reset Voltage bits
  1141                           ;	BORV = 3, Minimum setting 2.05V
  1142                           ;	USB Voltage Regulator Enable bit
  1143                           ;	VREGEN = 0x0, unprogrammed default
  1144  300002                     	org	3145730
  1145  300002  18                 	db	24
  1146                           
  1147                           ;Config register CONFIG2H @ 0x300003
  1148                           ;	Watchdog Timer Enable bit
  1149                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1150                           ;	Watchdog Timer Postscale Select bits
  1151                           ;	WDTPS = 32768, 1:32768
  1152  300003                     	org	3145731
  1153  300003  1E                 	db	30
  1154                           
  1155                           ; Padding undefined space
  1156  300004                     	org	3145732
  1157  300004  FF                 	db	255
  1158                           
  1159                           ;Config register CONFIG3H @ 0x300005
  1160                           ;	CCP2 MUX bit
  1161                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1162                           ;	PORTB A/D Enable bit
  1163                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1164                           ;	Low-Power Timer 1 Oscillator Enable bit
  1165                           ;	LPT1OSC = 0x0, unprogrammed default
  1166                           ;	MCLR Pin Enable bit
  1167                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1168  300005                     	org	3145733
  1169  300005  81                 	db	129
  1170                           
  1171                           ;Config register CONFIG4L @ 0x300006
  1172                           ;	Stack Full/Underflow Reset Enable bit
  1173                           ;	STVREN = 0x1, unprogrammed default
  1174                           ;	Single-Supply ICSP Enable bit
  1175                           ;	LVP = OFF, Single-Supply ICSP disabled
  1176                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1177                           ;	ICPRT = 0x0, unprogrammed default
  1178                           ;	Extended Instruction Set Enable bit
  1179                           ;	XINST = 0x0, unprogrammed default
  1180                           ;	Background Debugger Enable bit
  1181                           ;	DEBUG = 0x1, unprogrammed default
  1182  300006                     	org	3145734
  1183  300006  81                 	db	129
  1184                           
  1185                           ; Padding undefined space
  1186  300007                     	org	3145735
  1187  300007  FF                 	db	255
  1188                           
  1189                           ;Config register CONFIG5L @ 0x300008
  1190                           ;	unspecified, using default values
  1191                           ;	Code Protection bit
  1192                           ;	CP0 = 0x1, unprogrammed default
  1193                           ;	Code Protection bit
  1194                           ;	CP1 = 0x1, unprogrammed default
  1195                           ;	Code Protection bit
  1196                           ;	CP2 = 0x1, unprogrammed default
  1197                           ;	Code Protection bit
  1198                           ;	CP3 = 0x1, unprogrammed default
  1199  300008                     	org	3145736
  1200  300008  0F                 	db	15
  1201                           
  1202                           ;Config register CONFIG5H @ 0x300009
  1203                           ;	unspecified, using default values
  1204                           ;	Boot Block Code Protection bit
  1205                           ;	CPB = 0x1, unprogrammed default
  1206                           ;	Data EEPROM Code Protection bit
  1207                           ;	CPD = 0x1, unprogrammed default
  1208  300009                     	org	3145737
  1209  300009  C0                 	db	192
  1210                           
  1211                           ;Config register CONFIG6L @ 0x30000A
  1212                           ;	unspecified, using default values
  1213                           ;	Write Protection bit
  1214                           ;	WRT0 = 0x1, unprogrammed default
  1215                           ;	Write Protection bit
  1216                           ;	WRT1 = 0x1, unprogrammed default
  1217                           ;	Write Protection bit
  1218                           ;	WRT2 = 0x1, unprogrammed default
  1219                           ;	Write Protection bit
  1220                           ;	WRT3 = 0x1, unprogrammed default
  1221  30000A                     	org	3145738
  1222  30000A  0F                 	db	15
  1223                           
  1224                           ;Config register CONFIG6H @ 0x30000B
  1225                           ;	unspecified, using default values
  1226                           ;	Configuration Register Write Protection bit
  1227                           ;	WRTC = 0x1, unprogrammed default
  1228                           ;	Boot Block Write Protection bit
  1229                           ;	WRTB = 0x1, unprogrammed default
  1230                           ;	Data EEPROM Write Protection bit
  1231                           ;	WRTD = 0x1, unprogrammed default
  1232  30000B                     	org	3145739
  1233  30000B  E0                 	db	224
  1234                           
  1235                           ;Config register CONFIG7L @ 0x30000C
  1236                           ;	unspecified, using default values
  1237                           ;	Table Read Protection bit
  1238                           ;	EBTR0 = 0x1, unprogrammed default
  1239                           ;	Table Read Protection bit
  1240                           ;	EBTR1 = 0x1, unprogrammed default
  1241                           ;	Table Read Protection bit
  1242                           ;	EBTR2 = 0x1, unprogrammed default
  1243                           ;	Table Read Protection bit
  1244                           ;	EBTR3 = 0x1, unprogrammed default
  1245  30000C                     	org	3145740
  1246  30000C  0F                 	db	15
  1247                           
  1248                           ;Config register CONFIG7H @ 0x30000D
  1249                           ;	unspecified, using default values
  1250                           ;	Boot Block Table Read Protection bit
  1251                           ;	EBTRB = 0x1, unprogrammed default
  1252  30000D                     	org	3145741
  1253  30000D  40                 	db	64
  1254                           tosu	equ	0xFFF
  1255                           tosh	equ	0xFFE
  1256                           tosl	equ	0xFFD
  1257                           stkptr	equ	0xFFC
  1258                           pclatu	equ	0xFFB
  1259                           pclath	equ	0xFFA
  1260                           pcl	equ	0xFF9
  1261                           tblptru	equ	0xFF8
  1262                           tblptrh	equ	0xFF7
  1263                           tblptrl	equ	0xFF6
  1264                           tablat	equ	0xFF5
  1265                           prodh	equ	0xFF4
  1266                           prodl	equ	0xFF3
  1267                           indf0	equ	0xFEF
  1268                           postinc0	equ	0xFEE
  1269                           postdec0	equ	0xFED
  1270                           preinc0	equ	0xFEC
  1271                           plusw0	equ	0xFEB
  1272                           fsr0h	equ	0xFEA
  1273                           fsr0l	equ	0xFE9
  1274                           wreg	equ	0xFE8
  1275                           indf1	equ	0xFE7
  1276                           postinc1	equ	0xFE6
  1277                           postdec1	equ	0xFE5
  1278                           preinc1	equ	0xFE4
  1279                           plusw1	equ	0xFE3
  1280                           fsr1h	equ	0xFE2
  1281                           fsr1l	equ	0xFE1
  1282                           bsr	equ	0xFE0
  1283                           indf2	equ	0xFDF
  1284                           postinc2	equ	0xFDE
  1285                           postdec2	equ	0xFDD
  1286                           preinc2	equ	0xFDC
  1287                           plusw2	equ	0xFDB
  1288                           fsr2h	equ	0xFDA
  1289                           fsr2l	equ	0xFD9
  1290                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    27
    Data        11
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      8      19
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_lcd_init
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     810
                                              5 COMRAM     3     3      0
                        _CURSOR_HOME
                         _ENVIA_CHAR
                      _configuracion
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _configuracion                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _configuracion
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      8      13       1       20.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      13      20        0.0%
DATA                 0      0      13       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed May 27 15:28:55 2020

                     l21 0A66                       l24 0A2C                       l71 0A5C  
                     l91 08EE                       l76 09D6                       l85 09A6  
                     l94 0A48                       l88 0A64                       l97 0972  
                     u10 088E                       u11 088A                       u20 09BA  
                     u21 09B6                       u30 09D0                       u31 09CC  
                     u40 0934                       u41 0930           ?_configuracion 000C  
          ENVIA_CHAR@aux 000E                      l101 0854                      l103 088E  
                    l800 083E                      l810 085E                      l802 0840  
                    l812 0862                      l820 087C                      l804 0848  
                    l900 0976                      l822 0A30                      l814 086C  
                    l806 084A                      l910 098A                      l902 0978  
                    l830 0942                      l824 0A3C                      l816 0876  
                    l808 0856                      l920 09A0                      l912 098C  
                    l904 097C                      l840 0956                      l832 0944  
                    l826 0A3E                      l914 098E                      l906 0980  
                    l850 096C                      l842 0958                      l834 0948  
                    l922 08F0                      l828 0A46                      l916 0994  
                    l908 0988                      l844 095A                      l836 094C  
                    l860 08BC                      l852 0890                      l932 08FC  
                    l924 08F4                      l790 0826                      l918 099A  
                    l846 0960                      l838 0954                      l870 08DC  
                    l862 08C4                      l854 0894                      l934 0922  
                    l926 08F8                      l792 0828                      l784 081E  
                    l848 0966                      l880 09AA                      l872 08E2  
                    l864 08CA                      l856 089A                      l936 0924  
                    l794 0830                      l786 0822                      l882 09BA  
                    l874 08E8                      l866 08D0                      l858 08A8  
                    l890 0A0A                      l938 0934                      l796 0834  
                    l788 0824                      l876 0A5E                      l884 09C0  
                    l868 08D6                      l892 0A0E                      l798 0836  
                    l878 0A56                      l886 09D0                      l894 0A1E  
                    l896 0A22                      l888 0A06                      l898 0A26  
                    u207 0838                      u217 0842                      u137 0A14  
                    u227 0858                      u147 08A0                      u237 0866  
                    u157 08AE                      u247 0870                      u167 08BE  
                    u257 0A40                      u177 094E                      u187 0982  
                    u197 082A              LEER_LCD@aux 000C                      wreg 000FE8  
           ?_CURSOR_HOME 000C           ??_ENVIA_NIBBLE 000C           ENVIA_CHAR@dato 000D  
                   _LATD 000F8C                     _main 08F0                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     start 0000  
          ?_CURSOR_ONOFF 000C             ___param_bank 000000          ??_ENVIA_LCD_CMD 000D  
       __end_of_LEER_LCD 0890      __size_of_BORRAR_LCD 0008                    ?_main 000C  
                  _PORTD 000F83      __size_of_LCD_CONFIG 0060                    _TRISD 000F95  
    __size_of_ENVIA_CHAR 0034                    main@i 0013                    tablat 000FF5  
                  status 000FD8           ??_CURSOR_ONOFF 000F          __initialization 09D8  
           __end_of_main 0940          ??_configuracion 000C                   ??_main 0011  
          __activetblptr 000001         __end_of_lcd_init 0A2E     __end_of_ENVIA_NIBBLE 0A4A  
                 _letras 0801             __pdataCOMRAM 0001             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
           ??_BORRAR_LCD 000F     __size_of_CURSOR_HOME 0008                ?_LEER_LCD 000C  
             __accesstop 0060  __end_of__initialization 09F8             ??_LCD_CONFIG 000F  
          ___rparam_used 000001             ??_ENVIA_CHAR 000D           __pcstackCOMRAM 000C  
     __end_of_BORRAR_LCD 0A66         ENVIA_LCD_CMD@aux 000E     __end_of_CURSOR_ONOFF 09D8  
     __end_of_LCD_CONFIG 08F0       __end_of_ENVIA_CHAR 09A8               ??_LEER_LCD 000C  
       ENVIA_NIBBLE@dato 000C                ?_lcd_init 000C    __size_of_ENVIA_NIBBLE 001C  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
  __end_of_ENVIA_LCD_CMD 0974                  __pcinit 09D8                  __ramtop 0800  
                __ptext0 08F0                  __ptext1 0A06                  __ptext2 0890  
                __ptext3 09A8                  __ptext4 0A56                  __ptext5 0A5E  
                __ptext6 0940                  __ptext7 0A66                  __ptext8 0974  
                __ptext9 081E                  _secreta 0001               ??_lcd_init 0010  
           _ENVIA_NIBBLE 0A2E     end_of_initialization 09F8                  postdec1 000FE5  
                postinc0 000FEE    __end_of_configuracion 0A68    __size_of_CURSOR_ONOFF 0030  
      __size_of_LEER_LCD 0072             _CURSOR_ONOFF 09A8       CURSOR_ONOFF@estado 000F  
          __pidataCOMRAM 0A4A           __end_of_letras 081C            ??_CURSOR_HOME 000F  
    start_initialization 09D8        ENVIA_LCD_CMD@dato 000D      __end_of_CURSOR_HOME 0A5E  
      __size_of_lcd_init 0028              __smallconst 0800                 _LEER_LCD 081E  
               _LATDbits 000F8C              _CURSOR_HOME 0A56                copy_data0 09EC  
 __size_of_ENVIA_LCD_CMD 0034                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0800                 __ptext10 0A2E               _BORRAR_LCD 0A5E  
               _lcd_init 0A06   __size_of_configuracion 0002            __size_of_main 0050  
             _LCD_CONFIG 0890               _ENVIA_CHAR 0974            _ENVIA_LCD_CMD 0940  
         ?_ENVIA_LCD_CMD 000C            _configuracion 0A66              ?_BORRAR_LCD 000C  
          ?_ENVIA_NIBBLE 000C              ?_LCD_CONFIG 000C              ?_ENVIA_CHAR 000C  
