

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Jun 09 21:40:21 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    28                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  0003FE                     __pidataCOMRAM:
    68                           	callstack 0
    69                           
    70                           ;initializer for _normal
    71  0003FE  4E                 	db	78
    72  0003FF  69                 	db	105
    73  000400  76                 	db	118
    74  000401  65                 	db	101
    75  000402  6C                 	db	108
    76  000403  20                 	db	32
    77  000404  4E                 	db	78
    78  000405  6F                 	db	111
    79  000406  72                 	db	114
    80  000407  6D                 	db	109
    81  000408  00                 	db	0
    82                           
    83                           ;initializer for _mayor40
    84  000409  4E                 	db	78
    85  00040A  69                 	db	105
    86  00040B  76                 	db	118
    87  00040C  65                 	db	101
    88  00040D  6C                 	db	108
    89  00040E  20                 	db	32
    90  00040F  3E                 	db	62
    91  000410  34                 	db	52
    92  000411  30                 	db	48
    93  000412  43                 	db	67
    94  000413  00                 	db	0
    95                           
    96                           ;initializer for _menor20
    97  000414  4E                 	db	78
    98  000415  69                 	db	105
    99  000416  76                 	db	118
   100  000417  65                 	db	101
   101  000418  6C                 	db	108
   102  000419  20                 	db	32
   103  00041A  3C                 	db	60
   104  00041B  32                 	db	50
   105  00041C  30                 	db	48
   106  00041D  43                 	db	67
   107  00041E  00                 	db	0
   108  0000                     _PIR1bits	set	3998
   109  0000                     _CMCONbits	set	4020
   110  0000                     _TXREG	set	4013
   111  0000                     _CMCON	set	4020
   112  0000                     _INTCONbits	set	4082
   113  0000                     _PIE1bits	set	3997
   114  0000                     _TRISCbits	set	3988
   115  0000                     _RCSTAbits	set	4011
   116  0000                     _SPBRG	set	4015
   117  0000                     _SPBRGH	set	4016
   118  0000                     _TXSTAbits	set	4012
   119  0000                     _BAUDCONbits	set	4024
   120  0000                     _PORTD	set	3971
   121  0000                     _LATD	set	3980
   122  0000                     _TRISD	set	3989
   123  0000                     _LATDbits	set	3980
   124                           
   125                           ; #config settings
   126                           
   127                           	psect	cinit
   128  000364                     __pcinit:
   129                           	callstack 0
   130  000364                     start_initialization:
   131                           	callstack 0
   132  000364                     __initialization:
   133                           	callstack 0
   134                           
   135                           ; Initialize objects allocated to COMRAM (33 bytes)
   136                           ; load TBLPTR registers with __pidataCOMRAM
   137  000364  0EFE               	movlw	low __pidataCOMRAM
   138  000366  6EF6               	movwf	tblptrl,c
   139  000368  0E03               	movlw	high __pidataCOMRAM
   140  00036A  6EF7               	movwf	tblptrh,c
   141  00036C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   142  00036E  6EF8               	movwf	tblptru,c
   143  000370  EE00  F001         	lfsr	0,__pdataCOMRAM
   144  000374  EE10 F021          	lfsr	1,33
   145  000378                     copy_data0:
   146  000378  0009               	tblrd		*+
   147  00037A  CFF5 FFEE          	movff	tablat,postinc0
   148  00037E  50E5               	movf	postdec1,w,c
   149  000380  50E1               	movf	fsr1l,w,c
   150  000382  E1FA               	bnz	copy_data0
   151  000384                     end_of_initialization:
   152                           	callstack 0
   153  000384                     __end_of__initialization:
   154                           	callstack 0
   155  000384  9031               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   156  000386  9231               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   157  000388  0100               	movlb	0
   158  00038A  EF09  F000         	goto	_main	;jump to C main() function
   159                           
   160                           	psect	dataCOMRAM
   161  000001                     __pdataCOMRAM:
   162                           	callstack 0
   163  000001                     _normal:
   164                           	callstack 0
   165  000001                     	ds	11
   166  00000C                     _mayor40:
   167                           	callstack 0
   168  00000C                     	ds	11
   169  000017                     _menor20:
   170                           	callstack 0
   171  000017                     	ds	11
   172                           
   173                           	psect	cstackCOMRAM
   174  000022                     __pcstackCOMRAM:
   175                           	callstack 0
   176  000022                     ENVIA_NIBBLE@dato:
   177                           	callstack 0
   178  000022                     LEER_LCD@aux:
   179                           	callstack 0
   180                           
   181                           ; 1 bytes @ 0x0
   182  000022                     	ds	1
   183  000023                     ENVIA_CHAR@dato:
   184                           	callstack 0
   185  000023                     ENVIA_LCD_CMD@dato:
   186                           	callstack 0
   187                           
   188                           ; 1 bytes @ 0x1
   189  000023                     	ds	1
   190  000024                     ENVIA_CHAR@aux:
   191                           	callstack 0
   192  000024                     ENVIA_LCD_CMD@aux:
   193                           	callstack 0
   194                           
   195                           ; 1 bytes @ 0x2
   196  000024                     	ds	1
   197  000025                     ??_LCD_CONFIG:
   198  000025                     POS_CURSOR@columna:
   199                           	callstack 0
   200  000025                     CURSOR_ONOFF@estado:
   201                           	callstack 0
   202  000025                     ESCRIBE_MENSAJE@cadena:
   203                           	callstack 0
   204                           
   205                           ; 2 bytes @ 0x3
   206  000025                     	ds	1
   207  000026                     ??_lcd_init:
   208  000026                     POS_CURSOR@fila:
   209                           	callstack 0
   210                           
   211                           ; 1 bytes @ 0x4
   212  000026                     	ds	1
   213  000027                     ESCRIBE_MENSAJE@tam:
   214                           	callstack 0
   215                           
   216                           ; 1 bytes @ 0x5
   217  000027                     	ds	1
   218  000028                     ESCRIBE_MENSAJE@i:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0x6
   222  000028                     	ds	1
   223  000029                     ??_main:
   224                           
   225                           ; 1 bytes @ 0x7
   226  000029                     	ds	2
   227  00002B                     main@i:
   228                           	callstack 0
   229                           
   230                           ; 2 bytes @ 0x9
   231  00002B                     	ds	2
   232  00002D                     main@i_552:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0xB
   236  00002D                     	ds	2
   237  00002F                     main@i_553:
   238                           	callstack 0
   239                           
   240                           ; 2 bytes @ 0xD
   241  00002F                     	ds	2
   242                           
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   245 ;;
   246 ;; *************** function _main *****************
   247 ;; Defined at:
   248 ;;		line 65 in file "maincode3.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;  i               2   13[COMRAM] unsigned int 
   253 ;;  i               2   11[COMRAM] unsigned int 
   254 ;;  i               2    9[COMRAM] unsigned int 
   255 ;; Return value:  Size  Location     Type
   256 ;;                  1    wreg      void 
   257 ;; Registers used:
   258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   259 ;; Tracked objects:
   260 ;;		On entry : 0/0
   261 ;;		On exit  : 0/0
   262 ;;		Unchanged: 0/0
   263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   264 ;;      Params:         0       0       0       0       0       0       0       0       0
   265 ;;      Locals:         6       0       0       0       0       0       0       0       0
   266 ;;      Temps:          2       0       0       0       0       0       0       0       0
   267 ;;      Totals:         8       0       0       0       0       0       0       0       0
   268 ;;Total ram usage:        8 bytes
   269 ;; Hardware stack levels required when called:    5
   270 ;; This function calls:
   271 ;;		_ESCRIBE_MENSAJE
   272 ;;		_POS_CURSOR
   273 ;;		_configuracion
   274 ;;		_lcd_init
   275 ;;		_serial_siguientelinea
   276 ;; This function is called by:
   277 ;;		Startup code after reset
   278 ;; This function uses a non-reentrant model
   279 ;;
   280                           
   281                           	psect	text0
   282  000012                     __ptext0:
   283                           	callstack 0
   284  000012                     _main:
   285                           	callstack 26
   286  000012                     
   287                           ;maincode3.c: 66:     configuracion();
   288  000012  ECEE  F001         	call	_configuracion	;wreg free
   289  000016                     
   290                           ;maincode3.c: 67:     lcd_init();
   291  000016  ECC7  F001         	call	_lcd_init	;wreg free
   292  00001A                     l1140:
   293                           
   294                           ;maincode3.c: 69:         if (CMCONbits.C1OUT == 1) {
   295  00001A  ACB4               	btfss	180,6,c	;volatile
   296  00001C  EF12  F000         	goto	u271
   297  000020  EF14  F000         	goto	u270
   298  000024                     u271:
   299  000024  EF43  F000         	goto	l1160
   300  000028                     u270:
   301  000028                     
   302                           ;maincode3.c: 70:             for (unsigned int i=0;i<10;i++){
   303  000028  0E00               	movlw	0
   304  00002A  6E2C               	movwf	(main@i+1)^0,c
   305  00002C  0E00               	movlw	0
   306  00002E  6E2B               	movwf	main@i^0,c
   307  000030                     l1148:
   308                           
   309                           ;maincode3.c: 71:                 TXREG = menor20[i];
   310  000030  0E17               	movlw	low _menor20
   311  000032  242B               	addwf	main@i^0,w,c
   312  000034  6ED9               	movwf	fsr2l,c
   313  000036  0E00               	movlw	high _menor20
   314  000038  202C               	addwfc	(main@i+1)^0,w,c
   315  00003A  6EDA               	movwf	fsr2h,c
   316  00003C  50DF               	movf	indf2,w,c
   317  00003E  6EAD               	movwf	173,c	;volatile
   318  000040                     l144:
   319  000040  A2AC               	btfss	172,1,c	;volatile
   320  000042  EF25  F000         	goto	u281
   321  000046  EF27  F000         	goto	u280
   322  00004A                     u281:
   323  00004A  EF20  F000         	goto	l144
   324  00004E                     u280:
   325  00004E                     
   326                           ;maincode3.c: 73:             }
   327  00004E  4A2B               	infsnz	main@i^0,f,c
   328  000050  2A2C               	incf	(main@i+1)^0,f,c
   329  000052  502C               	movf	(main@i+1)^0,w,c
   330  000054  E109               	bnz	u290
   331  000056  0E0A               	movlw	10
   332  000058  5C2B               	subwf	main@i^0,w,c
   333  00005A  A0D8               	btfss	status,0,c
   334  00005C  EF32  F000         	goto	u291
   335  000060  EF34  F000         	goto	u290
   336  000064                     u291:
   337  000064  EF18  F000         	goto	l1148
   338  000068                     u290:
   339  000068                     
   340                           ;maincode3.c: 74:             serial_siguientelinea();
   341  000068  ECDB  F001         	call	_serial_siguientelinea	;wreg free
   342  00006C                     
   343                           ;maincode3.c: 75:             POS_CURSOR(1,0);
   344  00006C  0E00               	movlw	0
   345  00006E  6E25               	movwf	POS_CURSOR@columna^0,c
   346  000070  0E01               	movlw	1
   347  000072  EC2F  F001         	call	_POS_CURSOR
   348  000076                     
   349                           ;maincode3.c: 76:             ESCRIBE_MENSAJE(menor20, 10);
   350  000076  0E17               	movlw	low _menor20
   351  000078  6E25               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   352  00007A  0E00               	movlw	high _menor20
   353  00007C  6E26               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   354  00007E  0E0A               	movlw	10
   355  000080  6E27               	movwf	ESCRIBE_MENSAJE@tam^0,c
   356  000082  EC66  F001         	call	_ESCRIBE_MENSAJE	;wreg free
   357  000086                     l1160:
   358                           
   359                           ;maincode3.c: 78:         if (CMCONbits.C2OUT == 1){
   360  000086  AEB4               	btfss	180,7,c	;volatile
   361  000088  EF48  F000         	goto	u301
   362  00008C  EF4A  F000         	goto	u300
   363  000090                     u301:
   364  000090  EF79  F000         	goto	l1180
   365  000094                     u300:
   366  000094                     
   367                           ;maincode3.c: 79:             for (unsigned int i=0;i<10;i++){
   368  000094  0E00               	movlw	0
   369  000096  6E2E               	movwf	(main@i_552+1)^0,c
   370  000098  0E00               	movlw	0
   371  00009A  6E2D               	movwf	main@i_552^0,c
   372  00009C                     l1168:
   373                           
   374                           ;maincode3.c: 80:                 TXREG = mayor40[i];
   375  00009C  0E0C               	movlw	low _mayor40
   376  00009E  242D               	addwf	main@i_552^0,w,c
   377  0000A0  6ED9               	movwf	fsr2l,c
   378  0000A2  0E00               	movlw	high _mayor40
   379  0000A4  202E               	addwfc	(main@i_552+1)^0,w,c
   380  0000A6  6EDA               	movwf	fsr2h,c
   381  0000A8  50DF               	movf	indf2,w,c
   382  0000AA  6EAD               	movwf	173,c	;volatile
   383  0000AC                     l150:
   384  0000AC  A2AC               	btfss	172,1,c	;volatile
   385  0000AE  EF5B  F000         	goto	u311
   386  0000B2  EF5D  F000         	goto	u310
   387  0000B6                     u311:
   388  0000B6  EF56  F000         	goto	l150
   389  0000BA                     u310:
   390  0000BA                     
   391                           ;maincode3.c: 82:             }
   392  0000BA  4A2D               	infsnz	main@i_552^0,f,c
   393  0000BC  2A2E               	incf	(main@i_552+1)^0,f,c
   394  0000BE  502E               	movf	(main@i_552+1)^0,w,c
   395  0000C0  E109               	bnz	u320
   396  0000C2  0E0A               	movlw	10
   397  0000C4  5C2D               	subwf	main@i_552^0,w,c
   398  0000C6  A0D8               	btfss	status,0,c
   399  0000C8  EF68  F000         	goto	u321
   400  0000CC  EF6A  F000         	goto	u320
   401  0000D0                     u321:
   402  0000D0  EF4E  F000         	goto	l1168
   403  0000D4                     u320:
   404  0000D4                     
   405                           ;maincode3.c: 83:             serial_siguientelinea();
   406  0000D4  ECDB  F001         	call	_serial_siguientelinea	;wreg free
   407  0000D8                     
   408                           ;maincode3.c: 84:             POS_CURSOR(1,0);
   409  0000D8  0E00               	movlw	0
   410  0000DA  6E25               	movwf	POS_CURSOR@columna^0,c
   411  0000DC  0E01               	movlw	1
   412  0000DE  EC2F  F001         	call	_POS_CURSOR
   413  0000E2                     
   414                           ;maincode3.c: 85:             ESCRIBE_MENSAJE(mayor40, 10);
   415  0000E2  0E0C               	movlw	low _mayor40
   416  0000E4  6E25               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   417  0000E6  0E00               	movlw	high _mayor40
   418  0000E8  6E26               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   419  0000EA  0E0A               	movlw	10
   420  0000EC  6E27               	movwf	ESCRIBE_MENSAJE@tam^0,c
   421  0000EE  EC66  F001         	call	_ESCRIBE_MENSAJE	;wreg free
   422  0000F2                     l1180:
   423                           
   424                           ;maincode3.c: 87:         if (CMCONbits.C2OUT == 0 && CMCONbits.C1OUT == 0){
   425  0000F2  BEB4               	btfsc	180,7,c	;volatile
   426  0000F4  EF7E  F000         	goto	u331
   427  0000F8  EF80  F000         	goto	u330
   428  0000FC                     u331:
   429  0000FC  EFB6  F000         	goto	l1202
   430  000100                     u330:
   431  000100  BCB4               	btfsc	180,6,c	;volatile
   432  000102  EF85  F000         	goto	u341
   433  000106  EF87  F000         	goto	u340
   434  00010A                     u341:
   435  00010A  EFB6  F000         	goto	l1202
   436  00010E                     u340:
   437  00010E                     
   438                           ;maincode3.c: 88:             for (unsigned int i=0;i<10;i++){
   439  00010E  0E00               	movlw	0
   440  000110  6E30               	movwf	(main@i_553+1)^0,c
   441  000112  0E00               	movlw	0
   442  000114  6E2F               	movwf	main@i_553^0,c
   443  000116                     l1190:
   444                           
   445                           ;maincode3.c: 89:                 TXREG = normal[i];
   446  000116  0E01               	movlw	low _normal
   447  000118  242F               	addwf	main@i_553^0,w,c
   448  00011A  6ED9               	movwf	fsr2l,c
   449  00011C  0E00               	movlw	high _normal
   450  00011E  2030               	addwfc	(main@i_553+1)^0,w,c
   451  000120  6EDA               	movwf	fsr2h,c
   452  000122  50DF               	movf	indf2,w,c
   453  000124  6EAD               	movwf	173,c	;volatile
   454  000126                     l156:
   455  000126  A2AC               	btfss	172,1,c	;volatile
   456  000128  EF98  F000         	goto	u351
   457  00012C  EF9A  F000         	goto	u350
   458  000130                     u351:
   459  000130  EF93  F000         	goto	l156
   460  000134                     u350:
   461  000134                     
   462                           ;maincode3.c: 91:             }
   463  000134  4A2F               	infsnz	main@i_553^0,f,c
   464  000136  2A30               	incf	(main@i_553+1)^0,f,c
   465  000138  5030               	movf	(main@i_553+1)^0,w,c
   466  00013A  E109               	bnz	u360
   467  00013C  0E0A               	movlw	10
   468  00013E  5C2F               	subwf	main@i_553^0,w,c
   469  000140  A0D8               	btfss	status,0,c
   470  000142  EFA5  F000         	goto	u361
   471  000146  EFA7  F000         	goto	u360
   472  00014A                     u361:
   473  00014A  EF8B  F000         	goto	l1190
   474  00014E                     u360:
   475  00014E                     
   476                           ;maincode3.c: 92:             serial_siguientelinea();
   477  00014E  ECDB  F001         	call	_serial_siguientelinea	;wreg free
   478  000152                     
   479                           ;maincode3.c: 93:             POS_CURSOR(1,0);
   480  000152  0E00               	movlw	0
   481  000154  6E25               	movwf	POS_CURSOR@columna^0,c
   482  000156  0E01               	movlw	1
   483  000158  EC2F  F001         	call	_POS_CURSOR
   484  00015C                     
   485                           ;maincode3.c: 94:             ESCRIBE_MENSAJE(normal, 10);
   486  00015C  0E01               	movlw	low _normal
   487  00015E  6E25               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   488  000160  0E00               	movlw	high _normal
   489  000162  6E26               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   490  000164  0E0A               	movlw	10
   491  000166  6E27               	movwf	ESCRIBE_MENSAJE@tam^0,c
   492  000168  EC66  F001         	call	_ESCRIBE_MENSAJE	;wreg free
   493  00016C                     l1202:
   494                           
   495                           ;maincode3.c: 96:         _delay((unsigned long)((500)*(48000000UL/4000.0)));
   496  00016C  0E1F               	movlw	31
   497  00016E  6E2A               	movwf	(??_main+1)^0,c
   498  000170  0E71               	movlw	113
   499  000172  6E29               	movwf	??_main^0,c
   500  000174  0E1E               	movlw	30
   501  000176                     u377:
   502  000176  2EE8               	decfsz	wreg,f,c
   503  000178  D7FE               	bra	u377
   504  00017A  2E29               	decfsz	??_main^0,f,c
   505  00017C  D7FC               	bra	u377
   506  00017E  2E2A               	decfsz	(??_main+1)^0,f,c
   507  000180  D7FA               	bra	u377
   508  000182  D000               	nop2	
   509  000184  EF0D  F000         	goto	l1140
   510  000188  EF07  F000         	goto	start
   511  00018C                     __end_of_main:
   512                           	callstack 0
   513                           
   514 ;; *************** function _serial_siguientelinea *****************
   515 ;; Defined at:
   516 ;;		line 58 in file "maincode3.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, status,2
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   530 ;;      Params:         0       0       0       0       0       0       0       0       0
   531 ;;      Locals:         0       0       0       0       0       0       0       0       0
   532 ;;      Temps:          0       0       0       0       0       0       0       0       0
   533 ;;      Totals:         0       0       0       0       0       0       0       0       0
   534 ;;Total ram usage:        0 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    1
   537 ;; This function calls:
   538 ;;		Nothing
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           	psect	text1
   545  0003B6                     __ptext1:
   546                           	callstack 0
   547  0003B6                     _serial_siguientelinea:
   548                           	callstack 29
   549  0003B6                     
   550                           ;maincode3.c: 59:     TXREG = 0x0A;
   551  0003B6  0E0A               	movlw	10
   552  0003B8  6EAD               	movwf	173,c	;volatile
   553  0003BA                     l129:
   554  0003BA  A2AC               	btfss	172,1,c	;volatile
   555  0003BC  EFE2  F001         	goto	u71
   556  0003C0  EFE4  F001         	goto	u70
   557  0003C4                     u71:
   558  0003C4  EFDD  F001         	goto	l129
   559  0003C8                     u70:
   560  0003C8                     
   561                           ;maincode3.c: 61:     TXREG = 0x0D;
   562  0003C8  0E0D               	movlw	13
   563  0003CA  6EAD               	movwf	173,c	;volatile
   564  0003CC                     l132:
   565  0003CC  A2AC               	btfss	172,1,c	;volatile
   566  0003CE  EFEB  F001         	goto	u81
   567  0003D2  EFED  F001         	goto	u80
   568  0003D6                     u81:
   569  0003D6  EFE6  F001         	goto	l132
   570  0003DA                     u80:
   571  0003DA  0012               	return		;funcret
   572  0003DC                     __end_of_serial_siguientelinea:
   573                           	callstack 0
   574                           
   575 ;; *************** function _lcd_init *****************
   576 ;; Defined at:
   577 ;;		line 32 in file "maincode3.c"
   578 ;; Parameters:    Size  Location     Type
   579 ;;		None
   580 ;; Auto vars:     Size  Location     Type
   581 ;;		None
   582 ;; Return value:  Size  Location     Type
   583 ;;                  1    wreg      void 
   584 ;; Registers used:
   585 ;;		wreg, status,2, status,0, cstack
   586 ;; Tracked objects:
   587 ;;		On entry : 0/0
   588 ;;		On exit  : 0/0
   589 ;;		Unchanged: 0/0
   590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   591 ;;      Params:         0       0       0       0       0       0       0       0       0
   592 ;;      Locals:         0       0       0       0       0       0       0       0       0
   593 ;;      Temps:          1       0       0       0       0       0       0       0       0
   594 ;;      Totals:         1       0       0       0       0       0       0       0       0
   595 ;;Total ram usage:        1 bytes
   596 ;; Hardware stack levels used:    1
   597 ;; Hardware stack levels required when called:    4
   598 ;; This function calls:
   599 ;;		_BORRAR_LCD
   600 ;;		_CURSOR_HOME
   601 ;;		_CURSOR_ONOFF
   602 ;;		_LCD_CONFIG
   603 ;; This function is called by:
   604 ;;		_main
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608                           	psect	text2
   609  00038E                     __ptext2:
   610                           	callstack 0
   611  00038E                     _lcd_init:
   612                           	callstack 26
   613  00038E                     
   614                           ;maincode3.c: 33:     TRISD = 0x00;
   615  00038E  0E00               	movlw	0
   616  000390  6E95               	movwf	149,c	;volatile
   617  000392                     
   618                           ;maincode3.c: 34:     LCD_CONFIG();
   619  000392  ECFF  F000         	call	_LCD_CONFIG	;wreg free
   620  000396                     
   621                           ;maincode3.c: 35:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   622  000396  0EEA               	movlw	234
   623  000398  6E26               	movwf	??_lcd_init^0,c
   624  00039A  0EC3               	movlw	195
   625  00039C                     u387:
   626  00039C  2EE8               	decfsz	wreg,f,c
   627  00039E  D7FE               	bra	u387
   628  0003A0  2E26               	decfsz	??_lcd_init^0,f,c
   629  0003A2  D7FC               	bra	u387
   630  0003A4  F000               	nop	
   631  0003A6                     
   632                           ;maincode3.c: 36:     BORRAR_LCD();
   633  0003A6  EC22  F002         	call	_BORRAR_LCD	;wreg free
   634  0003AA                     
   635                           ;maincode3.c: 37:     CURSOR_HOME();
   636  0003AA  EC1E  F002         	call	_CURSOR_HOME	;wreg free
   637  0003AE                     
   638                           ;maincode3.c: 38:     CURSOR_ONOFF(1);
   639  0003AE  0E01               	movlw	1
   640  0003B0  EC9A  F001         	call	_CURSOR_ONOFF
   641  0003B4  0012               	return		;funcret
   642  0003B6                     __end_of_lcd_init:
   643                           	callstack 0
   644                           
   645 ;; *************** function _LCD_CONFIG *****************
   646 ;; Defined at:
   647 ;;		line 72 in file "LCD.c"
   648 ;; Parameters:    Size  Location     Type
   649 ;;		None
   650 ;; Auto vars:     Size  Location     Type
   651 ;;		None
   652 ;; Return value:  Size  Location     Type
   653 ;;                  1    wreg      void 
   654 ;; Registers used:
   655 ;;		wreg, status,2, status,0, cstack
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   661 ;;      Params:         0       0       0       0       0       0       0       0       0
   662 ;;      Locals:         0       0       0       0       0       0       0       0       0
   663 ;;      Temps:          1       0       0       0       0       0       0       0       0
   664 ;;      Totals:         1       0       0       0       0       0       0       0       0
   665 ;;Total ram usage:        1 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; Hardware stack levels required when called:    3
   668 ;; This function calls:
   669 ;;		_ENVIA_LCD_CMD
   670 ;;		_ENVIA_NIBBLE
   671 ;; This function is called by:
   672 ;;		_lcd_init
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           	psect	text3
   677  0001FE                     __ptext3:
   678                           	callstack 0
   679  0001FE                     _LCD_CONFIG:
   680                           	callstack 26
   681  0001FE                     
   682                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   683  0001FE  908C               	bcf	140,0,c	;volatile
   684                           
   685                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   686  000200  928C               	bcf	140,1,c	;volatile
   687  000202                     
   688                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   689  000202  0E30               	movlw	48
   690  000204  EC10  F002         	call	_ENVIA_NIBBLE
   691  000208                     
   692                           ;LCD.c: 77:         _delay(24000);
   693  000208  0E20               	movlw	32
   694  00020A  6E25               	movwf	??_LCD_CONFIG^0,c
   695  00020C  0E2A               	movlw	42
   696  00020E                     u397:
   697  00020E  2EE8               	decfsz	wreg,f,c
   698  000210  D7FE               	bra	u397
   699  000212  2E25               	decfsz	??_LCD_CONFIG^0,f,c
   700  000214  D7FC               	bra	u397
   701  000216                     
   702                           ;LCD.c: 78:         _delay(24000);
   703  000216  0E20               	movlw	32
   704  000218  6E25               	movwf	??_LCD_CONFIG^0,c
   705  00021A  0E2A               	movlw	42
   706  00021C                     u407:
   707  00021C  2EE8               	decfsz	wreg,f,c
   708  00021E  D7FE               	bra	u407
   709  000220  2E25               	decfsz	??_LCD_CONFIG^0,f,c
   710  000222  D7FC               	bra	u407
   711                           
   712                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   713  000224  0E30               	movlw	48
   714  000226  EC10  F002         	call	_ENVIA_NIBBLE
   715  00022A                     
   716                           ;LCD.c: 83:  _delay(1200);
   717  00022A  0EF0               	movlw	240
   718  00022C                     u417:
   719  00022C  D000               	nop2	
   720  00022E  2EE8               	decfsz	wreg,f,c
   721  000230  D7FD               	bra	u417
   722  000232                     
   723                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   724  000232  0E30               	movlw	48
   725  000234  EC10  F002         	call	_ENVIA_NIBBLE
   726  000238                     
   727                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   728  000238  0E20               	movlw	32
   729  00023A  EC10  F002         	call	_ENVIA_NIBBLE
   730  00023E                     
   731                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   732  00023E  0E01               	movlw	1
   733  000240  EC4C  F001         	call	_ENVIA_LCD_CMD
   734  000244                     
   735                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   736  000244  0E28               	movlw	40
   737  000246  EC4C  F001         	call	_ENVIA_LCD_CMD
   738  00024A                     
   739                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   740  00024A  0E0F               	movlw	15
   741  00024C  EC4C  F001         	call	_ENVIA_LCD_CMD
   742  000250                     
   743                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   744  000250  0E06               	movlw	6
   745  000252  EC4C  F001         	call	_ENVIA_LCD_CMD
   746  000256                     
   747                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   748  000256  0E01               	movlw	1
   749  000258  EC4C  F001         	call	_ENVIA_LCD_CMD
   750  00025C  0012               	return		;funcret
   751  00025E                     __end_of_LCD_CONFIG:
   752                           	callstack 0
   753                           
   754 ;; *************** function _CURSOR_ONOFF *****************
   755 ;; Defined at:
   756 ;;		line 35 in file "LCD.c"
   757 ;; Parameters:    Size  Location     Type
   758 ;;  estado          1    wreg     unsigned char 
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  estado          1    3[COMRAM] unsigned char 
   761 ;; Return value:  Size  Location     Type
   762 ;;                  1    wreg      void 
   763 ;; Registers used:
   764 ;;		wreg, status,2, status,0, cstack
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   770 ;;      Params:         0       0       0       0       0       0       0       0       0
   771 ;;      Locals:         1       0       0       0       0       0       0       0       0
   772 ;;      Temps:          0       0       0       0       0       0       0       0       0
   773 ;;      Totals:         1       0       0       0       0       0       0       0       0
   774 ;;Total ram usage:        1 bytes
   775 ;; Hardware stack levels used:    1
   776 ;; Hardware stack levels required when called:    3
   777 ;; This function calls:
   778 ;;		_ENVIA_LCD_CMD
   779 ;; This function is called by:
   780 ;;		_lcd_init
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           	psect	text4
   785  000334                     __ptext4:
   786                           	callstack 0
   787  000334                     _CURSOR_ONOFF:
   788                           	callstack 26
   789                           
   790                           ;incstack = 0
   791                           ;CURSOR_ONOFF@estado stored from wreg
   792  000334  6E25               	movwf	CURSOR_ONOFF@estado^0,c
   793  000336                     
   794                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   795  000336  5025               	movf	CURSOR_ONOFF@estado^0,w,c
   796  000338  A4D8               	btfss	status,2,c
   797  00033A  EFA1  F001         	goto	u21
   798  00033E  EFA3  F001         	goto	u20
   799  000342                     u21:
   800  000342  EFA6  F001         	goto	l916
   801  000346                     u20:
   802  000346  0E0E               	movlw	14
   803  000348  EC4C  F001         	call	_ENVIA_LCD_CMD
   804  00034C                     l916:
   805                           
   806                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   807  00034C  0425               	decf	CURSOR_ONOFF@estado^0,w,c
   808  00034E  A4D8               	btfss	status,2,c
   809  000350  EFAC  F001         	goto	u31
   810  000354  EFAE  F001         	goto	u30
   811  000358                     u31:
   812  000358  EFB1  F001         	goto	l42
   813  00035C                     u30:
   814  00035C  0E0C               	movlw	12
   815  00035E  EC4C  F001         	call	_ENVIA_LCD_CMD
   816  000362                     l42:
   817  000362  0012               	return		;funcret
   818  000364                     __end_of_CURSOR_ONOFF:
   819                           	callstack 0
   820                           
   821 ;; *************** function _CURSOR_HOME *****************
   822 ;; Defined at:
   823 ;;		line 30 in file "LCD.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;		None
   826 ;; Auto vars:     Size  Location     Type
   827 ;;		None
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      void 
   830 ;; Registers used:
   831 ;;		wreg, status,2, status,0, cstack
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   837 ;;      Params:         0       0       0       0       0       0       0       0       0
   838 ;;      Locals:         0       0       0       0       0       0       0       0       0
   839 ;;      Temps:          0       0       0       0       0       0       0       0       0
   840 ;;      Totals:         0       0       0       0       0       0       0       0       0
   841 ;;Total ram usage:        0 bytes
   842 ;; Hardware stack levels used:    1
   843 ;; Hardware stack levels required when called:    3
   844 ;; This function calls:
   845 ;;		_ENVIA_LCD_CMD
   846 ;; This function is called by:
   847 ;;		_lcd_init
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text5
   852  00043C                     __ptext5:
   853                           	callstack 0
   854  00043C                     _CURSOR_HOME:
   855                           	callstack 26
   856  00043C                     
   857                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   858  00043C  0E02               	movlw	2
   859  00043E  EC4C  F001         	call	_ENVIA_LCD_CMD
   860  000442  0012               	return		;funcret
   861  000444                     __end_of_CURSOR_HOME:
   862                           	callstack 0
   863                           
   864 ;; *************** function _BORRAR_LCD *****************
   865 ;; Defined at:
   866 ;;		line 67 in file "LCD.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;		None
   869 ;; Auto vars:     Size  Location     Type
   870 ;;		None
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg, status,2, status,0, cstack
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   880 ;;      Params:         0       0       0       0       0       0       0       0       0
   881 ;;      Locals:         0       0       0       0       0       0       0       0       0
   882 ;;      Temps:          0       0       0       0       0       0       0       0       0
   883 ;;      Totals:         0       0       0       0       0       0       0       0       0
   884 ;;Total ram usage:        0 bytes
   885 ;; Hardware stack levels used:    1
   886 ;; Hardware stack levels required when called:    3
   887 ;; This function calls:
   888 ;;		_ENVIA_LCD_CMD
   889 ;; This function is called by:
   890 ;;		_lcd_init
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text6
   895  000444                     __ptext6:
   896                           	callstack 0
   897  000444                     _BORRAR_LCD:
   898                           	callstack 26
   899  000444                     
   900                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   901  000444  0E01               	movlw	1
   902  000446  EC4C  F001         	call	_ENVIA_LCD_CMD
   903  00044A  0012               	return		;funcret
   904  00044C                     __end_of_BORRAR_LCD:
   905                           	callstack 0
   906                           
   907 ;; *************** function _configuracion *****************
   908 ;; Defined at:
   909 ;;		line 41 in file "maincode3.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      void 
   916 ;; Registers used:
   917 ;;		wreg, status,2
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   923 ;;      Params:         0       0       0       0       0       0       0       0       0
   924 ;;      Locals:         0       0       0       0       0       0       0       0       0
   925 ;;      Temps:          0       0       0       0       0       0       0       0       0
   926 ;;      Totals:         0       0       0       0       0       0       0       0       0
   927 ;;Total ram usage:        0 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; Hardware stack levels required when called:    1
   930 ;; This function calls:
   931 ;;		Nothing
   932 ;; This function is called by:
   933 ;;		_main
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           	psect	text7
   938  0003DC                     __ptext7:
   939                           	callstack 0
   940  0003DC                     _configuracion:
   941                           	callstack 29
   942  0003DC                     
   943                           ;maincode3.c: 42:     BAUDCONbits.BRG16 = 1;
   944  0003DC  86B8               	bsf	184,3,c	;volatile
   945                           
   946                           ;maincode3.c: 43:     TXSTAbits.BRGH = 1;
   947  0003DE  84AC               	bsf	172,2,c	;volatile
   948                           
   949                           ;maincode3.c: 44:     TXSTAbits.SYNC = 0;
   950  0003E0  98AC               	bcf	172,4,c	;volatile
   951  0003E2                     
   952                           ;maincode3.c: 45:     SPBRGH = 0x04;
   953  0003E2  0E04               	movlw	4
   954  0003E4  6EB0               	movwf	176,c	;volatile
   955                           
   956                           ;maincode3.c: 46:     SPBRG = 0xE1;
   957  0003E6  0EE1               	movlw	225
   958  0003E8  6EAF               	movwf	175,c	;volatile
   959  0003EA                     
   960                           ;maincode3.c: 47:     RCSTAbits.SPEN = 1;
   961  0003EA  8EAB               	bsf	171,7,c	;volatile
   962  0003EC                     
   963                           ;maincode3.c: 48:     TXSTAbits.TXEN = 1;
   964  0003EC  8AAC               	bsf	172,5,c	;volatile
   965  0003EE                     
   966                           ;maincode3.c: 49:     TRISCbits.RC6 = 0;
   967  0003EE  9C94               	bcf	148,6,c	;volatile
   968  0003F0                     
   969                           ;maincode3.c: 50:     RCSTAbits.CREN = 1;
   970  0003F0  88AB               	bsf	171,4,c	;volatile
   971  0003F2                     
   972                           ;maincode3.c: 51:     PIE1bits.RCIE = 1;
   973  0003F2  8A9D               	bsf	157,5,c	;volatile
   974  0003F4                     
   975                           ;maincode3.c: 52:     INTCONbits.PEIE = 1;
   976  0003F4  8CF2               	bsf	242,6,c	;volatile
   977  0003F6                     
   978                           ;maincode3.c: 53:     INTCONbits.GIE = 1;
   979  0003F6  8EF2               	bsf	242,7,c	;volatile
   980                           
   981                           ;maincode3.c: 55:     CMCON = 0x14;
   982  0003F8  0E14               	movlw	20
   983  0003FA  6EB4               	movwf	180,c	;volatile
   984  0003FC  0012               	return		;funcret
   985  0003FE                     __end_of_configuracion:
   986                           	callstack 0
   987                           
   988 ;; *************** function _POS_CURSOR *****************
   989 ;; Defined at:
   990 ;;		line 6 in file "LCD.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;  fila            1    wreg     unsigned char 
   993 ;;  columna         1    3[COMRAM] unsigned char 
   994 ;; Auto vars:     Size  Location     Type
   995 ;;  fila            1    4[COMRAM] unsigned char 
   996 ;; Return value:  Size  Location     Type
   997 ;;                  1    wreg      void 
   998 ;; Registers used:
   999 ;;		wreg, status,2, status,0, cstack
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1005 ;;      Params:         1       0       0       0       0       0       0       0       0
  1006 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1007 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1008 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1009 ;;Total ram usage:        2 bytes
  1010 ;; Hardware stack levels used:    1
  1011 ;; Hardware stack levels required when called:    3
  1012 ;; This function calls:
  1013 ;;		_ENVIA_LCD_CMD
  1014 ;; This function is called by:
  1015 ;;		_main
  1016 ;; This function uses a non-reentrant model
  1017 ;;
  1018                           
  1019                           	psect	text8
  1020  00025E                     __ptext8:
  1021                           	callstack 0
  1022  00025E                     _POS_CURSOR:
  1023                           	callstack 27
  1024                           
  1025                           ;incstack = 0
  1026                           ;POS_CURSOR@fila stored from wreg
  1027  00025E  6E26               	movwf	POS_CURSOR@fila^0,c
  1028  000260                     
  1029                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1030  000260  0426               	decf	POS_CURSOR@fila^0,w,c
  1031  000262  A4D8               	btfss	status,2,c
  1032  000264  EF36  F001         	goto	u241
  1033  000268  EF38  F001         	goto	u240
  1034  00026C                     u241:
  1035  00026C  EF3E  F001         	goto	l1124
  1036  000270                     u240:
  1037  000270                     
  1038                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1039  000270  5025               	movf	POS_CURSOR@columna^0,w,c
  1040  000272  0F80               	addlw	128
  1041  000274  EC4C  F001         	call	_ENVIA_LCD_CMD
  1042                           
  1043                           ;LCD.c: 11:  }
  1044  000278  EF4B  F001         	goto	l24
  1045  00027C                     l1124:
  1046  00027C  0E02               	movlw	2
  1047  00027E  1826               	xorwf	POS_CURSOR@fila^0,w,c
  1048  000280  A4D8               	btfss	status,2,c
  1049  000282  EF45  F001         	goto	u251
  1050  000286  EF47  F001         	goto	u250
  1051  00028A                     u251:
  1052  00028A  EF4B  F001         	goto	l24
  1053  00028E                     u250:
  1054  00028E                     
  1055                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1056  00028E  5025               	movf	POS_CURSOR@columna^0,w,c
  1057  000290  0FC0               	addlw	192
  1058  000292  EC4C  F001         	call	_ENVIA_LCD_CMD
  1059  000296                     l24:
  1060  000296  0012               	return		;funcret
  1061  000298                     __end_of_POS_CURSOR:
  1062                           	callstack 0
  1063                           
  1064 ;; *************** function _ENVIA_LCD_CMD *****************
  1065 ;; Defined at:
  1066 ;;		line 104 in file "LCD.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;  dato            1    wreg     unsigned char 
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;  dato            1    1[COMRAM] unsigned char 
  1071 ;;  aux             1    2[COMRAM] unsigned char 
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, status,2, status,0, cstack
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1081 ;;      Params:         0       0       0       0       0       0       0       0       0
  1082 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1083 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1084 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1085 ;;Total ram usage:        2 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    2
  1088 ;; This function calls:
  1089 ;;		_ENVIA_NIBBLE
  1090 ;;		_LEER_LCD
  1091 ;; This function is called by:
  1092 ;;		_POS_CURSOR
  1093 ;;		_CURSOR_HOME
  1094 ;;		_CURSOR_ONOFF
  1095 ;;		_BORRAR_LCD
  1096 ;;		_LCD_CONFIG
  1097 ;;		_BLINK_CURSOR
  1098 ;;		_DISPLAY_ONOFF
  1099 ;;		_GENERACARACTER
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text9
  1104  000298                     __ptext9:
  1105                           	callstack 0
  1106  000298                     _ENVIA_LCD_CMD:
  1107                           	callstack 26
  1108                           
  1109                           ;incstack = 0
  1110                           ;ENVIA_LCD_CMD@dato stored from wreg
  1111  000298  6E23               	movwf	ENVIA_LCD_CMD@dato^0,c
  1112  00029A                     
  1113                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1114  00029A  908C               	bcf	140,0,c	;volatile
  1115  00029C                     
  1116                           ;LCD.c: 108:  LEER_LCD();
  1117  00029C  ECC6  F000         	call	_LEER_LCD	;wreg free
  1118  0002A0                     
  1119                           ;LCD.c: 109:  TRISD = 0b00000000;
  1120  0002A0  0E00               	movlw	0
  1121  0002A2  6E95               	movwf	149,c	;volatile
  1122  0002A4                     
  1123                           ;LCD.c: 111:         _delay(1200);
  1124  0002A4  0EF0               	movlw	240
  1125  0002A6                     u427:
  1126  0002A6  D000               	nop2	
  1127  0002A8  2EE8               	decfsz	wreg,f,c
  1128  0002AA  D7FD               	bra	u427
  1129  0002AC                     
  1130                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1131  0002AC  928C               	bcf	140,1,c	;volatile
  1132  0002AE                     
  1133                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1134  0002AE  948C               	bcf	140,2,c	;volatile
  1135  0002B0                     
  1136                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1137  0002B0  908C               	bcf	140,0,c	;volatile
  1138  0002B2                     
  1139                           ;LCD.c: 115:  aux = dato & 0xF0;
  1140  0002B2  5023               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1141  0002B4  0BF0               	andlw	240
  1142  0002B6  6E24               	movwf	ENVIA_LCD_CMD@aux^0,c
  1143  0002B8                     
  1144                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1145  0002B8  5024               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1146  0002BA  EC10  F002         	call	_ENVIA_NIBBLE
  1147  0002BE                     
  1148                           ;LCD.c: 117:  aux = dato<<4;
  1149  0002BE  3823               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1150  0002C0  0BF0               	andlw	240
  1151  0002C2  6E24               	movwf	ENVIA_LCD_CMD@aux^0,c
  1152  0002C4                     
  1153                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1154  0002C4  5024               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1155  0002C6  EC10  F002         	call	_ENVIA_NIBBLE
  1156  0002CA  0012               	return		;funcret
  1157  0002CC                     __end_of_ENVIA_LCD_CMD:
  1158                           	callstack 0
  1159                           
  1160 ;; *************** function _ESCRIBE_MENSAJE *****************
  1161 ;; Defined at:
  1162 ;;		line 41 in file "LCD.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1165 ;;		 -> normal(11), mayor40(11), menor20(11), 
  1166 ;;  tam             1    5[COMRAM] unsigned char 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  i               1    6[COMRAM] unsigned char 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1178 ;;      Params:         3       0       0       0       0       0       0       0       0
  1179 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1180 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1181 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1182 ;;Total ram usage:        4 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; Hardware stack levels required when called:    3
  1185 ;; This function calls:
  1186 ;;		_ENVIA_CHAR
  1187 ;; This function is called by:
  1188 ;;		_main
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           	psect	text10
  1193  0002CC                     __ptext10:
  1194                           	callstack 0
  1195  0002CC                     _ESCRIBE_MENSAJE:
  1196                           	callstack 27
  1197  0002CC                     
  1198                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1199  0002CC  0E00               	movlw	0
  1200  0002CE  6E28               	movwf	ESCRIBE_MENSAJE@i^0,c
  1201                           
  1202                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1203  0002D0  0E00               	movlw	0
  1204  0002D2  6E28               	movwf	ESCRIBE_MENSAJE@i^0,c
  1205  0002D4  EF76  F001         	goto	l1134
  1206  0002D8                     l1130:
  1207                           
  1208                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1209  0002D8  5028               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1210  0002DA  2425               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1211  0002DC  6ED9               	movwf	fsr2l,c
  1212  0002DE  0E00               	movlw	0
  1213  0002E0  2026               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1214  0002E2  6EDA               	movwf	fsr2h,c
  1215  0002E4  50DF               	movf	indf2,w,c
  1216  0002E6  EC80  F001         	call	_ENVIA_CHAR
  1217  0002EA                     
  1218                           ;LCD.c: 47:  }
  1219  0002EA  2A28               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1220  0002EC                     l1134:
  1221  0002EC  5027               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1222  0002EE  5C28               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1223  0002F0  A0D8               	btfss	status,0,c
  1224  0002F2  EF7D  F001         	goto	u261
  1225  0002F6  EF7F  F001         	goto	u260
  1226  0002FA                     u261:
  1227  0002FA  EF6C  F001         	goto	l1130
  1228  0002FE                     u260:
  1229  0002FE  0012               	return		;funcret
  1230  000300                     __end_of_ESCRIBE_MENSAJE:
  1231                           	callstack 0
  1232                           
  1233 ;; *************** function _ENVIA_CHAR *****************
  1234 ;; Defined at:
  1235 ;;		line 50 in file "LCD.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  dato            1    wreg     unsigned char 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  dato            1    1[COMRAM] unsigned char 
  1240 ;;  aux             1    2[COMRAM] unsigned char 
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, status,2, status,0, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0
  1251 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1253 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1254 ;;Total ram usage:        2 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; Hardware stack levels required when called:    2
  1257 ;; This function calls:
  1258 ;;		_ENVIA_NIBBLE
  1259 ;;		_LEER_LCD
  1260 ;; This function is called by:
  1261 ;;		_ESCRIBE_MENSAJE
  1262 ;;		_GENERACARACTER
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           	psect	text11
  1267  000300                     __ptext11:
  1268                           	callstack 0
  1269  000300                     _ENVIA_CHAR:
  1270                           	callstack 27
  1271                           
  1272                           ;incstack = 0
  1273                           ;ENVIA_CHAR@dato stored from wreg
  1274  000300  6E23               	movwf	ENVIA_CHAR@dato^0,c
  1275  000302                     
  1276                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1277  000302  808C               	bsf	140,0,c	;volatile
  1278  000304                     
  1279                           ;LCD.c: 54:  LEER_LCD();
  1280  000304  ECC6  F000         	call	_LEER_LCD	;wreg free
  1281  000308                     
  1282                           ;LCD.c: 55:  TRISD = 0x00;
  1283  000308  0E00               	movlw	0
  1284  00030A  6E95               	movwf	149,c	;volatile
  1285  00030C                     
  1286                           ;LCD.c: 56:         _delay(1200);
  1287  00030C  0EF0               	movlw	240
  1288  00030E                     u437:
  1289  00030E  D000               	nop2	
  1290  000310  2EE8               	decfsz	wreg,f,c
  1291  000312  D7FD               	bra	u437
  1292  000314                     
  1293                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1294  000314  928C               	bcf	140,1,c	;volatile
  1295  000316                     
  1296                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1297  000316  948C               	bcf	140,2,c	;volatile
  1298  000318                     
  1299                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1300  000318  808C               	bsf	140,0,c	;volatile
  1301  00031A                     
  1302                           ;LCD.c: 61:  aux = dato & 0xF0;
  1303  00031A  5023               	movf	ENVIA_CHAR@dato^0,w,c
  1304  00031C  0BF0               	andlw	240
  1305  00031E  6E24               	movwf	ENVIA_CHAR@aux^0,c
  1306  000320                     
  1307                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1308  000320  5024               	movf	ENVIA_CHAR@aux^0,w,c
  1309  000322  EC10  F002         	call	_ENVIA_NIBBLE
  1310  000326                     
  1311                           ;LCD.c: 63:  aux = dato << 4;
  1312  000326  3823               	swapf	ENVIA_CHAR@dato^0,w,c
  1313  000328  0BF0               	andlw	240
  1314  00032A  6E24               	movwf	ENVIA_CHAR@aux^0,c
  1315  00032C                     
  1316                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1317  00032C  5024               	movf	ENVIA_CHAR@aux^0,w,c
  1318  00032E  EC10  F002         	call	_ENVIA_NIBBLE
  1319  000332  0012               	return		;funcret
  1320  000334                     __end_of_ENVIA_CHAR:
  1321                           	callstack 0
  1322                           
  1323 ;; *************** function _LEER_LCD *****************
  1324 ;; Defined at:
  1325 ;;		line 121 in file "LCD.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;		None
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  aux             1    0[COMRAM] unsigned char 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      void 
  1332 ;; Registers used:
  1333 ;;		wreg, status,2, status,0
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1339 ;;      Params:         0       0       0       0       0       0       0       0       0
  1340 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1341 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1342 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1343 ;;Total ram usage:        1 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    1
  1346 ;; This function calls:
  1347 ;;		Nothing
  1348 ;; This function is called by:
  1349 ;;		_ENVIA_CHAR
  1350 ;;		_ENVIA_LCD_CMD
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           	psect	text12
  1355  00018C                     __ptext12:
  1356                           	callstack 0
  1357  00018C                     _LEER_LCD:
  1358                           	callstack 26
  1359  00018C                     
  1360                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1361  00018C  0EF8               	movlw	248
  1362  00018E  6E95               	movwf	149,c	;volatile
  1363  000190                     
  1364                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1365  000190  908C               	bcf	140,0,c	;volatile
  1366  000192                     
  1367                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1368  000192  828C               	bsf	140,1,c	;volatile
  1369  000194                     
  1370                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1371  000194  848C               	bsf	140,2,c	;volatile
  1372  000196                     
  1373                           ;LCD.c: 128:         _delay(1200);
  1374  000196  0EF0               	movlw	240
  1375  000198                     u447:
  1376  000198  D000               	nop2	
  1377  00019A  2EE8               	decfsz	wreg,f,c
  1378  00019C  D7FD               	bra	u447
  1379  00019E                     
  1380                           ;LCD.c: 130:  aux = PORTD;
  1381  00019E  CF83 F022          	movff	3971,LEER_LCD@aux	;volatile
  1382  0001A2                     
  1383                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1384  0001A2  948C               	bcf	140,2,c	;volatile
  1385  0001A4                     
  1386                           ;LCD.c: 132:         _delay(1200);
  1387  0001A4  0EF0               	movlw	240
  1388  0001A6                     u457:
  1389  0001A6  D000               	nop2	
  1390  0001A8  2EE8               	decfsz	wreg,f,c
  1391  0001AA  D7FD               	bra	u457
  1392  0001AC                     
  1393                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1394  0001AC  848C               	bsf	140,2,c	;volatile
  1395  0001AE                     
  1396                           ;LCD.c: 135:         _delay(1200);
  1397  0001AE  0EF0               	movlw	240
  1398  0001B0                     u467:
  1399  0001B0  D000               	nop2	
  1400  0001B2  2EE8               	decfsz	wreg,f,c
  1401  0001B4  D7FD               	bra	u467
  1402  0001B6                     
  1403                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1404  0001B6  948C               	bcf	140,2,c	;volatile
  1405  0001B8                     l864:
  1406                           
  1407                           ;LCD.c: 138:  aux = aux & 0x80;
  1408  0001B8  5022               	movf	LEER_LCD@aux^0,w,c
  1409  0001BA  0B80               	andlw	128
  1410  0001BC  6E22               	movwf	LEER_LCD@aux^0,c
  1411                           
  1412                           ;LCD.c: 139:  while(aux == 0x80)
  1413  0001BE  EFF5  F000         	goto	l878
  1414  0001C2                     l67:
  1415                           
  1416                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1417  0001C2  848C               	bsf	140,2,c	;volatile
  1418  0001C4                     
  1419                           ;LCD.c: 142:             _delay(1200);
  1420  0001C4  0EF0               	movlw	240
  1421  0001C6                     u477:
  1422  0001C6  D000               	nop2	
  1423  0001C8  2EE8               	decfsz	wreg,f,c
  1424  0001CA  D7FD               	bra	u477
  1425  0001CC                     
  1426                           ;LCD.c: 143:             aux = PORTD;
  1427  0001CC  CF83 F022          	movff	3971,LEER_LCD@aux	;volatile
  1428  0001D0                     
  1429                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1430  0001D0  948C               	bcf	140,2,c	;volatile
  1431                           
  1432                           ;LCD.c: 145:             _delay(1200);
  1433  0001D2  0EF0               	movlw	240
  1434  0001D4                     u487:
  1435  0001D4  D000               	nop2	
  1436  0001D6  2EE8               	decfsz	wreg,f,c
  1437  0001D8  D7FD               	bra	u487
  1438  0001DA                     
  1439                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1440  0001DA  848C               	bsf	140,2,c	;volatile
  1441                           
  1442                           ;LCD.c: 147:             _delay(1200);
  1443  0001DC  0EF0               	movlw	240
  1444  0001DE                     u497:
  1445  0001DE  D000               	nop2	
  1446  0001E0  2EE8               	decfsz	wreg,f,c
  1447  0001E2  D7FD               	bra	u497
  1448  0001E4                     
  1449                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1450  0001E4  948C               	bcf	140,2,c	;volatile
  1451  0001E6  EFDC  F000         	goto	l864
  1452  0001EA                     l878:
  1453                           
  1454                           ;LCD.c: 139:  while(aux == 0x80)
  1455  0001EA  0E80               	movlw	128
  1456  0001EC  1822               	xorwf	LEER_LCD@aux^0,w,c
  1457  0001EE  B4D8               	btfsc	status,2,c
  1458  0001F0  EFFC  F000         	goto	u11
  1459  0001F4  EFFE  F000         	goto	u10
  1460  0001F8                     u11:
  1461  0001F8  EFE1  F000         	goto	l67
  1462  0001FC                     u10:
  1463  0001FC  0012               	return		;funcret
  1464  0001FE                     __end_of_LEER_LCD:
  1465                           	callstack 0
  1466                           
  1467 ;; *************** function _ENVIA_NIBBLE *****************
  1468 ;; Defined at:
  1469 ;;		line 93 in file "LCD.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;  dato            1    wreg     unsigned char 
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;  dato            1    0[COMRAM] unsigned char 
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, status,2, status,0
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0
  1484 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1485 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1486 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1487 ;;Total ram usage:        1 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    1
  1490 ;; This function calls:
  1491 ;;		Nothing
  1492 ;; This function is called by:
  1493 ;;		_ENVIA_CHAR
  1494 ;;		_LCD_CONFIG
  1495 ;;		_ENVIA_LCD_CMD
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text13
  1500  000420                     __ptext13:
  1501                           	callstack 0
  1502  000420                     _ENVIA_NIBBLE:
  1503                           	callstack 27
  1504                           
  1505                           ;incstack = 0
  1506                           ;ENVIA_NIBBLE@dato stored from wreg
  1507  000420  6E22               	movwf	ENVIA_NIBBLE@dato^0,c
  1508  000422                     
  1509                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1510  000422  0E0F               	movlw	15
  1511  000424  168C               	andwf	140,f,c	;volatile
  1512                           
  1513                           ;LCD.c: 96:  dato &= 0xF0;
  1514  000426  0EF0               	movlw	240
  1515  000428  1622               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1516                           
  1517                           ;LCD.c: 97:  LATD|= dato;
  1518  00042A  5022               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1519  00042C  128C               	iorwf	140,f,c	;volatile
  1520  00042E                     
  1521                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1522  00042E  848C               	bsf	140,2,c	;volatile
  1523  000430                     
  1524                           ;LCD.c: 100:         _delay(1200);
  1525  000430  0EF0               	movlw	240
  1526  000432                     u507:
  1527  000432  D000               	nop2	
  1528  000434  2EE8               	decfsz	wreg,f,c
  1529  000436  D7FD               	bra	u507
  1530  000438                     
  1531                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1532  000438  948C               	bcf	140,2,c	;volatile
  1533  00043A  0012               	return		;funcret
  1534  00043C                     __end_of_ENVIA_NIBBLE:
  1535                           	callstack 0
  1536                           
  1537 ;; *************** function _RCIsr *****************
  1538 ;; Defined at:
  1539 ;;		line 101 in file "maincode3.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;		None
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;		None
  1544 ;; Return value:  Size  Location     Type
  1545 ;;                  1    wreg      void 
  1546 ;; Registers used:
  1547 ;;		None
  1548 ;; Tracked objects:
  1549 ;;		On entry : 0/0
  1550 ;;		On exit  : 0/0
  1551 ;;		Unchanged: 0/0
  1552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1553 ;;      Params:         0       0       0       0       0       0       0       0       0
  1554 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1555 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1556 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1557 ;;Total ram usage:        0 bytes
  1558 ;; Hardware stack levels used:    1
  1559 ;; This function calls:
  1560 ;;		Nothing
  1561 ;; This function is called by:
  1562 ;;		Interrupt level 2
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566                           	psect	intcode
  1567  000008                     __pintcode:
  1568                           	callstack 0
  1569  000008                     _RCIsr:
  1570                           	callstack 26
  1571                           
  1572                           ;incstack = 0
  1573  000008  8231               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1574  00000A  ED26  F002         	call	int_func,f	;refresh shadow registers
  1575                           
  1576                           	psect	intcode_body
  1577  00044C                     __pintcode_body:
  1578                           	callstack 26
  1579  00044C                     int_func:
  1580                           	callstack 26
  1581  00044C  0006               	pop		; remove dummy address from shadow register refresh
  1582  00044E                     
  1583                           ;maincode3.c: 102:     PIR1bits.RCIF = 0;
  1584  00044E  9A9E               	bcf	158,5,c	;volatile
  1585  000450  9231               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1586  000452  0011               	retfie		f
  1587  000454                     __end_of_RCIsr:
  1588                           	callstack 0
  1589  0000                     
  1590                           	psect	rparam
  1591  0000                     
  1592                           	psect	temp
  1593  000031                     btemp:
  1594                           	callstack 0
  1595  000031                     	ds	1
  1596  0000                     int$flags	set	btemp
  1597  0000                     wtemp8	set	btemp+1
  1598  0000                     ttemp5	set	btemp+1
  1599  0000                     ttemp6	set	btemp+4
  1600  0000                     ttemp7	set	btemp+8
  1601                           
  1602                           	psect	idloc
  1603                           
  1604                           ;Config register IDLOC0 @ 0x200000
  1605                           ;	unspecified, using default values
  1606  200000                     	org	2097152
  1607  200000  FF                 	db	255
  1608                           
  1609                           ;Config register IDLOC1 @ 0x200001
  1610                           ;	unspecified, using default values
  1611  200001                     	org	2097153
  1612  200001  FF                 	db	255
  1613                           
  1614                           ;Config register IDLOC2 @ 0x200002
  1615                           ;	unspecified, using default values
  1616  200002                     	org	2097154
  1617  200002  FF                 	db	255
  1618                           
  1619                           ;Config register IDLOC3 @ 0x200003
  1620                           ;	unspecified, using default values
  1621  200003                     	org	2097155
  1622  200003  FF                 	db	255
  1623                           
  1624                           ;Config register IDLOC4 @ 0x200004
  1625                           ;	unspecified, using default values
  1626  200004                     	org	2097156
  1627  200004  FF                 	db	255
  1628                           
  1629                           ;Config register IDLOC5 @ 0x200005
  1630                           ;	unspecified, using default values
  1631  200005                     	org	2097157
  1632  200005  FF                 	db	255
  1633                           
  1634                           ;Config register IDLOC6 @ 0x200006
  1635                           ;	unspecified, using default values
  1636  200006                     	org	2097158
  1637  200006  FF                 	db	255
  1638                           
  1639                           ;Config register IDLOC7 @ 0x200007
  1640                           ;	unspecified, using default values
  1641  200007                     	org	2097159
  1642  200007  FF                 	db	255
  1643                           
  1644                           	psect	config
  1645                           
  1646                           ;Config register CONFIG1L @ 0x300000
  1647                           ;	PLL Prescaler Selection bits
  1648                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1649                           ;	System Clock Postscaler Selection bits
  1650                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1651                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1652                           ;	USBDIV = 0x0, unprogrammed default
  1653  300000                     	org	3145728
  1654  300000  00                 	db	0
  1655                           
  1656                           ;Config register CONFIG1H @ 0x300001
  1657                           ;	Oscillator Selection bits
  1658                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1659                           ;	Fail-Safe Clock Monitor Enable bit
  1660                           ;	FCMEN = 0x0, unprogrammed default
  1661                           ;	Internal/External Oscillator Switchover bit
  1662                           ;	IESO = 0x0, unprogrammed default
  1663  300001                     	org	3145729
  1664  300001  02                 	db	2
  1665                           
  1666                           ;Config register CONFIG2L @ 0x300002
  1667                           ;	Power-up Timer Enable bit
  1668                           ;	PWRT = ON, PWRT enabled
  1669                           ;	Brown-out Reset Enable bits
  1670                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1671                           ;	Brown-out Reset Voltage bits
  1672                           ;	BORV = 3, Minimum setting 2.05V
  1673                           ;	USB Voltage Regulator Enable bit
  1674                           ;	VREGEN = 0x0, unprogrammed default
  1675  300002                     	org	3145730
  1676  300002  18                 	db	24
  1677                           
  1678                           ;Config register CONFIG2H @ 0x300003
  1679                           ;	Watchdog Timer Enable bit
  1680                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1681                           ;	Watchdog Timer Postscale Select bits
  1682                           ;	WDTPS = 32768, 1:32768
  1683  300003                     	org	3145731
  1684  300003  1E                 	db	30
  1685                           
  1686                           ; Padding undefined space
  1687  300004                     	org	3145732
  1688  300004  FF                 	db	255
  1689                           
  1690                           ;Config register CONFIG3H @ 0x300005
  1691                           ;	CCP2 MUX bit
  1692                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1693                           ;	PORTB A/D Enable bit
  1694                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1695                           ;	Low-Power Timer 1 Oscillator Enable bit
  1696                           ;	LPT1OSC = 0x0, unprogrammed default
  1697                           ;	MCLR Pin Enable bit
  1698                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1699  300005                     	org	3145733
  1700  300005  81                 	db	129
  1701                           
  1702                           ;Config register CONFIG4L @ 0x300006
  1703                           ;	Stack Full/Underflow Reset Enable bit
  1704                           ;	STVREN = 0x1, unprogrammed default
  1705                           ;	Single-Supply ICSP Enable bit
  1706                           ;	LVP = OFF, Single-Supply ICSP disabled
  1707                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1708                           ;	ICPRT = 0x0, unprogrammed default
  1709                           ;	Extended Instruction Set Enable bit
  1710                           ;	XINST = 0x0, unprogrammed default
  1711                           ;	Background Debugger Enable bit
  1712                           ;	DEBUG = 0x1, unprogrammed default
  1713  300006                     	org	3145734
  1714  300006  81                 	db	129
  1715                           
  1716                           ; Padding undefined space
  1717  300007                     	org	3145735
  1718  300007  FF                 	db	255
  1719                           
  1720                           ;Config register CONFIG5L @ 0x300008
  1721                           ;	unspecified, using default values
  1722                           ;	Code Protection bit
  1723                           ;	CP0 = 0x1, unprogrammed default
  1724                           ;	Code Protection bit
  1725                           ;	CP1 = 0x1, unprogrammed default
  1726                           ;	Code Protection bit
  1727                           ;	CP2 = 0x1, unprogrammed default
  1728                           ;	Code Protection bit
  1729                           ;	CP3 = 0x1, unprogrammed default
  1730  300008                     	org	3145736
  1731  300008  0F                 	db	15
  1732                           
  1733                           ;Config register CONFIG5H @ 0x300009
  1734                           ;	unspecified, using default values
  1735                           ;	Boot Block Code Protection bit
  1736                           ;	CPB = 0x1, unprogrammed default
  1737                           ;	Data EEPROM Code Protection bit
  1738                           ;	CPD = 0x1, unprogrammed default
  1739  300009                     	org	3145737
  1740  300009  C0                 	db	192
  1741                           
  1742                           ;Config register CONFIG6L @ 0x30000A
  1743                           ;	unspecified, using default values
  1744                           ;	Write Protection bit
  1745                           ;	WRT0 = 0x1, unprogrammed default
  1746                           ;	Write Protection bit
  1747                           ;	WRT1 = 0x1, unprogrammed default
  1748                           ;	Write Protection bit
  1749                           ;	WRT2 = 0x1, unprogrammed default
  1750                           ;	Write Protection bit
  1751                           ;	WRT3 = 0x1, unprogrammed default
  1752  30000A                     	org	3145738
  1753  30000A  0F                 	db	15
  1754                           
  1755                           ;Config register CONFIG6H @ 0x30000B
  1756                           ;	unspecified, using default values
  1757                           ;	Configuration Register Write Protection bit
  1758                           ;	WRTC = 0x1, unprogrammed default
  1759                           ;	Boot Block Write Protection bit
  1760                           ;	WRTB = 0x1, unprogrammed default
  1761                           ;	Data EEPROM Write Protection bit
  1762                           ;	WRTD = 0x1, unprogrammed default
  1763  30000B                     	org	3145739
  1764  30000B  E0                 	db	224
  1765                           
  1766                           ;Config register CONFIG7L @ 0x30000C
  1767                           ;	unspecified, using default values
  1768                           ;	Table Read Protection bit
  1769                           ;	EBTR0 = 0x1, unprogrammed default
  1770                           ;	Table Read Protection bit
  1771                           ;	EBTR1 = 0x1, unprogrammed default
  1772                           ;	Table Read Protection bit
  1773                           ;	EBTR2 = 0x1, unprogrammed default
  1774                           ;	Table Read Protection bit
  1775                           ;	EBTR3 = 0x1, unprogrammed default
  1776  30000C                     	org	3145740
  1777  30000C  0F                 	db	15
  1778                           
  1779                           ;Config register CONFIG7H @ 0x30000D
  1780                           ;	unspecified, using default values
  1781                           ;	Boot Block Table Read Protection bit
  1782                           ;	EBTRB = 0x1, unprogrammed default
  1783  30000D                     	org	3145741
  1784  30000D  40                 	db	64
  1785                           tosu	equ	0xFFF
  1786                           tosh	equ	0xFFE
  1787                           tosl	equ	0xFFD
  1788                           stkptr	equ	0xFFC
  1789                           pclatu	equ	0xFFB
  1790                           pclath	equ	0xFFA
  1791                           pcl	equ	0xFF9
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           prodh	equ	0xFF4
  1797                           prodl	equ	0xFF3
  1798                           indf0	equ	0xFEF
  1799                           postinc0	equ	0xFEE
  1800                           postdec0	equ	0xFED
  1801                           preinc0	equ	0xFEC
  1802                           plusw0	equ	0xFEB
  1803                           fsr0h	equ	0xFEA
  1804                           fsr0l	equ	0xFE9
  1805                           wreg	equ	0xFE8
  1806                           indf1	equ	0xFE7
  1807                           postinc1	equ	0xFE6
  1808                           postdec1	equ	0xFE5
  1809                           preinc1	equ	0xFE4
  1810                           plusw1	equ	0xFE3
  1811                           fsr1h	equ	0xFE2
  1812                           fsr1l	equ	0xFE1
  1813                           bsr	equ	0xFE0
  1814                           indf2	equ	0xFDF
  1815                           postinc2	equ	0xFDE
  1816                           postdec2	equ	0xFDD
  1817                           preinc2	equ	0xFDC
  1818                           plusw2	equ	0xFDB
  1819                           fsr2h	equ	0xFDA
  1820                           fsr2l	equ	0xFD9
  1821                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        33
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     15      48
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 11
		 -> normal(COMRAM[11]), mayor40(COMRAM[11]), menor20(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _RCIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _RCIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RCIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _RCIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _RCIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _RCIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _RCIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _RCIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _RCIsr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    1832
                                              7 COMRAM     8     8      0
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                      _configuracion
                           _lcd_init
              _serial_siguientelinea
 ---------------------------------------------------------------------------------
 (1) _serial_siguientelinea                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _configuracion                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     436
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      4     1      3     667
                                              3 COMRAM     4     1      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _RCIsr                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configuracion
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE
   _serial_siguientelinea

 _RCIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      F      30       1       51.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      30      20        0.0%
DATA                 0      0      30       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Jun 09 21:40:21 2020

                            l24 0296                              l42 0362                              l51 0332  
                            l60 043A                              l37 0442                              l54 044A  
                            l63 02CA                              l48 02FE                              l57 025C  
                            l67 01C2                              l69 01FC                              u10 01FC  
                            u11 01F8                              u20 0346                              u21 0342  
                            u30 035C                              u31 0358                              u70 03C8  
                            u71 03C4                              u80 03DA                              u81 03D6  
                ?_configuracion 0022                   ENVIA_CHAR@aux 0024                             l123 03B4  
                           l132 03CC                             l126 03FC                             l150 00AC  
                           l135 03DA                             l144 0040                             l129 03BA  
                           l156 0126                             l900 02B0                             l902 02B2  
                           l910 043C                             l920 0302                             l904 02B8  
                           l912 0336                             l850 0196                             l842 018C  
                           l930 0316                             l922 0304                             l906 02BE  
                           l914 0346                             l860 01AE                             l852 019E  
                           l844 0190                             l940 032C                             l932 0318  
                           l924 0308                             l908 02C4                             l916 034C  
                           l870 01D0                             l862 01B6                             l854 01A2  
                           l846 0192                             l934 031A                             l926 030C  
                           l942 0444                             l918 035C                             l950 0216  
                           l880 0422                             l872 01DA                             l864 01B8  
                           l856 01A4                             l848 0194                             l936 0320  
                           l928 0314                             l960 0244                             l952 022A  
                           l944 01FE                             l882 042E                             l874 01E4  
                           l866 01C4                             l858 01AC                             l938 0326  
                           l890 029C                             l962 024A                             l954 0232  
                           l946 0202                             l884 0430                             l868 01CC  
                           l892 02A0                             l964 0250                             l956 0238  
                           l948 0208                             l886 0438                             l878 01EA  
                           l894 02A4                             l966 0256                             l958 023E  
                           l990 03A6                             l896 02AC                             l888 029A  
                           l992 03AA                             l984 038E                             l898 02AE  
                           l994 03AE                             l986 0392                             l996 03DC  
                           l988 0396                             l998 03E2                             u300 0094  
                           u301 0090                             u310 00BA                             u311 00B6  
                           u240 0270                             u320 00D4                             u241 026C  
                           u321 00D0                             u250 028E                             u330 0100  
                           u251 028A                             u331 00FC                             u260 02FE  
                           u340 010E                             u261 02FA                             u341 010A  
                           u350 0134                             u270 0028                             u407 021C  
                           u351 0130                             u271 0024                             u360 014E  
                           u280 004E                             u417 022C                             u361 014A  
                           u281 004A                             u290 0068                             u507 0432  
                           u427 02A6                             u291 0064                             u437 030E  
                           u447 0198                             u457 01A6                             u377 0176  
                           u467 01B0                             u387 039C                             u477 01C6  
                           u397 020E                             u487 01D4                             u497 01DE  
                   LEER_LCD@aux 0022                             wreg 000FE8                    ?_CURSOR_HOME 0022  
                ??_ENVIA_NIBBLE 0022                  ENVIA_CHAR@dato 0023                            l1000 03EA  
                          l1010 03F4                            l1002 03EC                            l1012 03F6  
                          l1004 03EE                            l1006 03F0                            l1014 03B6  
                          l1120 0260                            l1008 03F2                            l1016 03C8  
                          l1200 015C                            l1130 02D8                            l1122 0270  
                          l1202 016C                            l1132 02EA                            l1124 027C  
                          l1140 001A                            l1134 02EC                            l1126 028E  
                          l1150 004E                            l1142 0028                            l1128 02CC  
                          l1152 0052                            l1160 0086                            l1136 0012  
                          l1170 00BA                            l1162 0094                            l1154 0068  
                          l1138 0016                            l1172 00BE                            l1180 00F2  
                          l1156 006C                            l1148 0030                            l1190 0116  
                          l1182 0100                            l1174 00D4                            l1158 0076  
                          l1192 0134                            l1184 010E                            l1176 00D8  
                          l1168 009C                            l1194 0138                            l1178 00E2  
                          l1196 014E                            l1198 0152                            _LATD 000F8C  
                          _main 0012                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            btemp 0031                            start 000E  
                 ?_CURSOR_ONOFF 0022                    ___param_bank 000000                 ??_ENVIA_LCD_CMD 0023  
              __end_of_LEER_LCD 01FE             __size_of_BORRAR_LCD 0008          ?_serial_siguientelinea 0022  
                         ?_main 0022                           _CMCON 000FB4                           i2l166 0450  
                         _SPBRG 000FAF                           _PORTD 000F83                           _RCIsr 0008  
           __size_of_LCD_CONFIG 0060                           _TRISD 000F95                           _TXREG 000FAD  
           __size_of_ENVIA_CHAR 0034                     ?_POS_CURSOR 0025                           main@i 002B  
                         tablat 000FF5                           ttemp5 0032                           ttemp6 0035  
                         ttemp7 0039                           status 000FD8                           wtemp8 0032  
                ??_CURSOR_ONOFF 0025                 __initialization 0364                    __end_of_main 018C  
               ??_configuracion 0022                 _ESCRIBE_MENSAJE 02CC                          ??_main 0029  
                 __activetblptr 000000                          ?_RCIsr 0022                          i2l1118 044E  
                        _SPBRGH 000FB0                __end_of_lcd_init 03B6            __end_of_ENVIA_NIBBLE 043C  
           __size_of_POS_CURSOR 003A                          _normal 0001                    __pdataCOMRAM 0001  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                  ??_BORRAR_LCD 0025            __size_of_CURSOR_HOME 0008                       ?_LEER_LCD 0022  
                    __accesstop 0060         __end_of__initialization 0384                    ??_LCD_CONFIG 0025  
                 ___rparam_used 000001                    ??_ENVIA_CHAR 0023                   __end_of_RCIsr 0454  
       __end_of_ESCRIBE_MENSAJE 0300                  __pcstackCOMRAM 0022              __end_of_BORRAR_LCD 044C  
                       ??_RCIsr 0022                ENVIA_LCD_CMD@aux 0024            __end_of_CURSOR_ONOFF 0364  
            __end_of_LCD_CONFIG 025E              __end_of_ENVIA_CHAR 0334                      ??_LEER_LCD 0022  
              ENVIA_NIBBLE@dato 0022         ??_serial_siguientelinea 0022                    ??_POS_CURSOR 0026  
                     ?_lcd_init 0022           __size_of_ENVIA_NIBBLE 001C                         __Hparam 0000  
                       __Lparam 0000                ?_ESCRIBE_MENSAJE 0025                       _CMCONbits 000FB4  
         __end_of_ENVIA_LCD_CMD 02CC                         __pcinit 0364              __end_of_POS_CURSOR 0298  
                       __ramtop 0800                         __ptext0 0012                         __ptext1 03B6  
                       __ptext2 038E                         __ptext3 01FE                         __ptext4 0334  
                       __ptext5 043C                         __ptext6 0444                         __ptext7 03DC  
                       __ptext8 025E                         __ptext9 0298                         _menor20 0017  
                       _mayor40 000C                      ??_lcd_init 0026                  __pintcode_body 044C  
                  _ENVIA_NIBBLE 0420            end_of_initialization 0384                         int_func 044C  
                     _RCSTAbits 000FAB                         postdec1 000FE5                         postinc0 000FEE  
         __end_of_configuracion 03FE           __size_of_CURSOR_ONOFF 0030                       _TRISCbits 000F94  
                     _TXSTAbits 000FAC               __size_of_LEER_LCD 0072                    _CURSOR_ONOFF 0334  
            CURSOR_ONOFF@estado 0025                     _BAUDCONbits 000FB8                   __pidataCOMRAM 03FE  
                 ??_CURSOR_HOME 0025             start_initialization 0364               ENVIA_LCD_CMD@dato 0023  
__size_of_serial_siguientelinea 0026   __end_of_serial_siguientelinea 03DC             __end_of_CURSOR_HOME 0444  
             __size_of_lcd_init 0028                       __pintcode 0008                  __size_of_RCIsr 044C  
                      _LEER_LCD 018C                        _LATDbits 000F8C                        _PIE1bits 000F9D  
                      _PIR1bits 000F9E                ESCRIBE_MENSAJE@i 0028                  POS_CURSOR@fila 0026  
      __size_of_ESCRIBE_MENSAJE 0034                       main@i_552 002D                       main@i_553 002F  
                   _CURSOR_HOME 043C                       copy_data0 0378          __size_of_ENVIA_LCD_CMD 0034  
                      __Hrparam 0000                        __Lrparam 0000                        __ptext10 02CC  
                      __ptext11 0300                        __ptext12 018C                        __ptext13 0420  
                    _BORRAR_LCD 0444                        _lcd_init 038E          __size_of_configuracion 0022  
                 __size_of_main 017A                      _LCD_CONFIG 01FE                      _ENVIA_CHAR 0300  
                      int$flags 0031                   _ENVIA_LCD_CMD 0298                      _INTCONbits 000FF2  
             ??_ESCRIBE_MENSAJE 0028                        intlevel2 0000           ESCRIBE_MENSAJE@cadena 0025  
                ?_ENVIA_LCD_CMD 0022                   _configuracion 03DC           _serial_siguientelinea 03B6  
                   ?_BORRAR_LCD 0022                   ?_ENVIA_NIBBLE 0022                      _POS_CURSOR 025E  
                   ?_LCD_CONFIG 0022              ESCRIBE_MENSAJE@tam 0027                     ?_ENVIA_CHAR 0022  
             POS_CURSOR@columna 0025  
